{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/git-hooks/solution1.png","path":"images/git-hooks/solution1.png","modified":0,"renderable":0},{"_id":"source/images/git-hooks/gitsetting.png","path":"images/git-hooks/gitsetting.png","modified":0,"renderable":0},{"_id":"source/images/git-use-method/address.png","path":"images/git-use-method/address.png","modified":0,"renderable":0},{"_id":"source/images/git-use-method/gitcheckout.png","path":"images/git-use-method/gitcheckout.png","modified":0,"renderable":0},{"_id":"source/images/git-use-method/gitclone.png","path":"images/git-use-method/gitclone.png","modified":0,"renderable":0},{"_id":"source/images/git-use-method/push.png","path":"images/git-use-method/push.png","modified":0,"renderable":0},{"_id":"source/images/git-use-method/success.png","path":"images/git-use-method/success.png","modified":0,"renderable":0},{"_id":"source/images/init/hexo.png","path":"images/init/hexo.png","modified":0,"renderable":0},{"_id":"source/images/init/melody.png","path":"images/init/melody.png","modified":0,"renderable":0},{"_id":"source/images/init/set.png","path":"images/init/set.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/katex.js","path":"js/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Fibonacci.md","hash":"9a622551a8df220de63bcca475bd40e1acc86b3d","modified":1628301543339},{"_id":"source/_posts/computer-networks.md","hash":"227d0d9eb9022fd6e9eeb1d335c43297bff6b3d3","modified":1628301543339},{"_id":"source/_posts/design-module-uml.md","hash":"df7d2aafc5cf8923e83f8b27265a6d8e5308db0f","modified":1655483974655},{"_id":"source/_posts/electron-01.md","hash":"6438b4f92adc2e77ecb73ebf45b93038445fe9f2","modified":1628301543340},{"_id":"source/_posts/flutter.md","hash":"89e06e94f8dc4a441c4fe006931ba71ec2ea31cb","modified":1628301543340},{"_id":"source/_posts/frontend-optimization.md","hash":"b60d455569d24e4478a261f7ee8968c22c521dcd","modified":1628301543340},{"_id":"source/_posts/geektime-arithmetic.md","hash":"ae91cf525e83f722fb95d02395a5e3822fa82730","modified":1628301543341},{"_id":"source/_posts/git-hooks.md","hash":"5987a9f774c1275c2d31692a722836e9fd624862","modified":1628301543341},{"_id":"source/_posts/fund-01.md","hash":"4efc10ff98171cccf1db699c812ee9e0ee70b3b0","modified":1628301543341},{"_id":"source/_posts/go-init.md","hash":"b21699ce67547e08b9318885fb136048167c6fde","modified":1636990321779},{"_id":"source/_posts/git-use-method.md","hash":"002a5343b658cd7357dae1f2258467d7f4b9d6e7","modified":1655484864145},{"_id":"source/_posts/init.md","hash":"42cd3764f44ad1e4aa9e0ef56f15c2c095aef5b9","modified":1676179519090},{"_id":"source/_posts/interview.md","hash":"345a9e9bf777ce3d8e87c73077197901c6fa19cf","modified":1676207005811},{"_id":"source/_posts/javascript-design-mode.md","hash":"e618511c1799bc4f9d03a26c0767c3fdc6352a1e","modified":1655485059608},{"_id":"source/_posts/ju-zhen-zhong-de-lu-jing.md","hash":"10d6cdba31d7c77af400bae33f52ea552dbb39dd","modified":1628301543343},{"_id":"source/_posts/java-concurrent-programming.md","hash":"396d0169b2a5960267cd895f73aea049eb71aa7a","modified":1628301543343},{"_id":"source/_posts/leetcode-206.md","hash":"7111fef403210bdb5c7c07e613684089ccd668a3","modified":1628301543344},{"_id":"source/_posts/leetcode-26.md","hash":"89fa0d947457c27d2805fbff54041d5f494daf35","modified":1628301543344},{"_id":"source/_posts/leetcode-3.md","hash":"1e1d8d671cb1c8a964da7b5fa1722f11156bbd99","modified":1628301543344},{"_id":"source/_posts/leetcode-322.md","hash":"4caad357239ae3281a26947488697a90b4a3cbb9","modified":1628301543345},{"_id":"source/_posts/leetcode-297.md","hash":"1273e912fa68c23b55cd0fc5bc31cdf1354b1a16","modified":1628301543344},{"_id":"source/_posts/leetcode-5.md","hash":"319340aac945da420e642e048901c904bfb21d6e","modified":1628301543345},{"_id":"source/_posts/leetcode-525.md","hash":"312473fe87649afc5be60cd5b5b181feb39e7006","modified":1628301543345},{"_id":"source/_posts/leetcode-98.md","hash":"b8c54312648b5b426c4ea8d154e32ba9fb8c96f2","modified":1628301543345},{"_id":"source/_posts/leetcode-994.md","hash":"39791feec7c6ad6b6cb599ccdbe3f26a93d8b068","modified":1628301543346},{"_id":"source/_posts/leetcode-short-encoding-of-words.md","hash":"76f86fa9436b31d582638f5ec5dd72de437a621b","modified":1628301543346},{"_id":"source/_posts/leetcode-lian-xu-zheng-shu-lcof.md","hash":"dadc9d90c8556611eacc90c7ddf7b8e3a38b4f0a","modified":1628301543346},{"_id":"source/_posts/leetcode-the-masseuse-lcci.md","hash":"d51c2b790628ed76123332e40e29cb37489c0056","modified":1628301543347},{"_id":"source/_posts/mergeListNode.md","hash":"0f802d2a6183578fc661c9eebc6de14ef64e59d9","modified":1628301543347},{"_id":"source/_posts/rank-method.md","hash":"48c28c5fb69cd5a23d6b8c835a61fd6f01d041ae","modified":1655485073874},{"_id":"source/_posts/reConstructBinaryTree.md","hash":"68b0b8abbc518a5b9dff34c3b57fc065e706c7eb","modified":1628301543347},{"_id":"source/_posts/redis-mongodb.md","hash":"475f53257184b93c96ec6a0aecf6973e1a9ef339","modified":1630243058736},{"_id":"source/_posts/reverse-linked-list.md","hash":"52ca7fb2a4c233821747d66556c52183804cae09","modified":1628301543348},{"_id":"source/_posts/regular-expression.md","hash":"99f3377c907a537a82e9fe20c03ef53bd1c61595","modified":1628301543348},{"_id":"source/_posts/spiral-order-matrix.md","hash":"2dad54f7fa48dd460990dc4086b5ecd2521e8e24","modified":1628301543348},{"_id":"source/_posts/tree.md","hash":"aad1d5233ba3dc6cbdb20ef6cf45c70d4a023797","modified":1628301543348},{"_id":"source/_posts/typescript.md","hash":"385a375966e534d1a2af342afc8831070a8a85d6","modified":1655484864037},{"_id":"source/_posts/validate-stack-sequences.md","hash":"11df7714963f9737391380ae3ad0e42476c44c2d","modified":1628301543349},{"_id":"source/_posts/web-fundamentals-geektime2.md","hash":"d1e91dc6184bdce5b725d06bbe62765b61a6e192","modified":1628301543349},{"_id":"source/_posts/web-fundamentals-geektime.md","hash":"b2e5e7cc76751c2eadc47db22ff17f7e8706f030","modified":1628301543349},{"_id":"source/_posts/web-fundamentals-optimize.md","hash":"48f763856289521b2b219dd9b944898a5ba2d7f1","modified":1628301543350},{"_id":"source/_posts/webpack.md","hash":"956ee7a889f2612c0ac14aa4832c7cb396e9f5eb","modified":1628301543350},{"_id":"source/_posts/web-fundamentals.md","hash":"4f8920d26ade1eba832a630d2f4ec77c977c2bea","modified":1628301543350},{"_id":"source/_posts/二维数组中的查找.md","hash":"dbbbc444fd5d5ed3f18bad0f497e1db108e265ff","modified":1628301543351},{"_id":"source/_posts/从尾到头打印链表.md","hash":"1dba74ac1df49f8c219e0988fe4afa8d227331d4","modified":1628301543351},{"_id":"source/_posts/替换空格.md","hash":"82f6fe742ed3e8da048d4e88089c7492adae465c","modified":1678237618323},{"_id":"source/tags/index.md","hash":"6a9fff951edfff171a168a1c09a6cb12d5d78aea","modified":1628301543361},{"_id":"source/categories/index.md","hash":"988d37579240be36e0a0962543b50f002b1f8d0b","modified":1628301543353},{"_id":"source/images/git-hooks/solution1.png","hash":"861c67b2aafd72a0276d7d2496616d732a2a453b","modified":1628301543354},{"_id":"source/images/git-hooks/gitsetting.png","hash":"7c9953d5dd45f10693a2d2630eb5b868eb27f1f8","modified":1628301543354},{"_id":"source/images/git-use-method/gitcheckout.png","hash":"9c417349f338d6eb3bca412b44289fbe7d19bbe6","modified":1628301543357},{"_id":"source/images/git-use-method/gitclone.png","hash":"6836de503ea85f032bdeabc4cd4fb1763722ee54","modified":1628301543357},{"_id":"source/images/git-use-method/push.png","hash":"ba4cf17ec0c674b9ea8d6cd0a5cc911ec79a5f96","modified":1628301543357},{"_id":"source/images/init/melody.png","hash":"78bc14e7864f86a3b205894b81c7edc84d4c387f","modified":1628301543359},{"_id":"source/images/git-use-method/success.png","hash":"05ccf3e9b7b837b2f8cf5f31a2624de1597e0b41","modified":1628301543358},{"_id":"source/images/init/hexo.png","hash":"db84143bd637ad00bca29003c25970b99b125c36","modified":1628301543359},{"_id":"source/images/init/set.png","hash":"0905b0f8444c470fb0efbdf6a4195123dc2a50b2","modified":1628301543360},{"_id":"source/images/git-use-method/address.png","hash":"d750ebefa5ea7caa041fa6531e7baba69b98bc44","modified":1628301543356},{"_id":"node_modules/hexo-theme-melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/.travis.demo.yml","hash":"4482d40a58a035ef96888dfc4ed96c861b8f78a5","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/LICENSE","hash":"dbbc2e6e42affa5ac962826f01bffa8c7aecd6b8","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/package.json","hash":"7ec07ad0717da8ca91fb04d264902edbd2a550c0","modified":1678724914403},{"_id":"node_modules/hexo-theme-melody/CHANGELOG.md","hash":"a3fdc0bf95738aa013b0de6dcd1c6523512dcddf","modified":1678724914403},{"_id":"node_modules/hexo-theme-melody/README.md","hash":"f0197363be56ef95b40854c4115bac4c8bbe93e8","modified":1678724914417},{"_id":"node_modules/hexo-theme-melody/_config.yml","hash":"5efa43b59d4112bacb83f2a23c50fc20948d57cf","modified":1678724914468},{"_id":"node_modules/hexo-theme-melody/FAQ.md","hash":"5984dd5335f8ead64f14d3885de5cc5ef09dfff8","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/gallery.pug","hash":"c083a7bbf5f46305daed74632aef3403b7d94dc7","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/archive.pug","hash":"2133e9f369dac19b9f843fc956521f864ace7567","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/category.pug","hash":"ea5f82d69e586f293f428f3b237c17bf873b4f03","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/index.pug","hash":"5e969c09fa5902829ad0b14c0af8d432bd4c7078","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/post.pug","hash":"436bb1b7d14e29cba8010d3ea14df19681fbb5fe","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/page.pug","hash":"09c1c7c4ffff114c886b097ec82e046399ab79e1","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/tag.pug","hash":"ca333911bc97bc9d3eba6e1bc05e96b209ecedfb","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/scripts/gallery-tag.js","hash":"74e2e95f8daec619578f4b7dd1ed77cd5907f37e","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/scripts/replace-config.js","hash":"a8e9a18b2798d3c694a3efa8036f82046c3eb037","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/footer.pug","hash":"0e9f1778f021f1c205f0b1be83014fba576797af","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/additional-js.pug","hash":"c4ca62466684758d5a26e5866f9ed87b5c9401b8","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/config.pug","hash":"66e384b1cfe58a57b80f7dff0388bf00bb8bfdf8","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/head.pug","hash":"bf287d6440011cb17d15dbaf5945517d36918800","modified":1678724914429},{"_id":"node_modules/hexo-theme-melody/layout/includes/header.pug","hash":"f440a9741eeacfa62f0a0e7ef470a104f1cb510c","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/layout.pug","hash":"58856b5048fb64e7dab75a6ae32cc2a0ad94de4f","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/nav.pug","hash":"3f1fe059784df45f923587b81cc972659ed22e01","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/pagination.pug","hash":"fe33a94d90836b767c42654ccc4c4de7d7f227fc","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/sidebar.pug","hash":"211b8ecfdb7b5dd836c87436def410a52dfa5ecd","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/recent-posts.pug","hash":"128c448f5bab71f59912516edff9d476ff6b8afe","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/languages/en.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/languages/zh-Hans.yml","hash":"68c5794ec57227daec2e3afe2c5d502fa0a7092a","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1678724914233},{"_id":"node_modules/hexo-theme-melody/source/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1678724914338},{"_id":"node_modules/hexo-theme-melody/source/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/404.styl","hash":"b7a0f8b23cb137b1a6c4fa0f9a35e06e93065b2c","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/languages/default.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/index.styl","hash":"2053ba56db707e7a03796ba59f77103765b02353","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/var.styl","hash":"259feee66bf9c326e781bb63a177627dbe3eb539","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/404/404-nav.pug","hash":"4cd894857bb90fe44b55e852864692ed06588b8e","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/404/layout.pug","hash":"9c7cdf16a9b9b4aa251dba9378a0f00d985101de","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/disqus.pug","hash":"e62b73df92566806bfb170f204295cffd7074215","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/gitalk.pug","hash":"86bdbc4a52024c3573bea27817394dd118b70a26","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/gitment.pug","hash":"0b7cd8b0b114876238ca022abda4c1fcdfaee12f","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/index.pug","hash":"30db5b0fb5662ecea0012b21d4de28d3963e272f","modified":1678724914429},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/valine.pug","hash":"bc58746ed5c8cc001ad47f1db30e3bdb1aab5fa9","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/mixins/article-sort.pug","hash":"297b098dc6bba73b76bac4cf6bcd0c29d5dcb2ed","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/vssue.pug","hash":"4ee6cea08286cbac2648a6032f73e5f8d2b88380","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/add-this.pug","hash":"17a11c1c36c9078639c2a82628ce5fc6584daffb","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/share-js.pug","hash":"e612725ba48711fc119f91c6196287ad13f5a2ba","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/share/index.pug","hash":"a2ec6da33cf5fa0ba6c8c38ec3841a0b0003ce98","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/count/busuanzi.pug","hash":"4df5e63ab0113efb93f05ef781b2a7e3f34ba753","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/canvas-ribbon.pug","hash":"39a03f188ac415642766b062a80b1b710f3ea609","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/mixins/slide.pug","hash":"91975f700b20131ab4df4d2ea3e1acc8bf2d3eef","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/katex.pug","hash":"79b2336ad8d921907a5b1badc10ba1651c92843b","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/search/local-search.pug","hash":"f88070a84379bc06fb385e1193448fae6a8a54e1","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/slide/script.pug","hash":"e19439122c18a8bca10819b635cdfed6e9135e46","modified":1678724914436},{"_id":"node_modules/hexo-theme-melody/source/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/slide/layout.pug","hash":"e6963fb20340f60fe9bd2c9dbfff50decee159b3","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/layout/includes/third-party/mathjax.pug","hash":"33b350f9826795cd59d9e277a24accc8a9bc9076","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1678724914202},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1678724914338},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/diff.styl","hash":"ffdfbf088da7bf33899557395abcac0d2bffd67d","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/comments.styl","hash":"e58602aad6792f1a5dbda0677ecb04d21ac10e97","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/footer.styl","hash":"ca8c816bdb144503bec7e755344fb0e4e370a7bf","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/highlight.styl","hash":"016c800bf7a0ef6d520e135ab69ef072760483cb","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/pagination.styl","hash":"a3f52d1f7ff1eaead8df016b2a4def6f7b4e9559","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/head.styl","hash":"73488de3f36369c29ecd5e0be9661bb2b508548c","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/page.styl","hash":"38f0efbc9985d2d4e3699d9ac06ab3dba150ce6e","modified":1678724914453},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/post.styl","hash":"34a421a32abb8003d7d83de53f42639be4e54daf","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_layout/sidebar.styl","hash":"e8315401a6c791d00617c031be01f45df70fe7fd","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_search/index.styl","hash":"63cae4465ac54b71361c1795206534c7f2e6e5b1","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_global/index.styl","hash":"2a6195ce7e822362633ebf403c9438b42fa126bb","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_search/algolia.styl","hash":"534e5641e3efe2452db95cc25ec8da0111ceadcf","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_search/local-search.styl","hash":"d7970b385265fef782cdcaaf4fe68a2217625467","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/reveal/head.min.js","hash":"8c9495c76d5aa00d3dfb88653c362fba9f10cbb2","modified":1628304482820},{"_id":"node_modules/hexo-theme-melody/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1628304482820},{"_id":"public/search.xml","hash":"30dba5121c2883411f50f3d7b816900fca2b05a2","modified":1679756337156},{"_id":"public/categories/index.html","hash":"03506f593ad32766cc3bdd554a37439545149226","modified":1678727643763},{"_id":"public/tags/index.html","hash":"4f8b1c0d68928d27761bf2e53f80901275fb5cbd","modified":1678727643763},{"_id":"public/2020/12/08/electron-01/index.html","hash":"2baa14a98b02ea32c6d80889351ceee5c8fbb437","modified":1678727643763},{"_id":"public/2020/03/24/leetcode-the-masseuse-lcci/index.html","hash":"7cfcf4b5c2bb0b4c6bd3340969730d4c08d04c11","modified":1678727643763},{"_id":"public/2020/03/19/geektime-arithmetic/index.html","hash":"5a295ba73e59fbf5466b66d1c992b305db413e6e","modified":1678727643763},{"_id":"public/2020/03/08/leetcode-322/index.html","hash":"5e8346df8d533c5ccb23ca13ed04e17c448f1a35","modified":1678727643763},{"_id":"public/2020/03/06/leetcode-lian-xu-zheng-shu-lcof/index.html","hash":"91876c8172a22c8acf293d80c295f795a1514533","modified":1678727643763},{"_id":"public/2020/02/17/leetcode-525/index.html","hash":"c55f5a164f85d827450d2fb6daff61f38dc58278","modified":1678727643763},{"_id":"public/2020/02/14/leetcode-98/index.html","hash":"1d620422ce2ff72dc31f93393d11a44ef1ae3430","modified":1678727643763},{"_id":"public/2020/02/13/leetcode-206/index.html","hash":"833dc6868bce1113a6e479c13ba0ed0512bd1227","modified":1678727643763},{"_id":"public/2020/02/13/leetcode-26/index.html","hash":"b9febbda95e404373d8439ba0aac9e1f01994434","modified":1678727643763},{"_id":"public/2020/02/13/leetcode-3/index.html","hash":"0267b7e5d8ee2c901b3793bac8787df571a56a0a","modified":1678727643763},{"_id":"public/2020/02/11/computer-networks/index.html","hash":"e7a20dfbe5ed4b1bcfabfb296629756549110aea","modified":1678727643763},{"_id":"public/2020/02/04/reConstructBinaryTree/index.html","hash":"cfd20fb76d40f944db588b65e318f48270d57db6","modified":1678727643763},{"_id":"public/2020/02/01/java-concurrent-programming/index.html","hash":"fd0db29d96d8f30991220d6160b7daa3ea220276","modified":1678727643763},{"_id":"public/2020/01/31/替换空格/index.html","hash":"3c4b213bed6ca5237501482cc5cd951a5e713d74","modified":1678727643763},{"_id":"public/2019/07/30/git-use-method/index.html","hash":"ce1dc0be4deae219337fd683f4769a11582ce2fa","modified":1678727643763},{"_id":"public/archives/index.html","hash":"210c88d89f09ac3a07156bec37e199dc10661953","modified":1678727643763},{"_id":"public/archives/page/2/index.html","hash":"babf0395b618e1be3eaa1240aa7a73b80a084ff1","modified":1678727643763},{"_id":"public/archives/page/3/index.html","hash":"453df9ea8c9b14b3f2776436b38b6be8fa62878e","modified":1678727643763},{"_id":"public/archives/page/4/index.html","hash":"70f2964ef6823368e7346bfcdca742ccbfc3c87a","modified":1678727643763},{"_id":"public/archives/page/5/index.html","hash":"b9eba64202b66090ae3a7b00ec8c5c9e210e11b7","modified":1678727643763},{"_id":"public/archives/2019/index.html","hash":"194eea02b7cd9a80d0ec8a269c3d56eab61f5f67","modified":1678727643763},{"_id":"public/archives/2019/07/index.html","hash":"a66a55663789e7e90c94c5f142652237d2b5862f","modified":1678727643763},{"_id":"public/archives/2019/08/index.html","hash":"6e849d11a426d7723c975dd9fb5ff17a9a3260b2","modified":1678727643763},{"_id":"public/archives/2019/09/index.html","hash":"95e9f83be2916f7b650e5b76bc8bafd188287162","modified":1678727643763},{"_id":"public/archives/2019/10/index.html","hash":"dde3e7296ab8262cee7aed25cdbdd8fa5f2869c0","modified":1678727643763},{"_id":"public/archives/2020/index.html","hash":"c6e96114dd56c98503827567c468133a5d10daff","modified":1678727643763},{"_id":"public/archives/2020/page/2/index.html","hash":"a0e3b84cdbf5544339993becced2b81870f6e843","modified":1678727643763},{"_id":"public/archives/2020/page/3/index.html","hash":"ddb2065cd1aeadf496e7af4dc005583b45facd1b","modified":1678727643763},{"_id":"public/archives/2020/page/4/index.html","hash":"1cbc536802a21264263cffdcb6d8fed4620a2214","modified":1678727643763},{"_id":"public/archives/2020/01/index.html","hash":"0f9d9b9b79892af4b08692aa502c2e42e67d5313","modified":1678727643763},{"_id":"public/archives/2020/02/index.html","hash":"b8643a196707a71d4f0947030f852afad7564c9a","modified":1678727643763},{"_id":"public/archives/2020/02/page/2/index.html","hash":"8a28150c8d3f5770f7e7e2b68aa6f346b59e308d","modified":1678727643763},{"_id":"public/archives/2020/02/page/3/index.html","hash":"54abb6154d68383ce11746e475cedd9ef808b9a1","modified":1678727643763},{"_id":"public/archives/2020/03/index.html","hash":"8e97573792cf29760ddf4aab161ef5f53ab988a6","modified":1678727643763},{"_id":"public/archives/2020/03/page/2/index.html","hash":"157b35d3623d1b35ee832a0d398ed7961cae5365","modified":1678727643763},{"_id":"public/archives/2020/12/index.html","hash":"1c23d82a8ab279509882602c21b61ae8d5cfde3e","modified":1678727643763},{"_id":"public/archives/2021/index.html","hash":"bbd89c5d91d5b8e69b41cfd301c1747a898be184","modified":1678727643763},{"_id":"public/archives/2021/01/index.html","hash":"76fc590b5bea301250032c50d5750ac92718aa28","modified":1678727643763},{"_id":"public/archives/2021/08/index.html","hash":"bc3af76638570414c4697ae494288d14b4ea9b56","modified":1678727643763},{"_id":"public/archives/2021/09/index.html","hash":"bde9c7d539840e75dba939572938c221b55acca6","modified":1678727643763},{"_id":"public/index.html","hash":"4b6e5a106e37ea13e85920ac98f0d73c170fe688","modified":1678727643763},{"_id":"public/page/2/index.html","hash":"71489f72b9103235bb2ffe1426605b6468327793","modified":1678727643763},{"_id":"public/page/3/index.html","hash":"022d2fb9a2a94aa3c2abc687e983ecf187c9d123","modified":1678727643763},{"_id":"public/page/4/index.html","hash":"cb7189503e5f9204c51c604b5fcd7da944d69e02","modified":1678727643763},{"_id":"public/page/5/index.html","hash":"1de24f5d7127f72d46fb899d79858e8998670ef2","modified":1678727643763},{"_id":"public/page/6/index.html","hash":"0441f8988eb83c210acb292e17b646671f8a776c","modified":1678727643763},{"_id":"public/page/7/index.html","hash":"0af85731d46f5c92a86bc31e2508623dda4a4468","modified":1678727643763},{"_id":"public/page/8/index.html","hash":"44c994d9104a7cca5693527545fc36fb6ddddd5f","modified":1678727643763},{"_id":"public/page/9/index.html","hash":"be21c7680e77ca8e3a951f1593233fb7d4a55e43","modified":1678727643763},{"_id":"public/page/10/index.html","hash":"9f4cf365e7769ef8f6770eb2c178697e329c82ba","modified":1678727643763},{"_id":"public/tags/算法与数据结构/index.html","hash":"055fd9a3d94117969a97d538b22e308a9518005f","modified":1678727643763},{"_id":"public/tags/算法与数据结构/page/2/index.html","hash":"1ea96cc31a9d819f53e6a4bb57acccf2f2bccb5b","modified":1678727643763},{"_id":"public/tags/算法与数据结构/page/3/index.html","hash":"32541bac88d43a6ba7b1eb07c001a0edaa31d225","modified":1678727643763},{"_id":"public/tags/剑指Offer/index.html","hash":"9f713f1945584b7d8f328e1ee0c4350839f5d0c8","modified":1678727643763},{"_id":"public/tags/Flutter/index.html","hash":"95fd8933d1070c9fe70d0b0a0ed9e746f74d72da","modified":1678727643763},{"_id":"public/tags/计算机网络/index.html","hash":"b6b98a310ff43643d0f8e5c22a555199b5d5f61e","modified":1678727643763},{"_id":"public/tags/设计模式/index.html","hash":"eb4829875046cc9f1b2e2c45d58a3e1ffa098ade","modified":1678727643763},{"_id":"public/tags/前端/index.html","hash":"f2e47ead24409c678f566486d7790ac50519a8f0","modified":1678727643763},{"_id":"public/tags/性能优化/index.html","hash":"2759668c8c8e0dcbcdef46b1c9bf7d9c20365ba0","modified":1678727643763},{"_id":"public/tags/Electron/index.html","hash":"c1ec9c53a98476227efcf197286a5f59d3565229","modified":1678727643763},{"_id":"public/tags/理财/index.html","hash":"a4bd633a655f6c3ac792fe358fbad6cdd358cab9","modified":1678727643763},{"_id":"public/tags/基金/index.html","hash":"f6d2b51d4e4db76647f8335926e3a799f55fa1a3","modified":1678727643763},{"_id":"public/tags/Git/index.html","hash":"725d10fc4261b33ef11e675e7ddfba5bc9a00ce8","modified":1678727643763},{"_id":"public/tags/搭建博客/index.html","hash":"205371016797e0d9af893a7b791351b88ec8b5c7","modified":1678727643763},{"_id":"public/tags/go/index.html","hash":"b3a22b499cdd7a994c5b0de805d7aad952890f0b","modified":1678727643763},{"_id":"public/tags/Java/index.html","hash":"a881be49f6b2f074e60d2ce8fcfed0feac9a4bcc","modified":1678727643763},{"_id":"public/tags/网络视频课程/index.html","hash":"6f33cb7eefca0d5f7e5d9f7744982749ec65a899","modified":1678727643763},{"_id":"public/tags/面试/index.html","hash":"b747c25d06a70caed498ea07dfdab9e8a8868ded","modified":1678727643763},{"_id":"public/tags/LeetCode/index.html","hash":"b013bf0b3dccad06041b59f7afe136e9c1167f89","modified":1678727643763},{"_id":"public/tags/LeetCode/page/2/index.html","hash":"e539f380ec959b63e81bbc6830e93bfb91123eff","modified":1678727643763},{"_id":"public/tags/正则表达式/index.html","hash":"5ac6fa44bd3358c639e47c0f142ed76ec612dc97","modified":1678727643763},{"_id":"public/tags/redis/index.html","hash":"76bfba7d72200655085537c4b4373430c472d2e8","modified":1678727643763},{"_id":"public/tags/mongodb/index.html","hash":"a592bbe862b02a1a1c836bf6496b4a6dcf58e081","modified":1678727643763},{"_id":"public/tags/树/index.html","hash":"52e863dcac0d70bcea7fd93381b0bf2c0b94198c","modified":1678727643763},{"_id":"public/tags/TypeScript/index.html","hash":"41e92b00555160056121c61668752125a819b9e5","modified":1678727643763},{"_id":"public/tags/浏览器/index.html","hash":"ebcaefb7861992f2a539da53315abe3629a91a95","modified":1678727643763},{"_id":"public/tags/webpack/index.html","hash":"c3b8275fc5692086fe58fd1f4b63901a9903bbdb","modified":1678727643763},{"_id":"public/2021/09/04/go-init/index.html","hash":"6081107156717d138ec20757850de6acc3931e10","modified":1678727643763},{"_id":"public/2021/08/26/redis-mongodb/index.html","hash":"f98783885a83976f5a8f13cc7e58a752ff27cebd","modified":1678727643763},{"_id":"public/2021/08/07/design-module-uml/index.html","hash":"32bef03ebde2b3c4bcc13b520e574eec7685060d","modified":1678727643763},{"_id":"public/2021/01/10/frontend-optimization/index.html","hash":"932c89801b14a42c87b5d54d1d9a77916989fe87","modified":1678727643763},{"_id":"public/2020/12/03/fund-01/index.html","hash":"e0feceb71e1d55d2422366c6b2c958cbe3686296","modified":1678727643763},{"_id":"public/2020/03/28/leetcode-short-encoding-of-words/index.html","hash":"834ab76a8ba0b45ec23877cc339950ce230858e3","modified":1678727643763},{"_id":"public/2020/03/26/web-fundamentals-geektime2/index.html","hash":"7d62d0d17c89982a8a4f898b45921e298df2c714","modified":1678727643763},{"_id":"public/2020/03/21/regular-expression/index.html","hash":"90d5a142d1dc146bbca857b59e49b3a9a75ad4b1","modified":1678727643763},{"_id":"public/2020/03/21/web-fundamentals-geektime/index.html","hash":"ee2c6a31eacececbd6d7d1753f07857d37b5356d","modified":1678727643763},{"_id":"public/2020/03/18/ju-zhen-zhong-de-lu-jing/index.html","hash":"b8acced71bed7b9aa64eca7a0bc9c83203913c6a","modified":1678727643763},{"_id":"public/2020/03/04/leetcode-994/index.html","hash":"3fa93168d7df817143885a01c2ac83a30a1327e5","modified":1678727643763},{"_id":"public/2020/03/01/leetcode-297/index.html","hash":"ece48601045707a0d4b1ea6d6bdce0120f93a825","modified":1678727643763},{"_id":"public/2020/02/26/typescript/index.html","hash":"bffbfc6131c36f00f6678909e12ac664a671e9ba","modified":1678727643763},{"_id":"public/2020/02/23/webpack/index.html","hash":"4929160ce53ae2a5ed73f31ec1aac1edd91f7c80","modified":1678727643763},{"_id":"public/2020/02/23/web-fundamentals-optimize/index.html","hash":"ad87f9505420bd833f9e021cf84f66937fdbd48b","modified":1678727643763},{"_id":"public/2020/02/22/validate-stack-sequences/index.html","hash":"972dfd12ad1f964eba1818f99433fffb6c75830c","modified":1678727643763},{"_id":"public/2020/02/21/spiral-order-matrix/index.html","hash":"7e9db95aba0c6f35b450dd76a992d20bd6955be2","modified":1678727643763},{"_id":"public/2020/02/21/web-fundamentals/index.html","hash":"8f70afcbc0220c6036f61883e94454f35149a8ea","modified":1678727643763},{"_id":"public/2020/02/13/leetcode-5/index.html","hash":"d1276bc7ff4ae7e25c6ca7167158e11f010c7e23","modified":1678727643763},{"_id":"public/2020/02/10/reverse-linked-list/index.html","hash":"1b6f00afdd820638cd613748bef31d5d717ed5f2","modified":1678727643763},{"_id":"public/2020/02/10/interview/index.html","hash":"0947aed82b82768698d744f345b5d632f66dc2a7","modified":1678727643763},{"_id":"public/2020/02/06/mergeListNode/index.html","hash":"bb62e744094e712dfb22547ae77037b523187afc","modified":1678727643763},{"_id":"public/2020/02/04/Fibonacci/index.html","hash":"ec3d0d953a9bad8e388b546a2ab887513355305f","modified":1678727643763},{"_id":"public/2020/02/02/tree/index.html","hash":"ee769fc64f122608fec4ac8cb060df66a4e0654e","modified":1678727643763},{"_id":"public/2020/02/01/从尾到头打印链表/index.html","hash":"a4134d1e2d3786adc773d65458f8e17d4e4186e9","modified":1678727643763},{"_id":"public/2020/01/30/二维数组中的查找/index.html","hash":"99223a22747ac2bef5fff7ef59d11e50f6501368","modified":1678727643763},{"_id":"public/2019/10/09/flutter/index.html","hash":"a9b7a7effde29414faa521a81a6f5cceb780ca67","modified":1678727643763},{"_id":"public/2019/09/16/javascript-design-mode/index.html","hash":"cc246904f27fba53e9817207334f967e5d781d8f","modified":1678727643763},{"_id":"public/2019/08/02/git-hooks/index.html","hash":"d8e3af3c2feebd933db8fa6df2182cae43b18a61","modified":1678727643763},{"_id":"public/2019/07/27/init/index.html","hash":"6439c9da126ec7becfc410352b19b2c4b18dfbf8","modified":1678727643763},{"_id":"public/2019/07/27/rank-method/index.html","hash":"64b6ea6d7fc36ee32f67ee5c7ba16109ae005f87","modified":1678727643763},{"_id":"public/images/git-hooks/solution1.png","hash":"861c67b2aafd72a0276d7d2496616d732a2a453b","modified":1678724959459},{"_id":"public/images/git-hooks/gitsetting.png","hash":"7c9953d5dd45f10693a2d2630eb5b868eb27f1f8","modified":1678724959459},{"_id":"public/images/git-use-method/gitclone.png","hash":"6836de503ea85f032bdeabc4cd4fb1763722ee54","modified":1678724959459},{"_id":"public/images/git-use-method/gitcheckout.png","hash":"9c417349f338d6eb3bca412b44289fbe7d19bbe6","modified":1678724959459},{"_id":"public/images/git-use-method/push.png","hash":"ba4cf17ec0c674b9ea8d6cd0a5cc911ec79a5f96","modified":1678724959459},{"_id":"public/images/init/melody.png","hash":"78bc14e7864f86a3b205894b81c7edc84d4c387f","modified":1678724959459},{"_id":"public/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1678724959459},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1678724959459},{"_id":"public/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1678724959459},{"_id":"public/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1678724959459},{"_id":"public/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1678724959459},{"_id":"public/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1678724959459},{"_id":"public/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1678724959459},{"_id":"public/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1678724959459},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1678724959459},{"_id":"public/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1678724959459},{"_id":"public/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1678724959459},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1678724959459},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1678724959459},{"_id":"public/css/404.css","hash":"712ecbf4ac203ab5f1ea92989c0f0062a3d0aca9","modified":1678724959459},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1678724959459},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1678724959459},{"_id":"public/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1678724959459},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1678724959459},{"_id":"public/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1678724959459},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1678724959459},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1678724959459},{"_id":"public/css/index.css","hash":"d0c1c1f991ad354af158cdd8f5fa61187e46282a","modified":1678724959459},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1678724959459},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1678724959459},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1678724959459},{"_id":"public/images/git-use-method/success.png","hash":"05ccf3e9b7b837b2f8cf5f31a2624de1597e0b41","modified":1678724959459},{"_id":"public/images/init/hexo.png","hash":"db84143bd637ad00bca29003c25970b99b125c36","modified":1678724959459},{"_id":"public/images/init/set.png","hash":"0905b0f8444c470fb0efbdf6a4195123dc2a50b2","modified":1678724959459},{"_id":"public/images/git-use-method/address.png","hash":"d750ebefa5ea7caa041fa6531e7baba69b98bc44","modified":1678724959459},{"_id":"source/_posts/nodejs-cluster-pm2.md","hash":"b92b10f6c8c2a9207ae86a9baabef0946ee50a75","modified":1676180464545},{"_id":"public/2023/02/04/nodejs-cluster-pm2/index.html","hash":"06a3642658d745289062a087cac4aefd6d3e0da2","modified":1678727643763},{"_id":"public/archives/2023/index.html","hash":"c4dbd9d332f0951782545ae65a2160f69521ddf3","modified":1678727643763},{"_id":"public/archives/2023/02/index.html","hash":"3f163d09d08a5352c77adc403ae1779b14ddc65d","modified":1678727643763},{"_id":"public/tags/NodeJS/index.html","hash":"789e2dc969281f101d1c4434fbfa97b803870126","modified":1678727643763},{"_id":"source/_posts/knative-service.md","hash":"e40c700ba07dfcf4b42594ee5dafb0958682353c","modified":1677317521828},{"_id":"public/2023/02/25/knative-service/index.html","hash":"4d3620c560ab52ec67c9213ecfe339929ae43ee2","modified":1678727643763},{"_id":"public/tags/Serverless/index.html","hash":"43005a09c88b657107af798c6a8e0d90a3fc0bf7","modified":1678727643763},{"_id":"public/tags/Cloud-Native/index.html","hash":"f53fad8fa4bb5fdc10654a40b0146a8c596374fc","modified":1678727643763},{"_id":"source/_posts/headless-ui.md","hash":"5debb7eed051ad1f750c3d6fbf33874b7a07c086","modified":1679666983039},{"_id":"public/2023/03/08/headless-ui/index.html","hash":"592452583bc5e8e39912a4efec5e3a49c0e0d6f0","modified":1679756337156},{"_id":"public/archives/2023/03/index.html","hash":"88eedf3f0dc55072682d979b0f8da3015377305a","modified":1678727643763},{"_id":"public/tags/Web/index.html","hash":"cc0edbf047f44d8013578ae4195dd7e83cf3a1d5","modified":1678727643763},{"_id":"node_modules/hexo-theme-melody/layout/includes/comments/waline.pug","hash":"1b2cfeb2b2c67b49f94107c230a64ed0a35eae8d","modified":1678724914441},{"_id":"source/_posts/react-immer.md","hash":"ae7a088e4ccedf73ac946681de8f364dc5066437","modified":1690641373919}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2019-07-27T08:18:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-27 16:18:55\ntype: \"categories\"\n---\n","updated":"2021-08-07T01:59:03.353Z","path":"categories/index.html","_id":"cl4ince5y0000cgufb71g4qe0","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-27T08:16:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-27 16:16:03\ntype: \"tags\"\n---\n","updated":"2021-08-07T01:59:03.361Z","path":"tags/index.html","_id":"cl4ince640002cgufczo2c1kq","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"斐波那契数列与跳台阶","date":"2020-02-04T12:25:45.000Z","_content":"## 斐波那契数列与跳台阶\n>**问题一:** 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）<br/>\n**问题二:** 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\n## 分析问题\n>根据斐波那契数列后一项是前两项之和的特点。采用递归可以解决这个问题。通常递归可以转换成动态规划解决问题。因此下面我采用的是动态规划\n\n>对应跳台阶问题,青蛙每次可以跳任意的台阶,因此后一个台阶的走法,是前面所有台阶走法之和再加1。因此是前一个台阶走法的两倍。(高中数列问题$2^0+2^1+2^2+\\cdots+2^{n-1}=2^n-1$)\n## 解决问题\n- 斐波那契数列\n```Java\n  public int Fibonacci(int n) {\n      ArrayList<Integer> arrayList = new ArrayList<>();\n      arrayList.add(0);\n      arrayList.add(1);\n      if(n<2){\n          //处理第 0项和第1项情况；\n          return arrayList.get(n);\n      }\n      for (int i =2;i<=n;i++){\n          arrayList.add(i,arrayList.get(i-1)+arrayList.get(i-2));\n      }\n      return arrayList.get(n);\n  }\n```\n- 跳台阶\n```Java\n  public int JumpFloorII(int target) {\n    return 1<<(target-1);\n  }\n```","source":"_posts/Fibonacci.md","raw":"---\ntitle: 斐波那契数列与跳台阶\ndate: 2020-02-04 20:25:45\ntags:\n  - 算法与数据结构\n  - 剑指Offer\n---\n## 斐波那契数列与跳台阶\n>**问题一:** 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）<br/>\n**问题二:** 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\n## 分析问题\n>根据斐波那契数列后一项是前两项之和的特点。采用递归可以解决这个问题。通常递归可以转换成动态规划解决问题。因此下面我采用的是动态规划\n\n>对应跳台阶问题,青蛙每次可以跳任意的台阶,因此后一个台阶的走法,是前面所有台阶走法之和再加1。因此是前一个台阶走法的两倍。(高中数列问题$2^0+2^1+2^2+\\cdots+2^{n-1}=2^n-1$)\n## 解决问题\n- 斐波那契数列\n```Java\n  public int Fibonacci(int n) {\n      ArrayList<Integer> arrayList = new ArrayList<>();\n      arrayList.add(0);\n      arrayList.add(1);\n      if(n<2){\n          //处理第 0项和第1项情况；\n          return arrayList.get(n);\n      }\n      for (int i =2;i<=n;i++){\n          arrayList.add(i,arrayList.get(i-1)+arrayList.get(i-2));\n      }\n      return arrayList.get(n);\n  }\n```\n- 跳台阶\n```Java\n  public int JumpFloorII(int target) {\n    return 1<<(target-1);\n  }\n```","slug":"Fibonacci","published":1,"updated":"2021-08-07T01:59:03.339Z","_id":"cl4ince610001cgufaxnghnmt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"斐波那契数列与跳台阶\"><a class=\"markdownIt-Anchor\" href=\"#斐波那契数列与跳台阶\"></a> 斐波那契数列与跳台阶</h2>\n<blockquote>\n<p><strong>问题一:</strong> 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）<br/><br />\n<strong>问题二:</strong> 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>\n</blockquote>\n<h2 id=\"分析问题\"><a class=\"markdownIt-Anchor\" href=\"#分析问题\"></a> 分析问题</h2>\n<blockquote>\n<p>根据斐波那契数列后一项是前两项之和的特点。采用递归可以解决这个问题。通常递归可以转换成动态规划解决问题。因此下面我采用的是动态规划</p>\n</blockquote>\n<blockquote>\n<p>对应跳台阶问题,青蛙每次可以跳任意的台阶,因此后一个台阶的走法,是前面所有台阶走法之和再加1。因此是前一个台阶走法的两倍。(高中数列问题<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^0+2^1+2^2+\\cdots+2^{n-1}=2^n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>)</p>\n</blockquote>\n<h2 id=\"解决问题\"><a class=\"markdownIt-Anchor\" href=\"#解决问题\"></a> 解决问题</h2>\n<ul>\n<li>斐波那契数列</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">Fibonacci</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; arrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    arrayList.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">    arrayList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&lt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理第 0项和第1项情况；</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList.get(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        arrayList.add(i,arrayList.get(i-<span class=\"number\">1</span>)+arrayList.get(i-<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arrayList.get(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>跳台阶</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">JumpFloorII</span><span class=\"params\">(<span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>&lt;&lt;(target-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"斐波那契数列与跳台阶\"><a class=\"markdownIt-Anchor\" href=\"#斐波那契数列与跳台阶\"></a> 斐波那契数列与跳台阶</h2>\n<blockquote>\n<p><strong>问题一:</strong> 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）<br/><br />\n<strong>问题二:</strong> 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>\n</blockquote>\n<h2 id=\"分析问题\"><a class=\"markdownIt-Anchor\" href=\"#分析问题\"></a> 分析问题</h2>\n<blockquote>\n<p>根据斐波那契数列后一项是前两项之和的特点。采用递归可以解决这个问题。通常递归可以转换成动态规划解决问题。因此下面我采用的是动态规划</p>\n</blockquote>\n<blockquote>\n<p>对应跳台阶问题,青蛙每次可以跳任意的台阶,因此后一个台阶的走法,是前面所有台阶走法之和再加1。因此是前一个台阶走法的两倍。(高中数列问题<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^0+2^1+2^2+\\cdots+2^{n-1}=2^n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.747722em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>)</p>\n</blockquote>\n<h2 id=\"解决问题\"><a class=\"markdownIt-Anchor\" href=\"#解决问题\"></a> 解决问题</h2>\n<ul>\n<li>斐波那契数列</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">Fibonacci</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; arrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    arrayList.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">    arrayList.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&lt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理第 0项和第1项情况；</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList.get(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">2</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        arrayList.add(i,arrayList.get(i-<span class=\"number\">1</span>)+arrayList.get(i-<span class=\"number\">2</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arrayList.get(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>跳台阶</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">JumpFloorII</span><span class=\"params\">(<span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>&lt;&lt;(target-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Flutter从入门到入门","date":"2019-10-08T16:47:15.000Z","_content":"## Flutter 历史介绍\n\n> 起源于有人找我让我帮他写安卓项目，但是原生安卓我不会，本来想用RN，后来了解到RN配置比较麻烦，每次调试对电脑要求也比较高。所以我继续探索有没有其他开发Android的框架，后来遇到了Fluter，对于Flutter多优秀和Flutter和RN的对比，大家可上网去搜阿里闲鱼，美团等这些大厂的对比结果。\n\nFlutter 开发环境配置，在有科学上网的前提下相对比较简单，没有科学上网基本配置不了的。\n\nFlutter框架采用Dart语言为开发语言，Dart入门不难,JavaScript(接触了解过ES6或者TS)熟练的人基本入门很快\n\n## HelloWorld走起\n\n- Dart\n\n  ```dart\n    main(List<String> args) {\n      print(\"hello World\");\n    }\n  ```\n\n- Fluter 项目初始化\n\n  1. 安装好Flutter 运行命令`flutter create helloworld`\n  2. IDE会自动给你安装依赖，如果没有进入项目根目录 运行`flutter pub get ` 就行\n  3. 依赖安装完之后终端继续运行 `flutter run` \n\n- Flutter 目录结构说明  \n\n  ![](http://blogimage.lemonlife.top/201910180132_872.png?/)\n\n  1. 打包时候要用的包，包括修改应用名、图标、加密打包、之类的`android ` `ios` \n\n  2. 代码主文件`lib` 目录初始只有一个`main`文件\n\n  3. `test` 测试文件夹 ，这个删了都可以的不影响项目\n  \n  4. 依赖文件`pubspec.yaml` ，里面写了项目需要哪些依赖 和引用了哪些静态资源（字体，图片等）\n\n- Flutter `main` 文件分析  \n  \n  ```Dart\n  import 'package:flutter/material.dart';\n  \n  void main() => runApp(MyApp());\n  \n  class MyApp extends StatelessWidget {\n    // This widget is the root of your application.\n    @override\n    Widget build(BuildContext context) {\n      return MaterialApp(\n        title: 'Flutter Demo',\n        theme: ThemeData(\n          primarySwatch: Colors.blue,\n        ),\n        home: MyHomePage(title: 'Flutter Demo Home Page'),\n      );\n    }\n  }\n  \n  class MyHomePage extends StatefulWidget {\n    MyHomePage({Key key, this.title}) : super(key: key);\n  \n    final String title;\n  \n    @override\n    _MyHomePageState createState() => _MyHomePageState();\n  }\n  \n  class _MyHomePageState extends State<MyHomePage> {\n    int _counter = 0;\n  \n    void _incrementCounter() {\n      setState(() {\n        _counter++;\n      });\n    }\n  \n    @override\n    Widget build(BuildContext context) {\n      return Scaffold(\n        appBar: AppBar(\n          title: Text(widget.title),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'You have pushed the button this many times:',\n              ),\n              Text(\n                '$_counter',\n                style: Theme.of(context).textTheme.display1,\n              ),\n            ],\n          ),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: _incrementCounter,\n          tooltip: 'Increment',\n          child: Icon(Icons.add),\n        ), \n      );\n    }\n  }\n  ```\n  \n  ## 项目中使用路由\n  \n  - 静态路由\n  - 动态路由\n  - 路由传参\n  \n  ## 页面状态管理\n  \n  #### 前端基础概念\n  \n  1. 页面\n  2. 组件\n  3. 上下文\n  4. 数据与状态\n  \n  ### 不使用依赖的原生管理方案\n  \n  ### 使用EvenBus\n  \n  ### 使用Provider\n  \n  ### 其他框框\n  \n  ## 详解Provider 页面状态管理方案\n  > 未完待续。。。\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ","source":"_posts/flutter.md","raw":"---\n\ntitle: Flutter从入门到入门\ndate: 2019-10-09 00:47:15\ntags: Flutter\n---\n## Flutter 历史介绍\n\n> 起源于有人找我让我帮他写安卓项目，但是原生安卓我不会，本来想用RN，后来了解到RN配置比较麻烦，每次调试对电脑要求也比较高。所以我继续探索有没有其他开发Android的框架，后来遇到了Fluter，对于Flutter多优秀和Flutter和RN的对比，大家可上网去搜阿里闲鱼，美团等这些大厂的对比结果。\n\nFlutter 开发环境配置，在有科学上网的前提下相对比较简单，没有科学上网基本配置不了的。\n\nFlutter框架采用Dart语言为开发语言，Dart入门不难,JavaScript(接触了解过ES6或者TS)熟练的人基本入门很快\n\n## HelloWorld走起\n\n- Dart\n\n  ```dart\n    main(List<String> args) {\n      print(\"hello World\");\n    }\n  ```\n\n- Fluter 项目初始化\n\n  1. 安装好Flutter 运行命令`flutter create helloworld`\n  2. IDE会自动给你安装依赖，如果没有进入项目根目录 运行`flutter pub get ` 就行\n  3. 依赖安装完之后终端继续运行 `flutter run` \n\n- Flutter 目录结构说明  \n\n  ![](http://blogimage.lemonlife.top/201910180132_872.png?/)\n\n  1. 打包时候要用的包，包括修改应用名、图标、加密打包、之类的`android ` `ios` \n\n  2. 代码主文件`lib` 目录初始只有一个`main`文件\n\n  3. `test` 测试文件夹 ，这个删了都可以的不影响项目\n  \n  4. 依赖文件`pubspec.yaml` ，里面写了项目需要哪些依赖 和引用了哪些静态资源（字体，图片等）\n\n- Flutter `main` 文件分析  \n  \n  ```Dart\n  import 'package:flutter/material.dart';\n  \n  void main() => runApp(MyApp());\n  \n  class MyApp extends StatelessWidget {\n    // This widget is the root of your application.\n    @override\n    Widget build(BuildContext context) {\n      return MaterialApp(\n        title: 'Flutter Demo',\n        theme: ThemeData(\n          primarySwatch: Colors.blue,\n        ),\n        home: MyHomePage(title: 'Flutter Demo Home Page'),\n      );\n    }\n  }\n  \n  class MyHomePage extends StatefulWidget {\n    MyHomePage({Key key, this.title}) : super(key: key);\n  \n    final String title;\n  \n    @override\n    _MyHomePageState createState() => _MyHomePageState();\n  }\n  \n  class _MyHomePageState extends State<MyHomePage> {\n    int _counter = 0;\n  \n    void _incrementCounter() {\n      setState(() {\n        _counter++;\n      });\n    }\n  \n    @override\n    Widget build(BuildContext context) {\n      return Scaffold(\n        appBar: AppBar(\n          title: Text(widget.title),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                'You have pushed the button this many times:',\n              ),\n              Text(\n                '$_counter',\n                style: Theme.of(context).textTheme.display1,\n              ),\n            ],\n          ),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: _incrementCounter,\n          tooltip: 'Increment',\n          child: Icon(Icons.add),\n        ), \n      );\n    }\n  }\n  ```\n  \n  ## 项目中使用路由\n  \n  - 静态路由\n  - 动态路由\n  - 路由传参\n  \n  ## 页面状态管理\n  \n  #### 前端基础概念\n  \n  1. 页面\n  2. 组件\n  3. 上下文\n  4. 数据与状态\n  \n  ### 不使用依赖的原生管理方案\n  \n  ### 使用EvenBus\n  \n  ### 使用Provider\n  \n  ### 其他框框\n  \n  ## 详解Provider 页面状态管理方案\n  > 未完待续。。。\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ","slug":"flutter","published":1,"updated":"2021-08-07T01:59:03.340Z","_id":"cl4ince640003cguf3rqqgwu3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"flutter-历史介绍\"><a class=\"markdownIt-Anchor\" href=\"#flutter-历史介绍\"></a> Flutter 历史介绍</h2>\n<blockquote>\n<p>起源于有人找我让我帮他写安卓项目，但是原生安卓我不会，本来想用RN，后来了解到RN配置比较麻烦，每次调试对电脑要求也比较高。所以我继续探索有没有其他开发Android的框架，后来遇到了Fluter，对于Flutter多优秀和Flutter和RN的对比，大家可上网去搜阿里闲鱼，美团等这些大厂的对比结果。</p>\n</blockquote>\n<p>Flutter 开发环境配置，在有科学上网的前提下相对比较简单，没有科学上网基本配置不了的。</p>\n<p>Flutter框架采用Dart语言为开发语言，Dart入门不难,JavaScript(接触了解过ES6或者TS)熟练的人基本入门很快</p>\n<h2 id=\"helloworld走起\"><a class=\"markdownIt-Anchor\" href=\"#helloworld走起\"></a> HelloWorld走起</h2>\n<ul>\n<li>\n<p>Dart</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main(<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; args) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello World&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Fluter 项目初始化</p>\n<ol>\n<li>安装好Flutter 运行命令<code>flutter create helloworld</code></li>\n<li>IDE会自动给你安装依赖，如果没有进入项目根目录 运行<code>flutter pub get</code> 就行</li>\n<li>依赖安装完之后终端继续运行 <code>flutter run</code></li>\n</ol>\n</li>\n<li>\n<p>Flutter 目录结构说明</p>\n<p><img src=\"http://blogimage.lemonlife.top/201910180132_872.png?/\" alt=\"\" /></p>\n<ol>\n<li>\n<p>打包时候要用的包，包括修改应用名、图标、加密打包、之类的<code>android</code> <code>ios</code></p>\n</li>\n<li>\n<p>代码主文件<code>lib</code> 目录初始只有一个<code>main</code>文件</p>\n</li>\n<li>\n<p><code>test</code> 测试文件夹 ，这个删了都可以的不影响项目</p>\n</li>\n<li>\n<p>依赖文件<code>pubspec.yaml</code> ，里面写了项目需要哪些依赖 和引用了哪些静态资源（字体，图片等）</p>\n</li>\n</ol>\n</li>\n<li>\n<p>Flutter <code>main</code> 文件分析</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This widget is the root of your application.</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _incrementCounter() &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _counter++;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(widget.title),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;<span class=\"subst\">$_counter</span>&#x27;</span>,</span><br><span class=\"line\">              style: Theme.of(context).textTheme.display1,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">        onPressed: _incrementCounter,</span><br><span class=\"line\">        tooltip: <span class=\"string\">&#x27;Increment&#x27;</span>,</span><br><span class=\"line\">        child: Icon(Icons.add),</span><br><span class=\"line\">      ), </span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目中使用路由\"><a class=\"markdownIt-Anchor\" href=\"#项目中使用路由\"></a> 项目中使用路由</h2>\n<ul>\n<li>静态路由</li>\n<li>动态路由</li>\n<li>路由传参</li>\n</ul>\n<h2 id=\"页面状态管理\"><a class=\"markdownIt-Anchor\" href=\"#页面状态管理\"></a> 页面状态管理</h2>\n<h4 id=\"前端基础概念\"><a class=\"markdownIt-Anchor\" href=\"#前端基础概念\"></a> 前端基础概念</h4>\n<ol>\n<li>页面</li>\n<li>组件</li>\n<li>上下文</li>\n<li>数据与状态</li>\n</ol>\n<h3 id=\"不使用依赖的原生管理方案\"><a class=\"markdownIt-Anchor\" href=\"#不使用依赖的原生管理方案\"></a> 不使用依赖的原生管理方案</h3>\n<h3 id=\"使用evenbus\"><a class=\"markdownIt-Anchor\" href=\"#使用evenbus\"></a> 使用EvenBus</h3>\n<h3 id=\"使用provider\"><a class=\"markdownIt-Anchor\" href=\"#使用provider\"></a> 使用Provider</h3>\n<h3 id=\"其他框框\"><a class=\"markdownIt-Anchor\" href=\"#其他框框\"></a> 其他框框</h3>\n<h2 id=\"详解provider-页面状态管理方案\"><a class=\"markdownIt-Anchor\" href=\"#详解provider-页面状态管理方案\"></a> 详解Provider 页面状态管理方案</h2>\n<blockquote>\n<p>未完待续。。。</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"flutter-历史介绍\"><a class=\"markdownIt-Anchor\" href=\"#flutter-历史介绍\"></a> Flutter 历史介绍</h2>\n<blockquote>\n<p>起源于有人找我让我帮他写安卓项目，但是原生安卓我不会，本来想用RN，后来了解到RN配置比较麻烦，每次调试对电脑要求也比较高。所以我继续探索有没有其他开发Android的框架，后来遇到了Fluter，对于Flutter多优秀和Flutter和RN的对比，大家可上网去搜阿里闲鱼，美团等这些大厂的对比结果。</p>\n</blockquote>\n<p>Flutter 开发环境配置，在有科学上网的前提下相对比较简单，没有科学上网基本配置不了的。</p>\n<p>Flutter框架采用Dart语言为开发语言，Dart入门不难,JavaScript(接触了解过ES6或者TS)熟练的人基本入门很快</p>\n<h2 id=\"helloworld走起\"><a class=\"markdownIt-Anchor\" href=\"#helloworld走起\"></a> HelloWorld走起</h2>\n<ul>\n<li>\n<p>Dart</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main(<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; args) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello World&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Fluter 项目初始化</p>\n<ol>\n<li>安装好Flutter 运行命令<code>flutter create helloworld</code></li>\n<li>IDE会自动给你安装依赖，如果没有进入项目根目录 运行<code>flutter pub get</code> 就行</li>\n<li>依赖安装完之后终端继续运行 <code>flutter run</code></li>\n</ol>\n</li>\n<li>\n<p>Flutter 目录结构说明</p>\n<p><img src=\"http://blogimage.lemonlife.top/201910180132_872.png?/\" alt=\"\" /></p>\n<ol>\n<li>\n<p>打包时候要用的包，包括修改应用名、图标、加密打包、之类的<code>android</code> <code>ios</code></p>\n</li>\n<li>\n<p>代码主文件<code>lib</code> 目录初始只有一个<code>main</code>文件</p>\n</li>\n<li>\n<p><code>test</code> 测试文件夹 ，这个删了都可以的不影响项目</p>\n</li>\n<li>\n<p>依赖文件<code>pubspec.yaml</code> ，里面写了项目需要哪些依赖 和引用了哪些静态资源（字体，图片等）</p>\n</li>\n</ol>\n</li>\n<li>\n<p>Flutter <code>main</code> 文件分析</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// This widget is the root of your application.</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _incrementCounter() &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _counter++;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(widget.title),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;<span class=\"subst\">$_counter</span>&#x27;</span>,</span><br><span class=\"line\">              style: Theme.of(context).textTheme.display1,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">        onPressed: _incrementCounter,</span><br><span class=\"line\">        tooltip: <span class=\"string\">&#x27;Increment&#x27;</span>,</span><br><span class=\"line\">        child: Icon(Icons.add),</span><br><span class=\"line\">      ), </span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"项目中使用路由\"><a class=\"markdownIt-Anchor\" href=\"#项目中使用路由\"></a> 项目中使用路由</h2>\n<ul>\n<li>静态路由</li>\n<li>动态路由</li>\n<li>路由传参</li>\n</ul>\n<h2 id=\"页面状态管理\"><a class=\"markdownIt-Anchor\" href=\"#页面状态管理\"></a> 页面状态管理</h2>\n<h4 id=\"前端基础概念\"><a class=\"markdownIt-Anchor\" href=\"#前端基础概念\"></a> 前端基础概念</h4>\n<ol>\n<li>页面</li>\n<li>组件</li>\n<li>上下文</li>\n<li>数据与状态</li>\n</ol>\n<h3 id=\"不使用依赖的原生管理方案\"><a class=\"markdownIt-Anchor\" href=\"#不使用依赖的原生管理方案\"></a> 不使用依赖的原生管理方案</h3>\n<h3 id=\"使用evenbus\"><a class=\"markdownIt-Anchor\" href=\"#使用evenbus\"></a> 使用EvenBus</h3>\n<h3 id=\"使用provider\"><a class=\"markdownIt-Anchor\" href=\"#使用provider\"></a> 使用Provider</h3>\n<h3 id=\"其他框框\"><a class=\"markdownIt-Anchor\" href=\"#其他框框\"></a> 其他框框</h3>\n<h2 id=\"详解provider-页面状态管理方案\"><a class=\"markdownIt-Anchor\" href=\"#详解provider-页面状态管理方案\"></a> 详解Provider 页面状态管理方案</h2>\n<blockquote>\n<p>未完待续。。。</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"TCP/IP","date":"2020-02-11T03:54:48.000Z","_content":"### OSi 7层网络模型\n> 为了解耦而分层。OSI的7层模型中的 `表示层和会话层` 被封装在 TCP/IP 的应用层。TCP/IP中的 `传输层，网络层，数据控制层，物理层` 都由操作系统内核实现。\n### TCP特点\n  - 面向连接的可靠的传输协议。\n  - ，\n\n\n![模型](http://blogimage.lemonlife.top/202002111209_27.png?/)\n### 三次握手/四次挥手\n> 我方应用层去调用我方传输控制层。我方传输控制层生成想要握手的第一个包`sync`。\n> 对方传输控制层接收到消息后，产生`sync+ack`包，发送回我方。\n> 我发 把`ack`包返回给服务器。\n\n**序列号seq：**占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。\n**确认号ack：**占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号(仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效)\n**同步SYN：**连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。\n\n**终止FIN：** 用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接\n\n![三次握手模型](http://blogimage.lemonlife.top/202002111332_949.png?/)\n\n![四次挥手模型](http://blogimage.lemonlife.top/202002111331_376.png?/)\n\n![](http://blogimage.lemonlife.top/202002111335_985.png?/)\n\n![](http://blogimage.lemonlife.top/202002111337_197.png?/)\n\n","source":"_posts/computer-networks.md","raw":"---\ntitle: TCP/IP\ndate: 2020-02-11 11:54:48\ntags:\n  - 计算机网络\n---\n### OSi 7层网络模型\n> 为了解耦而分层。OSI的7层模型中的 `表示层和会话层` 被封装在 TCP/IP 的应用层。TCP/IP中的 `传输层，网络层，数据控制层，物理层` 都由操作系统内核实现。\n### TCP特点\n  - 面向连接的可靠的传输协议。\n  - ，\n\n\n![模型](http://blogimage.lemonlife.top/202002111209_27.png?/)\n### 三次握手/四次挥手\n> 我方应用层去调用我方传输控制层。我方传输控制层生成想要握手的第一个包`sync`。\n> 对方传输控制层接收到消息后，产生`sync+ack`包，发送回我方。\n> 我发 把`ack`包返回给服务器。\n\n**序列号seq：**占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。\n**确认号ack：**占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号(仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效)\n**同步SYN：**连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。\n\n**终止FIN：** 用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接\n\n![三次握手模型](http://blogimage.lemonlife.top/202002111332_949.png?/)\n\n![四次挥手模型](http://blogimage.lemonlife.top/202002111331_376.png?/)\n\n![](http://blogimage.lemonlife.top/202002111335_985.png?/)\n\n![](http://blogimage.lemonlife.top/202002111337_197.png?/)\n\n","slug":"computer-networks","published":1,"updated":"2021-08-07T01:59:03.339Z","_id":"cl4ince670005cgufetyfhqt1","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"osi-7层网络模型\"><a class=\"markdownIt-Anchor\" href=\"#osi-7层网络模型\"></a> OSi 7层网络模型</h3>\n<blockquote>\n<p>为了解耦而分层。OSI的7层模型中的 <code>表示层和会话层</code> 被封装在 TCP/IP 的应用层。TCP/IP中的 <code>传输层，网络层，数据控制层，物理层</code> 都由操作系统内核实现。</p>\n</blockquote>\n<h3 id=\"tcp特点\"><a class=\"markdownIt-Anchor\" href=\"#tcp特点\"></a> TCP特点</h3>\n<ul>\n<li>面向连接的可靠的传输协议。</li>\n<li>，</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202002111209_27.png?/\" alt=\"模型\" /></p>\n<h3 id=\"三次握手四次挥手\"><a class=\"markdownIt-Anchor\" href=\"#三次握手四次挥手\"></a> 三次握手/四次挥手</h3>\n<blockquote>\n<p>我方应用层去调用我方传输控制层。我方传输控制层生成想要握手的第一个包<code>sync</code>。<br />\n对方传输控制层接收到消息后，产生<code>sync+ack</code>包，发送回我方。<br />\n我发 把<code>ack</code>包返回给服务器。</p>\n</blockquote>\n<p>**序列号seq：**占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。<br />\n**确认号ack：**占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号(仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效)<br />\n**同步SYN：**连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。</p>\n<p><strong>终止FIN：</strong> 用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002111332_949.png?/\" alt=\"三次握手模型\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202002111331_376.png?/\" alt=\"四次挥手模型\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202002111335_985.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202002111337_197.png?/\" alt=\"\" /></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"osi-7层网络模型\"><a class=\"markdownIt-Anchor\" href=\"#osi-7层网络模型\"></a> OSi 7层网络模型</h3>\n<blockquote>\n<p>为了解耦而分层。OSI的7层模型中的 <code>表示层和会话层</code> 被封装在 TCP/IP 的应用层。TCP/IP中的 <code>传输层，网络层，数据控制层，物理层</code> 都由操作系统内核实现。</p>\n</blockquote>\n<h3 id=\"tcp特点\"><a class=\"markdownIt-Anchor\" href=\"#tcp特点\"></a> TCP特点</h3>\n<ul>\n<li>面向连接的可靠的传输协议。</li>\n<li>，</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202002111209_27.png?/\" alt=\"模型\" /></p>\n<h3 id=\"三次握手四次挥手\"><a class=\"markdownIt-Anchor\" href=\"#三次握手四次挥手\"></a> 三次握手/四次挥手</h3>\n<blockquote>\n<p>我方应用层去调用我方传输控制层。我方传输控制层生成想要握手的第一个包<code>sync</code>。<br />\n对方传输控制层接收到消息后，产生<code>sync+ack</code>包，发送回我方。<br />\n我发 把<code>ack</code>包返回给服务器。</p>\n</blockquote>\n<p>**序列号seq：**占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的第一个字节的数据编号。<br />\n**确认号ack：**占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段最后一个字节的编号+1即为确认号(仅当ACK=1时，确认号字段才有效。ACK=0时，确认号无效)<br />\n**同步SYN：**连接建立时用于同步序号。当SYN=1，ACK=0时表示：这是一个连接请求报文段。若同意连接，则在响应报文段中使得SYN=1，ACK=1。因此，SYN=1表示这是一个连接请求，或连接接受报文。SYN这个标志位只有在TCP建产连接时才会被置1，握手完成后SYN标志位被置0。</p>\n<p><strong>终止FIN：</strong> 用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002111332_949.png?/\" alt=\"三次握手模型\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202002111331_376.png?/\" alt=\"四次挥手模型\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202002111335_985.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202002111337_197.png?/\" alt=\"\" /></p>\n"},{"title":"设计模式-UML图","date":"2021-08-07T08:39:19.000Z","_content":"\n# UML 类图\n用于描述类和类之间的静态关系，包括类之间的关 `依赖`, `泛化（继承）`，`实现`，`关联`，`聚合` 和 `组合`\n\n## 依赖关系（Dependence）\n一般使用 `----->` 表示依赖关系。依赖关系是类与类之间最基础的关系，只要在 A 类中使用 B 类，就表示 A B 之间存在依赖关系。`CraeteHuman -----> People` 表示类 `CreateHumam` 依赖类 `People`。 \n\n```Java\npublic class People {\n    String name;\n    Integer age;\n    Integer sex;\n    public  People(String name,Integer age,Integer sex){\n        this.name = name;\n        this.age = age;\n        this.sex = sex;\n    }\n}\n\npublic class CreateHuman {\n    public  CreateHuman(People people){\n        System.out.println(people);\n    }\n}\n\n```\n\n![Dependance](https://blogimage.lemonlife.top/20210808192757.png)\n\n## 聚合关系（Aggregation）\n聚合表示整体和部分的关系，常` A ◇—————> B`表示 `B` 是 `A` 的一部分。即只要在 A类中存在以成员变量形式存在的 B 类，就说明 A 与 B 之间存在聚合关系。对于人来说。性格特征是人的一部分。因此可以定义类 `Character`。` People ◇—————> Character`\n```JAVA\n\npublic class Character {\n    private String personality;\n\n    public String getPersonality() {\n        return personality;\n    }\n\n    public void setPersonality(String personality) {\n        this.personality = personality;\n    }\n}\n\npublic class People {\n    private Character character;\n\n    public void setCharacter(Character character) {\n        this.character = character;\n    }\n}\n```\n![聚合 Aggregation](https://blogimage.lemonlife.top/20210808214038.png)\n\n\n\n## 组合（Composite）\n组合表示某个部分是整体的易一部分，是一种更为特殊的聚合关系。A 类与 B 类总是同时创建同时销毁。例如现在每次创建一个`\"善良\"`的人。类 `Character` 和类 `People` 总是同时实例化。常用 `People ♦——————> Character`\n\n```JAVA\npublic class Character {\n    private String personality;\n\n    public String getPersonality() {\n        return personality;\n    }\n\n    public void setPersonality(String personality) {\n        this.personality = personality;\n    }\n\n    public Character(String personality) {\n        this.personality = personality;\n    }\n\n    @Override\n    public String toString() {\n        return \"Character{\" +\n                \"personality='\" + personality + '\\'' +\n                '}';\n    }\n}\n\npublic class People {\n    private Character character = new Character(\"善良\");\n    private  String name;\n\n    public People(String name){\n        this.name = name;\n        this.character = character;\n    }\n\n    public static void main(String[] args) {\n        People people = new People(\"张三\");\n        // People{character=Character{personality='善良'}, name='张三'}\n        System.out.println(people);\n    }\n\n    @Override\n    public String toString() {\n        return \"People{\" +\n                \"character=\" + character +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n\n}\n\n```\n![组合 Composite](https://blogimage.lemonlife.top/20210808214643.png)\n\n## 泛化（继承）（Generalization）\n类型 `A` 继承了类型 `B` 说明 A 于 B 存在继承关系。如 男性（`Man`）作为人类的一种继承自类 `People`。 \n\n```JAVA\npublic class Man extends People {\n    public Man(String name) {\n        super(name);\n    }\n}\n```\n\n![继承 Generalization](https://blogimage.lemonlife.top/20210808215621.png)\n\n## 实现关系 (Implementation)\n实现一般是指类实现了某个特点的标准（接口）。如下 `PeopleInterface`规定了人有自我介绍（` `）的能力， `People` 实现了 `PeopleInterface` 拥有了自我介绍的能力。  \n```JAVA\npublic interface PeopleInterface {\n    public default void introduce(){};\n}\n\npublic class People implements PeopleInterface {\n    public String name;\n    public Integer age;\n\n    public People(String name, Integer age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public void introduce() {\n        System.out.println(\"I am \" + name + \" age is \" + age);\n    }\n\n    public static void main(String[] args) {\n        People zs = new People(\"张三\",3);\n//        I am 张三 age is 3\n        zs.introduce();\n    }\n}\n```\n![实现 Implementation](http://blogimage.lemonlife.top/20210808222006.png)\n## 关联关系 （Association）\n表示类与类之间的联系。是一种特殊的依赖关系。相互之间的一种依赖关系。例如一个人（`People`）生病了可能需要多个医生 `Doctor` 配合治疗。同时医生可能也在治疗多个病人。这种类与类之间存在互相使用的场景。可以定义为关联关系，可以是一对一或者一对多的关系。\n\n```JAVA\npublic class Doctor {\n    public List<People> peoples;\n}\n\npublic class People  {\n   public List<Doctor> doctors;\n}\n``` \n![关联关系 Association](http://blogimage.lemonlife.top/20210808231122.png)","source":"_posts/design-module-uml.md","raw":"---\ntitle: 设计模式-UML图\ndate: 2021-08-07 16:39:19\ntags: 设计模式\n---\n\n# UML 类图\n用于描述类和类之间的静态关系，包括类之间的关 `依赖`, `泛化（继承）`，`实现`，`关联`，`聚合` 和 `组合`\n\n## 依赖关系（Dependence）\n一般使用 `----->` 表示依赖关系。依赖关系是类与类之间最基础的关系，只要在 A 类中使用 B 类，就表示 A B 之间存在依赖关系。`CraeteHuman -----> People` 表示类 `CreateHumam` 依赖类 `People`。 \n\n```Java\npublic class People {\n    String name;\n    Integer age;\n    Integer sex;\n    public  People(String name,Integer age,Integer sex){\n        this.name = name;\n        this.age = age;\n        this.sex = sex;\n    }\n}\n\npublic class CreateHuman {\n    public  CreateHuman(People people){\n        System.out.println(people);\n    }\n}\n\n```\n\n![Dependance](https://blogimage.lemonlife.top/20210808192757.png)\n\n## 聚合关系（Aggregation）\n聚合表示整体和部分的关系，常` A ◇—————> B`表示 `B` 是 `A` 的一部分。即只要在 A类中存在以成员变量形式存在的 B 类，就说明 A 与 B 之间存在聚合关系。对于人来说。性格特征是人的一部分。因此可以定义类 `Character`。` People ◇—————> Character`\n```JAVA\n\npublic class Character {\n    private String personality;\n\n    public String getPersonality() {\n        return personality;\n    }\n\n    public void setPersonality(String personality) {\n        this.personality = personality;\n    }\n}\n\npublic class People {\n    private Character character;\n\n    public void setCharacter(Character character) {\n        this.character = character;\n    }\n}\n```\n![聚合 Aggregation](https://blogimage.lemonlife.top/20210808214038.png)\n\n\n\n## 组合（Composite）\n组合表示某个部分是整体的易一部分，是一种更为特殊的聚合关系。A 类与 B 类总是同时创建同时销毁。例如现在每次创建一个`\"善良\"`的人。类 `Character` 和类 `People` 总是同时实例化。常用 `People ♦——————> Character`\n\n```JAVA\npublic class Character {\n    private String personality;\n\n    public String getPersonality() {\n        return personality;\n    }\n\n    public void setPersonality(String personality) {\n        this.personality = personality;\n    }\n\n    public Character(String personality) {\n        this.personality = personality;\n    }\n\n    @Override\n    public String toString() {\n        return \"Character{\" +\n                \"personality='\" + personality + '\\'' +\n                '}';\n    }\n}\n\npublic class People {\n    private Character character = new Character(\"善良\");\n    private  String name;\n\n    public People(String name){\n        this.name = name;\n        this.character = character;\n    }\n\n    public static void main(String[] args) {\n        People people = new People(\"张三\");\n        // People{character=Character{personality='善良'}, name='张三'}\n        System.out.println(people);\n    }\n\n    @Override\n    public String toString() {\n        return \"People{\" +\n                \"character=\" + character +\n                \", name='\" + name + '\\'' +\n                '}';\n    }\n\n}\n\n```\n![组合 Composite](https://blogimage.lemonlife.top/20210808214643.png)\n\n## 泛化（继承）（Generalization）\n类型 `A` 继承了类型 `B` 说明 A 于 B 存在继承关系。如 男性（`Man`）作为人类的一种继承自类 `People`。 \n\n```JAVA\npublic class Man extends People {\n    public Man(String name) {\n        super(name);\n    }\n}\n```\n\n![继承 Generalization](https://blogimage.lemonlife.top/20210808215621.png)\n\n## 实现关系 (Implementation)\n实现一般是指类实现了某个特点的标准（接口）。如下 `PeopleInterface`规定了人有自我介绍（` `）的能力， `People` 实现了 `PeopleInterface` 拥有了自我介绍的能力。  \n```JAVA\npublic interface PeopleInterface {\n    public default void introduce(){};\n}\n\npublic class People implements PeopleInterface {\n    public String name;\n    public Integer age;\n\n    public People(String name, Integer age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public void introduce() {\n        System.out.println(\"I am \" + name + \" age is \" + age);\n    }\n\n    public static void main(String[] args) {\n        People zs = new People(\"张三\",3);\n//        I am 张三 age is 3\n        zs.introduce();\n    }\n}\n```\n![实现 Implementation](http://blogimage.lemonlife.top/20210808222006.png)\n## 关联关系 （Association）\n表示类与类之间的联系。是一种特殊的依赖关系。相互之间的一种依赖关系。例如一个人（`People`）生病了可能需要多个医生 `Doctor` 配合治疗。同时医生可能也在治疗多个病人。这种类与类之间存在互相使用的场景。可以定义为关联关系，可以是一对一或者一对多的关系。\n\n```JAVA\npublic class Doctor {\n    public List<People> peoples;\n}\n\npublic class People  {\n   public List<Doctor> doctors;\n}\n``` \n![关联关系 Association](http://blogimage.lemonlife.top/20210808231122.png)","slug":"design-module-uml","published":1,"updated":"2022-06-17T16:39:34.655Z","_id":"cl4ince680006cguf105hgjdw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"uml-类图\"><a class=\"markdownIt-Anchor\" href=\"#uml-类图\"></a> UML 类图</h1>\n<p>用于描述类和类之间的静态关系，包括类之间的关 <code>依赖</code>, <code>泛化（继承）</code>，<code>实现</code>，<code>关联</code>，<code>聚合</code> 和 <code>组合</code></p>\n<h2 id=\"依赖关系dependence\"><a class=\"markdownIt-Anchor\" href=\"#依赖关系dependence\"></a> 依赖关系（Dependence）</h2>\n<p>一般使用 <code>-----&gt;</code> 表示依赖关系。依赖关系是类与类之间最基础的关系，只要在 A 类中使用 B 类，就表示 A B 之间存在依赖关系。<code>CraeteHuman -----&gt; People</code> 表示类 <code>CreateHumam</code> 依赖类 <code>People</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    Integer age;</span><br><span class=\"line\">    Integer sex;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"title function_\">People</span><span class=\"params\">(String name,Integer age,Integer sex)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateHuman</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"title function_\">CreateHuman</span><span class=\"params\">(People people)</span>&#123;</span><br><span class=\"line\">        System.out.println(people);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20210808192757.png\" alt=\"Dependance\" /></p>\n<h2 id=\"聚合关系aggregation\"><a class=\"markdownIt-Anchor\" href=\"#聚合关系aggregation\"></a> 聚合关系（Aggregation）</h2>\n<p>聚合表示整体和部分的关系，常<code>A ◇—————&gt; B</code>表示 <code>B</code> 是 <code>A</code> 的一部分。即只要在 A类中存在以成员变量形式存在的 B 类，就说明 A 与 B 之间存在聚合关系。对于人来说。性格特征是人的一部分。因此可以定义类 <code>Character</code>。<code>People ◇—————&gt; Character</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String personality;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPersonality</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> personality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPersonality</span><span class=\"params\">(String personality)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.personality = personality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Character character;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCharacter</span><span class=\"params\">(Character character)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.character = character;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20210808214038.png\" alt=\"聚合 Aggregation\" /></p>\n<h2 id=\"组合composite\"><a class=\"markdownIt-Anchor\" href=\"#组合composite\"></a> 组合（Composite）</h2>\n<p>组合表示某个部分是整体的易一部分，是一种更为特殊的聚合关系。A 类与 B 类总是同时创建同时销毁。例如现在每次创建一个<code>&quot;善良&quot;</code>的人。类 <code>Character</code> 和类 <code>People</code> 总是同时实例化。常用 <code>People ♦——————&gt; Character</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String personality;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPersonality</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> personality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPersonality</span><span class=\"params\">(String personality)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.personality = personality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Character</span><span class=\"params\">(String personality)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.personality = personality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Character&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;personality=&#x27;&quot;</span> + personality + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Character</span> <span class=\"variable\">character</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>(<span class=\"string\">&quot;善良&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">People</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.character = character;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">People</span> <span class=\"variable\">people</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">People</span>(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// People&#123;character=Character&#123;personality=&#x27;善良&#x27;&#125;, name=&#x27;张三&#x27;&#125;</span></span><br><span class=\"line\">        System.out.println(people);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;People&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;character=&quot;</span> + character +</span><br><span class=\"line\">                <span class=\"string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20210808214643.png\" alt=\"组合 Composite\" /></p>\n<h2 id=\"泛化继承generalization\"><a class=\"markdownIt-Anchor\" href=\"#泛化继承generalization\"></a> 泛化（继承）（Generalization）</h2>\n<p>类型 <code>A</code> 继承了类型 <code>B</code> 说明 A 于 B 存在继承关系。如 男性（<code>Man</code>）作为人类的一种继承自类 <code>People</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Man</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20210808215621.png\" alt=\"继承 Generalization\" /></p>\n<h2 id=\"实现关系-implementation\"><a class=\"markdownIt-Anchor\" href=\"#实现关系-implementation\"></a> 实现关系 (Implementation)</h2>\n<p>实现一般是指类实现了某个特点的标准（接口）。如下 <code>PeopleInterface</code>规定了人有自我介绍（<code></code>）的能力， <code>People</code> 实现了 <code>PeopleInterface</code> 拥有了自我介绍的能力。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PeopleInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">introduce</span><span class=\"params\">()</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">People</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PeopleInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">People</span><span class=\"params\">(String name, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">introduce</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I am &quot;</span> + name + <span class=\"string\">&quot; age is &quot;</span> + age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">People</span> <span class=\"variable\">zs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">People</span>(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//        I am 张三 age is 3</span></span><br><span class=\"line\">        zs.introduce();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/20210808222006.png\" alt=\"实现 Implementation\" /></p>\n<h2 id=\"关联关系-association\"><a class=\"markdownIt-Anchor\" href=\"#关联关系-association\"></a> 关联关系 （Association）</h2>\n<p>表示类与类之间的联系。是一种特殊的依赖关系。相互之间的一种依赖关系。例如一个人（<code>People</code>）生病了可能需要多个医生 <code>Doctor</code> 配合治疗。同时医生可能也在治疗多个病人。这种类与类之间存在互相使用的场景。可以定义为关联关系，可以是一对一或者一对多的关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Doctor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;People&gt; peoples;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">People</span>  &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> List&lt;Doctor&gt; doctors;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/20210808231122.png\" alt=\"关联关系 Association\" /></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"uml-类图\"><a class=\"markdownIt-Anchor\" href=\"#uml-类图\"></a> UML 类图</h1>\n<p>用于描述类和类之间的静态关系，包括类之间的关 <code>依赖</code>, <code>泛化（继承）</code>，<code>实现</code>，<code>关联</code>，<code>聚合</code> 和 <code>组合</code></p>\n<h2 id=\"依赖关系dependence\"><a class=\"markdownIt-Anchor\" href=\"#依赖关系dependence\"></a> 依赖关系（Dependence）</h2>\n<p>一般使用 <code>-----&gt;</code> 表示依赖关系。依赖关系是类与类之间最基础的关系，只要在 A 类中使用 B 类，就表示 A B 之间存在依赖关系。<code>CraeteHuman -----&gt; People</code> 表示类 <code>CreateHumam</code> 依赖类 <code>People</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    Integer age;</span><br><span class=\"line\">    Integer sex;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"title function_\">People</span><span class=\"params\">(String name,Integer age,Integer sex)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateHuman</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"title function_\">CreateHuman</span><span class=\"params\">(People people)</span>&#123;</span><br><span class=\"line\">        System.out.println(people);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20210808192757.png\" alt=\"Dependance\" /></p>\n<h2 id=\"聚合关系aggregation\"><a class=\"markdownIt-Anchor\" href=\"#聚合关系aggregation\"></a> 聚合关系（Aggregation）</h2>\n<p>聚合表示整体和部分的关系，常<code>A ◇—————&gt; B</code>表示 <code>B</code> 是 <code>A</code> 的一部分。即只要在 A类中存在以成员变量形式存在的 B 类，就说明 A 与 B 之间存在聚合关系。对于人来说。性格特征是人的一部分。因此可以定义类 <code>Character</code>。<code>People ◇—————&gt; Character</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String personality;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPersonality</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> personality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPersonality</span><span class=\"params\">(String personality)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.personality = personality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Character character;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCharacter</span><span class=\"params\">(Character character)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.character = character;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20210808214038.png\" alt=\"聚合 Aggregation\" /></p>\n<h2 id=\"组合composite\"><a class=\"markdownIt-Anchor\" href=\"#组合composite\"></a> 组合（Composite）</h2>\n<p>组合表示某个部分是整体的易一部分，是一种更为特殊的聚合关系。A 类与 B 类总是同时创建同时销毁。例如现在每次创建一个<code>&quot;善良&quot;</code>的人。类 <code>Character</code> 和类 <code>People</code> 总是同时实例化。常用 <code>People ♦——————&gt; Character</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Character</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String personality;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPersonality</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> personality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPersonality</span><span class=\"params\">(String personality)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.personality = personality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Character</span><span class=\"params\">(String personality)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.personality = personality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Character&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;personality=&#x27;&quot;</span> + personality + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Character</span> <span class=\"variable\">character</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>(<span class=\"string\">&quot;善良&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span>  String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">People</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.character = character;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">People</span> <span class=\"variable\">people</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">People</span>(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// People&#123;character=Character&#123;personality=&#x27;善良&#x27;&#125;, name=&#x27;张三&#x27;&#125;</span></span><br><span class=\"line\">        System.out.println(people);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;People&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;character=&quot;</span> + character +</span><br><span class=\"line\">                <span class=\"string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20210808214643.png\" alt=\"组合 Composite\" /></p>\n<h2 id=\"泛化继承generalization\"><a class=\"markdownIt-Anchor\" href=\"#泛化继承generalization\"></a> 泛化（继承）（Generalization）</h2>\n<p>类型 <code>A</code> 继承了类型 <code>B</code> 说明 A 于 B 存在继承关系。如 男性（<code>Man</code>）作为人类的一种继承自类 <code>People</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Man</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20210808215621.png\" alt=\"继承 Generalization\" /></p>\n<h2 id=\"实现关系-implementation\"><a class=\"markdownIt-Anchor\" href=\"#实现关系-implementation\"></a> 实现关系 (Implementation)</h2>\n<p>实现一般是指类实现了某个特点的标准（接口）。如下 <code>PeopleInterface</code>规定了人有自我介绍（<code></code>）的能力， <code>People</code> 实现了 <code>PeopleInterface</code> 拥有了自我介绍的能力。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">PeopleInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">introduce</span><span class=\"params\">()</span>&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">People</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PeopleInterface</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">People</span><span class=\"params\">(String name, Integer age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">introduce</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I am &quot;</span> + name + <span class=\"string\">&quot; age is &quot;</span> + age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">People</span> <span class=\"variable\">zs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">People</span>(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//        I am 张三 age is 3</span></span><br><span class=\"line\">        zs.introduce();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/20210808222006.png\" alt=\"实现 Implementation\" /></p>\n<h2 id=\"关联关系-association\"><a class=\"markdownIt-Anchor\" href=\"#关联关系-association\"></a> 关联关系 （Association）</h2>\n<p>表示类与类之间的联系。是一种特殊的依赖关系。相互之间的一种依赖关系。例如一个人（<code>People</code>）生病了可能需要多个医生 <code>Doctor</code> 配合治疗。同时医生可能也在治疗多个病人。这种类与类之间存在互相使用的场景。可以定义为关联关系，可以是一对一或者一对多的关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Doctor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;People&gt; peoples;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">People</span>  &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> List&lt;Doctor&gt; doctors;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/20210808231122.png\" alt=\"关联关系 Association\" /></p>\n"},{"title":"前端全链路性能优化","date":"2021-01-10T09:22:27.000Z","_content":"## 静态资源优化\n### 图片优化\n#### 介绍\n- JPG 一种对彩色图片的有损压缩,不支持透明度,非常适合颜色丰富的图片,彩色图大焦点图，通栏banner图，结构不规则的图形\n- PNG 是一种无损压缩的位图模式，支持索引灰度，RGB三种格式以及透明度，因为是无损所以体积大不适合做为彩色大图，适合图标，纯色的。\n- GIF 采用8位色(256种颜色) 重现真正的彩色的图像，采用LZW压缩算法进行编码。\n仅支持 完全透明或者完全不透明，适合动画类型的图标（不过一般可能更倾向css完成）\n- Webp 现代化图像格式，结合了一部分jpg和png的特点，适合用于图形和半透明图像，8位，颜色不多。\n#### 相关工具\n1. png压缩\n\nhttps://www.npmjs.com/package/node-pngquant-native\n\n```bash\nnpm i node-pngquant-native\n```\n2. jpg压缩\n\nhttps://www.npmjs.com/package/jpegtran\n\n```bash\nnpm i jpegtran\n```\n> 建议使用的时候 再去网上查查看\n\n#### 图片在网页中显示\n\n1. 控制图片大小 \n- js事件绑定\n- css媒体查询\n- img srcset 属性\n\n2. 图像逐步加重\n- 统一使用占位符\n- 使用LQRP 低质量图像占位符\n```\nnpm install lqip \n```\n- 使用SQIP 基于SVG的低质量图像占位符\n```\nnpm install sqip\n```\n3. 其他方案\n- Web Font\n- Data URI (base64)\n- image spriting (雪碧图 不推荐)\n\n### HTML优化\n\n- 代码压缩\n- 减少嵌套层数\n\n#### 文件优化 \n1. CSS文件放在页面头部\n\n> CSS的加载不会阻止DOM tree 解析，但是会阻止DOM Tree渲染 ，也会阻止后面JS的执行，放在头部可减少浏览器重排的次数，如果放在底部，就要等待最后一个css下载完成，会出现白屏现象影响用户体验。\n\n2. JS放在底部\n- 防止JS的加载解析执行阻塞页面后续元素的正常渲染\n\n3. 建议设置 favicon.ico 图标\n\n4. 增加首屏的必要的css 和js ,如骨架屏 [https://m.weibo.cn/](https://m.weibo.cn/)\n\n#### 提升CSS渲染性能\n- 谨慎使用 expensive 的属性 \n`nth-child` 伪类;`position:fixed`定位\n- 尽量减少样式层数\n- 避免占用过多cup 如 `text-indnt: -9999px`\n- css3 动画或者3D属性 占用GPU\n#### JS优化\n- 合理使用缓存\n- JS动画优化\n- 代码优化避免使用eval\n\n#### JS模块化\n1. CommonJS \n> 除了web浏览器之外的js,如 NodeJS\n2. AMD (Asynchronous Module Definition) (异步模块定义) 规范\nRequireJS 模块加载器 SeaJS\n3. CMD模块 通用模块定义,cjs\n3. ES6 import\n","source":"_posts/frontend-optimization.md","raw":"---\ntitle: 前端全链路性能优化\ndate: 2021-01-10 17:22:27\ntags: \n  - 前端\n  - 性能优化\n---\n## 静态资源优化\n### 图片优化\n#### 介绍\n- JPG 一种对彩色图片的有损压缩,不支持透明度,非常适合颜色丰富的图片,彩色图大焦点图，通栏banner图，结构不规则的图形\n- PNG 是一种无损压缩的位图模式，支持索引灰度，RGB三种格式以及透明度，因为是无损所以体积大不适合做为彩色大图，适合图标，纯色的。\n- GIF 采用8位色(256种颜色) 重现真正的彩色的图像，采用LZW压缩算法进行编码。\n仅支持 完全透明或者完全不透明，适合动画类型的图标（不过一般可能更倾向css完成）\n- Webp 现代化图像格式，结合了一部分jpg和png的特点，适合用于图形和半透明图像，8位，颜色不多。\n#### 相关工具\n1. png压缩\n\nhttps://www.npmjs.com/package/node-pngquant-native\n\n```bash\nnpm i node-pngquant-native\n```\n2. jpg压缩\n\nhttps://www.npmjs.com/package/jpegtran\n\n```bash\nnpm i jpegtran\n```\n> 建议使用的时候 再去网上查查看\n\n#### 图片在网页中显示\n\n1. 控制图片大小 \n- js事件绑定\n- css媒体查询\n- img srcset 属性\n\n2. 图像逐步加重\n- 统一使用占位符\n- 使用LQRP 低质量图像占位符\n```\nnpm install lqip \n```\n- 使用SQIP 基于SVG的低质量图像占位符\n```\nnpm install sqip\n```\n3. 其他方案\n- Web Font\n- Data URI (base64)\n- image spriting (雪碧图 不推荐)\n\n### HTML优化\n\n- 代码压缩\n- 减少嵌套层数\n\n#### 文件优化 \n1. CSS文件放在页面头部\n\n> CSS的加载不会阻止DOM tree 解析，但是会阻止DOM Tree渲染 ，也会阻止后面JS的执行，放在头部可减少浏览器重排的次数，如果放在底部，就要等待最后一个css下载完成，会出现白屏现象影响用户体验。\n\n2. JS放在底部\n- 防止JS的加载解析执行阻塞页面后续元素的正常渲染\n\n3. 建议设置 favicon.ico 图标\n\n4. 增加首屏的必要的css 和js ,如骨架屏 [https://m.weibo.cn/](https://m.weibo.cn/)\n\n#### 提升CSS渲染性能\n- 谨慎使用 expensive 的属性 \n`nth-child` 伪类;`position:fixed`定位\n- 尽量减少样式层数\n- 避免占用过多cup 如 `text-indnt: -9999px`\n- css3 动画或者3D属性 占用GPU\n#### JS优化\n- 合理使用缓存\n- JS动画优化\n- 代码优化避免使用eval\n\n#### JS模块化\n1. CommonJS \n> 除了web浏览器之外的js,如 NodeJS\n2. AMD (Asynchronous Module Definition) (异步模块定义) 规范\nRequireJS 模块加载器 SeaJS\n3. CMD模块 通用模块定义,cjs\n3. ES6 import\n","slug":"frontend-optimization","published":1,"updated":"2021-08-07T01:59:03.340Z","_id":"cl4ince690007cguf4uu16q68","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"静态资源优化\"><a class=\"markdownIt-Anchor\" href=\"#静态资源优化\"></a> 静态资源优化</h2>\n<h3 id=\"图片优化\"><a class=\"markdownIt-Anchor\" href=\"#图片优化\"></a> 图片优化</h3>\n<h4 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h4>\n<ul>\n<li>JPG 一种对彩色图片的有损压缩,不支持透明度,非常适合颜色丰富的图片,彩色图大焦点图，通栏banner图，结构不规则的图形</li>\n<li>PNG 是一种无损压缩的位图模式，支持索引灰度，RGB三种格式以及透明度，因为是无损所以体积大不适合做为彩色大图，适合图标，纯色的。</li>\n<li>GIF 采用8位色(256种颜色) 重现真正的彩色的图像，采用LZW压缩算法进行编码。<br />\n仅支持 完全透明或者完全不透明，适合动画类型的图标（不过一般可能更倾向css完成）</li>\n<li>Webp 现代化图像格式，结合了一部分jpg和png的特点，适合用于图形和半透明图像，8位，颜色不多。</li>\n</ul>\n<h4 id=\"相关工具\"><a class=\"markdownIt-Anchor\" href=\"#相关工具\"></a> 相关工具</h4>\n<ol>\n<li>png压缩</li>\n</ol>\n<p><a href=\"https://www.npmjs.com/package/node-pngquant-native\">https://www.npmjs.com/package/node-pngquant-native</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i node-pngquant-native</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>jpg压缩</li>\n</ol>\n<p><a href=\"https://www.npmjs.com/package/jpegtran\">https://www.npmjs.com/package/jpegtran</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jpegtran</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>建议使用的时候 再去网上查查看</p>\n</blockquote>\n<h4 id=\"图片在网页中显示\"><a class=\"markdownIt-Anchor\" href=\"#图片在网页中显示\"></a> 图片在网页中显示</h4>\n<ol>\n<li>控制图片大小</li>\n</ol>\n<ul>\n<li>js事件绑定</li>\n<li>css媒体查询</li>\n<li>img srcset 属性</li>\n</ul>\n<ol start=\"2\">\n<li>图像逐步加重</li>\n</ol>\n<ul>\n<li>统一使用占位符</li>\n<li>使用LQRP 低质量图像占位符</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lqip </span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用SQIP 基于SVG的低质量图像占位符</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install sqip</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>其他方案</li>\n</ol>\n<ul>\n<li>Web Font</li>\n<li>Data URI (base64)</li>\n<li>image spriting (雪碧图 不推荐)</li>\n</ul>\n<h3 id=\"html优化\"><a class=\"markdownIt-Anchor\" href=\"#html优化\"></a> HTML优化</h3>\n<ul>\n<li>代码压缩</li>\n<li>减少嵌套层数</li>\n</ul>\n<h4 id=\"文件优化\"><a class=\"markdownIt-Anchor\" href=\"#文件优化\"></a> 文件优化</h4>\n<ol>\n<li>CSS文件放在页面头部</li>\n</ol>\n<blockquote>\n<p>CSS的加载不会阻止DOM tree 解析，但是会阻止DOM Tree渲染 ，也会阻止后面JS的执行，放在头部可减少浏览器重排的次数，如果放在底部，就要等待最后一个css下载完成，会出现白屏现象影响用户体验。</p>\n</blockquote>\n<ol start=\"2\">\n<li>JS放在底部</li>\n</ol>\n<ul>\n<li>防止JS的加载解析执行阻塞页面后续元素的正常渲染</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>建议设置 favicon.ico 图标</p>\n</li>\n<li>\n<p>增加首屏的必要的css 和js ,如骨架屏 <a href=\"https://m.weibo.cn/\">https://m.weibo.cn/</a></p>\n</li>\n</ol>\n<h4 id=\"提升css渲染性能\"><a class=\"markdownIt-Anchor\" href=\"#提升css渲染性能\"></a> 提升CSS渲染性能</h4>\n<ul>\n<li>谨慎使用 expensive 的属性<br />\n<code>nth-child</code> 伪类;<code>position:fixed</code>定位</li>\n<li>尽量减少样式层数</li>\n<li>避免占用过多cup 如 <code>text-indnt: -9999px</code></li>\n<li>css3 动画或者3D属性 占用GPU</li>\n</ul>\n<h4 id=\"js优化\"><a class=\"markdownIt-Anchor\" href=\"#js优化\"></a> JS优化</h4>\n<ul>\n<li>合理使用缓存</li>\n<li>JS动画优化</li>\n<li>代码优化避免使用eval</li>\n</ul>\n<h4 id=\"js模块化\"><a class=\"markdownIt-Anchor\" href=\"#js模块化\"></a> JS模块化</h4>\n<ol>\n<li>CommonJS</li>\n</ol>\n<blockquote>\n<p>除了web浏览器之外的js,如 NodeJS</p>\n</blockquote>\n<ol start=\"2\">\n<li>AMD (Asynchronous Module Definition) (异步模块定义) 规范<br />\nRequireJS 模块加载器 SeaJS</li>\n<li>CMD模块 通用模块定义,cjs</li>\n<li>ES6 import</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"静态资源优化\"><a class=\"markdownIt-Anchor\" href=\"#静态资源优化\"></a> 静态资源优化</h2>\n<h3 id=\"图片优化\"><a class=\"markdownIt-Anchor\" href=\"#图片优化\"></a> 图片优化</h3>\n<h4 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h4>\n<ul>\n<li>JPG 一种对彩色图片的有损压缩,不支持透明度,非常适合颜色丰富的图片,彩色图大焦点图，通栏banner图，结构不规则的图形</li>\n<li>PNG 是一种无损压缩的位图模式，支持索引灰度，RGB三种格式以及透明度，因为是无损所以体积大不适合做为彩色大图，适合图标，纯色的。</li>\n<li>GIF 采用8位色(256种颜色) 重现真正的彩色的图像，采用LZW压缩算法进行编码。<br />\n仅支持 完全透明或者完全不透明，适合动画类型的图标（不过一般可能更倾向css完成）</li>\n<li>Webp 现代化图像格式，结合了一部分jpg和png的特点，适合用于图形和半透明图像，8位，颜色不多。</li>\n</ul>\n<h4 id=\"相关工具\"><a class=\"markdownIt-Anchor\" href=\"#相关工具\"></a> 相关工具</h4>\n<ol>\n<li>png压缩</li>\n</ol>\n<p><a href=\"https://www.npmjs.com/package/node-pngquant-native\">https://www.npmjs.com/package/node-pngquant-native</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i node-pngquant-native</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>jpg压缩</li>\n</ol>\n<p><a href=\"https://www.npmjs.com/package/jpegtran\">https://www.npmjs.com/package/jpegtran</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jpegtran</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>建议使用的时候 再去网上查查看</p>\n</blockquote>\n<h4 id=\"图片在网页中显示\"><a class=\"markdownIt-Anchor\" href=\"#图片在网页中显示\"></a> 图片在网页中显示</h4>\n<ol>\n<li>控制图片大小</li>\n</ol>\n<ul>\n<li>js事件绑定</li>\n<li>css媒体查询</li>\n<li>img srcset 属性</li>\n</ul>\n<ol start=\"2\">\n<li>图像逐步加重</li>\n</ol>\n<ul>\n<li>统一使用占位符</li>\n<li>使用LQRP 低质量图像占位符</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lqip </span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用SQIP 基于SVG的低质量图像占位符</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install sqip</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>其他方案</li>\n</ol>\n<ul>\n<li>Web Font</li>\n<li>Data URI (base64)</li>\n<li>image spriting (雪碧图 不推荐)</li>\n</ul>\n<h3 id=\"html优化\"><a class=\"markdownIt-Anchor\" href=\"#html优化\"></a> HTML优化</h3>\n<ul>\n<li>代码压缩</li>\n<li>减少嵌套层数</li>\n</ul>\n<h4 id=\"文件优化\"><a class=\"markdownIt-Anchor\" href=\"#文件优化\"></a> 文件优化</h4>\n<ol>\n<li>CSS文件放在页面头部</li>\n</ol>\n<blockquote>\n<p>CSS的加载不会阻止DOM tree 解析，但是会阻止DOM Tree渲染 ，也会阻止后面JS的执行，放在头部可减少浏览器重排的次数，如果放在底部，就要等待最后一个css下载完成，会出现白屏现象影响用户体验。</p>\n</blockquote>\n<ol start=\"2\">\n<li>JS放在底部</li>\n</ol>\n<ul>\n<li>防止JS的加载解析执行阻塞页面后续元素的正常渲染</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>建议设置 favicon.ico 图标</p>\n</li>\n<li>\n<p>增加首屏的必要的css 和js ,如骨架屏 <a href=\"https://m.weibo.cn/\">https://m.weibo.cn/</a></p>\n</li>\n</ol>\n<h4 id=\"提升css渲染性能\"><a class=\"markdownIt-Anchor\" href=\"#提升css渲染性能\"></a> 提升CSS渲染性能</h4>\n<ul>\n<li>谨慎使用 expensive 的属性<br />\n<code>nth-child</code> 伪类;<code>position:fixed</code>定位</li>\n<li>尽量减少样式层数</li>\n<li>避免占用过多cup 如 <code>text-indnt: -9999px</code></li>\n<li>css3 动画或者3D属性 占用GPU</li>\n</ul>\n<h4 id=\"js优化\"><a class=\"markdownIt-Anchor\" href=\"#js优化\"></a> JS优化</h4>\n<ul>\n<li>合理使用缓存</li>\n<li>JS动画优化</li>\n<li>代码优化避免使用eval</li>\n</ul>\n<h4 id=\"js模块化\"><a class=\"markdownIt-Anchor\" href=\"#js模块化\"></a> JS模块化</h4>\n<ol>\n<li>CommonJS</li>\n</ol>\n<blockquote>\n<p>除了web浏览器之外的js,如 NodeJS</p>\n</blockquote>\n<ol start=\"2\">\n<li>AMD (Asynchronous Module Definition) (异步模块定义) 规范<br />\nRequireJS 模块加载器 SeaJS</li>\n<li>CMD模块 通用模块定义,cjs</li>\n<li>ES6 import</li>\n</ol>\n"},{"title":"Electron 入门","date":"2020-12-08T09:58:46.000Z","_content":"## Electron 工作原理\nElectron 渲染进程基于 Chromium, Chromium是谷歌浏览器的开源版, 本身也是一个桌面应用，有自己的一些事件进程，例如: `打开关闭窗口` `右键菜单` ……, 把这些处理事件的进程称为主进程,由Browser负责,把负责页面渲染的进程，称为渲染进程。Electron 可以有多个渲染进程。进程之间可以跨进程通信（IPC）","source":"_posts/electron-01.md","raw":"---\ntitle: Electron 入门\ndate: 2020-12-08 17:58:46\ntags:\n  - Electron\n---\n## Electron 工作原理\nElectron 渲染进程基于 Chromium, Chromium是谷歌浏览器的开源版, 本身也是一个桌面应用，有自己的一些事件进程，例如: `打开关闭窗口` `右键菜单` ……, 把这些处理事件的进程称为主进程,由Browser负责,把负责页面渲染的进程，称为渲染进程。Electron 可以有多个渲染进程。进程之间可以跨进程通信（IPC）","slug":"electron-01","published":1,"updated":"2021-08-07T01:59:03.340Z","_id":"cl4ince6a0009cguf6krk3pz4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"electron-工作原理\"><a class=\"markdownIt-Anchor\" href=\"#electron-工作原理\"></a> Electron 工作原理</h2>\n<p>Electron 渲染进程基于 Chromium, Chromium是谷歌浏览器的开源版, 本身也是一个桌面应用，有自己的一些事件进程，例如: <code>打开关闭窗口</code> <code>右键菜单</code> ……, 把这些处理事件的进程称为主进程,由Browser负责,把负责页面渲染的进程，称为渲染进程。Electron 可以有多个渲染进程。进程之间可以跨进程通信（IPC）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"electron-工作原理\"><a class=\"markdownIt-Anchor\" href=\"#electron-工作原理\"></a> Electron 工作原理</h2>\n<p>Electron 渲染进程基于 Chromium, Chromium是谷歌浏览器的开源版, 本身也是一个桌面应用，有自己的一些事件进程，例如: <code>打开关闭窗口</code> <code>右键菜单</code> ……, 把这些处理事件的进程称为主进程,由Browser负责,把负责页面渲染的进程，称为渲染进程。Electron 可以有多个渲染进程。进程之间可以跨进程通信（IPC）</p>\n"},{"title":"数据结构与算法之美","date":"2020-03-19T03:22:30.000Z","_content":"## 数组\n### 定义\n数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。\n### 数组的储存\n由定义可知，计算机给数组开辟一个连续的内存空间，会给数组的首地址，分配一个内存地址，接下来的地址，首地址加上被访问元素之前元素的数据类型大小之和，即`a[i]_address = base_address + i * data_type_size` 如下图我们假设`int`数据,每个数据大小占4个字节\n\n![](http://blogimage.lemonlife.top/202003191137_954.png?/)\n### 数组和链表的区别\n数组区别与链表是数组支持随机访问，随机访问的时间复杂度是O(1);(注意不是查找,查找最适合的是哈希表，不是数组),链表支持元素的快速的插入或者删除。\n\n数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。\n\n而链表恰恰相反，它并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用，所以如果我们申请的是 100MB 大小的链表，根本不会有问题。\n\n![链表和数组的内存分布](http://blogimage.lemonlife.top/202003191427_188.png?/)\n\n> 此篇文章文字，图片资料来源于[极客时间算法与数据结构之美](https://time.geekbang.org/column/intro/126)专题\n> [项目github地址](https://github.com/wangzheng0822/algo)\n\n","source":"_posts/geektime-arithmetic.md","raw":"---\ntitle: 数据结构与算法之美\ndate: 2020-03-19 11:22:30\ntags:\n  - 算法与数据结构\n---\n## 数组\n### 定义\n数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。\n### 数组的储存\n由定义可知，计算机给数组开辟一个连续的内存空间，会给数组的首地址，分配一个内存地址，接下来的地址，首地址加上被访问元素之前元素的数据类型大小之和，即`a[i]_address = base_address + i * data_type_size` 如下图我们假设`int`数据,每个数据大小占4个字节\n\n![](http://blogimage.lemonlife.top/202003191137_954.png?/)\n### 数组和链表的区别\n数组区别与链表是数组支持随机访问，随机访问的时间复杂度是O(1);(注意不是查找,查找最适合的是哈希表，不是数组),链表支持元素的快速的插入或者删除。\n\n数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。\n\n而链表恰恰相反，它并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用，所以如果我们申请的是 100MB 大小的链表，根本不会有问题。\n\n![链表和数组的内存分布](http://blogimage.lemonlife.top/202003191427_188.png?/)\n\n> 此篇文章文字，图片资料来源于[极客时间算法与数据结构之美](https://time.geekbang.org/column/intro/126)专题\n> [项目github地址](https://github.com/wangzheng0822/algo)\n\n","slug":"geektime-arithmetic","published":1,"updated":"2021-08-07T01:59:03.341Z","_id":"cl4ince6b000acgufcrxj0qsv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\"></a> 数组</h2>\n<h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h3>\n<p>数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p>\n<h3 id=\"数组的储存\"><a class=\"markdownIt-Anchor\" href=\"#数组的储存\"></a> 数组的储存</h3>\n<p>由定义可知，计算机给数组开辟一个连续的内存空间，会给数组的首地址，分配一个内存地址，接下来的地址，首地址加上被访问元素之前元素的数据类型大小之和，即<code>a[i]_address = base_address + i * data_type_size</code> 如下图我们假设<code>int</code>数据,每个数据大小占4个字节</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003191137_954.png?/\" alt=\"\" /></p>\n<h3 id=\"数组和链表的区别\"><a class=\"markdownIt-Anchor\" href=\"#数组和链表的区别\"></a> 数组和链表的区别</h3>\n<p>数组区别与链表是数组支持随机访问，随机访问的时间复杂度是O(1);(注意不是查找,查找最适合的是哈希表，不是数组),链表支持元素的快速的插入或者删除。</p>\n<p>数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。</p>\n<p>而链表恰恰相反，它并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用，所以如果我们申请的是 100MB 大小的链表，根本不会有问题。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003191427_188.png?/\" alt=\"链表和数组的内存分布\" /></p>\n<blockquote>\n<p>此篇文章文字，图片资料来源于<a href=\"https://time.geekbang.org/column/intro/126\">极客时间算法与数据结构之美</a>专题<br />\n<a href=\"https://github.com/wangzheng0822/algo\">项目github地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\"></a> 数组</h2>\n<h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h3>\n<p>数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p>\n<h3 id=\"数组的储存\"><a class=\"markdownIt-Anchor\" href=\"#数组的储存\"></a> 数组的储存</h3>\n<p>由定义可知，计算机给数组开辟一个连续的内存空间，会给数组的首地址，分配一个内存地址，接下来的地址，首地址加上被访问元素之前元素的数据类型大小之和，即<code>a[i]_address = base_address + i * data_type_size</code> 如下图我们假设<code>int</code>数据,每个数据大小占4个字节</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003191137_954.png?/\" alt=\"\" /></p>\n<h3 id=\"数组和链表的区别\"><a class=\"markdownIt-Anchor\" href=\"#数组和链表的区别\"></a> 数组和链表的区别</h3>\n<p>数组区别与链表是数组支持随机访问，随机访问的时间复杂度是O(1);(注意不是查找,查找最适合的是哈希表，不是数组),链表支持元素的快速的插入或者删除。</p>\n<p>数组需要一块连续的内存空间来存储，对内存的要求比较高。如果我们申请一个 100MB 大小的数组，当内存中没有连续的、足够大的存储空间时，即便内存的剩余总可用空间大于 100MB，仍然会申请失败。</p>\n<p>而链表恰恰相反，它并不需要一块连续的内存空间，它通过“指针”将一组零散的内存块串联起来使用，所以如果我们申请的是 100MB 大小的链表，根本不会有问题。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003191427_188.png?/\" alt=\"链表和数组的内存分布\" /></p>\n<blockquote>\n<p>此篇文章文字，图片资料来源于<a href=\"https://time.geekbang.org/column/intro/126\">极客时间算法与数据结构之美</a>专题<br />\n<a href=\"https://github.com/wangzheng0822/algo\">项目github地址</a></p>\n</blockquote>\n"},{"title":"基金","date":"2020-12-03T05:04:04.000Z","_content":"## 介绍\n由于互联网技术的发展，早期的封闭式基金，已经退出了历史舞台，被开放式基金代替。开放式基金根据基金类型可分为\n\n- 股票型基金 ( 80% 的资金用于股票)\n- 混合型基金 \n   - 偏股型基金 (股票占比 >= 50% )\n   - 偏债型基金 (债券占比 >= 50% )\n   - 平衡型基金 (股票债券占比 <= 50% )\n   - 灵活型基金 (占比无要求)\n- 债券型基金 ( 80% 的基金用于债券)\n- 货币市场基金 \n\n> 投资风险从高到底， 股票型基金 混合型基金 债券型基金 货币基金 \n\n### 金融市场\n\n资本市场： 股票市场和一年期以上的债券市场，称为资本市场。\n \n> 包括 股票 基金 长期债券\n\n货币市场：只能交易短期债券和各类票据\n\n> 包括 短期债券 央票 银行汇票 债券回购 银行存款 \n\n\n### 基金名称解析\n\n1.  基金公司的名称\n  \n    如: 天弘 华夏 易方达 南方 工银瑞信 建信 博时 嘉实 招商 广发 汇添富 鹏华 富国 华宝兴业 …… \n\n2. 基金特点或者偏好 (修饰词)\n   如：互联网主题 行业轮动 轻资产 健康环保 经济转型 中小盘 ……\n\n3. 基金的投资范围\n   如：货币 债券 纯债 可转债 混合 灵活配置 股票 指数 增强指数 量化 海外 美元 ETF LOF QDII ……\n\n## 货币基金\n#### 申购时间\n一般选择周日晚~周四下午3点之前买入货币基金。\n#### 七日年化收益\n货币基金都维持过去七天的收益水平不变,持有一年后的整体收益。因为货币基金的值每天变换，所以七日年化收益一般是虚拟预估,不具有代表性\n#### 每万份收益\n或基净值永远是1元,所以每万份收益,就是1w元在当天的收入。\n#### 累计回报\n货币基金本来回报率就稳定不高，看短期收益没有任何意义，应该查看基金累计半年或者一年的收益。\n\n---\n登录 天天基金网 点击基金排行,然后再点击,货币基金排行可以查看到货币基金的累计收益\n\n![](https://blogimage.lemonlife.top/202012041330_247.png)\n\n![货币基金排行](https://blogimage.lemonlife.top/202012041333_376.png)\n\n![余额宝货币基金规模](https://blogimage.lemonlife.top/202012041336_84.png)\n\n### 货基类型\n\n**A:** 1000元起买,余额宝出来后无限制了\n**B:** 500万起买\n\n> 买货币基金建议别买后面有字母的，这样不会有利率歧视\n\n### 货币ETF\n\nETF (交易型开放式指数基金 Exchange Traded Funds )， 场内货币基金(可以直接在证券市场内买卖的货币基金),货币ETF要买不要收取佣金的货币基金。\n\n> 例如：华宝添益(511990) 银华日利(511880) 理财金H(511810)\n\n## 债券基金\n从长期看，债基的利率高于货币基金和银行储蓄\n### 债基分类\n按投资基金分类，债基可分为：\n - 短债基金\n - 中短债基金\n - 长期债券型基金\n\n按嫩否投资股票可以分为： \n - 二级债基(可拿出20%的基金去买二级市场股票)\n - 一级债基(不能买二级市场股票，但是可以在一级市场买新股,风险一般比二级债基低)\n - 纯债基 (不允许资金买股票的债基) \n - 转债基金(可以投资可转债市场的转债基金，风险较高)\n\n> 建议购买纯债基金,其他债基风险不明确\n\n### 纯债投资和挑选\n纯债基金的平均年化收益率6%，在天天基金网按照债券型基金，选择长期纯债基金，近三年排行榜，通过剔除：\n- 剔除可转债的基金\n- 剔除小公司的基金剔除掉\n- 剔除基金规模超过20亿的基金\n- 剔除同一基金公司的非王牌基金\n\n> A类B类债基都有申赎费用，A类是前端收费，B类是赎回的时候收费，C类不收取申购赎回费率。只收取销售服务费，短期C类长期选择A类。\n\n\n> 也可以选择，期限为一年的中期，定期开发债基\n\n## 混合型基金\n平衡型和灵活配置型能体现出混合型基金的优势，风险对冲能力较好，收益很大程度上取决于基金经理的能力。\n## 股票型基金\n现在的公募基金，都是在3~5个月后才能看到具体的持仓配比(哈哈哈,防止对手抄袭吧),一般股票型基金选择大型的基金公司来投。\n\n#### 大型基金公司\n- 基金行业第一梯队\n天弘基金 工银瑞信(ICBC) 易方达基金 博时基金 招商基金 南方基金( * ) 嘉实基金( * ) 华夏 建信 中银 汇添富( * ) 鹏华 广发 富国( * ) 银华( * ) 华安( * ) 华宝兴业 兴全( * ) 兴业 上投摩根 大成基金\n#### 优秀的基金经理\n- 基金经理背景(年龄,35岁左右以上 学历 履历,管理6~7年或者以上)\n- 操盘风格 (基金公司每季度会公布基金报告,会看到基金最新持有的10大仓股,或者查看基金换手率，一般来说这些变化越小，说明该经理喜欢短线投资)\n#### 看业绩\n首先基金成立的时间足够久,至少是3~5年的,其他条件相同，时间越长越好。其次看收益,在长时间内，收益一直稳定,收益排名要一直靠前。\n\n#### β系数\n基金和业绩评价基准之间的相关性。风险和收益的相关系，例如货币基金的基准是定期存款利率。股票型基金，对应的就是大盘走势。指数型基金就是所跟踪的指数。β指数越高，说明基金的风险和收益波动性越大。β表示着基金要承担的系统性风险。\n#### α系数 \n基金的绝对回报收益(超额收益，基金的收益 - 市场无风险收益)，主要靠基金经理的择时和选股水平决定的。一般α系数越高，说明基金经理的理财能力越强。\n#### R平方(0~100)\nR<sup>2</sup> 的数值越高 `α系数` 和 `β系数` 的可信度就越高。\n#### 夏普比率\n夏普比率越高,基金性价比越高,还有好多指数……记不住了……\n#### 看基金规模\n- 投资中小盘股的基金(10亿~20亿)\n- 投资大盘股基金(30~100亿)\n- 超过100亿,巨无霸基金😅\n\n## 指数型基金\n\n根据某一个指数的成分股来配置股票基金。指数跟踪误差越小说明指数基金越优秀。\n\n![招商国政生物医药指数跟踪误差](https://blogimage.lemonlife.top/202012051656_469.png)\n\n一般指数基金的日跟踪误差都在0.5%以内,优秀的指数基金可以把误差缩小到0.05%以内,年度跟踪误差不会超过1.5%。\n\n#### 综合指数\n股票的股价和发行量的加权平均数，容易造成指数失真\n- 上证指数：上海证券交易所挂牌的所有股票的价格\n- 深证指数\n#### 成分指数\n根据科学客观的选样方法，挑选出样本股所构成的指数，成分指数在计算时候，只考虑流通股不考虑非流通股。现在基本是全流通股时代。成分指数的股票基本没半年更新一次。\n- 深证成分指数 (深证的中小盘股票指数)\n- 深证100指数,由深圳证券市场流通市值最大成分最活跃的100只成分股所编制的股票指数，代码为(399330) (深证大盘股票指数)\n- 上证50指数,26只股基本都是金融股和中石化，中石油。\n- 上证180指数，流通市值基本占到了上交所一般。\n- 沪深300指数，中证公司成立,大盘指数\n- 中证500指数 (小盘股)\n  - 排除沪深300指数成分股\n  - 再排除剩下的市值排名前300的股票\n  - 再排除最不活跃的20%的股票\n  - 最后挑选剩下的市值，由高到低的最高的500个股票\n- 中证800指数 (大中小盘的综合反映)\n- 中证1000指数 (小市值股票反映)\n- 中小版指数,创业板指数 (2009年诞生,投资风险高)\n### 指数基金查询\n1. 上交所官网 [http://www.sse.com.cn/](http://www.sse.com.cn/)\n2. 深交所官网 [http://www.szse.cn/](http://www.szse.cn/)\n3. 中证公司官网 [http://www.csindex.com.cn/](http://www.csindex.com.cn/)\n\n### 主动增强型指数基金\n基金经理可以，根据指数来做调整，风险较高,管理费介于股票基金和指数基金之间\n### 挑选技巧\n买基金规模大的指数基金，买管理费低的,买老的指数基金，新基金可能没完成建仓，导致指数跟踪误差较大。\n#### 大数据指数基金\n利用大数据技术来预测，大数据基金的成分股不只是看基金经理，而是看好几位专家组成的专家团队的决策，中国第一代大数据基金：\n   - 腾讯+银河(定投宝) 银河中证腾讯腾讯济安价值100指数基金,2013年5月诞生\n   - 百度+广发 广发中证百度百发策略100指数基金\n   - 阿里+博时 博时中证淘金大数据100指数基金\n\n第二批大数据基金：\n   - 南方i100\n   - 新浪i100\n   - 中证银联智慧大数据100指数\n   - 中证银联智策大数据100指数\n   - 中证银联智策消费大数据指数\n\n大数据混合型基金：\n   - 天弘云端生活优选基金\n   - 东方红京东大数据混合基金\n   - 广发百发大数据价值混合基金\n   - 广发百发大数据成长混合基金\n   - 嘉实腾讯自选股大数据策略混合基金\n\n> 目前人工智能，感觉还无法处理股市的风险，因此感觉大数据基金风险很大。  但是技术在进步，可以观望未来、\n\n### ETF基金 \n中国第一支ETF基金诞生于2004年12月30日，华夏上证50ETF基金。ETF基金管理费的属于指数基金中最低的了。\n#### ETF优点\n1. 公开透明 投资成本最低\n2. 操作灵活 投资门槛最低\n3. 仓位最高 资金利用效率最高\n4. 套利玩法可以带来超额收益\n\n\n#### ETF联接基金\n可以在场外的一级市场的申购赎回，方便大家购买。规定必须要有90%的资金购买对应的ETF基金。\n#### ETF联接基金的优势\n1. 持有成本比普通指数基金低\n2. 可以自动设置定投计划方便投资者\n\n#### LOF基金\nLOF`(Listed Open-ended Fund 上市型开放式基金)` 是中国市场自主创造的一种基金品种。中国第一支LOF基金成立于2004年8月24日，`南方积极配置混合(LOF)(160105)`。\n\n![南方积极配置混合(LOF)(160105)](https://blogimage.lemonlife.top/202012052203_547.png)\n\n> ETF,LOF套利的规则我觉得很麻烦，主要时间肯定还是在工作上，基金就是长期投着玩玩。所以不记录这种高级的玩法。\n\n### 行业指数基金\n宽基指数，选股基础比较宽泛行业分布比较均匀的指数。行业指数属于窄基指数。\n- 泛教育\n  - 中证教育产业指数\n\n- 泛理财\n  - 中证金融指数(银行 证券 保险)\n  - 中证互联网金融指数\n- 泛娱乐产业\n  - 中证娱乐产业指数\n  - 中证传媒产业指数\n  - 中证影视产业指数\n  - 中证文体休闲产业指数\n  - 中证TMT指数\n- 健康产业\n  - 各种医药医疗指数\n  - 互联网医疗指数\n  - 中证健康产业指数 \n  - 中证养老产业指数\n\n## 特种基金\n### 分级基金\n具有中国特色的杠杆基金,国内第一支分级基金是`国投瑞银瑞福分级基金`,把一个基金的资产和收益拆分成不同风险级别的两个子基金。分级A和分级B。\n上交所发行的母基金、分级A和分级B代码都以50开头。深交所发行的母基金都是以16开头分级A、分级B都是15开头。\n\n`分级A约定收益 = 一年期定期存款基准利率+1.5%~5%`\n> 分级基金游戏规则，我也觉的太复杂了\n\n### 保本基金\n2004年2月中国第一支保本基金诞生，`银华保本增值基金`。\n\n**CPPI策略：** 恒定比例投资组合保险策略 (  确定要保本的金额，保本金额值的现值进行无风险投资，剩余的资产进行风险投资 ).\n\n**TIPP策略：** 时间不变性投资组合保险策略，投资组合总价值上涨，价值底线上涨。投资组合总价值下跌，价值底线下跌。\n\n**OBPI策略：** 规则复杂……,国内一般采用CPPI策略。\n\n> 保本基金 基本收益都很低。甚至还不如放银行或者余额宝。所以2017年把保本基金改成了避险基金，\n### 打新基金\n专门靠打新股来赚钱的基金。是因为中国特色的新股发行制度下产生的一种特色基金。因为中国的新股发型策略是核准制。所以会出现新股僧多粥少的情况，加上政府会压低新股股价，所以一般新股上市都是会上涨的。可以看到新股中签率基本都是万分之一。\n\n![新股中签率](https://blogimage.lemonlife.top/202012061229_858.png)\n\n- 基金规模在6-12亿之间。\n- 灵活配置型基金较多\n\n> IPO改成注册制 是大势所趋，所以感觉打新基金的游戏，未来几年也玩不转。\n\n### 生命周期基金\n生命周期基金的投资期限在5~30年之间。\n> 生命周期基金 在中国水土不服，一共就发行了几只生命周期基金。不过随着老龄化的到来，生命周期基金相关的市场肯定也会增加。\n### QDII基金\n由于中国的外汇限制，所以中外资本流通，没有合适的方式。所以QDII是经济全球化过程中过度性的金融制度的安排。允许中国境内的机构投资者通过QDII去投资境外的资本市场。1983年我国台湾地区有QFII制度。2006年9月 国家发布`《关于基金管理公司境外证券投资外汇管理有关问题的通知》` ,2006年11月2日中国第一支试点债券型QDII基金,`华安国际配置基金`正式发行。\n\n- 投资门槛低\n- 流动性高\n- 管理费更低\n\n> QDII 申赎费用贵，资金到账很慢。\n\n\n### REITs基金\nREITs(Real Estate Investment Trusts,不动产信托投资基金),将流动性较低的非证券形态的房地产投资，直接转化为资本市场上的证券资产的投资基金。一种特殊的金融投资。2015年6月国内发布第一支公募基金REITs `鹏华前海万科REITs` 封闭式混合基金。\n\n> 中国 只有这一个实验品 后来没有发布其他的REIFs基金\n\n### FOF基金\n拿钱买基金的基金。FOF基金是基金里面最灵活的，\n\n第一批FOF基金：\n- 华夏聚惠稳健目标风险混合型基金中基金(FOF)\n- 南方全天候策略混合基金中基金(FOF)\n- 建信福泽安泰混合型基金中基金(FOF)\n- 泰达宏利全能优选(FOF)\n- 嘉实领航资产配置混合型(FOF)\n- 海富通聚优精选(FOF)\n> 最新的一种基金品种\n## 小技巧\n- 支付宝免费提现，可采用网商银行，中继的方式 \n- 天天基金网 [链接](https://fund.eastmoney.com/)\n- shiboe [链接](http://www.shibor.org/)\n- 集思录 [链接](https://www.jisilu.cn/)\n- 理杏仁 [链接](https://www.lixinger.com/)\n\n### 基金定投\n指数基金由国内大厂，来控制，基本符合国内的宏观经济学发展。沪深300指数基金（大盘股）；中证500指数基金（小盘股），\n#### 定投周期\n一个月一次，定投的频率越高，收益亏损曲线月平滑，股市大涨减少投资，股市大跌 增加定投。\n\n#### 智能定投平台\n| 招商银行 | 摩羯智投 |\n| --- | --- |\n| 蚂蚁财富 | 慧定投 |\n| 腾讯理财通 | 目标盈定投 |\n| 雪球蛋卷基金 | 蛋定投 |\n\n### 基金评级机构\n- [晨星](http://cn.morningstar.com/) \n- 理柏( 好像暂时没有中国大陆地区 )\n- [惠誉](https://www.fitchratings.com/)\n\n### 代码\n#### 股票代码\n|名称|沪市A股|沪市B股|深市A股|深市B股|深市中小板|深市创业板|\n|--|--|--|--|--|--|--|\n|代码开头|60|900|00|200|002|300|\n\n> 0 2 3 6 9 开头的6位代码，一般对应股票\n#### 基金\n|名称|沪市基金|沪市ETF|沪市LOF|深市基金|深市ETF|深市LOF|\n|--|--|--|--|--|--|--|\n|代码开头|5|51|5010|1|15|16|\n> 1 5 开头的6位代码，一般对应基金\n\n![](https://blogimage.lemonlife.top/202012062012_180.png)\n\n> 资料来源 网易云课堂 力哥理财\n","source":"_posts/fund-01.md","raw":"---\ntitle: 基金\ndate: 2020-12-03 13:04:04\ntags: \n  - 理财\n  - 基金\n---\n## 介绍\n由于互联网技术的发展，早期的封闭式基金，已经退出了历史舞台，被开放式基金代替。开放式基金根据基金类型可分为\n\n- 股票型基金 ( 80% 的资金用于股票)\n- 混合型基金 \n   - 偏股型基金 (股票占比 >= 50% )\n   - 偏债型基金 (债券占比 >= 50% )\n   - 平衡型基金 (股票债券占比 <= 50% )\n   - 灵活型基金 (占比无要求)\n- 债券型基金 ( 80% 的基金用于债券)\n- 货币市场基金 \n\n> 投资风险从高到底， 股票型基金 混合型基金 债券型基金 货币基金 \n\n### 金融市场\n\n资本市场： 股票市场和一年期以上的债券市场，称为资本市场。\n \n> 包括 股票 基金 长期债券\n\n货币市场：只能交易短期债券和各类票据\n\n> 包括 短期债券 央票 银行汇票 债券回购 银行存款 \n\n\n### 基金名称解析\n\n1.  基金公司的名称\n  \n    如: 天弘 华夏 易方达 南方 工银瑞信 建信 博时 嘉实 招商 广发 汇添富 鹏华 富国 华宝兴业 …… \n\n2. 基金特点或者偏好 (修饰词)\n   如：互联网主题 行业轮动 轻资产 健康环保 经济转型 中小盘 ……\n\n3. 基金的投资范围\n   如：货币 债券 纯债 可转债 混合 灵活配置 股票 指数 增强指数 量化 海外 美元 ETF LOF QDII ……\n\n## 货币基金\n#### 申购时间\n一般选择周日晚~周四下午3点之前买入货币基金。\n#### 七日年化收益\n货币基金都维持过去七天的收益水平不变,持有一年后的整体收益。因为货币基金的值每天变换，所以七日年化收益一般是虚拟预估,不具有代表性\n#### 每万份收益\n或基净值永远是1元,所以每万份收益,就是1w元在当天的收入。\n#### 累计回报\n货币基金本来回报率就稳定不高，看短期收益没有任何意义，应该查看基金累计半年或者一年的收益。\n\n---\n登录 天天基金网 点击基金排行,然后再点击,货币基金排行可以查看到货币基金的累计收益\n\n![](https://blogimage.lemonlife.top/202012041330_247.png)\n\n![货币基金排行](https://blogimage.lemonlife.top/202012041333_376.png)\n\n![余额宝货币基金规模](https://blogimage.lemonlife.top/202012041336_84.png)\n\n### 货基类型\n\n**A:** 1000元起买,余额宝出来后无限制了\n**B:** 500万起买\n\n> 买货币基金建议别买后面有字母的，这样不会有利率歧视\n\n### 货币ETF\n\nETF (交易型开放式指数基金 Exchange Traded Funds )， 场内货币基金(可以直接在证券市场内买卖的货币基金),货币ETF要买不要收取佣金的货币基金。\n\n> 例如：华宝添益(511990) 银华日利(511880) 理财金H(511810)\n\n## 债券基金\n从长期看，债基的利率高于货币基金和银行储蓄\n### 债基分类\n按投资基金分类，债基可分为：\n - 短债基金\n - 中短债基金\n - 长期债券型基金\n\n按嫩否投资股票可以分为： \n - 二级债基(可拿出20%的基金去买二级市场股票)\n - 一级债基(不能买二级市场股票，但是可以在一级市场买新股,风险一般比二级债基低)\n - 纯债基 (不允许资金买股票的债基) \n - 转债基金(可以投资可转债市场的转债基金，风险较高)\n\n> 建议购买纯债基金,其他债基风险不明确\n\n### 纯债投资和挑选\n纯债基金的平均年化收益率6%，在天天基金网按照债券型基金，选择长期纯债基金，近三年排行榜，通过剔除：\n- 剔除可转债的基金\n- 剔除小公司的基金剔除掉\n- 剔除基金规模超过20亿的基金\n- 剔除同一基金公司的非王牌基金\n\n> A类B类债基都有申赎费用，A类是前端收费，B类是赎回的时候收费，C类不收取申购赎回费率。只收取销售服务费，短期C类长期选择A类。\n\n\n> 也可以选择，期限为一年的中期，定期开发债基\n\n## 混合型基金\n平衡型和灵活配置型能体现出混合型基金的优势，风险对冲能力较好，收益很大程度上取决于基金经理的能力。\n## 股票型基金\n现在的公募基金，都是在3~5个月后才能看到具体的持仓配比(哈哈哈,防止对手抄袭吧),一般股票型基金选择大型的基金公司来投。\n\n#### 大型基金公司\n- 基金行业第一梯队\n天弘基金 工银瑞信(ICBC) 易方达基金 博时基金 招商基金 南方基金( * ) 嘉实基金( * ) 华夏 建信 中银 汇添富( * ) 鹏华 广发 富国( * ) 银华( * ) 华安( * ) 华宝兴业 兴全( * ) 兴业 上投摩根 大成基金\n#### 优秀的基金经理\n- 基金经理背景(年龄,35岁左右以上 学历 履历,管理6~7年或者以上)\n- 操盘风格 (基金公司每季度会公布基金报告,会看到基金最新持有的10大仓股,或者查看基金换手率，一般来说这些变化越小，说明该经理喜欢短线投资)\n#### 看业绩\n首先基金成立的时间足够久,至少是3~5年的,其他条件相同，时间越长越好。其次看收益,在长时间内，收益一直稳定,收益排名要一直靠前。\n\n#### β系数\n基金和业绩评价基准之间的相关性。风险和收益的相关系，例如货币基金的基准是定期存款利率。股票型基金，对应的就是大盘走势。指数型基金就是所跟踪的指数。β指数越高，说明基金的风险和收益波动性越大。β表示着基金要承担的系统性风险。\n#### α系数 \n基金的绝对回报收益(超额收益，基金的收益 - 市场无风险收益)，主要靠基金经理的择时和选股水平决定的。一般α系数越高，说明基金经理的理财能力越强。\n#### R平方(0~100)\nR<sup>2</sup> 的数值越高 `α系数` 和 `β系数` 的可信度就越高。\n#### 夏普比率\n夏普比率越高,基金性价比越高,还有好多指数……记不住了……\n#### 看基金规模\n- 投资中小盘股的基金(10亿~20亿)\n- 投资大盘股基金(30~100亿)\n- 超过100亿,巨无霸基金😅\n\n## 指数型基金\n\n根据某一个指数的成分股来配置股票基金。指数跟踪误差越小说明指数基金越优秀。\n\n![招商国政生物医药指数跟踪误差](https://blogimage.lemonlife.top/202012051656_469.png)\n\n一般指数基金的日跟踪误差都在0.5%以内,优秀的指数基金可以把误差缩小到0.05%以内,年度跟踪误差不会超过1.5%。\n\n#### 综合指数\n股票的股价和发行量的加权平均数，容易造成指数失真\n- 上证指数：上海证券交易所挂牌的所有股票的价格\n- 深证指数\n#### 成分指数\n根据科学客观的选样方法，挑选出样本股所构成的指数，成分指数在计算时候，只考虑流通股不考虑非流通股。现在基本是全流通股时代。成分指数的股票基本没半年更新一次。\n- 深证成分指数 (深证的中小盘股票指数)\n- 深证100指数,由深圳证券市场流通市值最大成分最活跃的100只成分股所编制的股票指数，代码为(399330) (深证大盘股票指数)\n- 上证50指数,26只股基本都是金融股和中石化，中石油。\n- 上证180指数，流通市值基本占到了上交所一般。\n- 沪深300指数，中证公司成立,大盘指数\n- 中证500指数 (小盘股)\n  - 排除沪深300指数成分股\n  - 再排除剩下的市值排名前300的股票\n  - 再排除最不活跃的20%的股票\n  - 最后挑选剩下的市值，由高到低的最高的500个股票\n- 中证800指数 (大中小盘的综合反映)\n- 中证1000指数 (小市值股票反映)\n- 中小版指数,创业板指数 (2009年诞生,投资风险高)\n### 指数基金查询\n1. 上交所官网 [http://www.sse.com.cn/](http://www.sse.com.cn/)\n2. 深交所官网 [http://www.szse.cn/](http://www.szse.cn/)\n3. 中证公司官网 [http://www.csindex.com.cn/](http://www.csindex.com.cn/)\n\n### 主动增强型指数基金\n基金经理可以，根据指数来做调整，风险较高,管理费介于股票基金和指数基金之间\n### 挑选技巧\n买基金规模大的指数基金，买管理费低的,买老的指数基金，新基金可能没完成建仓，导致指数跟踪误差较大。\n#### 大数据指数基金\n利用大数据技术来预测，大数据基金的成分股不只是看基金经理，而是看好几位专家组成的专家团队的决策，中国第一代大数据基金：\n   - 腾讯+银河(定投宝) 银河中证腾讯腾讯济安价值100指数基金,2013年5月诞生\n   - 百度+广发 广发中证百度百发策略100指数基金\n   - 阿里+博时 博时中证淘金大数据100指数基金\n\n第二批大数据基金：\n   - 南方i100\n   - 新浪i100\n   - 中证银联智慧大数据100指数\n   - 中证银联智策大数据100指数\n   - 中证银联智策消费大数据指数\n\n大数据混合型基金：\n   - 天弘云端生活优选基金\n   - 东方红京东大数据混合基金\n   - 广发百发大数据价值混合基金\n   - 广发百发大数据成长混合基金\n   - 嘉实腾讯自选股大数据策略混合基金\n\n> 目前人工智能，感觉还无法处理股市的风险，因此感觉大数据基金风险很大。  但是技术在进步，可以观望未来、\n\n### ETF基金 \n中国第一支ETF基金诞生于2004年12月30日，华夏上证50ETF基金。ETF基金管理费的属于指数基金中最低的了。\n#### ETF优点\n1. 公开透明 投资成本最低\n2. 操作灵活 投资门槛最低\n3. 仓位最高 资金利用效率最高\n4. 套利玩法可以带来超额收益\n\n\n#### ETF联接基金\n可以在场外的一级市场的申购赎回，方便大家购买。规定必须要有90%的资金购买对应的ETF基金。\n#### ETF联接基金的优势\n1. 持有成本比普通指数基金低\n2. 可以自动设置定投计划方便投资者\n\n#### LOF基金\nLOF`(Listed Open-ended Fund 上市型开放式基金)` 是中国市场自主创造的一种基金品种。中国第一支LOF基金成立于2004年8月24日，`南方积极配置混合(LOF)(160105)`。\n\n![南方积极配置混合(LOF)(160105)](https://blogimage.lemonlife.top/202012052203_547.png)\n\n> ETF,LOF套利的规则我觉得很麻烦，主要时间肯定还是在工作上，基金就是长期投着玩玩。所以不记录这种高级的玩法。\n\n### 行业指数基金\n宽基指数，选股基础比较宽泛行业分布比较均匀的指数。行业指数属于窄基指数。\n- 泛教育\n  - 中证教育产业指数\n\n- 泛理财\n  - 中证金融指数(银行 证券 保险)\n  - 中证互联网金融指数\n- 泛娱乐产业\n  - 中证娱乐产业指数\n  - 中证传媒产业指数\n  - 中证影视产业指数\n  - 中证文体休闲产业指数\n  - 中证TMT指数\n- 健康产业\n  - 各种医药医疗指数\n  - 互联网医疗指数\n  - 中证健康产业指数 \n  - 中证养老产业指数\n\n## 特种基金\n### 分级基金\n具有中国特色的杠杆基金,国内第一支分级基金是`国投瑞银瑞福分级基金`,把一个基金的资产和收益拆分成不同风险级别的两个子基金。分级A和分级B。\n上交所发行的母基金、分级A和分级B代码都以50开头。深交所发行的母基金都是以16开头分级A、分级B都是15开头。\n\n`分级A约定收益 = 一年期定期存款基准利率+1.5%~5%`\n> 分级基金游戏规则，我也觉的太复杂了\n\n### 保本基金\n2004年2月中国第一支保本基金诞生，`银华保本增值基金`。\n\n**CPPI策略：** 恒定比例投资组合保险策略 (  确定要保本的金额，保本金额值的现值进行无风险投资，剩余的资产进行风险投资 ).\n\n**TIPP策略：** 时间不变性投资组合保险策略，投资组合总价值上涨，价值底线上涨。投资组合总价值下跌，价值底线下跌。\n\n**OBPI策略：** 规则复杂……,国内一般采用CPPI策略。\n\n> 保本基金 基本收益都很低。甚至还不如放银行或者余额宝。所以2017年把保本基金改成了避险基金，\n### 打新基金\n专门靠打新股来赚钱的基金。是因为中国特色的新股发行制度下产生的一种特色基金。因为中国的新股发型策略是核准制。所以会出现新股僧多粥少的情况，加上政府会压低新股股价，所以一般新股上市都是会上涨的。可以看到新股中签率基本都是万分之一。\n\n![新股中签率](https://blogimage.lemonlife.top/202012061229_858.png)\n\n- 基金规模在6-12亿之间。\n- 灵活配置型基金较多\n\n> IPO改成注册制 是大势所趋，所以感觉打新基金的游戏，未来几年也玩不转。\n\n### 生命周期基金\n生命周期基金的投资期限在5~30年之间。\n> 生命周期基金 在中国水土不服，一共就发行了几只生命周期基金。不过随着老龄化的到来，生命周期基金相关的市场肯定也会增加。\n### QDII基金\n由于中国的外汇限制，所以中外资本流通，没有合适的方式。所以QDII是经济全球化过程中过度性的金融制度的安排。允许中国境内的机构投资者通过QDII去投资境外的资本市场。1983年我国台湾地区有QFII制度。2006年9月 国家发布`《关于基金管理公司境外证券投资外汇管理有关问题的通知》` ,2006年11月2日中国第一支试点债券型QDII基金,`华安国际配置基金`正式发行。\n\n- 投资门槛低\n- 流动性高\n- 管理费更低\n\n> QDII 申赎费用贵，资金到账很慢。\n\n\n### REITs基金\nREITs(Real Estate Investment Trusts,不动产信托投资基金),将流动性较低的非证券形态的房地产投资，直接转化为资本市场上的证券资产的投资基金。一种特殊的金融投资。2015年6月国内发布第一支公募基金REITs `鹏华前海万科REITs` 封闭式混合基金。\n\n> 中国 只有这一个实验品 后来没有发布其他的REIFs基金\n\n### FOF基金\n拿钱买基金的基金。FOF基金是基金里面最灵活的，\n\n第一批FOF基金：\n- 华夏聚惠稳健目标风险混合型基金中基金(FOF)\n- 南方全天候策略混合基金中基金(FOF)\n- 建信福泽安泰混合型基金中基金(FOF)\n- 泰达宏利全能优选(FOF)\n- 嘉实领航资产配置混合型(FOF)\n- 海富通聚优精选(FOF)\n> 最新的一种基金品种\n## 小技巧\n- 支付宝免费提现，可采用网商银行，中继的方式 \n- 天天基金网 [链接](https://fund.eastmoney.com/)\n- shiboe [链接](http://www.shibor.org/)\n- 集思录 [链接](https://www.jisilu.cn/)\n- 理杏仁 [链接](https://www.lixinger.com/)\n\n### 基金定投\n指数基金由国内大厂，来控制，基本符合国内的宏观经济学发展。沪深300指数基金（大盘股）；中证500指数基金（小盘股），\n#### 定投周期\n一个月一次，定投的频率越高，收益亏损曲线月平滑，股市大涨减少投资，股市大跌 增加定投。\n\n#### 智能定投平台\n| 招商银行 | 摩羯智投 |\n| --- | --- |\n| 蚂蚁财富 | 慧定投 |\n| 腾讯理财通 | 目标盈定投 |\n| 雪球蛋卷基金 | 蛋定投 |\n\n### 基金评级机构\n- [晨星](http://cn.morningstar.com/) \n- 理柏( 好像暂时没有中国大陆地区 )\n- [惠誉](https://www.fitchratings.com/)\n\n### 代码\n#### 股票代码\n|名称|沪市A股|沪市B股|深市A股|深市B股|深市中小板|深市创业板|\n|--|--|--|--|--|--|--|\n|代码开头|60|900|00|200|002|300|\n\n> 0 2 3 6 9 开头的6位代码，一般对应股票\n#### 基金\n|名称|沪市基金|沪市ETF|沪市LOF|深市基金|深市ETF|深市LOF|\n|--|--|--|--|--|--|--|\n|代码开头|5|51|5010|1|15|16|\n> 1 5 开头的6位代码，一般对应基金\n\n![](https://blogimage.lemonlife.top/202012062012_180.png)\n\n> 资料来源 网易云课堂 力哥理财\n","slug":"fund-01","published":1,"updated":"2021-08-07T01:59:03.341Z","_id":"cl4ince6d000ccgufawtx2kz6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h2>\n<p>由于互联网技术的发展，早期的封闭式基金，已经退出了历史舞台，被开放式基金代替。开放式基金根据基金类型可分为</p>\n<ul>\n<li>股票型基金 ( 80% 的资金用于股票)</li>\n<li>混合型基金\n<ul>\n<li>偏股型基金 (股票占比 &gt;= 50% )</li>\n<li>偏债型基金 (债券占比 &gt;= 50% )</li>\n<li>平衡型基金 (股票债券占比 &lt;= 50% )</li>\n<li>灵活型基金 (占比无要求)</li>\n</ul>\n</li>\n<li>债券型基金 ( 80% 的基金用于债券)</li>\n<li>货币市场基金</li>\n</ul>\n<blockquote>\n<p>投资风险从高到底， 股票型基金 混合型基金 债券型基金 货币基金</p>\n</blockquote>\n<h3 id=\"金融市场\"><a class=\"markdownIt-Anchor\" href=\"#金融市场\"></a> 金融市场</h3>\n<p>资本市场： 股票市场和一年期以上的债券市场，称为资本市场。</p>\n<blockquote>\n<p>包括 股票 基金 长期债券</p>\n</blockquote>\n<p>货币市场：只能交易短期债券和各类票据</p>\n<blockquote>\n<p>包括 短期债券 央票 银行汇票 债券回购 银行存款</p>\n</blockquote>\n<h3 id=\"基金名称解析\"><a class=\"markdownIt-Anchor\" href=\"#基金名称解析\"></a> 基金名称解析</h3>\n<ol>\n<li>\n<p>基金公司的名称</p>\n<p>如: 天弘 华夏 易方达 南方 工银瑞信 建信 博时 嘉实 招商 广发 汇添富 鹏华 富国 华宝兴业 ……</p>\n</li>\n<li>\n<p>基金特点或者偏好 (修饰词)<br />\n如：互联网主题 行业轮动 轻资产 健康环保 经济转型 中小盘 ……</p>\n</li>\n<li>\n<p>基金的投资范围<br />\n如：货币 债券 纯债 可转债 混合 灵活配置 股票 指数 增强指数 量化 海外 美元 ETF LOF QDII ……</p>\n</li>\n</ol>\n<h2 id=\"货币基金\"><a class=\"markdownIt-Anchor\" href=\"#货币基金\"></a> 货币基金</h2>\n<h4 id=\"申购时间\"><a class=\"markdownIt-Anchor\" href=\"#申购时间\"></a> 申购时间</h4>\n<p>一般选择周日晚~周四下午3点之前买入货币基金。</p>\n<h4 id=\"七日年化收益\"><a class=\"markdownIt-Anchor\" href=\"#七日年化收益\"></a> 七日年化收益</h4>\n<p>货币基金都维持过去七天的收益水平不变,持有一年后的整体收益。因为货币基金的值每天变换，所以七日年化收益一般是虚拟预估,不具有代表性</p>\n<h4 id=\"每万份收益\"><a class=\"markdownIt-Anchor\" href=\"#每万份收益\"></a> 每万份收益</h4>\n<p>或基净值永远是1元,所以每万份收益,就是1w元在当天的收入。</p>\n<h4 id=\"累计回报\"><a class=\"markdownIt-Anchor\" href=\"#累计回报\"></a> 累计回报</h4>\n<p>货币基金本来回报率就稳定不高，看短期收益没有任何意义，应该查看基金累计半年或者一年的收益。</p>\n<hr />\n<p>登录 天天基金网 点击基金排行,然后再点击,货币基金排行可以查看到货币基金的累计收益</p>\n<p><img src=\"https://blogimage.lemonlife.top/202012041330_247.png\" alt=\"\" /></p>\n<p><img src=\"https://blogimage.lemonlife.top/202012041333_376.png\" alt=\"货币基金排行\" /></p>\n<p><img src=\"https://blogimage.lemonlife.top/202012041336_84.png\" alt=\"余额宝货币基金规模\" /></p>\n<h3 id=\"货基类型\"><a class=\"markdownIt-Anchor\" href=\"#货基类型\"></a> 货基类型</h3>\n<p><strong>A:</strong> 1000元起买,余额宝出来后无限制了<br />\n<strong>B:</strong> 500万起买</p>\n<blockquote>\n<p>买货币基金建议别买后面有字母的，这样不会有利率歧视</p>\n</blockquote>\n<h3 id=\"货币etf\"><a class=\"markdownIt-Anchor\" href=\"#货币etf\"></a> 货币ETF</h3>\n<p>ETF (交易型开放式指数基金 Exchange Traded Funds )， 场内货币基金(可以直接在证券市场内买卖的货币基金),货币ETF要买不要收取佣金的货币基金。</p>\n<blockquote>\n<p>例如：华宝添益(511990) 银华日利(511880) 理财金H(511810)</p>\n</blockquote>\n<h2 id=\"债券基金\"><a class=\"markdownIt-Anchor\" href=\"#债券基金\"></a> 债券基金</h2>\n<p>从长期看，债基的利率高于货币基金和银行储蓄</p>\n<h3 id=\"债基分类\"><a class=\"markdownIt-Anchor\" href=\"#债基分类\"></a> 债基分类</h3>\n<p>按投资基金分类，债基可分为：</p>\n<ul>\n<li>短债基金</li>\n<li>中短债基金</li>\n<li>长期债券型基金</li>\n</ul>\n<p>按嫩否投资股票可以分为：</p>\n<ul>\n<li>二级债基(可拿出20%的基金去买二级市场股票)</li>\n<li>一级债基(不能买二级市场股票，但是可以在一级市场买新股,风险一般比二级债基低)</li>\n<li>纯债基 (不允许资金买股票的债基)</li>\n<li>转债基金(可以投资可转债市场的转债基金，风险较高)</li>\n</ul>\n<blockquote>\n<p>建议购买纯债基金,其他债基风险不明确</p>\n</blockquote>\n<h3 id=\"纯债投资和挑选\"><a class=\"markdownIt-Anchor\" href=\"#纯债投资和挑选\"></a> 纯债投资和挑选</h3>\n<p>纯债基金的平均年化收益率6%，在天天基金网按照债券型基金，选择长期纯债基金，近三年排行榜，通过剔除：</p>\n<ul>\n<li>剔除可转债的基金</li>\n<li>剔除小公司的基金剔除掉</li>\n<li>剔除基金规模超过20亿的基金</li>\n<li>剔除同一基金公司的非王牌基金</li>\n</ul>\n<blockquote>\n<p>A类B类债基都有申赎费用，A类是前端收费，B类是赎回的时候收费，C类不收取申购赎回费率。只收取销售服务费，短期C类长期选择A类。</p>\n</blockquote>\n<blockquote>\n<p>也可以选择，期限为一年的中期，定期开发债基</p>\n</blockquote>\n<h2 id=\"混合型基金\"><a class=\"markdownIt-Anchor\" href=\"#混合型基金\"></a> 混合型基金</h2>\n<p>平衡型和灵活配置型能体现出混合型基金的优势，风险对冲能力较好，收益很大程度上取决于基金经理的能力。</p>\n<h2 id=\"股票型基金\"><a class=\"markdownIt-Anchor\" href=\"#股票型基金\"></a> 股票型基金</h2>\n<p>现在的公募基金，都是在3~5个月后才能看到具体的持仓配比(哈哈哈,防止对手抄袭吧),一般股票型基金选择大型的基金公司来投。</p>\n<h4 id=\"大型基金公司\"><a class=\"markdownIt-Anchor\" href=\"#大型基金公司\"></a> 大型基金公司</h4>\n<ul>\n<li>基金行业第一梯队<br />\n天弘基金 工银瑞信(ICBC) 易方达基金 博时基金 招商基金 南方基金( * ) 嘉实基金( * ) 华夏 建信 中银 汇添富( * ) 鹏华 广发 富国( * ) 银华( * ) 华安( * ) 华宝兴业 兴全( * ) 兴业 上投摩根 大成基金</li>\n</ul>\n<h4 id=\"优秀的基金经理\"><a class=\"markdownIt-Anchor\" href=\"#优秀的基金经理\"></a> 优秀的基金经理</h4>\n<ul>\n<li>基金经理背景(年龄,35岁左右以上 学历 履历,管理6~7年或者以上)</li>\n<li>操盘风格 (基金公司每季度会公布基金报告,会看到基金最新持有的10大仓股,或者查看基金换手率，一般来说这些变化越小，说明该经理喜欢短线投资)</li>\n</ul>\n<h4 id=\"看业绩\"><a class=\"markdownIt-Anchor\" href=\"#看业绩\"></a> 看业绩</h4>\n<p>首先基金成立的时间足够久,至少是3~5年的,其他条件相同，时间越长越好。其次看收益,在长时间内，收益一直稳定,收益排名要一直靠前。</p>\n<h4 id=\"β系数\"><a class=\"markdownIt-Anchor\" href=\"#β系数\"></a> β系数</h4>\n<p>基金和业绩评价基准之间的相关性。风险和收益的相关系，例如货币基金的基准是定期存款利率。股票型基金，对应的就是大盘走势。指数型基金就是所跟踪的指数。β指数越高，说明基金的风险和收益波动性越大。β表示着基金要承担的系统性风险。</p>\n<h4 id=\"α系数\"><a class=\"markdownIt-Anchor\" href=\"#α系数\"></a> α系数</h4>\n<p>基金的绝对回报收益(超额收益，基金的收益 - 市场无风险收益)，主要靠基金经理的择时和选股水平决定的。一般α系数越高，说明基金经理的理财能力越强。</p>\n<h4 id=\"r平方0~100\"><a class=\"markdownIt-Anchor\" href=\"#r平方0~100\"></a> R平方(0~100)</h4>\n<p>R<sup>2</sup> 的数值越高 <code>α系数</code> 和 <code>β系数</code> 的可信度就越高。</p>\n<h4 id=\"夏普比率\"><a class=\"markdownIt-Anchor\" href=\"#夏普比率\"></a> 夏普比率</h4>\n<p>夏普比率越高,基金性价比越高,还有好多指数……记不住了……</p>\n<h4 id=\"看基金规模\"><a class=\"markdownIt-Anchor\" href=\"#看基金规模\"></a> 看基金规模</h4>\n<ul>\n<li>投资中小盘股的基金(10亿~20亿)</li>\n<li>投资大盘股基金(30~100亿)</li>\n<li>超过100亿,巨无霸基金😅</li>\n</ul>\n<h2 id=\"指数型基金\"><a class=\"markdownIt-Anchor\" href=\"#指数型基金\"></a> 指数型基金</h2>\n<p>根据某一个指数的成分股来配置股票基金。指数跟踪误差越小说明指数基金越优秀。</p>\n<p><img src=\"https://blogimage.lemonlife.top/202012051656_469.png\" alt=\"招商国政生物医药指数跟踪误差\" /></p>\n<p>一般指数基金的日跟踪误差都在0.5%以内,优秀的指数基金可以把误差缩小到0.05%以内,年度跟踪误差不会超过1.5%。</p>\n<h4 id=\"综合指数\"><a class=\"markdownIt-Anchor\" href=\"#综合指数\"></a> 综合指数</h4>\n<p>股票的股价和发行量的加权平均数，容易造成指数失真</p>\n<ul>\n<li>上证指数：上海证券交易所挂牌的所有股票的价格</li>\n<li>深证指数</li>\n</ul>\n<h4 id=\"成分指数\"><a class=\"markdownIt-Anchor\" href=\"#成分指数\"></a> 成分指数</h4>\n<p>根据科学客观的选样方法，挑选出样本股所构成的指数，成分指数在计算时候，只考虑流通股不考虑非流通股。现在基本是全流通股时代。成分指数的股票基本没半年更新一次。</p>\n<ul>\n<li>深证成分指数 (深证的中小盘股票指数)</li>\n<li>深证100指数,由深圳证券市场流通市值最大成分最活跃的100只成分股所编制的股票指数，代码为(399330) (深证大盘股票指数)</li>\n<li>上证50指数,26只股基本都是金融股和中石化，中石油。</li>\n<li>上证180指数，流通市值基本占到了上交所一般。</li>\n<li>沪深300指数，中证公司成立,大盘指数</li>\n<li>中证500指数 (小盘股)\n<ul>\n<li>排除沪深300指数成分股</li>\n<li>再排除剩下的市值排名前300的股票</li>\n<li>再排除最不活跃的20%的股票</li>\n<li>最后挑选剩下的市值，由高到低的最高的500个股票</li>\n</ul>\n</li>\n<li>中证800指数 (大中小盘的综合反映)</li>\n<li>中证1000指数 (小市值股票反映)</li>\n<li>中小版指数,创业板指数 (2009年诞生,投资风险高)</li>\n</ul>\n<h3 id=\"指数基金查询\"><a class=\"markdownIt-Anchor\" href=\"#指数基金查询\"></a> 指数基金查询</h3>\n<ol>\n<li>上交所官网 <a href=\"http://www.sse.com.cn/\">http://www.sse.com.cn/</a></li>\n<li>深交所官网 <a href=\"http://www.szse.cn/\">http://www.szse.cn/</a></li>\n<li>中证公司官网 <a href=\"http://www.csindex.com.cn/\">http://www.csindex.com.cn/</a></li>\n</ol>\n<h3 id=\"主动增强型指数基金\"><a class=\"markdownIt-Anchor\" href=\"#主动增强型指数基金\"></a> 主动增强型指数基金</h3>\n<p>基金经理可以，根据指数来做调整，风险较高,管理费介于股票基金和指数基金之间</p>\n<h3 id=\"挑选技巧\"><a class=\"markdownIt-Anchor\" href=\"#挑选技巧\"></a> 挑选技巧</h3>\n<p>买基金规模大的指数基金，买管理费低的,买老的指数基金，新基金可能没完成建仓，导致指数跟踪误差较大。</p>\n<h4 id=\"大数据指数基金\"><a class=\"markdownIt-Anchor\" href=\"#大数据指数基金\"></a> 大数据指数基金</h4>\n<p>利用大数据技术来预测，大数据基金的成分股不只是看基金经理，而是看好几位专家组成的专家团队的决策，中国第一代大数据基金：</p>\n<ul>\n<li>腾讯+银河(定投宝) 银河中证腾讯腾讯济安价值100指数基金,2013年5月诞生</li>\n<li>百度+广发 广发中证百度百发策略100指数基金</li>\n<li>阿里+博时 博时中证淘金大数据100指数基金</li>\n</ul>\n<p>第二批大数据基金：</p>\n<ul>\n<li>南方i100</li>\n<li>新浪i100</li>\n<li>中证银联智慧大数据100指数</li>\n<li>中证银联智策大数据100指数</li>\n<li>中证银联智策消费大数据指数</li>\n</ul>\n<p>大数据混合型基金：</p>\n<ul>\n<li>天弘云端生活优选基金</li>\n<li>东方红京东大数据混合基金</li>\n<li>广发百发大数据价值混合基金</li>\n<li>广发百发大数据成长混合基金</li>\n<li>嘉实腾讯自选股大数据策略混合基金</li>\n</ul>\n<blockquote>\n<p>目前人工智能，感觉还无法处理股市的风险，因此感觉大数据基金风险很大。  但是技术在进步，可以观望未来、</p>\n</blockquote>\n<h3 id=\"etf基金\"><a class=\"markdownIt-Anchor\" href=\"#etf基金\"></a> ETF基金</h3>\n<p>中国第一支ETF基金诞生于2004年12月30日，华夏上证50ETF基金。ETF基金管理费的属于指数基金中最低的了。</p>\n<h4 id=\"etf优点\"><a class=\"markdownIt-Anchor\" href=\"#etf优点\"></a> ETF优点</h4>\n<ol>\n<li>公开透明 投资成本最低</li>\n<li>操作灵活 投资门槛最低</li>\n<li>仓位最高 资金利用效率最高</li>\n<li>套利玩法可以带来超额收益</li>\n</ol>\n<h4 id=\"etf联接基金\"><a class=\"markdownIt-Anchor\" href=\"#etf联接基金\"></a> ETF联接基金</h4>\n<p>可以在场外的一级市场的申购赎回，方便大家购买。规定必须要有90%的资金购买对应的ETF基金。</p>\n<h4 id=\"etf联接基金的优势\"><a class=\"markdownIt-Anchor\" href=\"#etf联接基金的优势\"></a> ETF联接基金的优势</h4>\n<ol>\n<li>持有成本比普通指数基金低</li>\n<li>可以自动设置定投计划方便投资者</li>\n</ol>\n<h4 id=\"lof基金\"><a class=\"markdownIt-Anchor\" href=\"#lof基金\"></a> LOF基金</h4>\n<p>LOF<code>(Listed Open-ended Fund 上市型开放式基金)</code> 是中国市场自主创造的一种基金品种。中国第一支LOF基金成立于2004年8月24日，<code>南方积极配置混合(LOF)(160105)</code>。</p>\n<p><img src=\"https://blogimage.lemonlife.top/202012052203_547.png\" alt=\"南方积极配置混合(LOF)(160105)\" /></p>\n<blockquote>\n<p>ETF,LOF套利的规则我觉得很麻烦，主要时间肯定还是在工作上，基金就是长期投着玩玩。所以不记录这种高级的玩法。</p>\n</blockquote>\n<h3 id=\"行业指数基金\"><a class=\"markdownIt-Anchor\" href=\"#行业指数基金\"></a> 行业指数基金</h3>\n<p>宽基指数，选股基础比较宽泛行业分布比较均匀的指数。行业指数属于窄基指数。</p>\n<ul>\n<li>\n<p>泛教育</p>\n<ul>\n<li>中证教育产业指数</li>\n</ul>\n</li>\n<li>\n<p>泛理财</p>\n<ul>\n<li>中证金融指数(银行 证券 保险)</li>\n<li>中证互联网金融指数</li>\n</ul>\n</li>\n<li>\n<p>泛娱乐产业</p>\n<ul>\n<li>中证娱乐产业指数</li>\n<li>中证传媒产业指数</li>\n<li>中证影视产业指数</li>\n<li>中证文体休闲产业指数</li>\n<li>中证TMT指数</li>\n</ul>\n</li>\n<li>\n<p>健康产业</p>\n<ul>\n<li>各种医药医疗指数</li>\n<li>互联网医疗指数</li>\n<li>中证健康产业指数</li>\n<li>中证养老产业指数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"特种基金\"><a class=\"markdownIt-Anchor\" href=\"#特种基金\"></a> 特种基金</h2>\n<h3 id=\"分级基金\"><a class=\"markdownIt-Anchor\" href=\"#分级基金\"></a> 分级基金</h3>\n<p>具有中国特色的杠杆基金,国内第一支分级基金是<code>国投瑞银瑞福分级基金</code>,把一个基金的资产和收益拆分成不同风险级别的两个子基金。分级A和分级B。<br />\n上交所发行的母基金、分级A和分级B代码都以50开头。深交所发行的母基金都是以16开头分级A、分级B都是15开头。</p>\n<p><code>分级A约定收益 = 一年期定期存款基准利率+1.5%~5%</code></p>\n<blockquote>\n<p>分级基金游戏规则，我也觉的太复杂了</p>\n</blockquote>\n<h3 id=\"保本基金\"><a class=\"markdownIt-Anchor\" href=\"#保本基金\"></a> 保本基金</h3>\n<p>2004年2月中国第一支保本基金诞生，<code>银华保本增值基金</code>。</p>\n<p><strong>CPPI策略：</strong> 恒定比例投资组合保险策略 (  确定要保本的金额，保本金额值的现值进行无风险投资，剩余的资产进行风险投资 ).</p>\n<p><strong>TIPP策略：</strong> 时间不变性投资组合保险策略，投资组合总价值上涨，价值底线上涨。投资组合总价值下跌，价值底线下跌。</p>\n<p><strong>OBPI策略：</strong> 规则复杂……,国内一般采用CPPI策略。</p>\n<blockquote>\n<p>保本基金 基本收益都很低。甚至还不如放银行或者余额宝。所以2017年把保本基金改成了避险基金，</p>\n</blockquote>\n<h3 id=\"打新基金\"><a class=\"markdownIt-Anchor\" href=\"#打新基金\"></a> 打新基金</h3>\n<p>专门靠打新股来赚钱的基金。是因为中国特色的新股发行制度下产生的一种特色基金。因为中国的新股发型策略是核准制。所以会出现新股僧多粥少的情况，加上政府会压低新股股价，所以一般新股上市都是会上涨的。可以看到新股中签率基本都是万分之一。</p>\n<p><img src=\"https://blogimage.lemonlife.top/202012061229_858.png\" alt=\"新股中签率\" /></p>\n<ul>\n<li>基金规模在6-12亿之间。</li>\n<li>灵活配置型基金较多</li>\n</ul>\n<blockquote>\n<p>IPO改成注册制 是大势所趋，所以感觉打新基金的游戏，未来几年也玩不转。</p>\n</blockquote>\n<h3 id=\"生命周期基金\"><a class=\"markdownIt-Anchor\" href=\"#生命周期基金\"></a> 生命周期基金</h3>\n<p>生命周期基金的投资期限在5~30年之间。</p>\n<blockquote>\n<p>生命周期基金 在中国水土不服，一共就发行了几只生命周期基金。不过随着老龄化的到来，生命周期基金相关的市场肯定也会增加。</p>\n</blockquote>\n<h3 id=\"qdii基金\"><a class=\"markdownIt-Anchor\" href=\"#qdii基金\"></a> QDII基金</h3>\n<p>由于中国的外汇限制，所以中外资本流通，没有合适的方式。所以QDII是经济全球化过程中过度性的金融制度的安排。允许中国境内的机构投资者通过QDII去投资境外的资本市场。1983年我国台湾地区有QFII制度。2006年9月 国家发布<code>《关于基金管理公司境外证券投资外汇管理有关问题的通知》</code> ,2006年11月2日中国第一支试点债券型QDII基金,<code>华安国际配置基金</code>正式发行。</p>\n<ul>\n<li>投资门槛低</li>\n<li>流动性高</li>\n<li>管理费更低</li>\n</ul>\n<blockquote>\n<p>QDII 申赎费用贵，资金到账很慢。</p>\n</blockquote>\n<h3 id=\"reits基金\"><a class=\"markdownIt-Anchor\" href=\"#reits基金\"></a> REITs基金</h3>\n<p>REITs(Real Estate Investment Trusts,不动产信托投资基金),将流动性较低的非证券形态的房地产投资，直接转化为资本市场上的证券资产的投资基金。一种特殊的金融投资。2015年6月国内发布第一支公募基金REITs <code>鹏华前海万科REITs</code> 封闭式混合基金。</p>\n<blockquote>\n<p>中国 只有这一个实验品 后来没有发布其他的REIFs基金</p>\n</blockquote>\n<h3 id=\"fof基金\"><a class=\"markdownIt-Anchor\" href=\"#fof基金\"></a> FOF基金</h3>\n<p>拿钱买基金的基金。FOF基金是基金里面最灵活的，</p>\n<p>第一批FOF基金：</p>\n<ul>\n<li>华夏聚惠稳健目标风险混合型基金中基金(FOF)</li>\n<li>南方全天候策略混合基金中基金(FOF)</li>\n<li>建信福泽安泰混合型基金中基金(FOF)</li>\n<li>泰达宏利全能优选(FOF)</li>\n<li>嘉实领航资产配置混合型(FOF)</li>\n<li>海富通聚优精选(FOF)</li>\n</ul>\n<blockquote>\n<p>最新的一种基金品种</p>\n</blockquote>\n<h2 id=\"小技巧\"><a class=\"markdownIt-Anchor\" href=\"#小技巧\"></a> 小技巧</h2>\n<ul>\n<li>支付宝免费提现，可采用网商银行，中继的方式</li>\n<li>天天基金网 <a href=\"https://fund.eastmoney.com/\">链接</a></li>\n<li>shiboe <a href=\"http://www.shibor.org/\">链接</a></li>\n<li>集思录 <a href=\"https://www.jisilu.cn/\">链接</a></li>\n<li>理杏仁 <a href=\"https://www.lixinger.com/\">链接</a></li>\n</ul>\n<h3 id=\"基金定投\"><a class=\"markdownIt-Anchor\" href=\"#基金定投\"></a> 基金定投</h3>\n<p>指数基金由国内大厂，来控制，基本符合国内的宏观经济学发展。沪深300指数基金（大盘股）；中证500指数基金（小盘股），</p>\n<h4 id=\"定投周期\"><a class=\"markdownIt-Anchor\" href=\"#定投周期\"></a> 定投周期</h4>\n<p>一个月一次，定投的频率越高，收益亏损曲线月平滑，股市大涨减少投资，股市大跌 增加定投。</p>\n<h4 id=\"智能定投平台\"><a class=\"markdownIt-Anchor\" href=\"#智能定投平台\"></a> 智能定投平台</h4>\n<table>\n<thead>\n<tr>\n<th>招商银行</th>\n<th>摩羯智投</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>蚂蚁财富</td>\n<td>慧定投</td>\n</tr>\n<tr>\n<td>腾讯理财通</td>\n<td>目标盈定投</td>\n</tr>\n<tr>\n<td>雪球蛋卷基金</td>\n<td>蛋定投</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"基金评级机构\"><a class=\"markdownIt-Anchor\" href=\"#基金评级机构\"></a> 基金评级机构</h3>\n<ul>\n<li><a href=\"http://cn.morningstar.com/\">晨星</a></li>\n<li>理柏( 好像暂时没有中国大陆地区 )</li>\n<li><a href=\"https://www.fitchratings.com/\">惠誉</a></li>\n</ul>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<h4 id=\"股票代码\"><a class=\"markdownIt-Anchor\" href=\"#股票代码\"></a> 股票代码</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>沪市A股</th>\n<th>沪市B股</th>\n<th>深市A股</th>\n<th>深市B股</th>\n<th>深市中小板</th>\n<th>深市创业板</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码开头</td>\n<td>60</td>\n<td>900</td>\n<td>00</td>\n<td>200</td>\n<td>002</td>\n<td>300</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>0 2 3 6 9 开头的6位代码，一般对应股票</p>\n</blockquote>\n<h4 id=\"基金\"><a class=\"markdownIt-Anchor\" href=\"#基金\"></a> 基金</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>沪市基金</th>\n<th>沪市ETF</th>\n<th>沪市LOF</th>\n<th>深市基金</th>\n<th>深市ETF</th>\n<th>深市LOF</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码开头</td>\n<td>5</td>\n<td>51</td>\n<td>5010</td>\n<td>1</td>\n<td>15</td>\n<td>16</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>1 5 开头的6位代码，一般对应基金</p>\n</blockquote>\n<p><img src=\"https://blogimage.lemonlife.top/202012062012_180.png\" alt=\"\" /></p>\n<blockquote>\n<p>资料来源 网易云课堂 力哥理财</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h2>\n<p>由于互联网技术的发展，早期的封闭式基金，已经退出了历史舞台，被开放式基金代替。开放式基金根据基金类型可分为</p>\n<ul>\n<li>股票型基金 ( 80% 的资金用于股票)</li>\n<li>混合型基金\n<ul>\n<li>偏股型基金 (股票占比 &gt;= 50% )</li>\n<li>偏债型基金 (债券占比 &gt;= 50% )</li>\n<li>平衡型基金 (股票债券占比 &lt;= 50% )</li>\n<li>灵活型基金 (占比无要求)</li>\n</ul>\n</li>\n<li>债券型基金 ( 80% 的基金用于债券)</li>\n<li>货币市场基金</li>\n</ul>\n<blockquote>\n<p>投资风险从高到底， 股票型基金 混合型基金 债券型基金 货币基金</p>\n</blockquote>\n<h3 id=\"金融市场\"><a class=\"markdownIt-Anchor\" href=\"#金融市场\"></a> 金融市场</h3>\n<p>资本市场： 股票市场和一年期以上的债券市场，称为资本市场。</p>\n<blockquote>\n<p>包括 股票 基金 长期债券</p>\n</blockquote>\n<p>货币市场：只能交易短期债券和各类票据</p>\n<blockquote>\n<p>包括 短期债券 央票 银行汇票 债券回购 银行存款</p>\n</blockquote>\n<h3 id=\"基金名称解析\"><a class=\"markdownIt-Anchor\" href=\"#基金名称解析\"></a> 基金名称解析</h3>\n<ol>\n<li>\n<p>基金公司的名称</p>\n<p>如: 天弘 华夏 易方达 南方 工银瑞信 建信 博时 嘉实 招商 广发 汇添富 鹏华 富国 华宝兴业 ……</p>\n</li>\n<li>\n<p>基金特点或者偏好 (修饰词)<br />\n如：互联网主题 行业轮动 轻资产 健康环保 经济转型 中小盘 ……</p>\n</li>\n<li>\n<p>基金的投资范围<br />\n如：货币 债券 纯债 可转债 混合 灵活配置 股票 指数 增强指数 量化 海外 美元 ETF LOF QDII ……</p>\n</li>\n</ol>\n<h2 id=\"货币基金\"><a class=\"markdownIt-Anchor\" href=\"#货币基金\"></a> 货币基金</h2>\n<h4 id=\"申购时间\"><a class=\"markdownIt-Anchor\" href=\"#申购时间\"></a> 申购时间</h4>\n<p>一般选择周日晚~周四下午3点之前买入货币基金。</p>\n<h4 id=\"七日年化收益\"><a class=\"markdownIt-Anchor\" href=\"#七日年化收益\"></a> 七日年化收益</h4>\n<p>货币基金都维持过去七天的收益水平不变,持有一年后的整体收益。因为货币基金的值每天变换，所以七日年化收益一般是虚拟预估,不具有代表性</p>\n<h4 id=\"每万份收益\"><a class=\"markdownIt-Anchor\" href=\"#每万份收益\"></a> 每万份收益</h4>\n<p>或基净值永远是1元,所以每万份收益,就是1w元在当天的收入。</p>\n<h4 id=\"累计回报\"><a class=\"markdownIt-Anchor\" href=\"#累计回报\"></a> 累计回报</h4>\n<p>货币基金本来回报率就稳定不高，看短期收益没有任何意义，应该查看基金累计半年或者一年的收益。</p>\n<hr />\n<p>登录 天天基金网 点击基金排行,然后再点击,货币基金排行可以查看到货币基金的累计收益</p>\n<p><img src=\"https://blogimage.lemonlife.top/202012041330_247.png\" alt=\"\" /></p>\n<p><img src=\"https://blogimage.lemonlife.top/202012041333_376.png\" alt=\"货币基金排行\" /></p>\n<p><img src=\"https://blogimage.lemonlife.top/202012041336_84.png\" alt=\"余额宝货币基金规模\" /></p>\n<h3 id=\"货基类型\"><a class=\"markdownIt-Anchor\" href=\"#货基类型\"></a> 货基类型</h3>\n<p><strong>A:</strong> 1000元起买,余额宝出来后无限制了<br />\n<strong>B:</strong> 500万起买</p>\n<blockquote>\n<p>买货币基金建议别买后面有字母的，这样不会有利率歧视</p>\n</blockquote>\n<h3 id=\"货币etf\"><a class=\"markdownIt-Anchor\" href=\"#货币etf\"></a> 货币ETF</h3>\n<p>ETF (交易型开放式指数基金 Exchange Traded Funds )， 场内货币基金(可以直接在证券市场内买卖的货币基金),货币ETF要买不要收取佣金的货币基金。</p>\n<blockquote>\n<p>例如：华宝添益(511990) 银华日利(511880) 理财金H(511810)</p>\n</blockquote>\n<h2 id=\"债券基金\"><a class=\"markdownIt-Anchor\" href=\"#债券基金\"></a> 债券基金</h2>\n<p>从长期看，债基的利率高于货币基金和银行储蓄</p>\n<h3 id=\"债基分类\"><a class=\"markdownIt-Anchor\" href=\"#债基分类\"></a> 债基分类</h3>\n<p>按投资基金分类，债基可分为：</p>\n<ul>\n<li>短债基金</li>\n<li>中短债基金</li>\n<li>长期债券型基金</li>\n</ul>\n<p>按嫩否投资股票可以分为：</p>\n<ul>\n<li>二级债基(可拿出20%的基金去买二级市场股票)</li>\n<li>一级债基(不能买二级市场股票，但是可以在一级市场买新股,风险一般比二级债基低)</li>\n<li>纯债基 (不允许资金买股票的债基)</li>\n<li>转债基金(可以投资可转债市场的转债基金，风险较高)</li>\n</ul>\n<blockquote>\n<p>建议购买纯债基金,其他债基风险不明确</p>\n</blockquote>\n<h3 id=\"纯债投资和挑选\"><a class=\"markdownIt-Anchor\" href=\"#纯债投资和挑选\"></a> 纯债投资和挑选</h3>\n<p>纯债基金的平均年化收益率6%，在天天基金网按照债券型基金，选择长期纯债基金，近三年排行榜，通过剔除：</p>\n<ul>\n<li>剔除可转债的基金</li>\n<li>剔除小公司的基金剔除掉</li>\n<li>剔除基金规模超过20亿的基金</li>\n<li>剔除同一基金公司的非王牌基金</li>\n</ul>\n<blockquote>\n<p>A类B类债基都有申赎费用，A类是前端收费，B类是赎回的时候收费，C类不收取申购赎回费率。只收取销售服务费，短期C类长期选择A类。</p>\n</blockquote>\n<blockquote>\n<p>也可以选择，期限为一年的中期，定期开发债基</p>\n</blockquote>\n<h2 id=\"混合型基金\"><a class=\"markdownIt-Anchor\" href=\"#混合型基金\"></a> 混合型基金</h2>\n<p>平衡型和灵活配置型能体现出混合型基金的优势，风险对冲能力较好，收益很大程度上取决于基金经理的能力。</p>\n<h2 id=\"股票型基金\"><a class=\"markdownIt-Anchor\" href=\"#股票型基金\"></a> 股票型基金</h2>\n<p>现在的公募基金，都是在3~5个月后才能看到具体的持仓配比(哈哈哈,防止对手抄袭吧),一般股票型基金选择大型的基金公司来投。</p>\n<h4 id=\"大型基金公司\"><a class=\"markdownIt-Anchor\" href=\"#大型基金公司\"></a> 大型基金公司</h4>\n<ul>\n<li>基金行业第一梯队<br />\n天弘基金 工银瑞信(ICBC) 易方达基金 博时基金 招商基金 南方基金( * ) 嘉实基金( * ) 华夏 建信 中银 汇添富( * ) 鹏华 广发 富国( * ) 银华( * ) 华安( * ) 华宝兴业 兴全( * ) 兴业 上投摩根 大成基金</li>\n</ul>\n<h4 id=\"优秀的基金经理\"><a class=\"markdownIt-Anchor\" href=\"#优秀的基金经理\"></a> 优秀的基金经理</h4>\n<ul>\n<li>基金经理背景(年龄,35岁左右以上 学历 履历,管理6~7年或者以上)</li>\n<li>操盘风格 (基金公司每季度会公布基金报告,会看到基金最新持有的10大仓股,或者查看基金换手率，一般来说这些变化越小，说明该经理喜欢短线投资)</li>\n</ul>\n<h4 id=\"看业绩\"><a class=\"markdownIt-Anchor\" href=\"#看业绩\"></a> 看业绩</h4>\n<p>首先基金成立的时间足够久,至少是3~5年的,其他条件相同，时间越长越好。其次看收益,在长时间内，收益一直稳定,收益排名要一直靠前。</p>\n<h4 id=\"β系数\"><a class=\"markdownIt-Anchor\" href=\"#β系数\"></a> β系数</h4>\n<p>基金和业绩评价基准之间的相关性。风险和收益的相关系，例如货币基金的基准是定期存款利率。股票型基金，对应的就是大盘走势。指数型基金就是所跟踪的指数。β指数越高，说明基金的风险和收益波动性越大。β表示着基金要承担的系统性风险。</p>\n<h4 id=\"α系数\"><a class=\"markdownIt-Anchor\" href=\"#α系数\"></a> α系数</h4>\n<p>基金的绝对回报收益(超额收益，基金的收益 - 市场无风险收益)，主要靠基金经理的择时和选股水平决定的。一般α系数越高，说明基金经理的理财能力越强。</p>\n<h4 id=\"r平方0~100\"><a class=\"markdownIt-Anchor\" href=\"#r平方0~100\"></a> R平方(0~100)</h4>\n<p>R<sup>2</sup> 的数值越高 <code>α系数</code> 和 <code>β系数</code> 的可信度就越高。</p>\n<h4 id=\"夏普比率\"><a class=\"markdownIt-Anchor\" href=\"#夏普比率\"></a> 夏普比率</h4>\n<p>夏普比率越高,基金性价比越高,还有好多指数……记不住了……</p>\n<h4 id=\"看基金规模\"><a class=\"markdownIt-Anchor\" href=\"#看基金规模\"></a> 看基金规模</h4>\n<ul>\n<li>投资中小盘股的基金(10亿~20亿)</li>\n<li>投资大盘股基金(30~100亿)</li>\n<li>超过100亿,巨无霸基金😅</li>\n</ul>\n<h2 id=\"指数型基金\"><a class=\"markdownIt-Anchor\" href=\"#指数型基金\"></a> 指数型基金</h2>\n<p>根据某一个指数的成分股来配置股票基金。指数跟踪误差越小说明指数基金越优秀。</p>\n<p><img src=\"https://blogimage.lemonlife.top/202012051656_469.png\" alt=\"招商国政生物医药指数跟踪误差\" /></p>\n<p>一般指数基金的日跟踪误差都在0.5%以内,优秀的指数基金可以把误差缩小到0.05%以内,年度跟踪误差不会超过1.5%。</p>\n<h4 id=\"综合指数\"><a class=\"markdownIt-Anchor\" href=\"#综合指数\"></a> 综合指数</h4>\n<p>股票的股价和发行量的加权平均数，容易造成指数失真</p>\n<ul>\n<li>上证指数：上海证券交易所挂牌的所有股票的价格</li>\n<li>深证指数</li>\n</ul>\n<h4 id=\"成分指数\"><a class=\"markdownIt-Anchor\" href=\"#成分指数\"></a> 成分指数</h4>\n<p>根据科学客观的选样方法，挑选出样本股所构成的指数，成分指数在计算时候，只考虑流通股不考虑非流通股。现在基本是全流通股时代。成分指数的股票基本没半年更新一次。</p>\n<ul>\n<li>深证成分指数 (深证的中小盘股票指数)</li>\n<li>深证100指数,由深圳证券市场流通市值最大成分最活跃的100只成分股所编制的股票指数，代码为(399330) (深证大盘股票指数)</li>\n<li>上证50指数,26只股基本都是金融股和中石化，中石油。</li>\n<li>上证180指数，流通市值基本占到了上交所一般。</li>\n<li>沪深300指数，中证公司成立,大盘指数</li>\n<li>中证500指数 (小盘股)\n<ul>\n<li>排除沪深300指数成分股</li>\n<li>再排除剩下的市值排名前300的股票</li>\n<li>再排除最不活跃的20%的股票</li>\n<li>最后挑选剩下的市值，由高到低的最高的500个股票</li>\n</ul>\n</li>\n<li>中证800指数 (大中小盘的综合反映)</li>\n<li>中证1000指数 (小市值股票反映)</li>\n<li>中小版指数,创业板指数 (2009年诞生,投资风险高)</li>\n</ul>\n<h3 id=\"指数基金查询\"><a class=\"markdownIt-Anchor\" href=\"#指数基金查询\"></a> 指数基金查询</h3>\n<ol>\n<li>上交所官网 <a href=\"http://www.sse.com.cn/\">http://www.sse.com.cn/</a></li>\n<li>深交所官网 <a href=\"http://www.szse.cn/\">http://www.szse.cn/</a></li>\n<li>中证公司官网 <a href=\"http://www.csindex.com.cn/\">http://www.csindex.com.cn/</a></li>\n</ol>\n<h3 id=\"主动增强型指数基金\"><a class=\"markdownIt-Anchor\" href=\"#主动增强型指数基金\"></a> 主动增强型指数基金</h3>\n<p>基金经理可以，根据指数来做调整，风险较高,管理费介于股票基金和指数基金之间</p>\n<h3 id=\"挑选技巧\"><a class=\"markdownIt-Anchor\" href=\"#挑选技巧\"></a> 挑选技巧</h3>\n<p>买基金规模大的指数基金，买管理费低的,买老的指数基金，新基金可能没完成建仓，导致指数跟踪误差较大。</p>\n<h4 id=\"大数据指数基金\"><a class=\"markdownIt-Anchor\" href=\"#大数据指数基金\"></a> 大数据指数基金</h4>\n<p>利用大数据技术来预测，大数据基金的成分股不只是看基金经理，而是看好几位专家组成的专家团队的决策，中国第一代大数据基金：</p>\n<ul>\n<li>腾讯+银河(定投宝) 银河中证腾讯腾讯济安价值100指数基金,2013年5月诞生</li>\n<li>百度+广发 广发中证百度百发策略100指数基金</li>\n<li>阿里+博时 博时中证淘金大数据100指数基金</li>\n</ul>\n<p>第二批大数据基金：</p>\n<ul>\n<li>南方i100</li>\n<li>新浪i100</li>\n<li>中证银联智慧大数据100指数</li>\n<li>中证银联智策大数据100指数</li>\n<li>中证银联智策消费大数据指数</li>\n</ul>\n<p>大数据混合型基金：</p>\n<ul>\n<li>天弘云端生活优选基金</li>\n<li>东方红京东大数据混合基金</li>\n<li>广发百发大数据价值混合基金</li>\n<li>广发百发大数据成长混合基金</li>\n<li>嘉实腾讯自选股大数据策略混合基金</li>\n</ul>\n<blockquote>\n<p>目前人工智能，感觉还无法处理股市的风险，因此感觉大数据基金风险很大。  但是技术在进步，可以观望未来、</p>\n</blockquote>\n<h3 id=\"etf基金\"><a class=\"markdownIt-Anchor\" href=\"#etf基金\"></a> ETF基金</h3>\n<p>中国第一支ETF基金诞生于2004年12月30日，华夏上证50ETF基金。ETF基金管理费的属于指数基金中最低的了。</p>\n<h4 id=\"etf优点\"><a class=\"markdownIt-Anchor\" href=\"#etf优点\"></a> ETF优点</h4>\n<ol>\n<li>公开透明 投资成本最低</li>\n<li>操作灵活 投资门槛最低</li>\n<li>仓位最高 资金利用效率最高</li>\n<li>套利玩法可以带来超额收益</li>\n</ol>\n<h4 id=\"etf联接基金\"><a class=\"markdownIt-Anchor\" href=\"#etf联接基金\"></a> ETF联接基金</h4>\n<p>可以在场外的一级市场的申购赎回，方便大家购买。规定必须要有90%的资金购买对应的ETF基金。</p>\n<h4 id=\"etf联接基金的优势\"><a class=\"markdownIt-Anchor\" href=\"#etf联接基金的优势\"></a> ETF联接基金的优势</h4>\n<ol>\n<li>持有成本比普通指数基金低</li>\n<li>可以自动设置定投计划方便投资者</li>\n</ol>\n<h4 id=\"lof基金\"><a class=\"markdownIt-Anchor\" href=\"#lof基金\"></a> LOF基金</h4>\n<p>LOF<code>(Listed Open-ended Fund 上市型开放式基金)</code> 是中国市场自主创造的一种基金品种。中国第一支LOF基金成立于2004年8月24日，<code>南方积极配置混合(LOF)(160105)</code>。</p>\n<p><img src=\"https://blogimage.lemonlife.top/202012052203_547.png\" alt=\"南方积极配置混合(LOF)(160105)\" /></p>\n<blockquote>\n<p>ETF,LOF套利的规则我觉得很麻烦，主要时间肯定还是在工作上，基金就是长期投着玩玩。所以不记录这种高级的玩法。</p>\n</blockquote>\n<h3 id=\"行业指数基金\"><a class=\"markdownIt-Anchor\" href=\"#行业指数基金\"></a> 行业指数基金</h3>\n<p>宽基指数，选股基础比较宽泛行业分布比较均匀的指数。行业指数属于窄基指数。</p>\n<ul>\n<li>\n<p>泛教育</p>\n<ul>\n<li>中证教育产业指数</li>\n</ul>\n</li>\n<li>\n<p>泛理财</p>\n<ul>\n<li>中证金融指数(银行 证券 保险)</li>\n<li>中证互联网金融指数</li>\n</ul>\n</li>\n<li>\n<p>泛娱乐产业</p>\n<ul>\n<li>中证娱乐产业指数</li>\n<li>中证传媒产业指数</li>\n<li>中证影视产业指数</li>\n<li>中证文体休闲产业指数</li>\n<li>中证TMT指数</li>\n</ul>\n</li>\n<li>\n<p>健康产业</p>\n<ul>\n<li>各种医药医疗指数</li>\n<li>互联网医疗指数</li>\n<li>中证健康产业指数</li>\n<li>中证养老产业指数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"特种基金\"><a class=\"markdownIt-Anchor\" href=\"#特种基金\"></a> 特种基金</h2>\n<h3 id=\"分级基金\"><a class=\"markdownIt-Anchor\" href=\"#分级基金\"></a> 分级基金</h3>\n<p>具有中国特色的杠杆基金,国内第一支分级基金是<code>国投瑞银瑞福分级基金</code>,把一个基金的资产和收益拆分成不同风险级别的两个子基金。分级A和分级B。<br />\n上交所发行的母基金、分级A和分级B代码都以50开头。深交所发行的母基金都是以16开头分级A、分级B都是15开头。</p>\n<p><code>分级A约定收益 = 一年期定期存款基准利率+1.5%~5%</code></p>\n<blockquote>\n<p>分级基金游戏规则，我也觉的太复杂了</p>\n</blockquote>\n<h3 id=\"保本基金\"><a class=\"markdownIt-Anchor\" href=\"#保本基金\"></a> 保本基金</h3>\n<p>2004年2月中国第一支保本基金诞生，<code>银华保本增值基金</code>。</p>\n<p><strong>CPPI策略：</strong> 恒定比例投资组合保险策略 (  确定要保本的金额，保本金额值的现值进行无风险投资，剩余的资产进行风险投资 ).</p>\n<p><strong>TIPP策略：</strong> 时间不变性投资组合保险策略，投资组合总价值上涨，价值底线上涨。投资组合总价值下跌，价值底线下跌。</p>\n<p><strong>OBPI策略：</strong> 规则复杂……,国内一般采用CPPI策略。</p>\n<blockquote>\n<p>保本基金 基本收益都很低。甚至还不如放银行或者余额宝。所以2017年把保本基金改成了避险基金，</p>\n</blockquote>\n<h3 id=\"打新基金\"><a class=\"markdownIt-Anchor\" href=\"#打新基金\"></a> 打新基金</h3>\n<p>专门靠打新股来赚钱的基金。是因为中国特色的新股发行制度下产生的一种特色基金。因为中国的新股发型策略是核准制。所以会出现新股僧多粥少的情况，加上政府会压低新股股价，所以一般新股上市都是会上涨的。可以看到新股中签率基本都是万分之一。</p>\n<p><img src=\"https://blogimage.lemonlife.top/202012061229_858.png\" alt=\"新股中签率\" /></p>\n<ul>\n<li>基金规模在6-12亿之间。</li>\n<li>灵活配置型基金较多</li>\n</ul>\n<blockquote>\n<p>IPO改成注册制 是大势所趋，所以感觉打新基金的游戏，未来几年也玩不转。</p>\n</blockquote>\n<h3 id=\"生命周期基金\"><a class=\"markdownIt-Anchor\" href=\"#生命周期基金\"></a> 生命周期基金</h3>\n<p>生命周期基金的投资期限在5~30年之间。</p>\n<blockquote>\n<p>生命周期基金 在中国水土不服，一共就发行了几只生命周期基金。不过随着老龄化的到来，生命周期基金相关的市场肯定也会增加。</p>\n</blockquote>\n<h3 id=\"qdii基金\"><a class=\"markdownIt-Anchor\" href=\"#qdii基金\"></a> QDII基金</h3>\n<p>由于中国的外汇限制，所以中外资本流通，没有合适的方式。所以QDII是经济全球化过程中过度性的金融制度的安排。允许中国境内的机构投资者通过QDII去投资境外的资本市场。1983年我国台湾地区有QFII制度。2006年9月 国家发布<code>《关于基金管理公司境外证券投资外汇管理有关问题的通知》</code> ,2006年11月2日中国第一支试点债券型QDII基金,<code>华安国际配置基金</code>正式发行。</p>\n<ul>\n<li>投资门槛低</li>\n<li>流动性高</li>\n<li>管理费更低</li>\n</ul>\n<blockquote>\n<p>QDII 申赎费用贵，资金到账很慢。</p>\n</blockquote>\n<h3 id=\"reits基金\"><a class=\"markdownIt-Anchor\" href=\"#reits基金\"></a> REITs基金</h3>\n<p>REITs(Real Estate Investment Trusts,不动产信托投资基金),将流动性较低的非证券形态的房地产投资，直接转化为资本市场上的证券资产的投资基金。一种特殊的金融投资。2015年6月国内发布第一支公募基金REITs <code>鹏华前海万科REITs</code> 封闭式混合基金。</p>\n<blockquote>\n<p>中国 只有这一个实验品 后来没有发布其他的REIFs基金</p>\n</blockquote>\n<h3 id=\"fof基金\"><a class=\"markdownIt-Anchor\" href=\"#fof基金\"></a> FOF基金</h3>\n<p>拿钱买基金的基金。FOF基金是基金里面最灵活的，</p>\n<p>第一批FOF基金：</p>\n<ul>\n<li>华夏聚惠稳健目标风险混合型基金中基金(FOF)</li>\n<li>南方全天候策略混合基金中基金(FOF)</li>\n<li>建信福泽安泰混合型基金中基金(FOF)</li>\n<li>泰达宏利全能优选(FOF)</li>\n<li>嘉实领航资产配置混合型(FOF)</li>\n<li>海富通聚优精选(FOF)</li>\n</ul>\n<blockquote>\n<p>最新的一种基金品种</p>\n</blockquote>\n<h2 id=\"小技巧\"><a class=\"markdownIt-Anchor\" href=\"#小技巧\"></a> 小技巧</h2>\n<ul>\n<li>支付宝免费提现，可采用网商银行，中继的方式</li>\n<li>天天基金网 <a href=\"https://fund.eastmoney.com/\">链接</a></li>\n<li>shiboe <a href=\"http://www.shibor.org/\">链接</a></li>\n<li>集思录 <a href=\"https://www.jisilu.cn/\">链接</a></li>\n<li>理杏仁 <a href=\"https://www.lixinger.com/\">链接</a></li>\n</ul>\n<h3 id=\"基金定投\"><a class=\"markdownIt-Anchor\" href=\"#基金定投\"></a> 基金定投</h3>\n<p>指数基金由国内大厂，来控制，基本符合国内的宏观经济学发展。沪深300指数基金（大盘股）；中证500指数基金（小盘股），</p>\n<h4 id=\"定投周期\"><a class=\"markdownIt-Anchor\" href=\"#定投周期\"></a> 定投周期</h4>\n<p>一个月一次，定投的频率越高，收益亏损曲线月平滑，股市大涨减少投资，股市大跌 增加定投。</p>\n<h4 id=\"智能定投平台\"><a class=\"markdownIt-Anchor\" href=\"#智能定投平台\"></a> 智能定投平台</h4>\n<table>\n<thead>\n<tr>\n<th>招商银行</th>\n<th>摩羯智投</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>蚂蚁财富</td>\n<td>慧定投</td>\n</tr>\n<tr>\n<td>腾讯理财通</td>\n<td>目标盈定投</td>\n</tr>\n<tr>\n<td>雪球蛋卷基金</td>\n<td>蛋定投</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"基金评级机构\"><a class=\"markdownIt-Anchor\" href=\"#基金评级机构\"></a> 基金评级机构</h3>\n<ul>\n<li><a href=\"http://cn.morningstar.com/\">晨星</a></li>\n<li>理柏( 好像暂时没有中国大陆地区 )</li>\n<li><a href=\"https://www.fitchratings.com/\">惠誉</a></li>\n</ul>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<h4 id=\"股票代码\"><a class=\"markdownIt-Anchor\" href=\"#股票代码\"></a> 股票代码</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>沪市A股</th>\n<th>沪市B股</th>\n<th>深市A股</th>\n<th>深市B股</th>\n<th>深市中小板</th>\n<th>深市创业板</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码开头</td>\n<td>60</td>\n<td>900</td>\n<td>00</td>\n<td>200</td>\n<td>002</td>\n<td>300</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>0 2 3 6 9 开头的6位代码，一般对应股票</p>\n</blockquote>\n<h4 id=\"基金\"><a class=\"markdownIt-Anchor\" href=\"#基金\"></a> 基金</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>沪市基金</th>\n<th>沪市ETF</th>\n<th>沪市LOF</th>\n<th>深市基金</th>\n<th>深市ETF</th>\n<th>深市LOF</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码开头</td>\n<td>5</td>\n<td>51</td>\n<td>5010</td>\n<td>1</td>\n<td>15</td>\n<td>16</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>1 5 开头的6位代码，一般对应基金</p>\n</blockquote>\n<p><img src=\"https://blogimage.lemonlife.top/202012062012_180.png\" alt=\"\" /></p>\n<blockquote>\n<p>资料来源 网易云课堂 力哥理财</p>\n</blockquote>\n"},{"title":"git自动化部署项目","date":"2019-08-02T13:41:30.000Z","_content":"## Java spring boot 项目\n> 使用git和docker 自动化部署spring boot 项目,默认一下流程用`root`身份进行，普通用户登录请在一些命令前加`sudo`;\n### git操作\n1. 服务器上创建git仓库(假设仓库名称是times)\n```\ngit inint --bare times.git\nchmod -R +777 times.git\ncd times.git/hooks\ntouch post-receive\nchmod +x post-receive\n```\n2. 创建一些目录\n```\ncd ~\nmkdir times.tmp\nmkdir times.work\ncd times.work\ntouch ./work-hooks\nchmod +x work-hooks\n```\n3. 编写自动化脚本(post-receive文件)\n```bash\nunset GIT_DIR\nGIT_DIR=/root/times.git\nWORK_DIR=/root/times.work\nTMP=/root/times.tmp\n# 把times仓库里面的代码克隆到TMP临时目录\ngit clone $GIT_DIR $TMP\n# 把临时文件复制到工作区文件夹\n\\cp -rf ${TMP}/*  ${WORK_DIR}/\n# 清除临时目录\nrm -rf ${TMP}\ncd $WORK_DIR\n#执行工作区里面的工作脚本\nsudo ./work-hooks\n```\n4. 编写工作文件夹里面的部署\n> 即`times.work`文件夹下的`work-hooks`脚本\n```bash\n#!/bin/bash\n#用maven打包项目\n#mvn package\n#跳过测试用例打包项目\nmvn  package  -Dmaven.skip.test=true\n#AR=$(pwd)/target/photos-0.0.1-SNAPSHOT.war\n#docker 运行项目\n# docker run -p 8080:8080 --name times-springboot -v /root/times.work/target/photos-0.0.1-SNAPSHOT.war:/photos-0.0.1-SNAPSHOT.war -d openjdk:8-jdk nohup  java -jar /photos-0.0.1-SNAPSHOT.war\n# docker run -p 8080:8080 --name times-springboot -v /root/times.work/target/photos-0.0.1-SNAPSHOT.war:/photos-0.0.1-SNAPSHOT.war --link times-mysql:mysql   -d openjdk:8-jdk nohup  java -jar /photos-0.0.1-SNAPSHOT.war \ndocker restart times-springboot\n```\n\n### 部署相关命令\n> `cd /root/times.work` `vim`cd\n### 推送代码到远程仓库\n- 简单版本每次推送都需要输密码\n1. 本地代码仓库添加远程仓库\n`git remote add aly-times root@106.15.179.33:/root/times.git`\n2. 推送本地代码去远程仓库\n`git push aly-times master`如果出现代码冲突推送不上可直接`git push -f aly-times master`\n### 常见问题和解决办法\n1. 报错`bash: ***:command not found`\n解决办法[参看链接](https://www.linuxidc.com/Linux/2012-07/66270.htm)\n![链接内容](../../../../images/git-hooks/solution1.png)\n### 最后补充和本节内容无关的内容\n1. 后台运行spring boot项目\n`nohup java -jar yourackage-version.jar >temp.log &`\n> nohup – no hang up 意味保持执行不挂起之意。 \n& – 表示在后台执行进程 ，与&& 不同，&&代表执行前后两条指令。 \n> – 这个是Linux重定向的命令，可以理解为可以将命令行输出的日志等内容重定向到制定的文件如上指令中的temp.log文件中。Linux重定向指令还有>>该指令和>的区别是，前者是追加写入，后者是覆盖写入。\n\n[参看链接](https://blog.csdn.net/yanJunit/article/details/77728338)\n\n2. 停止运行的项目\n- 通过运行`war`包名称查找进程id `ps -ef|grep  jenkins.war`  (jenkins.war,运行时运行的war包)\n- 或者 通过程序运行端口查找进程id 【Linux】 `netstat -nlp |grep 8080` 【Windows】`netstat -ano|findstr 8080`\n- 结束对应进程 【Linux】 `kill  7832 pid` 【Windows】`taskkill -F -PID 7832`   (7832,进程id)\n\n[参看链接](https://blog.csdn.net/qq_38950013/article/details/95163962)","source":"_posts/git-hooks.md","raw":"---\ntitle: git自动化部署项目\ndate: 2019-08-02 21:41:30\ntags: Git\n---\n## Java spring boot 项目\n> 使用git和docker 自动化部署spring boot 项目,默认一下流程用`root`身份进行，普通用户登录请在一些命令前加`sudo`;\n### git操作\n1. 服务器上创建git仓库(假设仓库名称是times)\n```\ngit inint --bare times.git\nchmod -R +777 times.git\ncd times.git/hooks\ntouch post-receive\nchmod +x post-receive\n```\n2. 创建一些目录\n```\ncd ~\nmkdir times.tmp\nmkdir times.work\ncd times.work\ntouch ./work-hooks\nchmod +x work-hooks\n```\n3. 编写自动化脚本(post-receive文件)\n```bash\nunset GIT_DIR\nGIT_DIR=/root/times.git\nWORK_DIR=/root/times.work\nTMP=/root/times.tmp\n# 把times仓库里面的代码克隆到TMP临时目录\ngit clone $GIT_DIR $TMP\n# 把临时文件复制到工作区文件夹\n\\cp -rf ${TMP}/*  ${WORK_DIR}/\n# 清除临时目录\nrm -rf ${TMP}\ncd $WORK_DIR\n#执行工作区里面的工作脚本\nsudo ./work-hooks\n```\n4. 编写工作文件夹里面的部署\n> 即`times.work`文件夹下的`work-hooks`脚本\n```bash\n#!/bin/bash\n#用maven打包项目\n#mvn package\n#跳过测试用例打包项目\nmvn  package  -Dmaven.skip.test=true\n#AR=$(pwd)/target/photos-0.0.1-SNAPSHOT.war\n#docker 运行项目\n# docker run -p 8080:8080 --name times-springboot -v /root/times.work/target/photos-0.0.1-SNAPSHOT.war:/photos-0.0.1-SNAPSHOT.war -d openjdk:8-jdk nohup  java -jar /photos-0.0.1-SNAPSHOT.war\n# docker run -p 8080:8080 --name times-springboot -v /root/times.work/target/photos-0.0.1-SNAPSHOT.war:/photos-0.0.1-SNAPSHOT.war --link times-mysql:mysql   -d openjdk:8-jdk nohup  java -jar /photos-0.0.1-SNAPSHOT.war \ndocker restart times-springboot\n```\n\n### 部署相关命令\n> `cd /root/times.work` `vim`cd\n### 推送代码到远程仓库\n- 简单版本每次推送都需要输密码\n1. 本地代码仓库添加远程仓库\n`git remote add aly-times root@106.15.179.33:/root/times.git`\n2. 推送本地代码去远程仓库\n`git push aly-times master`如果出现代码冲突推送不上可直接`git push -f aly-times master`\n### 常见问题和解决办法\n1. 报错`bash: ***:command not found`\n解决办法[参看链接](https://www.linuxidc.com/Linux/2012-07/66270.htm)\n![链接内容](../../../../images/git-hooks/solution1.png)\n### 最后补充和本节内容无关的内容\n1. 后台运行spring boot项目\n`nohup java -jar yourackage-version.jar >temp.log &`\n> nohup – no hang up 意味保持执行不挂起之意。 \n& – 表示在后台执行进程 ，与&& 不同，&&代表执行前后两条指令。 \n> – 这个是Linux重定向的命令，可以理解为可以将命令行输出的日志等内容重定向到制定的文件如上指令中的temp.log文件中。Linux重定向指令还有>>该指令和>的区别是，前者是追加写入，后者是覆盖写入。\n\n[参看链接](https://blog.csdn.net/yanJunit/article/details/77728338)\n\n2. 停止运行的项目\n- 通过运行`war`包名称查找进程id `ps -ef|grep  jenkins.war`  (jenkins.war,运行时运行的war包)\n- 或者 通过程序运行端口查找进程id 【Linux】 `netstat -nlp |grep 8080` 【Windows】`netstat -ano|findstr 8080`\n- 结束对应进程 【Linux】 `kill  7832 pid` 【Windows】`taskkill -F -PID 7832`   (7832,进程id)\n\n[参看链接](https://blog.csdn.net/qq_38950013/article/details/95163962)","slug":"git-hooks","published":1,"updated":"2021-08-07T01:59:03.341Z","_id":"cl4ince6e000ecgufcpxu6hrn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"java-spring-boot-项目\"><a class=\"markdownIt-Anchor\" href=\"#java-spring-boot-项目\"></a> Java spring boot 项目</h2>\n<blockquote>\n<p>使用git和docker 自动化部署spring boot 项目,默认一下流程用<code>root</code>身份进行，普通用户登录请在一些命令前加<code>sudo</code>;</p>\n</blockquote>\n<h3 id=\"git操作\"><a class=\"markdownIt-Anchor\" href=\"#git操作\"></a> git操作</h3>\n<ol>\n<li>服务器上创建git仓库(假设仓库名称是times)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git inint --bare times.git</span><br><span class=\"line\">chmod -R +777 times.git</span><br><span class=\"line\">cd times.git/hooks</span><br><span class=\"line\">touch post-receive</span><br><span class=\"line\">chmod +x post-receive</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建一些目录</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir times.tmp</span><br><span class=\"line\">mkdir times.work</span><br><span class=\"line\">cd times.work</span><br><span class=\"line\">touch ./work-hooks</span><br><span class=\"line\">chmod +x work-hooks</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编写自动化脚本(post-receive文件)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unset</span> GIT_DIR</span><br><span class=\"line\">GIT_DIR=/root/times.git</span><br><span class=\"line\">WORK_DIR=/root/times.work</span><br><span class=\"line\">TMP=/root/times.tmp</span><br><span class=\"line\"><span class=\"comment\"># 把times仓库里面的代码克隆到TMP临时目录</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$GIT_DIR</span> <span class=\"variable\">$TMP</span></span><br><span class=\"line\"><span class=\"comment\"># 把临时文件复制到工作区文件夹</span></span><br><span class=\"line\">\\<span class=\"built_in\">cp</span> -rf <span class=\"variable\">$&#123;TMP&#125;</span>/*  <span class=\"variable\">$&#123;WORK_DIR&#125;</span>/</span><br><span class=\"line\"><span class=\"comment\"># 清除临时目录</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf <span class=\"variable\">$&#123;TMP&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$WORK_DIR</span></span><br><span class=\"line\"><span class=\"comment\">#执行工作区里面的工作脚本</span></span><br><span class=\"line\">sudo ./work-hooks</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>编写工作文件夹里面的部署</li>\n</ol>\n<blockquote>\n<p>即<code>times.work</code>文件夹下的<code>work-hooks</code>脚本</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#用maven打包项目</span></span><br><span class=\"line\"><span class=\"comment\">#mvn package</span></span><br><span class=\"line\"><span class=\"comment\">#跳过测试用例打包项目</span></span><br><span class=\"line\">mvn  package  -Dmaven.skip.test=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#AR=$(pwd)/target/photos-0.0.1-SNAPSHOT.war</span></span><br><span class=\"line\"><span class=\"comment\">#docker 运行项目</span></span><br><span class=\"line\"><span class=\"comment\"># docker run -p 8080:8080 --name times-springboot -v /root/times.work/target/photos-0.0.1-SNAPSHOT.war:/photos-0.0.1-SNAPSHOT.war -d openjdk:8-jdk nohup  java -jar /photos-0.0.1-SNAPSHOT.war</span></span><br><span class=\"line\"><span class=\"comment\"># docker run -p 8080:8080 --name times-springboot -v /root/times.work/target/photos-0.0.1-SNAPSHOT.war:/photos-0.0.1-SNAPSHOT.war --link times-mysql:mysql   -d openjdk:8-jdk nohup  java -jar /photos-0.0.1-SNAPSHOT.war </span></span><br><span class=\"line\">docker restart times-springboot</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署相关命令\"><a class=\"markdownIt-Anchor\" href=\"#部署相关命令\"></a> 部署相关命令</h3>\n<blockquote>\n<p><code>cd /root/times.work</code> <code>vim</code>cd</p>\n</blockquote>\n<h3 id=\"推送代码到远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#推送代码到远程仓库\"></a> 推送代码到远程仓库</h3>\n<ul>\n<li>简单版本每次推送都需要输密码</li>\n</ul>\n<ol>\n<li>本地代码仓库添加远程仓库<br />\n<code>git remote add aly-times root@106.15.179.33:/root/times.git</code></li>\n<li>推送本地代码去远程仓库<br />\n<code>git push aly-times master</code>如果出现代码冲突推送不上可直接<code>git push -f aly-times master</code></li>\n</ol>\n<h3 id=\"常见问题和解决办法\"><a class=\"markdownIt-Anchor\" href=\"#常见问题和解决办法\"></a> 常见问题和解决办法</h3>\n<ol>\n<li>报错<code>bash: ***:command not found</code><br />\n解决办法<a href=\"https://www.linuxidc.com/Linux/2012-07/66270.htm\">参看链接</a><br />\n<img src=\"../../../../images/git-hooks/solution1.png\" alt=\"链接内容\" /></li>\n</ol>\n<h3 id=\"最后补充和本节内容无关的内容\"><a class=\"markdownIt-Anchor\" href=\"#最后补充和本节内容无关的内容\"></a> 最后补充和本节内容无关的内容</h3>\n<ol>\n<li>后台运行spring boot项目<br />\n<code>nohup java -jar yourackage-version.jar &gt;temp.log &amp;</code></li>\n</ol>\n<blockquote>\n<p>nohup – no hang up 意味保持执行不挂起之意。<br />\n&amp; – 表示在后台执行进程 ，与&amp;&amp; 不同，&amp;&amp;代表执行前后两条指令。<br />\n– 这个是Linux重定向的命令，可以理解为可以将命令行输出的日志等内容重定向到制定的文件如上指令中的temp.log文件中。Linux重定向指令还有&gt;&gt;该指令和&gt;的区别是，前者是追加写入，后者是覆盖写入。</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/yanJunit/article/details/77728338\">参看链接</a></p>\n<ol start=\"2\">\n<li>停止运行的项目</li>\n</ol>\n<ul>\n<li>通过运行<code>war</code>包名称查找进程id <code>ps -ef|grep jenkins.war</code>  (jenkins.war,运行时运行的war包)</li>\n<li>或者 通过程序运行端口查找进程id 【Linux】 <code>netstat -nlp |grep 8080</code> 【Windows】<code>netstat -ano|findstr 8080</code></li>\n<li>结束对应进程 【Linux】 <code>kill 7832 pid</code> 【Windows】<code>taskkill -F -PID 7832</code>   (7832,进程id)</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_38950013/article/details/95163962\">参看链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"java-spring-boot-项目\"><a class=\"markdownIt-Anchor\" href=\"#java-spring-boot-项目\"></a> Java spring boot 项目</h2>\n<blockquote>\n<p>使用git和docker 自动化部署spring boot 项目,默认一下流程用<code>root</code>身份进行，普通用户登录请在一些命令前加<code>sudo</code>;</p>\n</blockquote>\n<h3 id=\"git操作\"><a class=\"markdownIt-Anchor\" href=\"#git操作\"></a> git操作</h3>\n<ol>\n<li>服务器上创建git仓库(假设仓库名称是times)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git inint --bare times.git</span><br><span class=\"line\">chmod -R +777 times.git</span><br><span class=\"line\">cd times.git/hooks</span><br><span class=\"line\">touch post-receive</span><br><span class=\"line\">chmod +x post-receive</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建一些目录</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir times.tmp</span><br><span class=\"line\">mkdir times.work</span><br><span class=\"line\">cd times.work</span><br><span class=\"line\">touch ./work-hooks</span><br><span class=\"line\">chmod +x work-hooks</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编写自动化脚本(post-receive文件)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unset</span> GIT_DIR</span><br><span class=\"line\">GIT_DIR=/root/times.git</span><br><span class=\"line\">WORK_DIR=/root/times.work</span><br><span class=\"line\">TMP=/root/times.tmp</span><br><span class=\"line\"><span class=\"comment\"># 把times仓库里面的代码克隆到TMP临时目录</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$GIT_DIR</span> <span class=\"variable\">$TMP</span></span><br><span class=\"line\"><span class=\"comment\"># 把临时文件复制到工作区文件夹</span></span><br><span class=\"line\">\\<span class=\"built_in\">cp</span> -rf <span class=\"variable\">$&#123;TMP&#125;</span>/*  <span class=\"variable\">$&#123;WORK_DIR&#125;</span>/</span><br><span class=\"line\"><span class=\"comment\"># 清除临时目录</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf <span class=\"variable\">$&#123;TMP&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$WORK_DIR</span></span><br><span class=\"line\"><span class=\"comment\">#执行工作区里面的工作脚本</span></span><br><span class=\"line\">sudo ./work-hooks</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>编写工作文件夹里面的部署</li>\n</ol>\n<blockquote>\n<p>即<code>times.work</code>文件夹下的<code>work-hooks</code>脚本</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#用maven打包项目</span></span><br><span class=\"line\"><span class=\"comment\">#mvn package</span></span><br><span class=\"line\"><span class=\"comment\">#跳过测试用例打包项目</span></span><br><span class=\"line\">mvn  package  -Dmaven.skip.test=<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">#AR=$(pwd)/target/photos-0.0.1-SNAPSHOT.war</span></span><br><span class=\"line\"><span class=\"comment\">#docker 运行项目</span></span><br><span class=\"line\"><span class=\"comment\"># docker run -p 8080:8080 --name times-springboot -v /root/times.work/target/photos-0.0.1-SNAPSHOT.war:/photos-0.0.1-SNAPSHOT.war -d openjdk:8-jdk nohup  java -jar /photos-0.0.1-SNAPSHOT.war</span></span><br><span class=\"line\"><span class=\"comment\"># docker run -p 8080:8080 --name times-springboot -v /root/times.work/target/photos-0.0.1-SNAPSHOT.war:/photos-0.0.1-SNAPSHOT.war --link times-mysql:mysql   -d openjdk:8-jdk nohup  java -jar /photos-0.0.1-SNAPSHOT.war </span></span><br><span class=\"line\">docker restart times-springboot</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署相关命令\"><a class=\"markdownIt-Anchor\" href=\"#部署相关命令\"></a> 部署相关命令</h3>\n<blockquote>\n<p><code>cd /root/times.work</code> <code>vim</code>cd</p>\n</blockquote>\n<h3 id=\"推送代码到远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#推送代码到远程仓库\"></a> 推送代码到远程仓库</h3>\n<ul>\n<li>简单版本每次推送都需要输密码</li>\n</ul>\n<ol>\n<li>本地代码仓库添加远程仓库<br />\n<code>git remote add aly-times root@106.15.179.33:/root/times.git</code></li>\n<li>推送本地代码去远程仓库<br />\n<code>git push aly-times master</code>如果出现代码冲突推送不上可直接<code>git push -f aly-times master</code></li>\n</ol>\n<h3 id=\"常见问题和解决办法\"><a class=\"markdownIt-Anchor\" href=\"#常见问题和解决办法\"></a> 常见问题和解决办法</h3>\n<ol>\n<li>报错<code>bash: ***:command not found</code><br />\n解决办法<a href=\"https://www.linuxidc.com/Linux/2012-07/66270.htm\">参看链接</a><br />\n<img src=\"../../../../images/git-hooks/solution1.png\" alt=\"链接内容\" /></li>\n</ol>\n<h3 id=\"最后补充和本节内容无关的内容\"><a class=\"markdownIt-Anchor\" href=\"#最后补充和本节内容无关的内容\"></a> 最后补充和本节内容无关的内容</h3>\n<ol>\n<li>后台运行spring boot项目<br />\n<code>nohup java -jar yourackage-version.jar &gt;temp.log &amp;</code></li>\n</ol>\n<blockquote>\n<p>nohup – no hang up 意味保持执行不挂起之意。<br />\n&amp; – 表示在后台执行进程 ，与&amp;&amp; 不同，&amp;&amp;代表执行前后两条指令。<br />\n– 这个是Linux重定向的命令，可以理解为可以将命令行输出的日志等内容重定向到制定的文件如上指令中的temp.log文件中。Linux重定向指令还有&gt;&gt;该指令和&gt;的区别是，前者是追加写入，后者是覆盖写入。</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/yanJunit/article/details/77728338\">参看链接</a></p>\n<ol start=\"2\">\n<li>停止运行的项目</li>\n</ol>\n<ul>\n<li>通过运行<code>war</code>包名称查找进程id <code>ps -ef|grep jenkins.war</code>  (jenkins.war,运行时运行的war包)</li>\n<li>或者 通过程序运行端口查找进程id 【Linux】 <code>netstat -nlp |grep 8080</code> 【Windows】<code>netstat -ano|findstr 8080</code></li>\n<li>结束对应进程 【Linux】 <code>kill 7832 pid</code> 【Windows】<code>taskkill -F -PID 7832</code>   (7832,进程id)</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_38950013/article/details/95163962\">参看链接</a></p>\n"},{"title":"Git使用方法","date":"2019-07-30T06:01:26.000Z","_content":"## 安装Git\n- Windows安装git,直接搜索git下载安装就好了\n- Linux(ubuntu系列)\n\n```bash\n apt-get install git \n```\n- Linux(Centos)\n\n  自己的仓库地址里面有简单的一键安装脚本 [git-centos.sh](https://github.com/ilovcoding/shell)\n\n## 码云(gitee)配置ssh密钥\n- 见网友的[简书连接](https://www.jianshu.com/p/416ac815b2b1)\n\n## 在仓库里面创建新分支\n1.  登录码云找到仓库\n![复制仓库地址](../../../../images/git-use-method/address.png)\n2. 下载代码到本地\n![git clone](../../../../images/git-use-method/gitclone.png)\n3. 创建新的分支\n> 创建一个含有自己名字字母缩写的新分支\n![git checkout](../../../../images/git-use-method/gitcheckout.png)\n4. 提交代码\n> 随便修改一下README.md 文件然后进行 `add` `commit` `push` 流程;主要提交的分支一定是刚刚自己创建的分支不允许提交到master或者他人分支\n![git push](../../../../images/git-use-method/push.png)\n5. 提交成功的样子\n> 点一下那个master除了`master`分支和我刚刚创建的 `dev-wmw`看到自己的分支说明成功\n![提交成功](../../../../images/git-use-method/success.png)、\n\n## 最后不做要求\n> 写代码有代码规范提交代码也有`git commit`规范\n- 我觉得比较常用的\n```\nfeat：新功能（feature）\nfix：修补bug\ndocs：文档（documentation）\nstyle： 格式（不影响代码运行的变动）\nrefactor：重构（即不是新增功能，也不是修改bug的代码变动）\ntest：增加测试\nchore：构建过程或辅助工具的变动\n```\n- 网络上比较全的规范\n\n  [阮一峰的网络日志:Commit message](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n  [未知名网友在segmentfault上的帖子](https://segmentfault.com/a/1190000009048911)","source":"_posts/git-use-method.md","raw":"---\ntitle: \"Git使用方法\"\ndate: 2019-07-30 14:01:26\ntags: \"Git\"\n---\n## 安装Git\n- Windows安装git,直接搜索git下载安装就好了\n- Linux(ubuntu系列)\n\n```bash\n apt-get install git \n```\n- Linux(Centos)\n\n  自己的仓库地址里面有简单的一键安装脚本 [git-centos.sh](https://github.com/ilovcoding/shell)\n\n## 码云(gitee)配置ssh密钥\n- 见网友的[简书连接](https://www.jianshu.com/p/416ac815b2b1)\n\n## 在仓库里面创建新分支\n1.  登录码云找到仓库\n![复制仓库地址](../../../../images/git-use-method/address.png)\n2. 下载代码到本地\n![git clone](../../../../images/git-use-method/gitclone.png)\n3. 创建新的分支\n> 创建一个含有自己名字字母缩写的新分支\n![git checkout](../../../../images/git-use-method/gitcheckout.png)\n4. 提交代码\n> 随便修改一下README.md 文件然后进行 `add` `commit` `push` 流程;主要提交的分支一定是刚刚自己创建的分支不允许提交到master或者他人分支\n![git push](../../../../images/git-use-method/push.png)\n5. 提交成功的样子\n> 点一下那个master除了`master`分支和我刚刚创建的 `dev-wmw`看到自己的分支说明成功\n![提交成功](../../../../images/git-use-method/success.png)、\n\n## 最后不做要求\n> 写代码有代码规范提交代码也有`git commit`规范\n- 我觉得比较常用的\n```\nfeat：新功能（feature）\nfix：修补bug\ndocs：文档（documentation）\nstyle： 格式（不影响代码运行的变动）\nrefactor：重构（即不是新增功能，也不是修改bug的代码变动）\ntest：增加测试\nchore：构建过程或辅助工具的变动\n```\n- 网络上比较全的规范\n\n  [阮一峰的网络日志:Commit message](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n  [未知名网友在segmentfault上的帖子](https://segmentfault.com/a/1190000009048911)","slug":"git-use-method","published":1,"updated":"2022-06-17T16:54:24.145Z","_id":"cl4ince6f000hcguf7ncghuyh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"安装git\"><a class=\"markdownIt-Anchor\" href=\"#安装git\"></a> 安装Git</h2>\n<ul>\n<li>Windows安装git,直接搜索git下载安装就好了</li>\n<li>Linux(ubuntu系列)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install git </span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>Linux(Centos)</p>\n<p>自己的仓库地址里面有简单的一键安装脚本 <a href=\"https://github.com/ilovcoding/shell\">git-centos.sh</a></p>\n</li>\n</ul>\n<h2 id=\"码云gitee配置ssh密钥\"><a class=\"markdownIt-Anchor\" href=\"#码云gitee配置ssh密钥\"></a> 码云(gitee)配置ssh密钥</h2>\n<ul>\n<li>见网友的<a href=\"https://www.jianshu.com/p/416ac815b2b1\">简书连接</a></li>\n</ul>\n<h2 id=\"在仓库里面创建新分支\"><a class=\"markdownIt-Anchor\" href=\"#在仓库里面创建新分支\"></a> 在仓库里面创建新分支</h2>\n<ol>\n<li>登录码云找到仓库<br />\n<img src=\"../../../../images/git-use-method/address.png\" alt=\"复制仓库地址\" /></li>\n<li>下载代码到本地<br />\n<img src=\"../../../../images/git-use-method/gitclone.png\" alt=\"git clone\" /></li>\n<li>创建新的分支</li>\n</ol>\n<blockquote>\n<p>创建一个含有自己名字字母缩写的新分支<br />\n<img src=\"../../../../images/git-use-method/gitcheckout.png\" alt=\"git checkout\" /></p>\n</blockquote>\n<ol start=\"4\">\n<li>提交代码</li>\n</ol>\n<blockquote>\n<p><a href=\"http://xn--README-9m7i2cw9qpnh84qhzzh.md\">随便修改一下README.md</a> 文件然后进行 <code>add</code> <code>commit</code> <code>push</code> 流程;主要提交的分支一定是刚刚自己创建的分支不允许提交到master或者他人分支<br />\n<img src=\"../../../../images/git-use-method/push.png\" alt=\"git push\" /></p>\n</blockquote>\n<ol start=\"5\">\n<li>提交成功的样子</li>\n</ol>\n<blockquote>\n<p>点一下那个master除了<code>master</code>分支和我刚刚创建的 <code>dev-wmw</code>看到自己的分支说明成功<br />\n<img src=\"../../../../images/git-use-method/success.png\" alt=\"提交成功\" />、</p>\n</blockquote>\n<h2 id=\"最后不做要求\"><a class=\"markdownIt-Anchor\" href=\"#最后不做要求\"></a> 最后不做要求</h2>\n<blockquote>\n<p>写代码有代码规范提交代码也有<code>git commit</code>规范</p>\n</blockquote>\n<ul>\n<li>我觉得比较常用的</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat：新功能（feature）</span><br><span class=\"line\">fix：修补bug</span><br><span class=\"line\">docs：文档（documentation）</span><br><span class=\"line\">style： 格式（不影响代码运行的变动）</span><br><span class=\"line\">refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class=\"line\">test：增加测试</span><br><span class=\"line\">chore：构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>网络上比较全的规范</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\">阮一峰的网络日志:Commit message</a><br />\n<a href=\"https://segmentfault.com/a/1190000009048911\">未知名网友在segmentfault上的帖子</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装git\"><a class=\"markdownIt-Anchor\" href=\"#安装git\"></a> 安装Git</h2>\n<ul>\n<li>Windows安装git,直接搜索git下载安装就好了</li>\n<li>Linux(ubuntu系列)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install git </span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>Linux(Centos)</p>\n<p>自己的仓库地址里面有简单的一键安装脚本 <a href=\"https://github.com/ilovcoding/shell\">git-centos.sh</a></p>\n</li>\n</ul>\n<h2 id=\"码云gitee配置ssh密钥\"><a class=\"markdownIt-Anchor\" href=\"#码云gitee配置ssh密钥\"></a> 码云(gitee)配置ssh密钥</h2>\n<ul>\n<li>见网友的<a href=\"https://www.jianshu.com/p/416ac815b2b1\">简书连接</a></li>\n</ul>\n<h2 id=\"在仓库里面创建新分支\"><a class=\"markdownIt-Anchor\" href=\"#在仓库里面创建新分支\"></a> 在仓库里面创建新分支</h2>\n<ol>\n<li>登录码云找到仓库<br />\n<img src=\"../../../../images/git-use-method/address.png\" alt=\"复制仓库地址\" /></li>\n<li>下载代码到本地<br />\n<img src=\"../../../../images/git-use-method/gitclone.png\" alt=\"git clone\" /></li>\n<li>创建新的分支</li>\n</ol>\n<blockquote>\n<p>创建一个含有自己名字字母缩写的新分支<br />\n<img src=\"../../../../images/git-use-method/gitcheckout.png\" alt=\"git checkout\" /></p>\n</blockquote>\n<ol start=\"4\">\n<li>提交代码</li>\n</ol>\n<blockquote>\n<p><a href=\"http://xn--README-9m7i2cw9qpnh84qhzzh.md\">随便修改一下README.md</a> 文件然后进行 <code>add</code> <code>commit</code> <code>push</code> 流程;主要提交的分支一定是刚刚自己创建的分支不允许提交到master或者他人分支<br />\n<img src=\"../../../../images/git-use-method/push.png\" alt=\"git push\" /></p>\n</blockquote>\n<ol start=\"5\">\n<li>提交成功的样子</li>\n</ol>\n<blockquote>\n<p>点一下那个master除了<code>master</code>分支和我刚刚创建的 <code>dev-wmw</code>看到自己的分支说明成功<br />\n<img src=\"../../../../images/git-use-method/success.png\" alt=\"提交成功\" />、</p>\n</blockquote>\n<h2 id=\"最后不做要求\"><a class=\"markdownIt-Anchor\" href=\"#最后不做要求\"></a> 最后不做要求</h2>\n<blockquote>\n<p>写代码有代码规范提交代码也有<code>git commit</code>规范</p>\n</blockquote>\n<ul>\n<li>我觉得比较常用的</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat：新功能（feature）</span><br><span class=\"line\">fix：修补bug</span><br><span class=\"line\">docs：文档（documentation）</span><br><span class=\"line\">style： 格式（不影响代码运行的变动）</span><br><span class=\"line\">refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class=\"line\">test：增加测试</span><br><span class=\"line\">chore：构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>网络上比较全的规范</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\">阮一峰的网络日志:Commit message</a><br />\n<a href=\"https://segmentfault.com/a/1190000009048911\">未知名网友在segmentfault上的帖子</a></p>\n</li>\n</ul>\n"},{"title":"博客搭建过程","date":"2019-07-27T06:02:47.000Z","_content":"## 安装Hexo环境(默认winddows MacOS和Linux自行搜索如何安装Node.JS)\n>当然要安装其他博客主题或者基于GitHub构建博客不可或缺的工具就是[Git](https://git-scm.com/)这个管理工具,所以建议先安装Git\n\n> Hexo基于JavaScript,采用npm包管理器管理插件,安装Hexo需要先安装[npm](https://nodejs.org/zh-cn/download/)和[Node.JS](https://nodejs.org/zh-cn/download/);推荐下载LTS版本的Node.JS。\n\n- `cmd`中运行命令`git --version` `node -v` `npm -v` 出现对应的版本号说明安装成功\n- `cmd` 运行命令 `npm install hexo-cli -g` 安装Hexo脚手架工具,可参看官网[概述](https://hexo.io/zh-cn/docs/),[建站](https://hexo.io/zh-cn/docs/setup)的过程\n- 例如\n```\nhexo  init test\ncd test\nnpm install\nhexo server\n```\n![安装Hexo](http://blogimage.lemonlife.top/201910301359_423.png)\n## 安装主题\n> 我选择的是melody个人觉得这款主题真的很好看用起来也很方便。[主题GitHub地址](https://github.com/Molunerfinn/hexo-theme-melody/tree/fca917dd321bcda46b2a7dcddcf18cbe408cff18)\n\n- 例如(首先保障一下命令都是在上一步创建的test文件夹里面的)\n\n```\ngit clone -b master https://github.com/Molunerfinn/hexo-theme-melody themes/melody\nnpm install hexo-renderer-jade hexo-renderer-stylus --save\n```\n![安装主题](https://blogimage.lemonlife.top/201910302300_80.png)\n- 修改配置文件，使用先安装的主题\n\n修改test文件夹里面的`_config.yml`的文件的`theme landspcape`改成`theme melody`然后运行`hexo server`启动项目\n![修改配置文件](https://blogimage.lemonlife.top/201910302301_62.png)\n## 创建新帖子\n\n``` \nhexo new \"My New Post\"\n```\n## 帖子打包发布到GitHub\n> 首先确保自己电脑的GitHub ssh秘钥已经配置正确\n- 先运行 `npm install hexo-deployer-git --save` 安装插件\n- 修改`_config.yml`文件，在文件添加\n```\ndeploy:\n  type: git\n  repo: GitHub地址\n  branch: master\n```\n- 运行 `hexo generate` 生成部署文件到public文件夹\n- 运行 `hexo deploy` 部署到相应的仓库\n<!-- > 注意下次部署 可以直接运行 `hexo generate` 然后到`.deploy_git`目录中手动提交 -->\n## 添加评论功能\n   1. 进入主题的插件管理网站的[评论插件展示版块](https://molunerfinn.com/hexo-theme-melody-doc/third-party-support.html#comments),这边有很多评论版块，我使用的是`Gittalk`\n   2. 如果使用GitHub相关评论工具需要在 [GitHub官网](https://github.com/settings/applications/new)注册一个 OAuth application `Homepage URL`和 `Authorization callback URL`都可填你的博客域名,其他评论工具我没有使用过\n   2. 修改 `source/_data/melody.yml`文件，其中`client_id   client_secret` 字段是之前注册生成的 `admin`字段就写自己的GitHub名字(数组形式：['张三']) 如果博客是共同管理的把其他成员也写进去即可：['张三','李四']。\n\n## 写在最后\n> 更多melody主题的用法，参看[中文文档](https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/);最后再次感谢一下melody的作者","source":"_posts/init.md","raw":"---\ntitle: 博客搭建过程\ndate: 2019-07-27 14:02:47\ntags:  搭建博客\n---\n## 安装Hexo环境(默认winddows MacOS和Linux自行搜索如何安装Node.JS)\n>当然要安装其他博客主题或者基于GitHub构建博客不可或缺的工具就是[Git](https://git-scm.com/)这个管理工具,所以建议先安装Git\n\n> Hexo基于JavaScript,采用npm包管理器管理插件,安装Hexo需要先安装[npm](https://nodejs.org/zh-cn/download/)和[Node.JS](https://nodejs.org/zh-cn/download/);推荐下载LTS版本的Node.JS。\n\n- `cmd`中运行命令`git --version` `node -v` `npm -v` 出现对应的版本号说明安装成功\n- `cmd` 运行命令 `npm install hexo-cli -g` 安装Hexo脚手架工具,可参看官网[概述](https://hexo.io/zh-cn/docs/),[建站](https://hexo.io/zh-cn/docs/setup)的过程\n- 例如\n```\nhexo  init test\ncd test\nnpm install\nhexo server\n```\n![安装Hexo](http://blogimage.lemonlife.top/201910301359_423.png)\n## 安装主题\n> 我选择的是melody个人觉得这款主题真的很好看用起来也很方便。[主题GitHub地址](https://github.com/Molunerfinn/hexo-theme-melody/tree/fca917dd321bcda46b2a7dcddcf18cbe408cff18)\n\n- 例如(首先保障一下命令都是在上一步创建的test文件夹里面的)\n\n```\ngit clone -b master https://github.com/Molunerfinn/hexo-theme-melody themes/melody\nnpm install hexo-renderer-jade hexo-renderer-stylus --save\n```\n![安装主题](https://blogimage.lemonlife.top/201910302300_80.png)\n- 修改配置文件，使用先安装的主题\n\n修改test文件夹里面的`_config.yml`的文件的`theme landspcape`改成`theme melody`然后运行`hexo server`启动项目\n![修改配置文件](https://blogimage.lemonlife.top/201910302301_62.png)\n## 创建新帖子\n\n``` \nhexo new \"My New Post\"\n```\n## 帖子打包发布到GitHub\n> 首先确保自己电脑的GitHub ssh秘钥已经配置正确\n- 先运行 `npm install hexo-deployer-git --save` 安装插件\n- 修改`_config.yml`文件，在文件添加\n```\ndeploy:\n  type: git\n  repo: GitHub地址\n  branch: master\n```\n- 运行 `hexo generate` 生成部署文件到public文件夹\n- 运行 `hexo deploy` 部署到相应的仓库\n<!-- > 注意下次部署 可以直接运行 `hexo generate` 然后到`.deploy_git`目录中手动提交 -->\n## 添加评论功能\n   1. 进入主题的插件管理网站的[评论插件展示版块](https://molunerfinn.com/hexo-theme-melody-doc/third-party-support.html#comments),这边有很多评论版块，我使用的是`Gittalk`\n   2. 如果使用GitHub相关评论工具需要在 [GitHub官网](https://github.com/settings/applications/new)注册一个 OAuth application `Homepage URL`和 `Authorization callback URL`都可填你的博客域名,其他评论工具我没有使用过\n   2. 修改 `source/_data/melody.yml`文件，其中`client_id   client_secret` 字段是之前注册生成的 `admin`字段就写自己的GitHub名字(数组形式：['张三']) 如果博客是共同管理的把其他成员也写进去即可：['张三','李四']。\n\n## 写在最后\n> 更多melody主题的用法，参看[中文文档](https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/);最后再次感谢一下melody的作者","slug":"init","published":1,"updated":"2023-02-12T05:25:19.090Z","_id":"cl4ince6g000jcguf4t5h3j7p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"安装hexo环境默认winddows-macos和linux自行搜索如何安装nodejs\"><a class=\"markdownIt-Anchor\" href=\"#安装hexo环境默认winddows-macos和linux自行搜索如何安装nodejs\"></a> 安装Hexo环境(默认winddows MacOS和Linux自行搜索如何安装Node.JS)</h2>\n<blockquote>\n<p>当然要安装其他博客主题或者基于GitHub构建博客不可或缺的工具就是<a href=\"https://git-scm.com/\">Git</a>这个管理工具,所以建议先安装Git</p>\n</blockquote>\n<blockquote>\n<p>Hexo基于JavaScript,采用npm包管理器管理插件,安装Hexo需要先安装<a href=\"https://nodejs.org/zh-cn/download/\">npm</a>和<a href=\"https://nodejs.org/zh-cn/download/\">Node.JS</a>;推荐下载LTS版本的Node.JS。</p>\n</blockquote>\n<ul>\n<li><code>cmd</code>中运行命令<code>git --version</code> <code>node -v</code> <code>npm -v</code> 出现对应的版本号说明安装成功</li>\n<li><code>cmd</code> 运行命令 <code>npm install hexo-cli -g</code> 安装Hexo脚手架工具,可参看官网<a href=\"https://hexo.io/zh-cn/docs/\">概述</a>,<a href=\"https://hexo.io/zh-cn/docs/setup\">建站</a>的过程</li>\n<li>例如</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo  init test</span><br><span class=\"line\">cd test</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/201910301359_423.png\" alt=\"安装Hexo\" /></p>\n<h2 id=\"安装主题\"><a class=\"markdownIt-Anchor\" href=\"#安装主题\"></a> 安装主题</h2>\n<blockquote>\n<p>我选择的是melody个人觉得这款主题真的很好看用起来也很方便。<a href=\"https://github.com/Molunerfinn/hexo-theme-melody/tree/fca917dd321bcda46b2a7dcddcf18cbe408cff18\">主题GitHub地址</a></p>\n</blockquote>\n<ul>\n<li>例如(首先保障一下命令都是在上一步创建的test文件夹里面的)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://github.com/Molunerfinn/hexo-theme-melody themes/melody</span><br><span class=\"line\">npm install hexo-renderer-jade hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/201910302300_80.png\" alt=\"安装主题\" /></p>\n<ul>\n<li>修改配置文件，使用先安装的主题</li>\n</ul>\n<p>修改test文件夹里面的<code>_config.yml</code>的文件的<code>theme landspcape</code>改成<code>theme melody</code>然后运行<code>hexo server</code>启动项目<br />\n<img src=\"https://blogimage.lemonlife.top/201910302301_62.png\" alt=\"修改配置文件\" /></p>\n<h2 id=\"创建新帖子\"><a class=\"markdownIt-Anchor\" href=\"#创建新帖子\"></a> 创建新帖子</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"帖子打包发布到github\"><a class=\"markdownIt-Anchor\" href=\"#帖子打包发布到github\"></a> 帖子打包发布到GitHub</h2>\n<blockquote>\n<p>首先确保自己电脑的GitHub ssh秘钥已经配置正确</p>\n</blockquote>\n<ul>\n<li>先运行 <code>npm install hexo-deployer-git --save</code> 安装插件</li>\n<li>修改<code>_config.yml</code>文件，在文件添加</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: GitHub地址</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行 <code>hexo generate</code> 生成部署文件到public文件夹</li>\n<li>运行 <code>hexo deploy</code> 部署到相应的仓库</li>\n</ul>\n<!-- > 注意下次部署 可以直接运行 `hexo generate` 然后到`.deploy_git`目录中手动提交 -->\n<h2 id=\"添加评论功能\"><a class=\"markdownIt-Anchor\" href=\"#添加评论功能\"></a> 添加评论功能</h2>\n<ol>\n<li>进入主题的插件管理网站的<a href=\"https://molunerfinn.com/hexo-theme-melody-doc/third-party-support.html#comments\">评论插件展示版块</a>,这边有很多评论版块，我使用的是<code>Gittalk</code></li>\n<li>如果使用GitHub相关评论工具需要在 <a href=\"https://github.com/settings/applications/new\">GitHub官网</a>注册一个 OAuth application <code>Homepage URL</code>和 <code>Authorization callback URL</code>都可填你的博客域名,其他评论工具我没有使用过</li>\n<li>修改 <code>source/_data/melody.yml</code>文件，其中<code>client_id client_secret</code> 字段是之前注册生成的 <code>admin</code>字段就写自己的GitHub名字(数组形式：[‘张三’]) 如果博客是共同管理的把其他成员也写进去即可：[‘张三’,‘李四’]。</li>\n</ol>\n<h2 id=\"写在最后\"><a class=\"markdownIt-Anchor\" href=\"#写在最后\"></a> 写在最后</h2>\n<blockquote>\n<p>更多melody主题的用法，参看<a href=\"https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/\">中文文档</a>;最后再次感谢一下melody的作者</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装hexo环境默认winddows-macos和linux自行搜索如何安装nodejs\"><a class=\"markdownIt-Anchor\" href=\"#安装hexo环境默认winddows-macos和linux自行搜索如何安装nodejs\"></a> 安装Hexo环境(默认winddows MacOS和Linux自行搜索如何安装Node.JS)</h2>\n<blockquote>\n<p>当然要安装其他博客主题或者基于GitHub构建博客不可或缺的工具就是<a href=\"https://git-scm.com/\">Git</a>这个管理工具,所以建议先安装Git</p>\n</blockquote>\n<blockquote>\n<p>Hexo基于JavaScript,采用npm包管理器管理插件,安装Hexo需要先安装<a href=\"https://nodejs.org/zh-cn/download/\">npm</a>和<a href=\"https://nodejs.org/zh-cn/download/\">Node.JS</a>;推荐下载LTS版本的Node.JS。</p>\n</blockquote>\n<ul>\n<li><code>cmd</code>中运行命令<code>git --version</code> <code>node -v</code> <code>npm -v</code> 出现对应的版本号说明安装成功</li>\n<li><code>cmd</code> 运行命令 <code>npm install hexo-cli -g</code> 安装Hexo脚手架工具,可参看官网<a href=\"https://hexo.io/zh-cn/docs/\">概述</a>,<a href=\"https://hexo.io/zh-cn/docs/setup\">建站</a>的过程</li>\n<li>例如</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo  init test</span><br><span class=\"line\">cd test</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/201910301359_423.png\" alt=\"安装Hexo\" /></p>\n<h2 id=\"安装主题\"><a class=\"markdownIt-Anchor\" href=\"#安装主题\"></a> 安装主题</h2>\n<blockquote>\n<p>我选择的是melody个人觉得这款主题真的很好看用起来也很方便。<a href=\"https://github.com/Molunerfinn/hexo-theme-melody/tree/fca917dd321bcda46b2a7dcddcf18cbe408cff18\">主题GitHub地址</a></p>\n</blockquote>\n<ul>\n<li>例如(首先保障一下命令都是在上一步创建的test文件夹里面的)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://github.com/Molunerfinn/hexo-theme-melody themes/melody</span><br><span class=\"line\">npm install hexo-renderer-jade hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/201910302300_80.png\" alt=\"安装主题\" /></p>\n<ul>\n<li>修改配置文件，使用先安装的主题</li>\n</ul>\n<p>修改test文件夹里面的<code>_config.yml</code>的文件的<code>theme landspcape</code>改成<code>theme melody</code>然后运行<code>hexo server</code>启动项目<br />\n<img src=\"https://blogimage.lemonlife.top/201910302301_62.png\" alt=\"修改配置文件\" /></p>\n<h2 id=\"创建新帖子\"><a class=\"markdownIt-Anchor\" href=\"#创建新帖子\"></a> 创建新帖子</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"帖子打包发布到github\"><a class=\"markdownIt-Anchor\" href=\"#帖子打包发布到github\"></a> 帖子打包发布到GitHub</h2>\n<blockquote>\n<p>首先确保自己电脑的GitHub ssh秘钥已经配置正确</p>\n</blockquote>\n<ul>\n<li>先运行 <code>npm install hexo-deployer-git --save</code> 安装插件</li>\n<li>修改<code>_config.yml</code>文件，在文件添加</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: GitHub地址</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行 <code>hexo generate</code> 生成部署文件到public文件夹</li>\n<li>运行 <code>hexo deploy</code> 部署到相应的仓库</li>\n</ul>\n<!-- > 注意下次部署 可以直接运行 `hexo generate` 然后到`.deploy_git`目录中手动提交 -->\n<h2 id=\"添加评论功能\"><a class=\"markdownIt-Anchor\" href=\"#添加评论功能\"></a> 添加评论功能</h2>\n<ol>\n<li>进入主题的插件管理网站的<a href=\"https://molunerfinn.com/hexo-theme-melody-doc/third-party-support.html#comments\">评论插件展示版块</a>,这边有很多评论版块，我使用的是<code>Gittalk</code></li>\n<li>如果使用GitHub相关评论工具需要在 <a href=\"https://github.com/settings/applications/new\">GitHub官网</a>注册一个 OAuth application <code>Homepage URL</code>和 <code>Authorization callback URL</code>都可填你的博客域名,其他评论工具我没有使用过</li>\n<li>修改 <code>source/_data/melody.yml</code>文件，其中<code>client_id client_secret</code> 字段是之前注册生成的 <code>admin</code>字段就写自己的GitHub名字(数组形式：[‘张三’]) 如果博客是共同管理的把其他成员也写进去即可：[‘张三’,‘李四’]。</li>\n</ol>\n<h2 id=\"写在最后\"><a class=\"markdownIt-Anchor\" href=\"#写在最后\"></a> 写在最后</h2>\n<blockquote>\n<p>更多melody主题的用法，参看<a href=\"https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/\">中文文档</a>;最后再次感谢一下melody的作者</p>\n</blockquote>\n"},{"title":"go lang 入门","date":"2021-09-04T04:27:25.000Z","_content":"# 环境变量\n## windows\n\n## mac/linux\n```bash\ntee -a $HOME/.bashrc <<'EOF'\n# Go envs\nexport GOVERSION=go1.16.2 # Go 版本设置\nexport GO_INSTALL_DIR=$HOME/go # Go 安装目录\nexport GOROOT=$GO_INSTALL_DIR/$GOVERSION # GOROOT 设置\nexport GOPATH=$WORKSPACE/golang # GOPATH 设置\nexport PATH=$GOROOT/bin:$GOPATH/bin:$PATH # 将 Go 语言自带的和通过 go install 安装\nexport GO111MODULE=\"on\" # 开启 Go moudles 特性\nexport GOPROXY=https://goproxy.cn,direct # 安装 Go 模块时，代理服务器设置\nexport GOPRIVATE=\nexport GOSUMDB=off # 关闭校验 Go 依赖包的哈希值\nEOF\n```\n## 设置环境变量的含义\n![引用自https://time.geekbang.org/column/article/378076](https://blogimage.lemonlife.top/20210905001904.png)\n\n## 字符串\n1. string 是数据类型，不是引用或指针类型。\n2. string 是只读的 byte slice,len 函数可以包含它所包含的 byte 数。\n3. string 的 byte 数组可以存放任何数据。\n### Unicode 和 UTF8  \n1. Unicode 是一种字符集 (code point)\n2. UTF8是 Unicode 的存储实现 (转换为字节序列的规则)\n以汉字 `中`为例子\n\n|字符|中|\n|--|--|\n|Unicode|0x4E2D|\n|UTF-8|0xE4B8AD|\n|string/[]byte| [0xE4,0xB8,0xAD]\n\n[阮一峰Unicode 和 utf8](https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html)\n### 字符串处理函数\n- 包含\n `strings.Contains` 查找字符串中，是否包含另一个字符串。\n```go\n   str := \"hello world\"\n   strings.Contains(str, \"he\")\n//    true\n```\n- 拼接\n`strings.Join` 使用特定字符，拼接字符数组。\n```go\n\ts := []string{\"1\", \"2\", \"3\"}\n\tstrings.Join(s, \"-\")\n```\n- 查找\n`strings.Index()` 查找字符串具体的字符位置。\n```go\nstr:=\"1234\"\nstrings.Index(str,\"1\") // 0\nstrings.Index(str,\"3\") // 2\n```\n- 替换\n`strings.Replace(原字符串,被替换内容,替换内容,替换次数),替换次数小于0表示 全替换。\n```go\nstr:=\"kraken\"\nstrings.Replace(str,\"kraken\",\"lym\",1) \n```\n- 分割\nstrings.Split(原字符串,分割标志)\n```go\nstr:=\"kraken\"\nstrings.Split(str,\"k\") \n```\n- 移除\nstrings(str,移除标志),移除首尾指定的字符串\n```go\nstr:=\" hello \"\nstrings.Trim(str,\" \")\n```\n- 按空格分割\nstrings.Fields(str) 去除原有字符串中所有空格后，并且按照原有字符串空格位置分割\n```go\nstr:=\"   my name is   kraken    \"\nstrings.Fields(str)\n// [my name is kraken]\n```\n### 字符串类型转化\n将字符串转化成其他数据类型，或者将其他数据类型的数据转化成字符串。一般使用包[strconv](https://pkg.go.dev/strconv)\n## 对象\n### 方法\ngo 语言可以给定义的任何类型，绑定该类型的方法。\n- 对于基础数据类型列如 `int`。\n```go\ntype Int int\n// fun(方法接收者)方法名称(参数列表)绑定方法\nfunc (a Int)add(b Int)Int{\n    return a+b\n}\n\nfunc main(){\n    var a Int = 10\n    a.ddd(20)\n}\n```\n- 对于自定义数据类型，比如自定义 `Student`。\n\n```go\n\ntype Student struct {\n\tname string\n\tage  int\n\tsex  string\n}\n\nfunc (s Student) PrintInfo() {\n\tfmt.Println(s.name)\n\tfmt.Println(s.age)\n\tfmt.Println(s.sex)\n}\n\nfunc main() {\n\tvar s1 Student = Student{name: \"王\", age: 18, sex: \"女\"}\n    /**\n    *或者\n    var s1 *Stu = &Stu{name: \"王\", age: 18, sex: \"女\"}\n    */\n\ts1.PrintInfo() // 王 18 女\n}\n```\n### 多态\n\n## 函数\n函数是一等公民。\n### 普通函数\n### 延迟调用 defer\n\n当前函数栈结束的时候才运行对应的函数，按照出栈的顺序从后往前调用\n```go\npackage defer_test\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(1)\n\tdefer fmt.Println(2)\n\tdefer fmt.Println(3)\n\tfmt.Println(4)\n}\n\n//  输出 1 4 3 2\n```\n![defer 函数执行示意图](https://blogimage.lemonlife.top/20211103010729.png)\n\n\n## 异常处理\n### 逻辑边界处理\n自己通过一些边界条件的判断，过滤掉不合适的场景。\n```go\nfunc test(a int, b int) (value int, err error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"runtime error\")\n\t} else {\n\t\treturn a / b, nil\n\t}\n}\n\nfunc main() {\n\t\n\tif value, err := test(10, 10); err == nil {\n\t\tprintln(value)\n\t}\n}\n```\n### panic \n程序出现异常，程序会主动调用 panic 并崩溃。 \n\n### recover \n捕获函数错误，之在 `defer`调用的函数生效。\n```go\nfunc demo(i int) {\n\tvar arr [10]int\n\tdefer func() {\n\t\terr := recover()\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t}()\n\tarr[i] = 100\n}\n\nfunc main() {\n\tfmt.Println(\"1\")\n\tdemo(10)\n\tfmt.Println(\"2\")\n}\n// 1\n// runtime error: index out of range [10] with length 10\n// 2\n```\n- 如果使用 如下的方式则无法捕获异常，因为在defer定义之前异常已经发生了\n\n```go\nfunc demo(i int) {\n\tvar arr [10]int\n\tarr[i] = 100\n\tdefer func() {\n\t\terr := recover()\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t}()\n}\n\nfunc main() {\n\n\tfmt.Println(\"1\")\n\tdemo(10)\n\tfmt.Println(\"2\")\n}\n```\n\n## 进程与线程\n### 并行与并发\n- 并行(parallel)指在同一时刻有多条指令在多个处理器上同时执行。\n- 并发(concurrency)指在同一时刻只有一条指令执行，但是多个进程的指令在被轮换执行。使得宏观上存在多个程序同时进行的效果，但是在微观上不是同时执行的，只是把时间分成若干段通过`CPU时间片`轮转使得多个进程交替运行\n### 进程与程序\n- 程序，程序编译产生的二进制文件，只占用磁盘空间。\n- 进程 程序运行起来，需要占用系统资源。\n- 进程的状态：运行态，就绪态，运行态，挂起态，停止态。\n### 进程并发\n- 进程，操作系统最小的资源分配单位。稳定性强\n### 线程并发\n- 线程：LWP 轻量级的进程，最小的执行单位。- cpu 分配时间轮片的单元，节约系统资源\n- 同步，多个控制流操作同一个变量的情况下需要资源同步。\n### 协程并发\n- 协程，轻量级的线程。在线程挂起状态的时候，可以继续处理其他的事务。提高程序执行的效率。\n### Go程(goroutine)\ngo语言并发程序，主要由两种方式来实现。goroutine 和 channel,主go程退出，子go程也退出。\n### 管道(channel)\nchannel 是 Go 语言的一个核心类型可以把它看成管道，并发核心单元。通过它可以直接发送或接收数据进行通讯，这在一定承度上又进一步降低了编程的难度。channel 是一个数据类型，朱要来解决go程同步问题以及协程之间数据共享(传递)的问题。goroutine 运行在相同的地址空间。因此访问共享内存必须要做好同步。goroutine 奉行通过通信来共享内存，而不是共享内存来通信。引用类型 channel 可用于多个 goroutine 通讯，实现了同步，确保并发安全。\n- channel 语法定义\n```go\nmake(chan 在 channel 中传递的数据类型,容量)\n```\n### 生产者消费者模型\n```go\nfunc producer(out chan<- int){\n\tfor i:=0;i<10;i++ {\n\t\tout <- i\n\t\tfmt.Printf(\"生产者 生产 %d\\n\", i)\n\t}\n\tclose(out)\n}\n\nfunc consumer(in <-chan int){\n\tfor num := range in {\n\t\tfmt.Printf(\"消费者，消费： %d\\n\",num)\n\t}\n}\n\nfunc main(){\n\tproduct := make(chan int)\n\tgo producer(product)\n\tconsumer(product)\n\tfor {\n\t\t;\n\t}\n}\n```\n### 定时器\n- 周期定时器 `time.Ticker(time.Second)`\n```go\nfunc main(){\n \n}\n```\n### Select\n通过 select 可以监听多个 channel 的数据流动。select 实现 fibonacci 数列；\n```go\nfunc fibonacci(ch <-chan int,quit <-chan bool){\n\n\tfor{\n\t\tselect {\n\t\t\tcase num : <- ch:\n\t\t\t\tfmt.Print(num,\" \")\n\t \t\tcase <- quit:\n\t\t\t \treturn\n\t\t }\n\t}\n}\n\nfunc main(){\n\tch := make(chan int)\n\tquit := make(chan bool)\n\tgo fibonacci(ch,quit)\n\tfor i:=0;i<20{\n\t\tch <- x\n\t\tx,y = y,x+y\n\t}\n\tquit <- true\n}\n```\n## 锁机制\n### 死锁\n- channel 至少在两个以上的 GO 程中进行通信。\n```go\nfunc main(){\n\tch:=make(chan int)\n\tch <- 789 // 这一行写入时候没有读取端 导致写入阻塞死锁。 \n\tnum: =<- ch\n\tfmt.Println(\"num=\",num)\n}\n```\n\n```go\nfunc main(){\n\tch:=make(chan int)\n\tnum: =<- ch  // 这一行读取的时候没有写入端 读取阻塞死锁。 \n\tfmt.Println(\"num=\",num)\n\tgo fun(){\n\t\tch <- 789\t\n\t}()\n}\n```\n### 互斥死锁\n```go\nvar mutex sync.Mutex\nfunc printer(str string){\n\tmutex.Lock()\n\tfor _,ch := rang str{\n\t\tfmt.Printf(\"%c\",c)\n\t}\n\ttime.Sleep(time.Millisecond * 3000)\n}\n\nfunc print1(){\n\tprinter(\"hello\")\n}\n\nfunc print1(){\n\tprinter(\"world\")\n}\n\nfunc main(){\n\tgo print1(\"hello\")\n\tgo print2(\"world\")\n}\n```\n### 读写锁\n`swync.RWMutex`\n```go\nvar rwMutex sync.RWMuyex\nvar value int\nfunc readGo(){\n\tfor {\n\t\trwMutex.RLock()\n\t\tnum := value\n\t\tfmt.Printf(\"读出数据\",num)\n\t\trwMutex.RUnLock()\n\t}\n}\n\nfunc writeGo(){\n\tfor{\n\t\tnum:=rand.Intn(n:1000)\n\t\trwMutex.Lock()\n\t\tvalue =  num\n\t\tfmt.Printf(\"写入\", num)\n\t\t// 没有作用 只是为了放大实现现象\n\t\ttime.Sleep(time.Millisecond * 3000) \n\t\trwMutex.Unlock()\n\t}\n}\n\nfunc main(){\n\tfor i:=0;i<5;i++{\n\t\tgo readGo()\n\t}\n\tfor i:=0;i<5;i++{\n\t\tgo writeGo()\n\t}\n}\n```\n\n### 条件变量\n1. 创建条件变量 var cond sync.Cond\n2. 指定条件变量使用的锁 cond.L = new(sync.Mutex)\n3. cond.L.Lock() 给公共区加锁(互斥量)\n4. 判断是否达到 阻塞条件(缓冲区满/空) --for循环判断 `for len(ch) == cap(ch) { cond.Wait() } 1) 阻塞 2) 解锁 3) 加锁`。\n5. 访问公共区 - 被读、写、打印的数据\n6. 解锁条件变量的锁 condL.UnLock()\n7. 唤醒目前被阻塞的线程。\n\n## 网络编程\n\n**后续部分已转移至飞书文档\t\n[https://meta1024.feishu.cn/docs/doccnWpuy6Bs4y5SyahI0G31n2f](https://meta1024.feishu.cn/docs/doccnWpuy6Bs4y5SyahI0G31n2f)**\n# 参考资料\n- [uber go 代码规范](https://github.com/uber-go/guide)\n- [go lint 代码静态检查](https://golangci-lint.run/usage/install/#local-installation)\n\n","source":"_posts/go-init.md","raw":"---\ntitle: go lang 入门\ndate: 2021-09-04 12:27:25\ntags: go\n---\n# 环境变量\n## windows\n\n## mac/linux\n```bash\ntee -a $HOME/.bashrc <<'EOF'\n# Go envs\nexport GOVERSION=go1.16.2 # Go 版本设置\nexport GO_INSTALL_DIR=$HOME/go # Go 安装目录\nexport GOROOT=$GO_INSTALL_DIR/$GOVERSION # GOROOT 设置\nexport GOPATH=$WORKSPACE/golang # GOPATH 设置\nexport PATH=$GOROOT/bin:$GOPATH/bin:$PATH # 将 Go 语言自带的和通过 go install 安装\nexport GO111MODULE=\"on\" # 开启 Go moudles 特性\nexport GOPROXY=https://goproxy.cn,direct # 安装 Go 模块时，代理服务器设置\nexport GOPRIVATE=\nexport GOSUMDB=off # 关闭校验 Go 依赖包的哈希值\nEOF\n```\n## 设置环境变量的含义\n![引用自https://time.geekbang.org/column/article/378076](https://blogimage.lemonlife.top/20210905001904.png)\n\n## 字符串\n1. string 是数据类型，不是引用或指针类型。\n2. string 是只读的 byte slice,len 函数可以包含它所包含的 byte 数。\n3. string 的 byte 数组可以存放任何数据。\n### Unicode 和 UTF8  \n1. Unicode 是一种字符集 (code point)\n2. UTF8是 Unicode 的存储实现 (转换为字节序列的规则)\n以汉字 `中`为例子\n\n|字符|中|\n|--|--|\n|Unicode|0x4E2D|\n|UTF-8|0xE4B8AD|\n|string/[]byte| [0xE4,0xB8,0xAD]\n\n[阮一峰Unicode 和 utf8](https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html)\n### 字符串处理函数\n- 包含\n `strings.Contains` 查找字符串中，是否包含另一个字符串。\n```go\n   str := \"hello world\"\n   strings.Contains(str, \"he\")\n//    true\n```\n- 拼接\n`strings.Join` 使用特定字符，拼接字符数组。\n```go\n\ts := []string{\"1\", \"2\", \"3\"}\n\tstrings.Join(s, \"-\")\n```\n- 查找\n`strings.Index()` 查找字符串具体的字符位置。\n```go\nstr:=\"1234\"\nstrings.Index(str,\"1\") // 0\nstrings.Index(str,\"3\") // 2\n```\n- 替换\n`strings.Replace(原字符串,被替换内容,替换内容,替换次数),替换次数小于0表示 全替换。\n```go\nstr:=\"kraken\"\nstrings.Replace(str,\"kraken\",\"lym\",1) \n```\n- 分割\nstrings.Split(原字符串,分割标志)\n```go\nstr:=\"kraken\"\nstrings.Split(str,\"k\") \n```\n- 移除\nstrings(str,移除标志),移除首尾指定的字符串\n```go\nstr:=\" hello \"\nstrings.Trim(str,\" \")\n```\n- 按空格分割\nstrings.Fields(str) 去除原有字符串中所有空格后，并且按照原有字符串空格位置分割\n```go\nstr:=\"   my name is   kraken    \"\nstrings.Fields(str)\n// [my name is kraken]\n```\n### 字符串类型转化\n将字符串转化成其他数据类型，或者将其他数据类型的数据转化成字符串。一般使用包[strconv](https://pkg.go.dev/strconv)\n## 对象\n### 方法\ngo 语言可以给定义的任何类型，绑定该类型的方法。\n- 对于基础数据类型列如 `int`。\n```go\ntype Int int\n// fun(方法接收者)方法名称(参数列表)绑定方法\nfunc (a Int)add(b Int)Int{\n    return a+b\n}\n\nfunc main(){\n    var a Int = 10\n    a.ddd(20)\n}\n```\n- 对于自定义数据类型，比如自定义 `Student`。\n\n```go\n\ntype Student struct {\n\tname string\n\tage  int\n\tsex  string\n}\n\nfunc (s Student) PrintInfo() {\n\tfmt.Println(s.name)\n\tfmt.Println(s.age)\n\tfmt.Println(s.sex)\n}\n\nfunc main() {\n\tvar s1 Student = Student{name: \"王\", age: 18, sex: \"女\"}\n    /**\n    *或者\n    var s1 *Stu = &Stu{name: \"王\", age: 18, sex: \"女\"}\n    */\n\ts1.PrintInfo() // 王 18 女\n}\n```\n### 多态\n\n## 函数\n函数是一等公民。\n### 普通函数\n### 延迟调用 defer\n\n当前函数栈结束的时候才运行对应的函数，按照出栈的顺序从后往前调用\n```go\npackage defer_test\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(1)\n\tdefer fmt.Println(2)\n\tdefer fmt.Println(3)\n\tfmt.Println(4)\n}\n\n//  输出 1 4 3 2\n```\n![defer 函数执行示意图](https://blogimage.lemonlife.top/20211103010729.png)\n\n\n## 异常处理\n### 逻辑边界处理\n自己通过一些边界条件的判断，过滤掉不合适的场景。\n```go\nfunc test(a int, b int) (value int, err error) {\n\tif b == 0 {\n\t\treturn 0, errors.New(\"runtime error\")\n\t} else {\n\t\treturn a / b, nil\n\t}\n}\n\nfunc main() {\n\t\n\tif value, err := test(10, 10); err == nil {\n\t\tprintln(value)\n\t}\n}\n```\n### panic \n程序出现异常，程序会主动调用 panic 并崩溃。 \n\n### recover \n捕获函数错误，之在 `defer`调用的函数生效。\n```go\nfunc demo(i int) {\n\tvar arr [10]int\n\tdefer func() {\n\t\terr := recover()\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t}()\n\tarr[i] = 100\n}\n\nfunc main() {\n\tfmt.Println(\"1\")\n\tdemo(10)\n\tfmt.Println(\"2\")\n}\n// 1\n// runtime error: index out of range [10] with length 10\n// 2\n```\n- 如果使用 如下的方式则无法捕获异常，因为在defer定义之前异常已经发生了\n\n```go\nfunc demo(i int) {\n\tvar arr [10]int\n\tarr[i] = 100\n\tdefer func() {\n\t\terr := recover()\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t}()\n}\n\nfunc main() {\n\n\tfmt.Println(\"1\")\n\tdemo(10)\n\tfmt.Println(\"2\")\n}\n```\n\n## 进程与线程\n### 并行与并发\n- 并行(parallel)指在同一时刻有多条指令在多个处理器上同时执行。\n- 并发(concurrency)指在同一时刻只有一条指令执行，但是多个进程的指令在被轮换执行。使得宏观上存在多个程序同时进行的效果，但是在微观上不是同时执行的，只是把时间分成若干段通过`CPU时间片`轮转使得多个进程交替运行\n### 进程与程序\n- 程序，程序编译产生的二进制文件，只占用磁盘空间。\n- 进程 程序运行起来，需要占用系统资源。\n- 进程的状态：运行态，就绪态，运行态，挂起态，停止态。\n### 进程并发\n- 进程，操作系统最小的资源分配单位。稳定性强\n### 线程并发\n- 线程：LWP 轻量级的进程，最小的执行单位。- cpu 分配时间轮片的单元，节约系统资源\n- 同步，多个控制流操作同一个变量的情况下需要资源同步。\n### 协程并发\n- 协程，轻量级的线程。在线程挂起状态的时候，可以继续处理其他的事务。提高程序执行的效率。\n### Go程(goroutine)\ngo语言并发程序，主要由两种方式来实现。goroutine 和 channel,主go程退出，子go程也退出。\n### 管道(channel)\nchannel 是 Go 语言的一个核心类型可以把它看成管道，并发核心单元。通过它可以直接发送或接收数据进行通讯，这在一定承度上又进一步降低了编程的难度。channel 是一个数据类型，朱要来解决go程同步问题以及协程之间数据共享(传递)的问题。goroutine 运行在相同的地址空间。因此访问共享内存必须要做好同步。goroutine 奉行通过通信来共享内存，而不是共享内存来通信。引用类型 channel 可用于多个 goroutine 通讯，实现了同步，确保并发安全。\n- channel 语法定义\n```go\nmake(chan 在 channel 中传递的数据类型,容量)\n```\n### 生产者消费者模型\n```go\nfunc producer(out chan<- int){\n\tfor i:=0;i<10;i++ {\n\t\tout <- i\n\t\tfmt.Printf(\"生产者 生产 %d\\n\", i)\n\t}\n\tclose(out)\n}\n\nfunc consumer(in <-chan int){\n\tfor num := range in {\n\t\tfmt.Printf(\"消费者，消费： %d\\n\",num)\n\t}\n}\n\nfunc main(){\n\tproduct := make(chan int)\n\tgo producer(product)\n\tconsumer(product)\n\tfor {\n\t\t;\n\t}\n}\n```\n### 定时器\n- 周期定时器 `time.Ticker(time.Second)`\n```go\nfunc main(){\n \n}\n```\n### Select\n通过 select 可以监听多个 channel 的数据流动。select 实现 fibonacci 数列；\n```go\nfunc fibonacci(ch <-chan int,quit <-chan bool){\n\n\tfor{\n\t\tselect {\n\t\t\tcase num : <- ch:\n\t\t\t\tfmt.Print(num,\" \")\n\t \t\tcase <- quit:\n\t\t\t \treturn\n\t\t }\n\t}\n}\n\nfunc main(){\n\tch := make(chan int)\n\tquit := make(chan bool)\n\tgo fibonacci(ch,quit)\n\tfor i:=0;i<20{\n\t\tch <- x\n\t\tx,y = y,x+y\n\t}\n\tquit <- true\n}\n```\n## 锁机制\n### 死锁\n- channel 至少在两个以上的 GO 程中进行通信。\n```go\nfunc main(){\n\tch:=make(chan int)\n\tch <- 789 // 这一行写入时候没有读取端 导致写入阻塞死锁。 \n\tnum: =<- ch\n\tfmt.Println(\"num=\",num)\n}\n```\n\n```go\nfunc main(){\n\tch:=make(chan int)\n\tnum: =<- ch  // 这一行读取的时候没有写入端 读取阻塞死锁。 \n\tfmt.Println(\"num=\",num)\n\tgo fun(){\n\t\tch <- 789\t\n\t}()\n}\n```\n### 互斥死锁\n```go\nvar mutex sync.Mutex\nfunc printer(str string){\n\tmutex.Lock()\n\tfor _,ch := rang str{\n\t\tfmt.Printf(\"%c\",c)\n\t}\n\ttime.Sleep(time.Millisecond * 3000)\n}\n\nfunc print1(){\n\tprinter(\"hello\")\n}\n\nfunc print1(){\n\tprinter(\"world\")\n}\n\nfunc main(){\n\tgo print1(\"hello\")\n\tgo print2(\"world\")\n}\n```\n### 读写锁\n`swync.RWMutex`\n```go\nvar rwMutex sync.RWMuyex\nvar value int\nfunc readGo(){\n\tfor {\n\t\trwMutex.RLock()\n\t\tnum := value\n\t\tfmt.Printf(\"读出数据\",num)\n\t\trwMutex.RUnLock()\n\t}\n}\n\nfunc writeGo(){\n\tfor{\n\t\tnum:=rand.Intn(n:1000)\n\t\trwMutex.Lock()\n\t\tvalue =  num\n\t\tfmt.Printf(\"写入\", num)\n\t\t// 没有作用 只是为了放大实现现象\n\t\ttime.Sleep(time.Millisecond * 3000) \n\t\trwMutex.Unlock()\n\t}\n}\n\nfunc main(){\n\tfor i:=0;i<5;i++{\n\t\tgo readGo()\n\t}\n\tfor i:=0;i<5;i++{\n\t\tgo writeGo()\n\t}\n}\n```\n\n### 条件变量\n1. 创建条件变量 var cond sync.Cond\n2. 指定条件变量使用的锁 cond.L = new(sync.Mutex)\n3. cond.L.Lock() 给公共区加锁(互斥量)\n4. 判断是否达到 阻塞条件(缓冲区满/空) --for循环判断 `for len(ch) == cap(ch) { cond.Wait() } 1) 阻塞 2) 解锁 3) 加锁`。\n5. 访问公共区 - 被读、写、打印的数据\n6. 解锁条件变量的锁 condL.UnLock()\n7. 唤醒目前被阻塞的线程。\n\n## 网络编程\n\n**后续部分已转移至飞书文档\t\n[https://meta1024.feishu.cn/docs/doccnWpuy6Bs4y5SyahI0G31n2f](https://meta1024.feishu.cn/docs/doccnWpuy6Bs4y5SyahI0G31n2f)**\n# 参考资料\n- [uber go 代码规范](https://github.com/uber-go/guide)\n- [go lint 代码静态检查](https://golangci-lint.run/usage/install/#local-installation)\n\n","slug":"go-init","published":1,"updated":"2021-11-15T15:32:01.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ince6h000mcgufa6y5466v","content":"<h1 id=\"环境变量\"><a class=\"markdownIt-Anchor\" href=\"#环境变量\"></a> 环境变量</h1>\n<h2 id=\"windows\"><a class=\"markdownIt-Anchor\" href=\"#windows\"></a> windows</h2>\n<h2 id=\"maclinux\"><a class=\"markdownIt-Anchor\" href=\"#maclinux\"></a> mac/linux</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee -a <span class=\"variable\">$HOME</span>/.bashrc &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># Go envs</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOVERSION=go1.16.2 <span class=\"comment\"># Go 版本设置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO_INSTALL_DIR=<span class=\"variable\">$HOME</span>/go <span class=\"comment\"># Go 安装目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=<span class=\"variable\">$GO_INSTALL_DIR</span>/<span class=\"variable\">$GOVERSION</span> <span class=\"comment\"># GOROOT 设置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=<span class=\"variable\">$WORKSPACE</span>/golang <span class=\"comment\"># GOPATH 设置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$GOROOT</span>/bin:<span class=\"variable\">$GOPATH</span>/bin:<span class=\"variable\">$PATH</span> <span class=\"comment\"># 将 Go 语言自带的和通过 go install 安装</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO111MODULE=<span class=\"string\">&quot;on&quot;</span> <span class=\"comment\"># 开启 Go moudles 特性</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPROXY=https://goproxy.cn,direct <span class=\"comment\"># 安装 Go 模块时，代理服务器设置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPRIVATE=</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOSUMDB=off <span class=\"comment\"># 关闭校验 Go 依赖包的哈希值</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置环境变量的含义\"><a class=\"markdownIt-Anchor\" href=\"#设置环境变量的含义\"></a> 设置环境变量的含义</h2>\n<p><img src=\"https://blogimage.lemonlife.top/20210905001904.png\" alt=\"引用自https://time.geekbang.org/column/article/378076\" /></p>\n<h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\"></a> 字符串</h2>\n<ol>\n<li>string 是数据类型，不是引用或指针类型。</li>\n<li>string 是只读的 byte slice,len 函数可以包含它所包含的 byte 数。</li>\n<li>string 的 byte 数组可以存放任何数据。</li>\n</ol>\n<h3 id=\"unicode-和-utf8\"><a class=\"markdownIt-Anchor\" href=\"#unicode-和-utf8\"></a> Unicode 和 UTF8</h3>\n<ol>\n<li>Unicode 是一种字符集 (code point)</li>\n<li>UTF8是 Unicode 的存储实现 (转换为字节序列的规则)<br />\n以汉字 <code>中</code>为例子</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>中</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unicode</td>\n<td>0x4E2D</td>\n</tr>\n<tr>\n<td>UTF-8</td>\n<td>0xE4B8AD</td>\n</tr>\n<tr>\n<td>string/[]byte</td>\n<td>[0xE4,0xB8,0xAD]</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html\">阮一峰Unicode 和 utf8</a></p>\n<h3 id=\"字符串处理函数\"><a class=\"markdownIt-Anchor\" href=\"#字符串处理函数\"></a> 字符串处理函数</h3>\n<ul>\n<li>包含<br />\n<code>strings.Contains</code> 查找字符串中，是否包含另一个字符串。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   str := <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">   strings.Contains(str, <span class=\"string\">&quot;he&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//    true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>拼接<br />\n<code>strings.Join</code> 使用特定字符，拼接字符数组。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>&#125;</span><br><span class=\"line\">strings.Join(s, <span class=\"string\">&quot;-&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查找<br />\n<code>strings.Index()</code> 查找字符串具体的字符位置。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str:=<span class=\"string\">&quot;1234&quot;</span></span><br><span class=\"line\">strings.Index(str,<span class=\"string\">&quot;1&quot;</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\">strings.Index(str,<span class=\"string\">&quot;3&quot;</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>替换<br />\n`strings.Replace(原字符串,被替换内容,替换内容,替换次数),替换次数小于0表示 全替换。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str:=<span class=\"string\">&quot;kraken&quot;</span></span><br><span class=\"line\">strings.Replace(str,<span class=\"string\">&quot;kraken&quot;</span>,<span class=\"string\">&quot;lym&quot;</span>,<span class=\"number\">1</span>) </span><br></pre></td></tr></table></figure>\n<ul>\n<li>分割<br />\nstrings.Split(原字符串,分割标志)</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str:=<span class=\"string\">&quot;kraken&quot;</span></span><br><span class=\"line\">strings.Split(str,<span class=\"string\">&quot;k&quot;</span>) </span><br></pre></td></tr></table></figure>\n<ul>\n<li>移除<br />\nstrings(str,移除标志),移除首尾指定的字符串</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str:=<span class=\"string\">&quot; hello &quot;</span></span><br><span class=\"line\">strings.Trim(str,<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按空格分割<br />\nstrings.Fields(str) 去除原有字符串中所有空格后，并且按照原有字符串空格位置分割</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str:=<span class=\"string\">&quot;   my name is   kraken    &quot;</span></span><br><span class=\"line\">strings.Fields(str)</span><br><span class=\"line\"><span class=\"comment\">// [my name is kraken]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串类型转化\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型转化\"></a> 字符串类型转化</h3>\n<p>将字符串转化成其他数据类型，或者将其他数据类型的数据转化成字符串。一般使用包<a href=\"https://pkg.go.dev/strconv\">strconv</a></p>\n<h2 id=\"对象\"><a class=\"markdownIt-Anchor\" href=\"#对象\"></a> 对象</h2>\n<h3 id=\"方法\"><a class=\"markdownIt-Anchor\" href=\"#方法\"></a> 方法</h3>\n<p>go 语言可以给定义的任何类型，绑定该类型的方法。</p>\n<ul>\n<li>对于基础数据类型列如 <code>int</code>。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Int <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"comment\">// fun(方法接收者)方法名称(参数列表)绑定方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a Int)</span><span class=\"title\">add</span><span class=\"params\">(b Int)</span><span class=\"title\">Int</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a Int = <span class=\"number\">10</span></span><br><span class=\"line\">    a.ddd(<span class=\"number\">20</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对于自定义数据类型，比如自定义 <code>Student</code>。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int</span></span><br><span class=\"line\">\tsex  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s Student)</span> <span class=\"title\">PrintInfo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(s.name)</span><br><span class=\"line\">\tfmt.Println(s.age)</span><br><span class=\"line\">\tfmt.Println(s.sex)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s1 Student = Student&#123;name: <span class=\"string\">&quot;王&quot;</span>, age: <span class=\"number\">18</span>, sex: <span class=\"string\">&quot;女&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *或者</span></span><br><span class=\"line\"><span class=\"comment\">    var s1 *Stu = &amp;Stu&#123;name: &quot;王&quot;, age: 18, sex: &quot;女&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\ts1.PrintInfo() <span class=\"comment\">// 王 18 女</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多态\"><a class=\"markdownIt-Anchor\" href=\"#多态\"></a> 多态</h3>\n<h2 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\"></a> 函数</h2>\n<p>函数是一等公民。</p>\n<h3 id=\"普通函数\"><a class=\"markdownIt-Anchor\" href=\"#普通函数\"></a> 普通函数</h3>\n<h3 id=\"延迟调用-defer\"><a class=\"markdownIt-Anchor\" href=\"#延迟调用-defer\"></a> 延迟调用 defer</h3>\n<p>当前函数栈结束的时候才运行对应的函数，按照出栈的顺序从后往前调用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> defer_test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"number\">3</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  输出 1 4 3 2</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20211103010729.png\" alt=\"defer 函数执行示意图\" /></p>\n<h2 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> 异常处理</h2>\n<h3 id=\"逻辑边界处理\"><a class=\"markdownIt-Anchor\" href=\"#逻辑边界处理\"></a> 逻辑边界处理</h3>\n<p>自己通过一些边界条件的判断，过滤掉不合适的场景。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(a <span class=\"keyword\">int</span>, b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(value <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> b == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, errors.New(<span class=\"string\">&quot;runtime error&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a / b, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> value, err := test(<span class=\"number\">10</span>, <span class=\"number\">10</span>); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"panic\"><a class=\"markdownIt-Anchor\" href=\"#panic\"></a> panic</h3>\n<p>程序出现异常，程序会主动调用 panic 并崩溃。</p>\n<h3 id=\"recover\"><a class=\"markdownIt-Anchor\" href=\"#recover\"></a> recover</h3>\n<p>捕获函数错误，之在 <code>defer</code>调用的函数生效。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr [<span class=\"number\">10</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\terr := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tarr[i] = <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\tdemo(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// runtime error: index out of range [10] with length 10</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果使用 如下的方式则无法捕获异常，因为在defer定义之前异常已经发生了</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr [<span class=\"number\">10</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\tarr[i] = <span class=\"number\">100</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\terr := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\tdemo(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"进程与线程\"><a class=\"markdownIt-Anchor\" href=\"#进程与线程\"></a> 进程与线程</h2>\n<h3 id=\"并行与并发\"><a class=\"markdownIt-Anchor\" href=\"#并行与并发\"></a> 并行与并发</h3>\n<ul>\n<li>并行(parallel)指在同一时刻有多条指令在多个处理器上同时执行。</li>\n<li>并发(concurrency)指在同一时刻只有一条指令执行，但是多个进程的指令在被轮换执行。使得宏观上存在多个程序同时进行的效果，但是在微观上不是同时执行的，只是把时间分成若干段通过<code>CPU时间片</code>轮转使得多个进程交替运行</li>\n</ul>\n<h3 id=\"进程与程序\"><a class=\"markdownIt-Anchor\" href=\"#进程与程序\"></a> 进程与程序</h3>\n<ul>\n<li>程序，程序编译产生的二进制文件，只占用磁盘空间。</li>\n<li>进程 程序运行起来，需要占用系统资源。</li>\n<li>进程的状态：运行态，就绪态，运行态，挂起态，停止态。</li>\n</ul>\n<h3 id=\"进程并发\"><a class=\"markdownIt-Anchor\" href=\"#进程并发\"></a> 进程并发</h3>\n<ul>\n<li>进程，操作系统最小的资源分配单位。稳定性强</li>\n</ul>\n<h3 id=\"线程并发\"><a class=\"markdownIt-Anchor\" href=\"#线程并发\"></a> 线程并发</h3>\n<ul>\n<li>线程：LWP 轻量级的进程，最小的执行单位。- cpu 分配时间轮片的单元，节约系统资源</li>\n<li>同步，多个控制流操作同一个变量的情况下需要资源同步。</li>\n</ul>\n<h3 id=\"协程并发\"><a class=\"markdownIt-Anchor\" href=\"#协程并发\"></a> 协程并发</h3>\n<ul>\n<li>协程，轻量级的线程。在线程挂起状态的时候，可以继续处理其他的事务。提高程序执行的效率。</li>\n</ul>\n<h3 id=\"go程goroutine\"><a class=\"markdownIt-Anchor\" href=\"#go程goroutine\"></a> Go程(goroutine)</h3>\n<p>go语言并发程序，主要由两种方式来实现。goroutine 和 channel,主go程退出，子go程也退出。</p>\n<h3 id=\"管道channel\"><a class=\"markdownIt-Anchor\" href=\"#管道channel\"></a> 管道(channel)</h3>\n<p>channel 是 Go 语言的一个核心类型可以把它看成管道，并发核心单元。通过它可以直接发送或接收数据进行通讯，这在一定承度上又进一步降低了编程的难度。channel 是一个数据类型，朱要来解决go程同步问题以及协程之间数据共享(传递)的问题。goroutine 运行在相同的地址空间。因此访问共享内存必须要做好同步。goroutine 奉行通过通信来共享内存，而不是共享内存来通信。引用类型 channel 可用于多个 goroutine 通讯，实现了同步，确保并发安全。</p>\n<ul>\n<li>channel 语法定义</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> 在 channel 中传递的数据类型,容量)</span><br></pre></td></tr></table></figure>\n<h3 id=\"生产者消费者模型\"><a class=\"markdownIt-Anchor\" href=\"#生产者消费者模型\"></a> 生产者消费者模型</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">producer</span><span class=\"params\">(out <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++ &#123;</span><br><span class=\"line\">\t\tout &lt;- i</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;生产者 生产 %d\\n&quot;</span>, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">consumer</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> num := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;消费者，消费： %d\\n&quot;</span>,num)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tproduct := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> producer(product)</span><br><span class=\"line\">\tconsumer(product)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"定时器\"><a class=\"markdownIt-Anchor\" href=\"#定时器\"></a> 定时器</h3>\n<ul>\n<li>周期定时器 <code>time.Ticker(time.Second)</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select\"><a class=\"markdownIt-Anchor\" href=\"#select\"></a> Select</h3>\n<p>通过 select 可以监听多个 channel 的数据流动。select 实现 fibonacci 数列；</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(ch &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>,quit &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> num : &lt;- ch:</span><br><span class=\"line\">\t\t\t\tfmt.Print(num,<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\t \t\t<span class=\"keyword\">case</span> &lt;- quit:</span><br><span class=\"line\">\t\t\t \t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tquit := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fibonacci(ch,quit)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>&#123;</span><br><span class=\"line\">\t\tch &lt;- x</span><br><span class=\"line\">\t\tx,y = y,x+y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tquit &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"锁机制\"><a class=\"markdownIt-Anchor\" href=\"#锁机制\"></a> 锁机制</h2>\n<h3 id=\"死锁\"><a class=\"markdownIt-Anchor\" href=\"#死锁\"></a> 死锁</h3>\n<ul>\n<li>channel 至少在两个以上的 GO 程中进行通信。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tch:=<span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tch &lt;- <span class=\"number\">789</span> <span class=\"comment\">// 这一行写入时候没有读取端 导致写入阻塞死锁。 </span></span><br><span class=\"line\">\tnum: =&lt;- ch</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;num=&quot;</span>,num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tch:=<span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tnum: =&lt;- ch  <span class=\"comment\">// 这一行读取的时候没有写入端 读取阻塞死锁。 </span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;num=&quot;</span>,num)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fun()&#123;</span><br><span class=\"line\">\t\tch &lt;- <span class=\"number\">789</span>\t</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"互斥死锁\"><a class=\"markdownIt-Anchor\" href=\"#互斥死锁\"></a> 互斥死锁</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mutex sync.Mutex</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printer</span><span class=\"params\">(str <span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">\tmutex.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,ch := rang str&#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%c&quot;</span>,c)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttime.Sleep(time.Millisecond * <span class=\"number\">3000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">print1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tprinter(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">print1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tprinter(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> print1(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> print2(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"读写锁\"><a class=\"markdownIt-Anchor\" href=\"#读写锁\"></a> 读写锁</h3>\n<p><code>swync.RWMutex</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rwMutex sync.RWMuyex</span><br><span class=\"line\"><span class=\"keyword\">var</span> value <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readGo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\trwMutex.RLock()</span><br><span class=\"line\">\t\tnum := value</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;读出数据&quot;</span>,num)</span><br><span class=\"line\">\t\trwMutex.RUnLock()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">writeGo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">\t\tnum:=rand.Intn(n:<span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\trwMutex.Lock()</span><br><span class=\"line\">\t\tvalue =  num</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;写入&quot;</span>, num)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 没有作用 只是为了放大实现现象</span></span><br><span class=\"line\">\t\ttime.Sleep(time.Millisecond * <span class=\"number\">3000</span>) </span><br><span class=\"line\">\t\trwMutex.Unlock()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> readGo()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> writeGo()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"条件变量\"><a class=\"markdownIt-Anchor\" href=\"#条件变量\"></a> 条件变量</h3>\n<ol>\n<li>创建条件变量 var cond sync.Cond</li>\n<li>指定条件变量使用的锁 cond.L = new(sync.Mutex)</li>\n<li>cond.L.Lock() 给公共区加锁(互斥量)</li>\n<li>判断是否达到 阻塞条件(缓冲区满/空) --for循环判断 <code>for len(ch) == cap(ch) &#123; cond.Wait() &#125; 1) 阻塞 2) 解锁 3) 加锁</code>。</li>\n<li>访问公共区 - 被读、写、打印的数据</li>\n<li>解锁条件变量的锁 condL.UnLock()</li>\n<li>唤醒目前被阻塞的线程。</li>\n</ol>\n<h2 id=\"网络编程\"><a class=\"markdownIt-Anchor\" href=\"#网络编程\"></a> 网络编程</h2>\n<p><strong>后续部分已转移至飞书文档\t<br />\n<a href=\"https://meta1024.feishu.cn/docs/doccnWpuy6Bs4y5SyahI0G31n2f\">https://meta1024.feishu.cn/docs/doccnWpuy6Bs4y5SyahI0G31n2f</a></strong></p>\n<h1 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h1>\n<ul>\n<li><a href=\"https://github.com/uber-go/guide\">uber go 代码规范</a></li>\n<li><a href=\"https://golangci-lint.run/usage/install/#local-installation\">go lint 代码静态检查</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"环境变量\"><a class=\"markdownIt-Anchor\" href=\"#环境变量\"></a> 环境变量</h1>\n<h2 id=\"windows\"><a class=\"markdownIt-Anchor\" href=\"#windows\"></a> windows</h2>\n<h2 id=\"maclinux\"><a class=\"markdownIt-Anchor\" href=\"#maclinux\"></a> mac/linux</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tee -a <span class=\"variable\">$HOME</span>/.bashrc &lt;&lt;<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># Go envs</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOVERSION=go1.16.2 <span class=\"comment\"># Go 版本设置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO_INSTALL_DIR=<span class=\"variable\">$HOME</span>/go <span class=\"comment\"># Go 安装目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=<span class=\"variable\">$GO_INSTALL_DIR</span>/<span class=\"variable\">$GOVERSION</span> <span class=\"comment\"># GOROOT 设置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=<span class=\"variable\">$WORKSPACE</span>/golang <span class=\"comment\"># GOPATH 设置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$GOROOT</span>/bin:<span class=\"variable\">$GOPATH</span>/bin:<span class=\"variable\">$PATH</span> <span class=\"comment\"># 将 Go 语言自带的和通过 go install 安装</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GO111MODULE=<span class=\"string\">&quot;on&quot;</span> <span class=\"comment\"># 开启 Go moudles 特性</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPROXY=https://goproxy.cn,direct <span class=\"comment\"># 安装 Go 模块时，代理服务器设置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPRIVATE=</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOSUMDB=off <span class=\"comment\"># 关闭校验 Go 依赖包的哈希值</span></span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置环境变量的含义\"><a class=\"markdownIt-Anchor\" href=\"#设置环境变量的含义\"></a> 设置环境变量的含义</h2>\n<p><img src=\"https://blogimage.lemonlife.top/20210905001904.png\" alt=\"引用自https://time.geekbang.org/column/article/378076\" /></p>\n<h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\"></a> 字符串</h2>\n<ol>\n<li>string 是数据类型，不是引用或指针类型。</li>\n<li>string 是只读的 byte slice,len 函数可以包含它所包含的 byte 数。</li>\n<li>string 的 byte 数组可以存放任何数据。</li>\n</ol>\n<h3 id=\"unicode-和-utf8\"><a class=\"markdownIt-Anchor\" href=\"#unicode-和-utf8\"></a> Unicode 和 UTF8</h3>\n<ol>\n<li>Unicode 是一种字符集 (code point)</li>\n<li>UTF8是 Unicode 的存储实现 (转换为字节序列的规则)<br />\n以汉字 <code>中</code>为例子</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>中</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Unicode</td>\n<td>0x4E2D</td>\n</tr>\n<tr>\n<td>UTF-8</td>\n<td>0xE4B8AD</td>\n</tr>\n<tr>\n<td>string/[]byte</td>\n<td>[0xE4,0xB8,0xAD]</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html\">阮一峰Unicode 和 utf8</a></p>\n<h3 id=\"字符串处理函数\"><a class=\"markdownIt-Anchor\" href=\"#字符串处理函数\"></a> 字符串处理函数</h3>\n<ul>\n<li>包含<br />\n<code>strings.Contains</code> 查找字符串中，是否包含另一个字符串。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   str := <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">   strings.Contains(str, <span class=\"string\">&quot;he&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//    true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>拼接<br />\n<code>strings.Join</code> 使用特定字符，拼接字符数组。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>&#125;</span><br><span class=\"line\">strings.Join(s, <span class=\"string\">&quot;-&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查找<br />\n<code>strings.Index()</code> 查找字符串具体的字符位置。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str:=<span class=\"string\">&quot;1234&quot;</span></span><br><span class=\"line\">strings.Index(str,<span class=\"string\">&quot;1&quot;</span>) <span class=\"comment\">// 0</span></span><br><span class=\"line\">strings.Index(str,<span class=\"string\">&quot;3&quot;</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>替换<br />\n`strings.Replace(原字符串,被替换内容,替换内容,替换次数),替换次数小于0表示 全替换。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str:=<span class=\"string\">&quot;kraken&quot;</span></span><br><span class=\"line\">strings.Replace(str,<span class=\"string\">&quot;kraken&quot;</span>,<span class=\"string\">&quot;lym&quot;</span>,<span class=\"number\">1</span>) </span><br></pre></td></tr></table></figure>\n<ul>\n<li>分割<br />\nstrings.Split(原字符串,分割标志)</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str:=<span class=\"string\">&quot;kraken&quot;</span></span><br><span class=\"line\">strings.Split(str,<span class=\"string\">&quot;k&quot;</span>) </span><br></pre></td></tr></table></figure>\n<ul>\n<li>移除<br />\nstrings(str,移除标志),移除首尾指定的字符串</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str:=<span class=\"string\">&quot; hello &quot;</span></span><br><span class=\"line\">strings.Trim(str,<span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按空格分割<br />\nstrings.Fields(str) 去除原有字符串中所有空格后，并且按照原有字符串空格位置分割</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str:=<span class=\"string\">&quot;   my name is   kraken    &quot;</span></span><br><span class=\"line\">strings.Fields(str)</span><br><span class=\"line\"><span class=\"comment\">// [my name is kraken]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串类型转化\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型转化\"></a> 字符串类型转化</h3>\n<p>将字符串转化成其他数据类型，或者将其他数据类型的数据转化成字符串。一般使用包<a href=\"https://pkg.go.dev/strconv\">strconv</a></p>\n<h2 id=\"对象\"><a class=\"markdownIt-Anchor\" href=\"#对象\"></a> 对象</h2>\n<h3 id=\"方法\"><a class=\"markdownIt-Anchor\" href=\"#方法\"></a> 方法</h3>\n<p>go 语言可以给定义的任何类型，绑定该类型的方法。</p>\n<ul>\n<li>对于基础数据类型列如 <code>int</code>。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Int <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"comment\">// fun(方法接收者)方法名称(参数列表)绑定方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a Int)</span><span class=\"title\">add</span><span class=\"params\">(b Int)</span><span class=\"title\">Int</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a Int = <span class=\"number\">10</span></span><br><span class=\"line\">    a.ddd(<span class=\"number\">20</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对于自定义数据类型，比如自定义 <code>Student</code>。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage  <span class=\"keyword\">int</span></span><br><span class=\"line\">\tsex  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s Student)</span> <span class=\"title\">PrintInfo</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(s.name)</span><br><span class=\"line\">\tfmt.Println(s.age)</span><br><span class=\"line\">\tfmt.Println(s.sex)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s1 Student = Student&#123;name: <span class=\"string\">&quot;王&quot;</span>, age: <span class=\"number\">18</span>, sex: <span class=\"string\">&quot;女&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *或者</span></span><br><span class=\"line\"><span class=\"comment\">    var s1 *Stu = &amp;Stu&#123;name: &quot;王&quot;, age: 18, sex: &quot;女&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\ts1.PrintInfo() <span class=\"comment\">// 王 18 女</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多态\"><a class=\"markdownIt-Anchor\" href=\"#多态\"></a> 多态</h3>\n<h2 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\"></a> 函数</h2>\n<p>函数是一等公民。</p>\n<h3 id=\"普通函数\"><a class=\"markdownIt-Anchor\" href=\"#普通函数\"></a> 普通函数</h3>\n<h3 id=\"延迟调用-defer\"><a class=\"markdownIt-Anchor\" href=\"#延迟调用-defer\"></a> 延迟调用 defer</h3>\n<p>当前函数栈结束的时候才运行对应的函数，按照出栈的顺序从后往前调用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> defer_test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"number\">3</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  输出 1 4 3 2</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20211103010729.png\" alt=\"defer 函数执行示意图\" /></p>\n<h2 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> 异常处理</h2>\n<h3 id=\"逻辑边界处理\"><a class=\"markdownIt-Anchor\" href=\"#逻辑边界处理\"></a> 逻辑边界处理</h3>\n<p>自己通过一些边界条件的判断，过滤掉不合适的场景。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(a <span class=\"keyword\">int</span>, b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(value <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> b == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, errors.New(<span class=\"string\">&quot;runtime error&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a / b, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> value, err := test(<span class=\"number\">10</span>, <span class=\"number\">10</span>); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"panic\"><a class=\"markdownIt-Anchor\" href=\"#panic\"></a> panic</h3>\n<p>程序出现异常，程序会主动调用 panic 并崩溃。</p>\n<h3 id=\"recover\"><a class=\"markdownIt-Anchor\" href=\"#recover\"></a> recover</h3>\n<p>捕获函数错误，之在 <code>defer</code>调用的函数生效。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr [<span class=\"number\">10</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\terr := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tarr[i] = <span class=\"number\">100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\tdemo(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// runtime error: index out of range [10] with length 10</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果使用 如下的方式则无法捕获异常，因为在defer定义之前异常已经发生了</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">demo</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr [<span class=\"number\">10</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\tarr[i] = <span class=\"number\">100</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\terr := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\tdemo(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"进程与线程\"><a class=\"markdownIt-Anchor\" href=\"#进程与线程\"></a> 进程与线程</h2>\n<h3 id=\"并行与并发\"><a class=\"markdownIt-Anchor\" href=\"#并行与并发\"></a> 并行与并发</h3>\n<ul>\n<li>并行(parallel)指在同一时刻有多条指令在多个处理器上同时执行。</li>\n<li>并发(concurrency)指在同一时刻只有一条指令执行，但是多个进程的指令在被轮换执行。使得宏观上存在多个程序同时进行的效果，但是在微观上不是同时执行的，只是把时间分成若干段通过<code>CPU时间片</code>轮转使得多个进程交替运行</li>\n</ul>\n<h3 id=\"进程与程序\"><a class=\"markdownIt-Anchor\" href=\"#进程与程序\"></a> 进程与程序</h3>\n<ul>\n<li>程序，程序编译产生的二进制文件，只占用磁盘空间。</li>\n<li>进程 程序运行起来，需要占用系统资源。</li>\n<li>进程的状态：运行态，就绪态，运行态，挂起态，停止态。</li>\n</ul>\n<h3 id=\"进程并发\"><a class=\"markdownIt-Anchor\" href=\"#进程并发\"></a> 进程并发</h3>\n<ul>\n<li>进程，操作系统最小的资源分配单位。稳定性强</li>\n</ul>\n<h3 id=\"线程并发\"><a class=\"markdownIt-Anchor\" href=\"#线程并发\"></a> 线程并发</h3>\n<ul>\n<li>线程：LWP 轻量级的进程，最小的执行单位。- cpu 分配时间轮片的单元，节约系统资源</li>\n<li>同步，多个控制流操作同一个变量的情况下需要资源同步。</li>\n</ul>\n<h3 id=\"协程并发\"><a class=\"markdownIt-Anchor\" href=\"#协程并发\"></a> 协程并发</h3>\n<ul>\n<li>协程，轻量级的线程。在线程挂起状态的时候，可以继续处理其他的事务。提高程序执行的效率。</li>\n</ul>\n<h3 id=\"go程goroutine\"><a class=\"markdownIt-Anchor\" href=\"#go程goroutine\"></a> Go程(goroutine)</h3>\n<p>go语言并发程序，主要由两种方式来实现。goroutine 和 channel,主go程退出，子go程也退出。</p>\n<h3 id=\"管道channel\"><a class=\"markdownIt-Anchor\" href=\"#管道channel\"></a> 管道(channel)</h3>\n<p>channel 是 Go 语言的一个核心类型可以把它看成管道，并发核心单元。通过它可以直接发送或接收数据进行通讯，这在一定承度上又进一步降低了编程的难度。channel 是一个数据类型，朱要来解决go程同步问题以及协程之间数据共享(传递)的问题。goroutine 运行在相同的地址空间。因此访问共享内存必须要做好同步。goroutine 奉行通过通信来共享内存，而不是共享内存来通信。引用类型 channel 可用于多个 goroutine 通讯，实现了同步，确保并发安全。</p>\n<ul>\n<li>channel 语法定义</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> 在 channel 中传递的数据类型,容量)</span><br></pre></td></tr></table></figure>\n<h3 id=\"生产者消费者模型\"><a class=\"markdownIt-Anchor\" href=\"#生产者消费者模型\"></a> 生产者消费者模型</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">producer</span><span class=\"params\">(out <span class=\"keyword\">chan</span>&lt;- <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++ &#123;</span><br><span class=\"line\">\t\tout &lt;- i</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;生产者 生产 %d\\n&quot;</span>, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">consumer</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> num := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;消费者，消费： %d\\n&quot;</span>,num)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tproduct := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> producer(product)</span><br><span class=\"line\">\tconsumer(product)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"定时器\"><a class=\"markdownIt-Anchor\" href=\"#定时器\"></a> 定时器</h3>\n<ul>\n<li>周期定时器 <code>time.Ticker(time.Second)</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"select\"><a class=\"markdownIt-Anchor\" href=\"#select\"></a> Select</h3>\n<p>通过 select 可以监听多个 channel 的数据流动。select 实现 fibonacci 数列；</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(ch &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>,quit &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> num : &lt;- ch:</span><br><span class=\"line\">\t\t\t\tfmt.Print(num,<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\t \t\t<span class=\"keyword\">case</span> &lt;- quit:</span><br><span class=\"line\">\t\t\t \t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tquit := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fibonacci(ch,quit)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>&#123;</span><br><span class=\"line\">\t\tch &lt;- x</span><br><span class=\"line\">\t\tx,y = y,x+y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tquit &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"锁机制\"><a class=\"markdownIt-Anchor\" href=\"#锁机制\"></a> 锁机制</h2>\n<h3 id=\"死锁\"><a class=\"markdownIt-Anchor\" href=\"#死锁\"></a> 死锁</h3>\n<ul>\n<li>channel 至少在两个以上的 GO 程中进行通信。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tch:=<span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tch &lt;- <span class=\"number\">789</span> <span class=\"comment\">// 这一行写入时候没有读取端 导致写入阻塞死锁。 </span></span><br><span class=\"line\">\tnum: =&lt;- ch</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;num=&quot;</span>,num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tch:=<span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\tnum: =&lt;- ch  <span class=\"comment\">// 这一行读取的时候没有写入端 读取阻塞死锁。 </span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;num=&quot;</span>,num)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fun()&#123;</span><br><span class=\"line\">\t\tch &lt;- <span class=\"number\">789</span>\t</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"互斥死锁\"><a class=\"markdownIt-Anchor\" href=\"#互斥死锁\"></a> 互斥死锁</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mutex sync.Mutex</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printer</span><span class=\"params\">(str <span class=\"keyword\">string</span>)</span></span>&#123;</span><br><span class=\"line\">\tmutex.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _,ch := rang str&#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%c&quot;</span>,c)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttime.Sleep(time.Millisecond * <span class=\"number\">3000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">print1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tprinter(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">print1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tprinter(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> print1(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> print2(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"读写锁\"><a class=\"markdownIt-Anchor\" href=\"#读写锁\"></a> 读写锁</h3>\n<p><code>swync.RWMutex</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rwMutex sync.RWMuyex</span><br><span class=\"line\"><span class=\"keyword\">var</span> value <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readGo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\trwMutex.RLock()</span><br><span class=\"line\">\t\tnum := value</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;读出数据&quot;</span>,num)</span><br><span class=\"line\">\t\trwMutex.RUnLock()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">writeGo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">\t\tnum:=rand.Intn(n:<span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\trwMutex.Lock()</span><br><span class=\"line\">\t\tvalue =  num</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;写入&quot;</span>, num)</span><br><span class=\"line\">\t\t<span class=\"comment\">// 没有作用 只是为了放大实现现象</span></span><br><span class=\"line\">\t\ttime.Sleep(time.Millisecond * <span class=\"number\">3000</span>) </span><br><span class=\"line\">\t\trwMutex.Unlock()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> readGo()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> writeGo()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"条件变量\"><a class=\"markdownIt-Anchor\" href=\"#条件变量\"></a> 条件变量</h3>\n<ol>\n<li>创建条件变量 var cond sync.Cond</li>\n<li>指定条件变量使用的锁 cond.L = new(sync.Mutex)</li>\n<li>cond.L.Lock() 给公共区加锁(互斥量)</li>\n<li>判断是否达到 阻塞条件(缓冲区满/空) --for循环判断 <code>for len(ch) == cap(ch) &#123; cond.Wait() &#125; 1) 阻塞 2) 解锁 3) 加锁</code>。</li>\n<li>访问公共区 - 被读、写、打印的数据</li>\n<li>解锁条件变量的锁 condL.UnLock()</li>\n<li>唤醒目前被阻塞的线程。</li>\n</ol>\n<h2 id=\"网络编程\"><a class=\"markdownIt-Anchor\" href=\"#网络编程\"></a> 网络编程</h2>\n<p><strong>后续部分已转移至飞书文档\t<br />\n<a href=\"https://meta1024.feishu.cn/docs/doccnWpuy6Bs4y5SyahI0G31n2f\">https://meta1024.feishu.cn/docs/doccnWpuy6Bs4y5SyahI0G31n2f</a></strong></p>\n<h1 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h1>\n<ul>\n<li><a href=\"https://github.com/uber-go/guide\">uber go 代码规范</a></li>\n<li><a href=\"https://golangci-lint.run/usage/install/#local-installation\">go lint 代码静态检查</a></li>\n</ul>\n"},{"title":"设计模式(零)","date":"2019-09-16T05:39:25.000Z","_content":"\n### call apply bind 简单运用\n\n1. 上手一个小例子\n\n  ```javascript\n  let obj = {\n    a:1,\n    getA:function(){\n      console.log(this == obj)\n      console.log(this.a)\n    }\n  }\n  obj.getA() // true 1\n  let funGetA = obj.getA\n  funGetA() // false undefined\n  funGetA.apply(obj) // true 1\n  funGetA.call(obj)// true 1\n  funGetA.bind(obj)() // true 1\n  /**\n  * obj.getA()执行时候函数上下文 是对象obj 的环境 所以 this 指向 obj \n  * funGetA 执行时 上下文 已经变成了 window 此时 this指向window \n  * apply 和 call 把obj作为参数传入函数 把函数中this的指向改变成obj\n  */\n  ```\n2. call 和apply区别\n\n  > 显然call和apply 的第一个参数作用都是制定了参数体内this的指向，不同的是 apply 只接受两个参数。apply第二个参数是一个集合(`数组` `类数组` )，call 从第二个参数开始后面的每一个参数都是依次传入函数\n\n  ```javascript\n  function fun(a,b,c){\n    console.log(a,b,c)\n  }\n  fun.apply(null,1) //报错 TypeError: CreateListFromArrayLike called on non-object\n  fun.apply(null,[1])// 1 undefined undefined\n  fun.apply(null,[1,2,3]) // 1 2 3\n  fun.call(null,1,2) //1 2 undefied  \n  ```\n\n   \n\n3. 手动自己实现一个`bind`函数\n\n```javascript\nFunction.prototype.testBind=function(context,...args){\n  let self = this\n  return function(...inArgs){\n    self.apply(context,[...args,...inArgs])  \n  }\n}\nobj ={\n  name:'testbind'\n}\nvar fun =function(...allArgs){\n  console.log(allArgs) // [1,2,3,4,5,6]\n  console.log(this.name) // testbind\n}.testBind(obj,1,2,3)\nfun(5,6)\n```\n\n### 闭包的运用\n\n1. 封装变量，延长变量的生命周期\n\n```javascript\nfunction fun1() {\n  var a = 1\n  return function fun2 () {\n    a++\n    return a\n  }\n}\nvar f = fun1();\nconsole.log(f(),f(),f()) // 2 3 4\n```\n\n> 会发现 f函数每次运行之后他的a变量生命并没有被销毁，下次运行时 a变量的值直接被记录了下来\n\n\n-   封装变量，延长变量的生命周期的运用 js随机数的生成\n\n   ```javascript\n   \n   function buildRandom() {\n      var seed =new Date().getTime(); // 这边如果是常数 那么每次重新运行整个文件结果都一样单次运行函数不一样\n     return function() {\n       // Robert Jenkins' 32 bit integer hash function.\n       seed = seed & 0xffffffff;\n       seed = ((seed + 0x7ed55d16) + (seed << 12))  & 0xffffffff;\n       seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\n       seed = ((seed + 0x165667b1) + (seed << 5))   & 0xffffffff;\n       seed = ((seed + 0xd3a2646c) ^ (seed << 9))   & 0xffffffff;\n       seed = ((seed + 0xfd7046c5) + (seed << 3))   & 0xffffffff;\n       seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\n       return (seed & 0xfffffff) / 0x10000000;\n     };\n   }\n   var random = buildRandom()\n   for(let i =0;i<20;i++){\n     console.log(random())\n   }\n   ```\n\n   > `random` 函数每次运行结束`seed`变量并没有被销毁，依然存在于整体的生命中期中，继续影响下一次的seed的值 \n\n2. 使用在函数缓存机制中 减少全局变量的污染。\n\n  ```\n  function fun1() {\n    let a = 1\n    for (let i = 0; i < 10000; i++) {\n      a = a + i\n    }\n    return a;\n  }\n  \n  let fun2 = (function () {\n    let cache = {}\n    return function () {\n      let a = 1\n      let args = Array.prototype.join.call(arguments, \"\")\n      if (cache[args]) {\n        return cache[args]\n      }\n      for (let i = 0; i < 10000; i++) {\n        a = a + i\n      }\n  \n      cache[args] = a;\n      return cache[args];\n    }\n  })();\n  \n  console.time('nocache')\n  for (let i = 0; i < 100000; i++) {\n    fun1(1, 2, 3, 4, 5)\n  }\n  console.timeEnd(\"nocache\") // 1276ms\n  \n  console.time('usecache')\n  for (let i = 0; i < 100000; i++) {\n    fun2(1, 2, 3, 4, 5)\n  }\n  console.timeEnd('usecache') //73ms\n  ```\n\n   > 注意cache[args]的自身结果不能为false，如果cache[args]一直为false `return cache[args]`就不会运行\n\n  ### 高阶函数|函数式编程\n  \n> 1. 函数作为参数传入\n> 2. 函数作为返回值输出\n> 3. 函数柯里化\n  \n**对于函数式编程这块后面肯定会有更详细的文章推出 [不迷路链接](http://blog.wangminwei.top)**\n  \n### 柯里化\n\n> 柯里化又称分部求值一个currying function 首先会接收一些参数，但是不会先求值，继续返货另一个函数，等到函数真正需要求值的时候之前传入的所有参数，会被一次性求值。\n\n  ```javascript\n  let cost=(function(){\n    var args = [];\n    return function(){\n      if(arguments.length ==0){\n        let money= args.reduce((a,b)=>a+b)\n        return money\n      }else{\n        [].push.apply(args,arguments)\n      }\n    }\n  })();\n  cost(100)\n  cost(200)\n  cost(300)\n  console.log(cost()) // 600\n  ```\n  \n  > 调用cost函数的时候，如果明确的带上了一些参数，此时不会进行真正的求值运算，而是把这些参数保持起来，保存到`args`数组中，不传参时再进行求值运算。\n  \n  ### 函数节流\n  > 函数因某些事件被不停的高频调用;为防止高频调用导致性能消耗过大页面卡顿现象；需要限制函数在规定时间内被调用的次数\n\n- 应用场景分析\n  \n  浏览器`window.onresize`和`mousemove`事件,这两个事件带来的问题原理差不多,都是因为用户每一次操作这两个函数都会进行响应，比如前者用户改变一次浏览器窗口大小函数响应一次。这时候如果用户平滑的从左到右拖动来改变浏览器大小，函数就会不停的响应，如果用户一秒钟拖动慢一点拖动距离长一点；差不多函数可以响应30多次；这个对页面的性能损耗是巨大的；有时候我们往往不需要实时记录浏览器窗口大小，可能一秒钟记录一两次就行。\n\n#### 节流函数的实现\n1. 定时器实现延时函数实现节流\n```ts\n/**\n * @param fn 接收要执行的函数\n * @param interval 延迟的时间默认500毫秒即一秒钟只被执行2次\n */\nfunction delayFun(fn: Function, interval: number = 500) {\n  let timer, intervalUse = false;\n  let _self = fn\n  return () => {\n    if (timer) {\n      console.log(timer)\n      return false;\n    }\n    timer = setTimeout(() => {\n      _self()\n      intervalUse = true;\n      clearTimeout(timer)\n      console.log('函数被执行')\n    }, Number(intervalUse && interval))\n  }\n}\n```\n> `Number(intervalUse && interval)` 第一次调用不需要延迟,\n即`intervalUse = false` 此时`Number(intervalUse && interval)= 0` 函数立即执行;相反 如果这时候用户继续有操作;`intervalUse = true;Number(intervalUse && interval)=interval` 定时器生效;用户操作被延迟\n\n可以看到设置`interval=1000`后在用户平滑的改变浏览器窗口大小时候函数每秒钟只执行了一次\n![](http://blogimage.lemonlife.top/201911061432_908.png)\n\n2. 分时函数实现节流\n> 上面一种方式针对于，用户频繁的操作，还有一种场景就是用户只操作一次，但是带来的函数的调用是成百上千次；比如用户点了加载数据按钮加载数据的时候，此时数据有上千条；一次性加载页面肯定会卡死甚至浏览器直接退出;这时候就需要分时加载；比如100ms加载10条这种方式;而不是在用户一点击就疯狂调用对应的函数\n\n- 原始方法 页面出现长时间白屏\n```javascript\n  let array =[]\n  for(let i =0;i<=1000000;i++)array.push(i);\n  let add=(array)=>{\n    for (let index = 0; index < array.length; index++) {\n      let div = document.createElement('div')\n      div.innerHTML =array[index]\n      document.body.appendChild(div)\n    }\n  }\n  add(array)\n```\n- 分时节流之后 数据缓慢加载出来但是基本无白屏现象\n```javascript\n  let array = []\n  for (let i = 0; i <= 1000000; i++)array.push(i);\n  function create(array, times) {\n    var oneSize = Math.floor(array.length / times);\n    var count = 0;\n    var add = function () {\n      for (var i = 0; i < oneSize; i++) {\n        var div = document.createElement('div');\n        div.innerHTML = array[count];\n        document.body.appendChild(div);\n        count++;\n        if (count === array.length) {\n          clearInterval(timer);\n          return 0;\n        }\n      }\n    };\n    var timer = setInterval(add, 40);\n  }\n  create(array,100)\n```\n> 案例源码[GitHub链接](https://github.com/ilovcoding/blog-demo/blob/master/2019_11_6/2/index_timer.html)\n\n### 惰性加载函数\n>Web开发中不同浏览器运行环境下不可避免的要进行一些适配操作，如果每次调用一个事件都通过`if else`来对不同的浏览器的解决方案，将会带来性能的损耗，可以把这写需要适配的函数抽离成惰性加载的方式来调用\n- 第一版本 每次使用都要判断\n```JavaScript\nlet addEvent = function (element, type, handler) {\n  if (window.addEventListener) {\n    element.addEventListener(type, handler, false);\n    return 0\n  }\n  // 注意此处只是一个例子 window.attachEvent 这种IE专属的函数 很早就没人用了 可能IE自己现在都不用了\n  if (window.attachEvent) {\n    return element.attachEvent('on'+type, handler)\n  }\n};\n```\n- 稍作改进 浏览器代码加载的时候就给出结果只判断一次\n```javascript\nlet addEvent = (function () {\n    if (window.addEventListener) {\n      return function (element, type, handler) {\n        element.addEventListener(type, handler, false);\n      }\n    }\n    if (window.attachEvent) {\n      return function (element, type, handler) {\n        element.attachEvent('on' + type, handler)\n      }\n    }\n})();\n```\n- 引入惰性加载的方式\n```javascript\n  let  addEvent = function (element, type, handler) {\n      if (window.addEventListener) {\n        addEvent = function (element, type, handler) {\n          element.addEventListener(type, handler, false);\n        }\n      }\n      if (window.attachEvent) {\n        addEvent = function (element, type, handler) {\n          element.attachEvent('on' + type, handler)\n        }\n      }\n      addEvent(element, type, handler)\n    }\n```\n> 对比第一个 函数每次运行都需要`if else`判断，肯定要消耗性能，对比第二个浏览器在加载代码时候要做函数运算延长了页面响应时间;第三种方式在第一次绑定事件的时候重写了绑定事件的方法，因此 只有在第一次 使用该函数的时候需要执行`if else`操作，与第二种方法不同的是，它把本来在浏览器加载代码所消耗的时间，转移到了函数第一次运行的时候，加快了页面的响应\n\n> 案例源码[GitHub链接](https://github.com/ilovcoding/blog-demo/blob/master/2019_11_6/3/index.html)\n\n*以上内容是我看完 JavaScript设计模式与开发实战 第一部分之后自己总结的，感谢曾(da)探(lao)*\n\n<center><b>欢迎大家评论区交流</b></center>","source":"_posts/javascript-design-mode.md","raw":"---\ntitle: 设计模式(零)\ndate: 2019-09-16 13:39:25\ntags:  \n  - 设计模式\n\n---\n\n### call apply bind 简单运用\n\n1. 上手一个小例子\n\n  ```javascript\n  let obj = {\n    a:1,\n    getA:function(){\n      console.log(this == obj)\n      console.log(this.a)\n    }\n  }\n  obj.getA() // true 1\n  let funGetA = obj.getA\n  funGetA() // false undefined\n  funGetA.apply(obj) // true 1\n  funGetA.call(obj)// true 1\n  funGetA.bind(obj)() // true 1\n  /**\n  * obj.getA()执行时候函数上下文 是对象obj 的环境 所以 this 指向 obj \n  * funGetA 执行时 上下文 已经变成了 window 此时 this指向window \n  * apply 和 call 把obj作为参数传入函数 把函数中this的指向改变成obj\n  */\n  ```\n2. call 和apply区别\n\n  > 显然call和apply 的第一个参数作用都是制定了参数体内this的指向，不同的是 apply 只接受两个参数。apply第二个参数是一个集合(`数组` `类数组` )，call 从第二个参数开始后面的每一个参数都是依次传入函数\n\n  ```javascript\n  function fun(a,b,c){\n    console.log(a,b,c)\n  }\n  fun.apply(null,1) //报错 TypeError: CreateListFromArrayLike called on non-object\n  fun.apply(null,[1])// 1 undefined undefined\n  fun.apply(null,[1,2,3]) // 1 2 3\n  fun.call(null,1,2) //1 2 undefied  \n  ```\n\n   \n\n3. 手动自己实现一个`bind`函数\n\n```javascript\nFunction.prototype.testBind=function(context,...args){\n  let self = this\n  return function(...inArgs){\n    self.apply(context,[...args,...inArgs])  \n  }\n}\nobj ={\n  name:'testbind'\n}\nvar fun =function(...allArgs){\n  console.log(allArgs) // [1,2,3,4,5,6]\n  console.log(this.name) // testbind\n}.testBind(obj,1,2,3)\nfun(5,6)\n```\n\n### 闭包的运用\n\n1. 封装变量，延长变量的生命周期\n\n```javascript\nfunction fun1() {\n  var a = 1\n  return function fun2 () {\n    a++\n    return a\n  }\n}\nvar f = fun1();\nconsole.log(f(),f(),f()) // 2 3 4\n```\n\n> 会发现 f函数每次运行之后他的a变量生命并没有被销毁，下次运行时 a变量的值直接被记录了下来\n\n\n-   封装变量，延长变量的生命周期的运用 js随机数的生成\n\n   ```javascript\n   \n   function buildRandom() {\n      var seed =new Date().getTime(); // 这边如果是常数 那么每次重新运行整个文件结果都一样单次运行函数不一样\n     return function() {\n       // Robert Jenkins' 32 bit integer hash function.\n       seed = seed & 0xffffffff;\n       seed = ((seed + 0x7ed55d16) + (seed << 12))  & 0xffffffff;\n       seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\n       seed = ((seed + 0x165667b1) + (seed << 5))   & 0xffffffff;\n       seed = ((seed + 0xd3a2646c) ^ (seed << 9))   & 0xffffffff;\n       seed = ((seed + 0xfd7046c5) + (seed << 3))   & 0xffffffff;\n       seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\n       return (seed & 0xfffffff) / 0x10000000;\n     };\n   }\n   var random = buildRandom()\n   for(let i =0;i<20;i++){\n     console.log(random())\n   }\n   ```\n\n   > `random` 函数每次运行结束`seed`变量并没有被销毁，依然存在于整体的生命中期中，继续影响下一次的seed的值 \n\n2. 使用在函数缓存机制中 减少全局变量的污染。\n\n  ```\n  function fun1() {\n    let a = 1\n    for (let i = 0; i < 10000; i++) {\n      a = a + i\n    }\n    return a;\n  }\n  \n  let fun2 = (function () {\n    let cache = {}\n    return function () {\n      let a = 1\n      let args = Array.prototype.join.call(arguments, \"\")\n      if (cache[args]) {\n        return cache[args]\n      }\n      for (let i = 0; i < 10000; i++) {\n        a = a + i\n      }\n  \n      cache[args] = a;\n      return cache[args];\n    }\n  })();\n  \n  console.time('nocache')\n  for (let i = 0; i < 100000; i++) {\n    fun1(1, 2, 3, 4, 5)\n  }\n  console.timeEnd(\"nocache\") // 1276ms\n  \n  console.time('usecache')\n  for (let i = 0; i < 100000; i++) {\n    fun2(1, 2, 3, 4, 5)\n  }\n  console.timeEnd('usecache') //73ms\n  ```\n\n   > 注意cache[args]的自身结果不能为false，如果cache[args]一直为false `return cache[args]`就不会运行\n\n  ### 高阶函数|函数式编程\n  \n> 1. 函数作为参数传入\n> 2. 函数作为返回值输出\n> 3. 函数柯里化\n  \n**对于函数式编程这块后面肯定会有更详细的文章推出 [不迷路链接](http://blog.wangminwei.top)**\n  \n### 柯里化\n\n> 柯里化又称分部求值一个currying function 首先会接收一些参数，但是不会先求值，继续返货另一个函数，等到函数真正需要求值的时候之前传入的所有参数，会被一次性求值。\n\n  ```javascript\n  let cost=(function(){\n    var args = [];\n    return function(){\n      if(arguments.length ==0){\n        let money= args.reduce((a,b)=>a+b)\n        return money\n      }else{\n        [].push.apply(args,arguments)\n      }\n    }\n  })();\n  cost(100)\n  cost(200)\n  cost(300)\n  console.log(cost()) // 600\n  ```\n  \n  > 调用cost函数的时候，如果明确的带上了一些参数，此时不会进行真正的求值运算，而是把这些参数保持起来，保存到`args`数组中，不传参时再进行求值运算。\n  \n  ### 函数节流\n  > 函数因某些事件被不停的高频调用;为防止高频调用导致性能消耗过大页面卡顿现象；需要限制函数在规定时间内被调用的次数\n\n- 应用场景分析\n  \n  浏览器`window.onresize`和`mousemove`事件,这两个事件带来的问题原理差不多,都是因为用户每一次操作这两个函数都会进行响应，比如前者用户改变一次浏览器窗口大小函数响应一次。这时候如果用户平滑的从左到右拖动来改变浏览器大小，函数就会不停的响应，如果用户一秒钟拖动慢一点拖动距离长一点；差不多函数可以响应30多次；这个对页面的性能损耗是巨大的；有时候我们往往不需要实时记录浏览器窗口大小，可能一秒钟记录一两次就行。\n\n#### 节流函数的实现\n1. 定时器实现延时函数实现节流\n```ts\n/**\n * @param fn 接收要执行的函数\n * @param interval 延迟的时间默认500毫秒即一秒钟只被执行2次\n */\nfunction delayFun(fn: Function, interval: number = 500) {\n  let timer, intervalUse = false;\n  let _self = fn\n  return () => {\n    if (timer) {\n      console.log(timer)\n      return false;\n    }\n    timer = setTimeout(() => {\n      _self()\n      intervalUse = true;\n      clearTimeout(timer)\n      console.log('函数被执行')\n    }, Number(intervalUse && interval))\n  }\n}\n```\n> `Number(intervalUse && interval)` 第一次调用不需要延迟,\n即`intervalUse = false` 此时`Number(intervalUse && interval)= 0` 函数立即执行;相反 如果这时候用户继续有操作;`intervalUse = true;Number(intervalUse && interval)=interval` 定时器生效;用户操作被延迟\n\n可以看到设置`interval=1000`后在用户平滑的改变浏览器窗口大小时候函数每秒钟只执行了一次\n![](http://blogimage.lemonlife.top/201911061432_908.png)\n\n2. 分时函数实现节流\n> 上面一种方式针对于，用户频繁的操作，还有一种场景就是用户只操作一次，但是带来的函数的调用是成百上千次；比如用户点了加载数据按钮加载数据的时候，此时数据有上千条；一次性加载页面肯定会卡死甚至浏览器直接退出;这时候就需要分时加载；比如100ms加载10条这种方式;而不是在用户一点击就疯狂调用对应的函数\n\n- 原始方法 页面出现长时间白屏\n```javascript\n  let array =[]\n  for(let i =0;i<=1000000;i++)array.push(i);\n  let add=(array)=>{\n    for (let index = 0; index < array.length; index++) {\n      let div = document.createElement('div')\n      div.innerHTML =array[index]\n      document.body.appendChild(div)\n    }\n  }\n  add(array)\n```\n- 分时节流之后 数据缓慢加载出来但是基本无白屏现象\n```javascript\n  let array = []\n  for (let i = 0; i <= 1000000; i++)array.push(i);\n  function create(array, times) {\n    var oneSize = Math.floor(array.length / times);\n    var count = 0;\n    var add = function () {\n      for (var i = 0; i < oneSize; i++) {\n        var div = document.createElement('div');\n        div.innerHTML = array[count];\n        document.body.appendChild(div);\n        count++;\n        if (count === array.length) {\n          clearInterval(timer);\n          return 0;\n        }\n      }\n    };\n    var timer = setInterval(add, 40);\n  }\n  create(array,100)\n```\n> 案例源码[GitHub链接](https://github.com/ilovcoding/blog-demo/blob/master/2019_11_6/2/index_timer.html)\n\n### 惰性加载函数\n>Web开发中不同浏览器运行环境下不可避免的要进行一些适配操作，如果每次调用一个事件都通过`if else`来对不同的浏览器的解决方案，将会带来性能的损耗，可以把这写需要适配的函数抽离成惰性加载的方式来调用\n- 第一版本 每次使用都要判断\n```JavaScript\nlet addEvent = function (element, type, handler) {\n  if (window.addEventListener) {\n    element.addEventListener(type, handler, false);\n    return 0\n  }\n  // 注意此处只是一个例子 window.attachEvent 这种IE专属的函数 很早就没人用了 可能IE自己现在都不用了\n  if (window.attachEvent) {\n    return element.attachEvent('on'+type, handler)\n  }\n};\n```\n- 稍作改进 浏览器代码加载的时候就给出结果只判断一次\n```javascript\nlet addEvent = (function () {\n    if (window.addEventListener) {\n      return function (element, type, handler) {\n        element.addEventListener(type, handler, false);\n      }\n    }\n    if (window.attachEvent) {\n      return function (element, type, handler) {\n        element.attachEvent('on' + type, handler)\n      }\n    }\n})();\n```\n- 引入惰性加载的方式\n```javascript\n  let  addEvent = function (element, type, handler) {\n      if (window.addEventListener) {\n        addEvent = function (element, type, handler) {\n          element.addEventListener(type, handler, false);\n        }\n      }\n      if (window.attachEvent) {\n        addEvent = function (element, type, handler) {\n          element.attachEvent('on' + type, handler)\n        }\n      }\n      addEvent(element, type, handler)\n    }\n```\n> 对比第一个 函数每次运行都需要`if else`判断，肯定要消耗性能，对比第二个浏览器在加载代码时候要做函数运算延长了页面响应时间;第三种方式在第一次绑定事件的时候重写了绑定事件的方法，因此 只有在第一次 使用该函数的时候需要执行`if else`操作，与第二种方法不同的是，它把本来在浏览器加载代码所消耗的时间，转移到了函数第一次运行的时候，加快了页面的响应\n\n> 案例源码[GitHub链接](https://github.com/ilovcoding/blog-demo/blob/master/2019_11_6/3/index.html)\n\n*以上内容是我看完 JavaScript设计模式与开发实战 第一部分之后自己总结的，感谢曾(da)探(lao)*\n\n<center><b>欢迎大家评论区交流</b></center>","slug":"javascript-design-mode","published":1,"updated":"2022-06-17T16:57:39.608Z","_id":"cl4ince6i000ocguf3tmv6kbt","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"call-apply-bind-简单运用\"><a class=\"markdownIt-Anchor\" href=\"#call-apply-bind-简单运用\"></a> call apply bind 简单运用</h3>\n<ol>\n<li>上手一个小例子</li>\n</ol>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">getA</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span> == obj)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">a</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">getA</span>() <span class=\"comment\">// true 1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> funGetA = obj.<span class=\"property\">getA</span></span><br><span class=\"line\"><span class=\"title function_\">funGetA</span>() <span class=\"comment\">// false undefined</span></span><br><span class=\"line\">funGetA.<span class=\"title function_\">apply</span>(obj) <span class=\"comment\">// true 1</span></span><br><span class=\"line\">funGetA.<span class=\"title function_\">call</span>(obj)<span class=\"comment\">// true 1</span></span><br><span class=\"line\">funGetA.<span class=\"title function_\">bind</span>(obj)() <span class=\"comment\">// true 1</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* obj.getA()执行时候函数上下文 是对象obj 的环境 所以 this 指向 obj </span></span><br><span class=\"line\"><span class=\"comment\">* funGetA 执行时 上下文 已经变成了 window 此时 this指向window </span></span><br><span class=\"line\"><span class=\"comment\">* apply 和 call 把obj作为参数传入函数 把函数中this的指向改变成obj</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>call 和apply区别</li>\n</ol>\n<blockquote>\n<p>显然call和apply 的第一个参数作用都是制定了参数体内this的指向，不同的是 apply 只接受两个参数。apply第二个参数是一个集合(<code>数组</code> <code>类数组</code> )，call 从第二个参数开始后面的每一个参数都是依次传入函数</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">a,b,c</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a,b,c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,<span class=\"number\">1</span>) <span class=\"comment\">//报错 TypeError: CreateListFromArrayLike called on non-object</span></span><br><span class=\"line\">fun.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,[<span class=\"number\">1</span>])<span class=\"comment\">// 1 undefined undefined</span></span><br><span class=\"line\">fun.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\">fun.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//1 2 undefied  </span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>手动自己实现一个<code>bind</code>函数</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">testBind</span>=<span class=\"keyword\">function</span>(<span class=\"params\">context,...args</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...inArgs</span>)&#123;</span><br><span class=\"line\">    self.<span class=\"title function_\">apply</span>(context,[...args,...inArgs])  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj =&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;testbind&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fun =<span class=\"keyword\">function</span>(<span class=\"params\">...allArgs</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(allArgs) <span class=\"comment\">// [1,2,3,4,5,6]</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>) <span class=\"comment\">// testbind</span></span><br><span class=\"line\">&#125;.<span class=\"title function_\">testBind</span>(obj,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包的运用\"><a class=\"markdownIt-Anchor\" href=\"#闭包的运用\"></a> 闭包的运用</h3>\n<ol>\n<li>封装变量，延长变量的生命周期</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fun2</span> () &#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>(),<span class=\"title function_\">f</span>(),<span class=\"title function_\">f</span>()) <span class=\"comment\">// 2 3 4</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>会发现 f函数每次运行之后他的a变量生命并没有被销毁，下次运行时 a变量的值直接被记录了下来</p>\n</blockquote>\n<ul>\n<li>封装变量，延长变量的生命周期的运用 js随机数的生成</li>\n</ul>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildRandom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> seed =<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(); <span class=\"comment\">// 这边如果是常数 那么每次重新运行整个文件结果都一样单次运行函数不一样</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Robert Jenkins&#x27; 32 bit integer hash function.</span></span><br><span class=\"line\">    seed = seed &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed + <span class=\"number\">0x7ed55d16</span>) + (seed &lt;&lt; <span class=\"number\">12</span>))  &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed ^ <span class=\"number\">0xc761c23c</span>) ^ (seed &gt;&gt;&gt; <span class=\"number\">19</span>)) &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed + <span class=\"number\">0x165667b1</span>) + (seed &lt;&lt; <span class=\"number\">5</span>))   &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed + <span class=\"number\">0xd3a2646c</span>) ^ (seed &lt;&lt; <span class=\"number\">9</span>))   &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed + <span class=\"number\">0xfd7046c5</span>) + (seed &lt;&lt; <span class=\"number\">3</span>))   &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed ^ <span class=\"number\">0xb55a4f09</span>) ^ (seed &gt;&gt;&gt; <span class=\"number\">16</span>)) &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (seed &amp; <span class=\"number\">0xfffffff</span>) / <span class=\"number\">0x10000000</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> random = <span class=\"title function_\">buildRandom</span>()</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">random</span>())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>random</code> 函数每次运行结束<code>seed</code>变量并没有被销毁，依然存在于整体的生命中期中，继续影响下一次的seed的值</p>\n</blockquote>\n<ol start=\"2\">\n<li>使用在函数缓存机制中 减少全局变量的污染。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fun1() &#123;</span><br><span class=\"line\">  let a = 1</span><br><span class=\"line\">  for (let i = 0; i &lt; 10000; i++) &#123;</span><br><span class=\"line\">    a = a + i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let fun2 = (function () &#123;</span><br><span class=\"line\">  let cache = &#123;&#125;</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    let a = 1</span><br><span class=\"line\">    let args = Array.prototype.join.call(arguments, &quot;&quot;)</span><br><span class=\"line\">    if (cache[args]) &#123;</span><br><span class=\"line\">      return cache[args]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (let i = 0; i &lt; 10000; i++) &#123;</span><br><span class=\"line\">      a = a + i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cache[args] = a;</span><br><span class=\"line\">    return cache[args];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">console.time(&#x27;nocache&#x27;)</span><br><span class=\"line\">for (let i = 0; i &lt; 100000; i++) &#123;</span><br><span class=\"line\">  fun1(1, 2, 3, 4, 5)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.timeEnd(&quot;nocache&quot;) // 1276ms</span><br><span class=\"line\"></span><br><span class=\"line\">console.time(&#x27;usecache&#x27;)</span><br><span class=\"line\">for (let i = 0; i &lt; 100000; i++) &#123;</span><br><span class=\"line\">  fun2(1, 2, 3, 4, 5)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.timeEnd(&#x27;usecache&#x27;) //73ms</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意cache[args]的自身结果不能为false，如果cache[args]一直为false <code>return cache[args]</code>就不会运行</p>\n</blockquote>\n<h3 id=\"高阶函数函数式编程\"><a class=\"markdownIt-Anchor\" href=\"#高阶函数函数式编程\"></a> 高阶函数|函数式编程</h3>\n<blockquote>\n<ol>\n<li>函数作为参数传入</li>\n<li>函数作为返回值输出</li>\n<li>函数柯里化</li>\n</ol>\n</blockquote>\n<p><strong>对于函数式编程这块后面肯定会有更详细的文章推出 <a href=\"http://blog.wangminwei.top\">不迷路链接</a></strong></p>\n<h3 id=\"柯里化\"><a class=\"markdownIt-Anchor\" href=\"#柯里化\"></a> 柯里化</h3>\n<blockquote>\n<p>柯里化又称分部求值一个currying function 首先会接收一些参数，但是不会先求值，继续返货另一个函数，等到函数真正需要求值的时候之前传入的所有参数，会被一次性求值。</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cost=(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> money= args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> money</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      [].<span class=\"property\">push</span>.<span class=\"title function_\">apply</span>(args,<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"title function_\">cost</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"title function_\">cost</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"title function_\">cost</span>(<span class=\"number\">300</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">cost</span>()) <span class=\"comment\">// 600</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>调用cost函数的时候，如果明确的带上了一些参数，此时不会进行真正的求值运算，而是把这些参数保持起来，保存到<code>args</code>数组中，不传参时再进行求值运算。</p>\n</blockquote>\n<h3 id=\"函数节流\"><a class=\"markdownIt-Anchor\" href=\"#函数节流\"></a> 函数节流</h3>\n<blockquote>\n<p>函数因某些事件被不停的高频调用;为防止高频调用导致性能消耗过大页面卡顿现象；需要限制函数在规定时间内被调用的次数</p>\n</blockquote>\n<ul>\n<li>\n<p>应用场景分析</p>\n<p>浏览器<code>window.onresize</code>和<code>mousemove</code>事件,这两个事件带来的问题原理差不多,都是因为用户每一次操作这两个函数都会进行响应，比如前者用户改变一次浏览器窗口大小函数响应一次。这时候如果用户平滑的从左到右拖动来改变浏览器大小，函数就会不停的响应，如果用户一秒钟拖动慢一点拖动距离长一点；差不多函数可以响应30多次；这个对页面的性能损耗是巨大的；有时候我们往往不需要实时记录浏览器窗口大小，可能一秒钟记录一两次就行。</p>\n</li>\n</ul>\n<h4 id=\"节流函数的实现\"><a class=\"markdownIt-Anchor\" href=\"#节流函数的实现\"></a> 节流函数的实现</h4>\n<ol>\n<li>定时器实现延时函数实现节流</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> fn 接收要执行的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> interval 延迟的时间默认500毫秒即一秒钟只被执行2次</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delayFun</span>(<span class=\"params\">fn: <span class=\"built_in\">Function</span>, interval: <span class=\"built_in\">number</span> = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer, intervalUse = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _self = fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timer)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">_self</span>()</span><br><span class=\"line\">      intervalUse = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;函数被执行&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"title class_\">Number</span>(intervalUse &amp;&amp; interval))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Number(intervalUse &amp;&amp; interval)</code> 第一次调用不需要延迟,<br />\n即<code>intervalUse = false</code> 此时<code>Number(intervalUse &amp;&amp; interval)= 0</code> 函数立即执行;相反 如果这时候用户继续有操作;<code>intervalUse = true;Number(intervalUse &amp;&amp; interval)=interval</code> 定时器生效;用户操作被延迟</p>\n</blockquote>\n<p>可以看到设置<code>interval=1000</code>后在用户平滑的改变浏览器窗口大小时候函数每秒钟只执行了一次<br />\n<img src=\"http://blogimage.lemonlife.top/201911061432_908.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>分时函数实现节流</li>\n</ol>\n<blockquote>\n<p>上面一种方式针对于，用户频繁的操作，还有一种场景就是用户只操作一次，但是带来的函数的调用是成百上千次；比如用户点了加载数据按钮加载数据的时候，此时数据有上千条；一次性加载页面肯定会卡死甚至浏览器直接退出;这时候就需要分时加载；比如100ms加载10条这种方式;而不是在用户一点击就疯狂调用对应的函数</p>\n</blockquote>\n<ul>\n<li>原始方法 页面出现长时间白屏</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array =[]</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;=<span class=\"number\">1000000</span>;i++)array.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">add</span>=(<span class=\"params\">array</span>)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; array.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">    div.<span class=\"property\">innerHTML</span> =array[index]</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(div)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">add</span>(array)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>分时节流之后 数据缓慢加载出来但是基本无白屏现象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">1000000</span>; i++)array.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">create</span>(<span class=\"params\">array, times</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> oneSize = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(array.<span class=\"property\">length</span> / times);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> add = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; oneSize; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">      div.<span class=\"property\">innerHTML</span> = array[count];</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(div);</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count === array.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(add, <span class=\"number\">40</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">create</span>(array,<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>案例源码<a href=\"https://github.com/ilovcoding/blog-demo/blob/master/2019_11_6/2/index_timer.html\">GitHub链接</a></p>\n</blockquote>\n<h3 id=\"惰性加载函数\"><a class=\"markdownIt-Anchor\" href=\"#惰性加载函数\"></a> 惰性加载函数</h3>\n<blockquote>\n<p>Web开发中不同浏览器运行环境下不可避免的要进行一些适配操作，如果每次调用一个事件都通过<code>if else</code>来对不同的浏览器的解决方案，将会带来性能的损耗，可以把这写需要适配的函数抽离成惰性加载的方式来调用</p>\n</blockquote>\n<ul>\n<li>第一版本 每次使用都要判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> addEvent = <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">addEventListener</span>) &#123;</span><br><span class=\"line\">    element.<span class=\"title function_\">addEventListener</span>(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 注意此处只是一个例子 window.attachEvent 这种IE专属的函数 很早就没人用了 可能IE自己现在都不用了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">attachEvent</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&#x27;on&#x27;</span>+type, handler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>稍作改进 浏览器代码加载的时候就给出结果只判断一次</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> addEvent = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">addEventListener</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">        element.<span class=\"title function_\">addEventListener</span>(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">attachEvent</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">        element.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&#x27;on&#x27;</span> + type, handler)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>引入惰性加载的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>  addEvent = <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">addEventListener</span>) &#123;</span><br><span class=\"line\">      addEvent = <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">        element.<span class=\"title function_\">addEventListener</span>(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">attachEvent</span>) &#123;</span><br><span class=\"line\">      addEvent = <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">        element.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&#x27;on&#x27;</span> + type, handler)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">addEvent</span>(element, type, handler)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对比第一个 函数每次运行都需要<code>if else</code>判断，肯定要消耗性能，对比第二个浏览器在加载代码时候要做函数运算延长了页面响应时间;第三种方式在第一次绑定事件的时候重写了绑定事件的方法，因此 只有在第一次 使用该函数的时候需要执行<code>if else</code>操作，与第二种方法不同的是，它把本来在浏览器加载代码所消耗的时间，转移到了函数第一次运行的时候，加快了页面的响应</p>\n</blockquote>\n<blockquote>\n<p>案例源码<a href=\"https://github.com/ilovcoding/blog-demo/blob/master/2019_11_6/3/index.html\">GitHub链接</a></p>\n</blockquote>\n<p><em>以上内容是我看完 JavaScript设计模式与开发实战 第一部分之后自己总结的，感谢曾(da)探(lao)</em></p>\n<center><b>欢迎大家评论区交流</b></center>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"call-apply-bind-简单运用\"><a class=\"markdownIt-Anchor\" href=\"#call-apply-bind-简单运用\"></a> call apply bind 简单运用</h3>\n<ol>\n<li>上手一个小例子</li>\n</ol>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">getA</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span> == obj)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">a</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">getA</span>() <span class=\"comment\">// true 1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> funGetA = obj.<span class=\"property\">getA</span></span><br><span class=\"line\"><span class=\"title function_\">funGetA</span>() <span class=\"comment\">// false undefined</span></span><br><span class=\"line\">funGetA.<span class=\"title function_\">apply</span>(obj) <span class=\"comment\">// true 1</span></span><br><span class=\"line\">funGetA.<span class=\"title function_\">call</span>(obj)<span class=\"comment\">// true 1</span></span><br><span class=\"line\">funGetA.<span class=\"title function_\">bind</span>(obj)() <span class=\"comment\">// true 1</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* obj.getA()执行时候函数上下文 是对象obj 的环境 所以 this 指向 obj </span></span><br><span class=\"line\"><span class=\"comment\">* funGetA 执行时 上下文 已经变成了 window 此时 this指向window </span></span><br><span class=\"line\"><span class=\"comment\">* apply 和 call 把obj作为参数传入函数 把函数中this的指向改变成obj</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>call 和apply区别</li>\n</ol>\n<blockquote>\n<p>显然call和apply 的第一个参数作用都是制定了参数体内this的指向，不同的是 apply 只接受两个参数。apply第二个参数是一个集合(<code>数组</code> <code>类数组</code> )，call 从第二个参数开始后面的每一个参数都是依次传入函数</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">a,b,c</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a,b,c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,<span class=\"number\">1</span>) <span class=\"comment\">//报错 TypeError: CreateListFromArrayLike called on non-object</span></span><br><span class=\"line\">fun.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,[<span class=\"number\">1</span>])<span class=\"comment\">// 1 undefined undefined</span></span><br><span class=\"line\">fun.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\">fun.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//1 2 undefied  </span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>手动自己实现一个<code>bind</code>函数</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">testBind</span>=<span class=\"keyword\">function</span>(<span class=\"params\">context,...args</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...inArgs</span>)&#123;</span><br><span class=\"line\">    self.<span class=\"title function_\">apply</span>(context,[...args,...inArgs])  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj =&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;testbind&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fun =<span class=\"keyword\">function</span>(<span class=\"params\">...allArgs</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(allArgs) <span class=\"comment\">// [1,2,3,4,5,6]</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>) <span class=\"comment\">// testbind</span></span><br><span class=\"line\">&#125;.<span class=\"title function_\">testBind</span>(obj,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"title function_\">fun</span>(<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包的运用\"><a class=\"markdownIt-Anchor\" href=\"#闭包的运用\"></a> 闭包的运用</h3>\n<ol>\n<li>封装变量，延长变量的生命周期</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fun2</span> () &#123;</span><br><span class=\"line\">    a++</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"title function_\">fun1</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">f</span>(),<span class=\"title function_\">f</span>(),<span class=\"title function_\">f</span>()) <span class=\"comment\">// 2 3 4</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>会发现 f函数每次运行之后他的a变量生命并没有被销毁，下次运行时 a变量的值直接被记录了下来</p>\n</blockquote>\n<ul>\n<li>封装变量，延长变量的生命周期的运用 js随机数的生成</li>\n</ul>\n   <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildRandom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> seed =<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(); <span class=\"comment\">// 这边如果是常数 那么每次重新运行整个文件结果都一样单次运行函数不一样</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Robert Jenkins&#x27; 32 bit integer hash function.</span></span><br><span class=\"line\">    seed = seed &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed + <span class=\"number\">0x7ed55d16</span>) + (seed &lt;&lt; <span class=\"number\">12</span>))  &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed ^ <span class=\"number\">0xc761c23c</span>) ^ (seed &gt;&gt;&gt; <span class=\"number\">19</span>)) &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed + <span class=\"number\">0x165667b1</span>) + (seed &lt;&lt; <span class=\"number\">5</span>))   &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed + <span class=\"number\">0xd3a2646c</span>) ^ (seed &lt;&lt; <span class=\"number\">9</span>))   &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed + <span class=\"number\">0xfd7046c5</span>) + (seed &lt;&lt; <span class=\"number\">3</span>))   &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    seed = ((seed ^ <span class=\"number\">0xb55a4f09</span>) ^ (seed &gt;&gt;&gt; <span class=\"number\">16</span>)) &amp; <span class=\"number\">0xffffffff</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (seed &amp; <span class=\"number\">0xfffffff</span>) / <span class=\"number\">0x10000000</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> random = <span class=\"title function_\">buildRandom</span>()</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">random</span>())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>random</code> 函数每次运行结束<code>seed</code>变量并没有被销毁，依然存在于整体的生命中期中，继续影响下一次的seed的值</p>\n</blockquote>\n<ol start=\"2\">\n<li>使用在函数缓存机制中 减少全局变量的污染。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fun1() &#123;</span><br><span class=\"line\">  let a = 1</span><br><span class=\"line\">  for (let i = 0; i &lt; 10000; i++) &#123;</span><br><span class=\"line\">    a = a + i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let fun2 = (function () &#123;</span><br><span class=\"line\">  let cache = &#123;&#125;</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    let a = 1</span><br><span class=\"line\">    let args = Array.prototype.join.call(arguments, &quot;&quot;)</span><br><span class=\"line\">    if (cache[args]) &#123;</span><br><span class=\"line\">      return cache[args]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (let i = 0; i &lt; 10000; i++) &#123;</span><br><span class=\"line\">      a = a + i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cache[args] = a;</span><br><span class=\"line\">    return cache[args];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">console.time(&#x27;nocache&#x27;)</span><br><span class=\"line\">for (let i = 0; i &lt; 100000; i++) &#123;</span><br><span class=\"line\">  fun1(1, 2, 3, 4, 5)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.timeEnd(&quot;nocache&quot;) // 1276ms</span><br><span class=\"line\"></span><br><span class=\"line\">console.time(&#x27;usecache&#x27;)</span><br><span class=\"line\">for (let i = 0; i &lt; 100000; i++) &#123;</span><br><span class=\"line\">  fun2(1, 2, 3, 4, 5)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.timeEnd(&#x27;usecache&#x27;) //73ms</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意cache[args]的自身结果不能为false，如果cache[args]一直为false <code>return cache[args]</code>就不会运行</p>\n</blockquote>\n<h3 id=\"高阶函数函数式编程\"><a class=\"markdownIt-Anchor\" href=\"#高阶函数函数式编程\"></a> 高阶函数|函数式编程</h3>\n<blockquote>\n<ol>\n<li>函数作为参数传入</li>\n<li>函数作为返回值输出</li>\n<li>函数柯里化</li>\n</ol>\n</blockquote>\n<p><strong>对于函数式编程这块后面肯定会有更详细的文章推出 <a href=\"http://blog.wangminwei.top\">不迷路链接</a></strong></p>\n<h3 id=\"柯里化\"><a class=\"markdownIt-Anchor\" href=\"#柯里化\"></a> 柯里化</h3>\n<blockquote>\n<p>柯里化又称分部求值一个currying function 首先会接收一些参数，但是不会先求值，继续返货另一个函数，等到函数真正需要求值的时候之前传入的所有参数，会被一次性求值。</p>\n</blockquote>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cost=(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = [];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> money= args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> money</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      [].<span class=\"property\">push</span>.<span class=\"title function_\">apply</span>(args,<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"title function_\">cost</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"title function_\">cost</span>(<span class=\"number\">200</span>)</span><br><span class=\"line\"><span class=\"title function_\">cost</span>(<span class=\"number\">300</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">cost</span>()) <span class=\"comment\">// 600</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>调用cost函数的时候，如果明确的带上了一些参数，此时不会进行真正的求值运算，而是把这些参数保持起来，保存到<code>args</code>数组中，不传参时再进行求值运算。</p>\n</blockquote>\n<h3 id=\"函数节流\"><a class=\"markdownIt-Anchor\" href=\"#函数节流\"></a> 函数节流</h3>\n<blockquote>\n<p>函数因某些事件被不停的高频调用;为防止高频调用导致性能消耗过大页面卡顿现象；需要限制函数在规定时间内被调用的次数</p>\n</blockquote>\n<ul>\n<li>\n<p>应用场景分析</p>\n<p>浏览器<code>window.onresize</code>和<code>mousemove</code>事件,这两个事件带来的问题原理差不多,都是因为用户每一次操作这两个函数都会进行响应，比如前者用户改变一次浏览器窗口大小函数响应一次。这时候如果用户平滑的从左到右拖动来改变浏览器大小，函数就会不停的响应，如果用户一秒钟拖动慢一点拖动距离长一点；差不多函数可以响应30多次；这个对页面的性能损耗是巨大的；有时候我们往往不需要实时记录浏览器窗口大小，可能一秒钟记录一两次就行。</p>\n</li>\n</ul>\n<h4 id=\"节流函数的实现\"><a class=\"markdownIt-Anchor\" href=\"#节流函数的实现\"></a> 节流函数的实现</h4>\n<ol>\n<li>定时器实现延时函数实现节流</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> fn 接收要执行的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> interval 延迟的时间默认500毫秒即一秒钟只被执行2次</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delayFun</span>(<span class=\"params\">fn: <span class=\"built_in\">Function</span>, interval: <span class=\"built_in\">number</span> = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer, intervalUse = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _self = fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timer) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timer)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">_self</span>()</span><br><span class=\"line\">      intervalUse = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;函数被执行&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"title class_\">Number</span>(intervalUse &amp;&amp; interval))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Number(intervalUse &amp;&amp; interval)</code> 第一次调用不需要延迟,<br />\n即<code>intervalUse = false</code> 此时<code>Number(intervalUse &amp;&amp; interval)= 0</code> 函数立即执行;相反 如果这时候用户继续有操作;<code>intervalUse = true;Number(intervalUse &amp;&amp; interval)=interval</code> 定时器生效;用户操作被延迟</p>\n</blockquote>\n<p>可以看到设置<code>interval=1000</code>后在用户平滑的改变浏览器窗口大小时候函数每秒钟只执行了一次<br />\n<img src=\"http://blogimage.lemonlife.top/201911061432_908.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>分时函数实现节流</li>\n</ol>\n<blockquote>\n<p>上面一种方式针对于，用户频繁的操作，还有一种场景就是用户只操作一次，但是带来的函数的调用是成百上千次；比如用户点了加载数据按钮加载数据的时候，此时数据有上千条；一次性加载页面肯定会卡死甚至浏览器直接退出;这时候就需要分时加载；比如100ms加载10条这种方式;而不是在用户一点击就疯狂调用对应的函数</p>\n</blockquote>\n<ul>\n<li>原始方法 页面出现长时间白屏</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array =[]</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;=<span class=\"number\">1000000</span>;i++)array.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">add</span>=(<span class=\"params\">array</span>)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; array.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">    div.<span class=\"property\">innerHTML</span> =array[index]</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(div)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">add</span>(array)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>分时节流之后 数据缓慢加载出来但是基本无白屏现象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">1000000</span>; i++)array.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">create</span>(<span class=\"params\">array, times</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> oneSize = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(array.<span class=\"property\">length</span> / times);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> add = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; oneSize; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">      div.<span class=\"property\">innerHTML</span> = array[count];</span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(div);</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count === array.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(add, <span class=\"number\">40</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">create</span>(array,<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>案例源码<a href=\"https://github.com/ilovcoding/blog-demo/blob/master/2019_11_6/2/index_timer.html\">GitHub链接</a></p>\n</blockquote>\n<h3 id=\"惰性加载函数\"><a class=\"markdownIt-Anchor\" href=\"#惰性加载函数\"></a> 惰性加载函数</h3>\n<blockquote>\n<p>Web开发中不同浏览器运行环境下不可避免的要进行一些适配操作，如果每次调用一个事件都通过<code>if else</code>来对不同的浏览器的解决方案，将会带来性能的损耗，可以把这写需要适配的函数抽离成惰性加载的方式来调用</p>\n</blockquote>\n<ul>\n<li>第一版本 每次使用都要判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> addEvent = <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">addEventListener</span>) &#123;</span><br><span class=\"line\">    element.<span class=\"title function_\">addEventListener</span>(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 注意此处只是一个例子 window.attachEvent 这种IE专属的函数 很早就没人用了 可能IE自己现在都不用了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">attachEvent</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&#x27;on&#x27;</span>+type, handler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>稍作改进 浏览器代码加载的时候就给出结果只判断一次</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> addEvent = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">addEventListener</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">        element.<span class=\"title function_\">addEventListener</span>(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">attachEvent</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">        element.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&#x27;on&#x27;</span> + type, handler)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>引入惰性加载的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>  addEvent = <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">addEventListener</span>) &#123;</span><br><span class=\"line\">      addEvent = <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">        element.<span class=\"title function_\">addEventListener</span>(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">attachEvent</span>) &#123;</span><br><span class=\"line\">      addEvent = <span class=\"keyword\">function</span> (<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">        element.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&#x27;on&#x27;</span> + type, handler)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">addEvent</span>(element, type, handler)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对比第一个 函数每次运行都需要<code>if else</code>判断，肯定要消耗性能，对比第二个浏览器在加载代码时候要做函数运算延长了页面响应时间;第三种方式在第一次绑定事件的时候重写了绑定事件的方法，因此 只有在第一次 使用该函数的时候需要执行<code>if else</code>操作，与第二种方法不同的是，它把本来在浏览器加载代码所消耗的时间，转移到了函数第一次运行的时候，加快了页面的响应</p>\n</blockquote>\n<blockquote>\n<p>案例源码<a href=\"https://github.com/ilovcoding/blog-demo/blob/master/2019_11_6/3/index.html\">GitHub链接</a></p>\n</blockquote>\n<p><em>以上内容是我看完 JavaScript设计模式与开发实战 第一部分之后自己总结的，感谢曾(da)探(lao)</em></p>\n<center><b>欢迎大家评论区交流</b></center>"},{"title":"矩阵中的路径","date":"2020-03-18T14:33:38.000Z","_content":"### 矩阵路径\n```\n请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。\n\n[\"a\",\"b\",\"c\",\"e\"],\n[\"s\",\"f\",\"c\",\"s\"],\n[\"a\",\"d\",\"e\",\"e\"]\n\n但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。\n```\n- 案例1\n```\n输入：board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]],   \n\nword = \"ABCCED\"\n\n输出：true\n```\n- 示例 2：\n```\n输入：board = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\"\n输出：false\n```\n### 解决思路\n遇到路径矩阵问题,基本就是递归加dfs,或者采用循环加队列的形式，此题要注意的就是，不同路线的单词都是可以复用的，而不是那种只能访问一次，只是在某一条路线中，单词只能访问一次\n\n### 代码\n```\nvar exist = function (board, word) {\n  let res = false;\n  function dfs(i, j, k) {\n    if (k === word.length - 1) return true;\n    board[i][j] = \"#\"\n    //上\n    if (i - 1 >= 0 && board[i - 1][j] === word[k + 1]) {\n      res = res || dfs(i - 1, j, k + 1)\n    }\n    //下\n    if (i + 1 < board.length && board[i + 1][j] === word[k + 1]) {\n      res = res || dfs(i + 1, j, k + 1)\n    }\n    //左    \n    if (j - 1 >= 0 && board[i][j - 1] === word[k + 1]) {\n      res = res || dfs(i, j - 1, k + 1)\n    }\n    //右\n    if (j + 1 < board[0].length && board[i][j + 1] === word[k + 1]) {\n      res = res || dfs(i, j + 1, k + 1)\n    }\n    board[i][j] = word[k]\n    return res\n  }\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[0].length; j++) {\n      if (board[i][j] === word[0]) {\n        if (dfs(i, j, 0) === true) {\n          return true\n        }\n      }\n    }\n  }\n  return false;\n};\n```","source":"_posts/ju-zhen-zhong-de-lu-jing.md","raw":"---\ntitle: 矩阵中的路径\ndate: 2020-03-18 22:33:38\ntags:\n  - 算法与数据结构\n  - 剑指Offer\n---\n### 矩阵路径\n```\n请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。\n\n[\"a\",\"b\",\"c\",\"e\"],\n[\"s\",\"f\",\"c\",\"s\"],\n[\"a\",\"d\",\"e\",\"e\"]\n\n但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。\n```\n- 案例1\n```\n输入：board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]],   \n\nword = \"ABCCED\"\n\n输出：true\n```\n- 示例 2：\n```\n输入：board = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\"\n输出：false\n```\n### 解决思路\n遇到路径矩阵问题,基本就是递归加dfs,或者采用循环加队列的形式，此题要注意的就是，不同路线的单词都是可以复用的，而不是那种只能访问一次，只是在某一条路线中，单词只能访问一次\n\n### 代码\n```\nvar exist = function (board, word) {\n  let res = false;\n  function dfs(i, j, k) {\n    if (k === word.length - 1) return true;\n    board[i][j] = \"#\"\n    //上\n    if (i - 1 >= 0 && board[i - 1][j] === word[k + 1]) {\n      res = res || dfs(i - 1, j, k + 1)\n    }\n    //下\n    if (i + 1 < board.length && board[i + 1][j] === word[k + 1]) {\n      res = res || dfs(i + 1, j, k + 1)\n    }\n    //左    \n    if (j - 1 >= 0 && board[i][j - 1] === word[k + 1]) {\n      res = res || dfs(i, j - 1, k + 1)\n    }\n    //右\n    if (j + 1 < board[0].length && board[i][j + 1] === word[k + 1]) {\n      res = res || dfs(i, j + 1, k + 1)\n    }\n    board[i][j] = word[k]\n    return res\n  }\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[0].length; j++) {\n      if (board[i][j] === word[0]) {\n        if (dfs(i, j, 0) === true) {\n          return true\n        }\n      }\n    }\n  }\n  return false;\n};\n```","slug":"ju-zhen-zhong-de-lu-jing","published":1,"updated":"2021-08-07T01:59:03.343Z","_id":"cl4ince6i000pcgufbji44gn1","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"矩阵路径\"><a class=\"markdownIt-Anchor\" href=\"#矩阵路径\"></a> 矩阵路径</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</span><br><span class=\"line\"></span><br><span class=\"line\">[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;e&quot;],</span><br><span class=\"line\">[&quot;s&quot;,&quot;f&quot;,&quot;c&quot;,&quot;s&quot;],</span><br><span class=\"line\">[&quot;a&quot;,&quot;d&quot;,&quot;e&quot;,&quot;e&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>案例1</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]],   </span><br><span class=\"line\"></span><br><span class=\"line\">word = &quot;ABCCED&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例 2：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], word = &quot;abcd&quot;</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<p>遇到路径矩阵问题,基本就是递归加dfs,或者采用循环加队列的形式，此题要注意的就是，不同路线的单词都是可以复用的，而不是那种只能访问一次，只是在某一条路线中，单词只能访问一次</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var exist = function (board, word) &#123;</span><br><span class=\"line\">  let res = false;</span><br><span class=\"line\">  function dfs(i, j, k) &#123;</span><br><span class=\"line\">    if (k === word.length - 1) return true;</span><br><span class=\"line\">    board[i][j] = &quot;#&quot;</span><br><span class=\"line\">    //上</span><br><span class=\"line\">    if (i - 1 &gt;= 0 &amp;&amp; board[i - 1][j] === word[k + 1]) &#123;</span><br><span class=\"line\">      res = res || dfs(i - 1, j, k + 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //下</span><br><span class=\"line\">    if (i + 1 &lt; board.length &amp;&amp; board[i + 1][j] === word[k + 1]) &#123;</span><br><span class=\"line\">      res = res || dfs(i + 1, j, k + 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //左    </span><br><span class=\"line\">    if (j - 1 &gt;= 0 &amp;&amp; board[i][j - 1] === word[k + 1]) &#123;</span><br><span class=\"line\">      res = res || dfs(i, j - 1, k + 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //右</span><br><span class=\"line\">    if (j + 1 &lt; board[0].length &amp;&amp; board[i][j + 1] === word[k + 1]) &#123;</span><br><span class=\"line\">      res = res || dfs(i, j + 1, k + 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    board[i][j] = word[k]</span><br><span class=\"line\">    return res</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for (let i = 0; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">    for (let j = 0; j &lt; board[0].length; j++) &#123;</span><br><span class=\"line\">      if (board[i][j] === word[0]) &#123;</span><br><span class=\"line\">        if (dfs(i, j, 0) === true) &#123;</span><br><span class=\"line\">          return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return false;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"矩阵路径\"><a class=\"markdownIt-Anchor\" href=\"#矩阵路径\"></a> 矩阵路径</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。</span><br><span class=\"line\"></span><br><span class=\"line\">[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;e&quot;],</span><br><span class=\"line\">[&quot;s&quot;,&quot;f&quot;,&quot;c&quot;,&quot;s&quot;],</span><br><span class=\"line\">[&quot;a&quot;,&quot;d&quot;,&quot;e&quot;,&quot;e&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>案例1</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]],   </span><br><span class=\"line\"></span><br><span class=\"line\">word = &quot;ABCCED&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n<ul>\n<li>示例 2：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], word = &quot;abcd&quot;</span><br><span class=\"line\">输出：false</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<p>遇到路径矩阵问题,基本就是递归加dfs,或者采用循环加队列的形式，此题要注意的就是，不同路线的单词都是可以复用的，而不是那种只能访问一次，只是在某一条路线中，单词只能访问一次</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var exist = function (board, word) &#123;</span><br><span class=\"line\">  let res = false;</span><br><span class=\"line\">  function dfs(i, j, k) &#123;</span><br><span class=\"line\">    if (k === word.length - 1) return true;</span><br><span class=\"line\">    board[i][j] = &quot;#&quot;</span><br><span class=\"line\">    //上</span><br><span class=\"line\">    if (i - 1 &gt;= 0 &amp;&amp; board[i - 1][j] === word[k + 1]) &#123;</span><br><span class=\"line\">      res = res || dfs(i - 1, j, k + 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //下</span><br><span class=\"line\">    if (i + 1 &lt; board.length &amp;&amp; board[i + 1][j] === word[k + 1]) &#123;</span><br><span class=\"line\">      res = res || dfs(i + 1, j, k + 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //左    </span><br><span class=\"line\">    if (j - 1 &gt;= 0 &amp;&amp; board[i][j - 1] === word[k + 1]) &#123;</span><br><span class=\"line\">      res = res || dfs(i, j - 1, k + 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //右</span><br><span class=\"line\">    if (j + 1 &lt; board[0].length &amp;&amp; board[i][j + 1] === word[k + 1]) &#123;</span><br><span class=\"line\">      res = res || dfs(i, j + 1, k + 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    board[i][j] = word[k]</span><br><span class=\"line\">    return res</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for (let i = 0; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">    for (let j = 0; j &lt; board[0].length; j++) &#123;</span><br><span class=\"line\">      if (board[i][j] === word[0]) &#123;</span><br><span class=\"line\">        if (dfs(i, j, 0) === true) &#123;</span><br><span class=\"line\">          return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return false;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"Java并发编程的基础","date":"2020-02-01T13:46:23.000Z","_content":"\n## 线程有关的基本概念\n### 线程安全\n\n## Java内存模型及线程实现案例分析\n## 线程池原理及应用\n## Java锁及应用\n## 并发容器及原理分析\n## 课程总结\n\n\n\n> 网络视频课程来源[CSDN](https://edu.csdn.net/course/play/26270),感谢作者的分享。💪💪💪","source":"_posts/java-concurrent-programming.md","raw":"---\ntitle: Java并发编程的基础\ndate: 2020-02-01 21:46:23\ntags:\n   - Java\n   - 网络视频课程\n---\n\n## 线程有关的基本概念\n### 线程安全\n\n## Java内存模型及线程实现案例分析\n## 线程池原理及应用\n## Java锁及应用\n## 并发容器及原理分析\n## 课程总结\n\n\n\n> 网络视频课程来源[CSDN](https://edu.csdn.net/course/play/26270),感谢作者的分享。💪💪💪","slug":"java-concurrent-programming","published":1,"updated":"2021-08-07T01:59:03.343Z","_id":"cl4ince6j000scguf3jg5c3mc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"线程有关的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#线程有关的基本概念\"></a> 线程有关的基本概念</h2>\n<h3 id=\"线程安全\"><a class=\"markdownIt-Anchor\" href=\"#线程安全\"></a> 线程安全</h3>\n<h2 id=\"java内存模型及线程实现案例分析\"><a class=\"markdownIt-Anchor\" href=\"#java内存模型及线程实现案例分析\"></a> Java内存模型及线程实现案例分析</h2>\n<h2 id=\"线程池原理及应用\"><a class=\"markdownIt-Anchor\" href=\"#线程池原理及应用\"></a> 线程池原理及应用</h2>\n<h2 id=\"java锁及应用\"><a class=\"markdownIt-Anchor\" href=\"#java锁及应用\"></a> Java锁及应用</h2>\n<h2 id=\"并发容器及原理分析\"><a class=\"markdownIt-Anchor\" href=\"#并发容器及原理分析\"></a> 并发容器及原理分析</h2>\n<h2 id=\"课程总结\"><a class=\"markdownIt-Anchor\" href=\"#课程总结\"></a> 课程总结</h2>\n<blockquote>\n<p>网络视频课程来源<a href=\"https://edu.csdn.net/course/play/26270\">CSDN</a>,感谢作者的分享。💪💪💪</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线程有关的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#线程有关的基本概念\"></a> 线程有关的基本概念</h2>\n<h3 id=\"线程安全\"><a class=\"markdownIt-Anchor\" href=\"#线程安全\"></a> 线程安全</h3>\n<h2 id=\"java内存模型及线程实现案例分析\"><a class=\"markdownIt-Anchor\" href=\"#java内存模型及线程实现案例分析\"></a> Java内存模型及线程实现案例分析</h2>\n<h2 id=\"线程池原理及应用\"><a class=\"markdownIt-Anchor\" href=\"#线程池原理及应用\"></a> 线程池原理及应用</h2>\n<h2 id=\"java锁及应用\"><a class=\"markdownIt-Anchor\" href=\"#java锁及应用\"></a> Java锁及应用</h2>\n<h2 id=\"并发容器及原理分析\"><a class=\"markdownIt-Anchor\" href=\"#并发容器及原理分析\"></a> 并发容器及原理分析</h2>\n<h2 id=\"课程总结\"><a class=\"markdownIt-Anchor\" href=\"#课程总结\"></a> 课程总结</h2>\n<blockquote>\n<p>网络视频课程来源<a href=\"https://edu.csdn.net/course/play/26270\">CSDN</a>,感谢作者的分享。💪💪💪</p>\n</blockquote>\n"},{"title":"面试题目","date":"2020-02-10T10:41:35.000Z","_content":"\n### 合并两个链表\n > 具体解法见博客 [合并两个排序的链表](http://lemonlife.top/2020/02/06/mergeListNode/)\n\n### 链表反序输出,不外申请内存空间\n > 具体解法见博客 [反转链表](http://lemonlife.top/2020/02/10/reverse-linked-list/)\n\n### 0.1+0.2===0.3吗?，为什么\n> 在JS运行环境中 `0.1+0.2=0.30000000000000004`\n> `(0.1).toString(2)=0.0001100110011001100110011001100110011001100110011001101`,小数在转换成二进制存储时容易造成无限循环的形式\n>解决办法: 可将小数转换成整数计算,如: `(0.1*10+0.2*10)/10` \n\n### 手动实现Array.reduce()\n数组先依次传给`a,b` 然后返回值给a,下一个值给b,依次迭代。直到数组结束。\n```JS\n   let array = [1,2,3,4]\n   let sum = array.reduce((a,b)=>a+b)\n   console.log(sum)  // 10\n```\n > 手动实现如下\n```JS\nlet array = [1,2,3,4,5]\nArray.prototype.MyReduce = function (params) {\n  if (this.length <= 2) {\n    return params(...this)\n  } else {\n    return [params(...this), ...this.slice(2)].MyReduce(params)\n  }\n}\nlet sum = array.MyReduce((a, b) => a + b)\nconsole.log(sum) // 15\nlet multiply = array.MyReduce((a, b) => a * b)\nconsole.log(multiply) // 120\n```\n### 垂直居中的方法\n1. `flex`布局\n    ```CSS\n    display: flex;\n    flex-direction: column;  \n    justify-content: center;\n    align-items: center;\n    ```\n2. 使用 `display:-webkit-box`\n   ```CSS\n    display: -webkit-box;\n    -webkit-box-align: center;\n    -webkit-box-pack: center;\n   ```\n3. 通过 `display:table-cell`, 对子元素设置宽高会失效\n   ```CSS\n    display: table-cell;\n    vertical-align: middle;\n    text-align: center;\n   ```\n4. 使用绝对定位和负边距,假设盒子本身宽高 `50px`\n   ```CSS\n    position: absolute;\n    left:50%;\n    top:50%;\n    margin-left:-25px;\n    margin-top:-25px;\n   ```\n5. 使用transform:translate定位\n   ```CSS\n    position: absolute;\n    top:50%;\n    left:50%;\n    width:100%;\n    transform:translate(-50%,-50%);\n   ```\n6.  针对文本可采用`line-height`来实现垂直居中,`text-align:center` 实现水平居中  \n### 跨域、jsonp原理、CORS原理\n跨域是浏览器的安全政策下的一种同源策略,同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。要求访问资源时要 `协议相同`、`域名相同` 、 `端口相同`。\n\n**解决不能跨域请求资源的办法**\n**JSONP:** JSONP是利用浏览器对script的资源引用没有同源限制，通过动态插入一个script标签，当资源加载到页面后会立即执行的原理实现跨域的。JSONP是一种非正式传输协议，该协议的一个要点就是允许用户传递一个callback或者开始就定义一个回调方法，参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。JSONP只支持GET请求而不支持POST等其它类型的HTTP请求,它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题，JSONP的优势在于支持老式浏览器，弊端也比较明显：需要客户端和服务端定制进行开发，服务端返回的数据不能是标准的Json数据，而是callback包裹的数据。<br/>\n**CORS**:(IE10以下不支持)CORS是现代浏览器支持跨域资源请求的一种方式，全称是\"跨域资源共享\"（Cross-origin resource sharing），当使用XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给该请求加一个请求头：Origin，后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Allow-Origin;浏览器判断该相应头中是否包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含浏览器直接驳回，这时我们无法拿到响应数据\n```Java\nresponse.setHeader(\"Access-Control-Allow-Origin\", origin);\nresponse.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, DELETE,PATCH\");\nresponse.setHeader(\"Access-Control-Max-Age\", \"3600\");\nresponse.setHeader(\"Access-Control-Allow-Headers\", \"x-requested-with\");\n// 是否支持cookie跨域\nresponse.addHeader(\"Access-Control-Allow-Credentials\", \"true\");\n复制代码\n```\n\n> [CSDN答案](https://blog.csdn.net/weixin_34150830/article/details/91438855) \n\n### `transform` 、`transition` 、 `animation` 区别\n>  `transform` 、`transition` 都是写在对应元素CSS样式里面的。`animation` 通过(`@keyframes`) 绑定对应的clss选择器,来控制元素样式。\n> `transform`有`rotate|skew|scale|translate`(旋转|扭曲|缩放|移动)等属性\n> `transition` ,只是一个过渡 只能设置 ,样式初始值和结束值,包括一些简单的控制样式过渡的属性\n> `animation` 不改变元素的属性。动画结束后还原。有很多动画api,基本可以控制每一帧动画。例如可以控制 动画间隔，以及动画次数,甚至可以控制反向播放\n\n### 介绍一下Promise以及内部的实现。\n>Promise是为了解决Javascript回调嵌套过多而产生的。因为支持链式调用，而且书写更加方便，并纳入了ES2015规范中 \n#### Promise/A+规范\n- pendding 表示初始状态,可以转移到 `fullfilled` 或者 `rejected` 状态。\n- `fullfilled` 表示操作成功，状态不可转移。\n- `rejected` 表示操作失败，状态不可转移。\n- 必须有一个 `then` 异步执行方法，`then` 接收两个参数且必须返回一个 `promise`。\n  \n![MDN上Promise状态图](http://blogimage.lemonlife.top/202002161328_665.png?/)\n\n#### 自己实现思路\n从上面描述可知，要实现Promise需要有\n- status 当前的状态(`pending|fullfilled|rejected`)\n- value `fullfilled`之后的返回值。\n- reason `rejected`之后的原因\n- fullfilledCallback `fillfulled`回调队列\n- rejectedCallback `rejected` 回调队列\n\n**简单版本**\n> 这个代码来源 github 面试写出这个已经够了，下面那个复杂版本，我自己写着玩的。\n```JS\nconst PENDING = 'pending'\nconst RESOLVED = 'resolved'\nconst REJECTED = 'rejected'\nfunction MyPromise(exec) {\n  let self = this\n  this.state = PENDING\n  this.value = null\n  this.resolvedCallBacks = []\n  this.rejectedCallBacks = []\n  function resolve(value) {\n    if (value instanceof MyPromise) {\n      return value.then(resolve, reject)\n    }\n    setTimeout(() => {\n      if (self.state === PENDING) {\n        self.state = RESOLVED\n        self.value = value\n        self.resolvedCallBacks.forEach(callback => {\n          callback(value)\n        })\n      }\n    })\n  }\n\n\n  function reject(reason) {\n    setTimeout(() => {\n      if (self.state === PENDING) {\n        self.state = REJECTED\n        self.value = reason\n        self.rejectedCallBacks.forEach(callback => {\n          callback(value)\n        })\n      }\n    })\n  }\n  try {\n    exec(resolve, reject)\n  } catch (e) {\n    reject(e)\n  }\n}\nMyPromise.prototype.then = function (onResolved, onRejected) {\n  onResolved = typeof onResolved === 'function' ? onResolved : function (value) {\n    return value\n  }\n  onRejected = typeof onRejected === 'function' ? onRejected : function (reason) {\n    throw reason\n  }\n\n  if (this.state === PENDING) {\n    this.resolvedCallBacks.push(onResolved)\n    this.rejectedCallBacks.push(onRejected)\n  }\n  if (this.state === RESOLVED) {\n    onResolved(this.value)\n  }\n  if (this.state === REJECTED) {\n    onRejected(this.value)\n  }\n}\n```\n**复杂版本** \n```js\n  const PENDING = 'pendiing'\n  const RESOLVED = 'resolved'\n  const REJECTED = 'rejected'\n  /**\n   * @param {Function} excutor 同步执行器函数 \n   */\n  function MyPromise(excutor) {\n    this.status = PENDING\n    this.data = undefined\n    this.callbacks = []\n    let _self = this\n    function resolve(value) {\n      // 状态 改成 resolve\n      // 报错value 数据\n      // 执行回调函数\n      if (_self.status !== PENDING) {\n        return\n      }\n      _self.status = RESOLVED\n      _self.data = value\n      if (_self.callbacks.length > 0) {\n        setTimeout(() => {\n          _self.callbacks.forEach(callbacksObj => {\n            callbacksObj.onResolved(value)\n          })\n        })\n      }\n\n    }\n    function reject(reason) {\n      if (_self.status !== PENDING) {\n        return\n      }\n      _self.status = REJECTED\n      _self.data = reason\n      if (_self.callbacks.length > 0) {\n        setTimeout(() => {\n          _self.callbacks.forEach(callbacksObj => {\n            callbacksObj.onRejected(value)\n          })\n        })\n      }\n    }\n    // 如果执行器 抛出异常 promise 变成 reject状态\n    try {\n      excutor(resolve, reject)\n    } catch (error) {\n      reject(error)\n    }\n  }\n\n  /**\n   * Promise 实例对象 then\n   *  @param {Function} onResolved 成功状态对的回调函数\n   *  @param {Function} onRejected 失败状态的回调函数\n   *  @return 一个新的promise对象 \n   */\n  MyPromise.prototype.then = function (onResolved, onRejected) {\n    const _self = this\n    // 实现异常传递\n    onRejected = typeof onRejected === 'function' ? onRejected : reason => { throw reason }\n    onResolved = typeof onResolved === 'function' ? onResolved : value => value\n\n    // 返回一个新的Promise对象\n    return new MyPromise((resolve, reject) => {\n      /**\n       * @param {} callback 调用指定的回调函数 \n       */\n      function handle(callback) {\n        try {\n          const result = callback(_self.data)\n          if (result instanceof MyPromise) {\n            result.then(resolve, reject)\n          } else {\n            resolve(result)\n          }\n        } catch (error) {\n          reject(error)\n        }\n      }\n\n      if (_self.status === PENDING) {\n        _self.callbacks.push({\n          onResolved,\n          onRejected\n        })\n      } else if (_self.status === RESOLVED) {\n\n        setTimeout(() => {\n          handle(onResolved)\n        })\n      } else {\n        setTimeout(() => {\n          handle(onRejected)\n        })\n      }\n    })\n  }\n  /**\n * Promise 实例对象 catch\n *  @param {Function} onRejected 失败状态的回调函数\n *  @return 一个新的promise对象 \n */\n  MyPromise.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected)\n  }\n```\n\n### JS实现异步有哪些方法\n> Javascript 的执行环境是单线程。就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。\n> **同步模式(Synchronous)：**程序的执行顺序与任务的排列顺序是一致的、同步的。\n> **异步模式(Asynchronous)：**每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。\n- 回调函数的形式\n  \n  把耗时的模块。放入定时器中。将其子模块,已回调函数的形式写入。[阮老师博客](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)\n  ```JS\n    // 假设f1是耗时的操作，f2需要f1的结果。 \n    function f1(callback){\n      setTimeout(function () {\n        // f1的任务代码\n        callback();\n      }, 1000);\n    }\n    f1(f2);\n  ```\n- 事件监听\n  任务的执行顺序不取决于代码的执行顺序。而是取决于某个事件是否发生。\n  `f1.trigger('done')`表示，执行完成后，立即触发done事件，从而开始执行f2。\n    ```JS\n      　f1.on('done', f2);\n        function f1(){\n          setTimeout(function(){\n            f1.trigger('done')\n          },1000)\n        }\n    ```\n- 发布订阅模式(观察者模式)\n  假设存在信号中心。某个任务完成时，向信号中心发布这个信号。其他订阅者，接收到信号之后。开始执行自己的函数\n  这种方法的性质与\"事件监听\"类似，但是明显优于后者。因为我们可以通过查看\"消息中心\"，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。\n  ```JS\n    jQuery.subscribe(\"done\", f2);\n    function f1(){\n      setTimeout(function(){\n        // f1任务代码\n        jQuery.publish(\"done\");\n      })\n    }\n    jQuery.unsubscribe(\"done\", f2);\n  ```\n  > 手动实现观察者模式\n  ```JS\n  const queuedObservers = new Set();\n  const observe = fn => queuedObservers.add(fn);\n  const observable = obj => new Proxy(obj, {set});\n\n  function set(target, key, value, receiver) {\n    /**\n     * Reflect对象的方法与Proxy对象的方法一一对应，\n     * 只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。\n     * 这就让Proxy对象可以方便地调用对应的Reflect方法，\n     * 完成默认行为，作为修改行为的基础。\n     * 也就是说，不管Proxy怎么修改默认行为，\n     * 你总可以在Reflect上获取默认行为\n     */\n    console.log(target,key,value,receiver) //{ name: '张三', age: 20 } 'name' '李四' { name: '张三', age: 20 }\n\n    Reflect.set(target, key, value, receiver);\n    console.log(target,key,value,receiver) // { name: '李四', age: 20 } 'name' '李四' { name: '李四', age: 20 }\n    queuedObservers.forEach(observer => observer());\n    // return result;\n  }\n  const person = observable({\n    name: '张三',\n    age: 20\n  });\n  function print() {\n    console.log(`${person.name}, ${person.age}`)\n  }\n  function print2() {\n    console.log(`年龄是, ${person.age}`)\n  }\n  observe(print);\n  observe(print2)\n  person.name = '李四'; \n  ```\n- Promise 对象\n  它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：`f1.().then(f2)`\n  这样写的优点在于，回调函数变成了链式写法，程序的流程可以看得很清楚。\n  ```JS\n  console.log(1)\n  new Promise((resolve)=>{\n    return resolve();\n   console.log(2)\n  }).then(()=>{\n   console.log(3)\n  })\n  setTimeout(()=>{\n   console.log(4)\n  },0)\n  console.log(5)\n  // 执行结果 1 2 5 3 4\n  ```\n### Symbol用法\n 最新的ECMAScript 标准定义了8种数据类型,7种原始类型 `undefined` `null` `bollean` `number` `bigint` `string` `symbol` ,1种复杂数据类`object` 。<br/>\n如果面试官问，你可以反问一句，是基础数据类型，还是数据类型，基础数据类型7种，数据类型8种<br/>\n\n![](http://blogimage.lemonlife.top/202002212036_7.png?/)\n\n**primitive的解释：** In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods. There are 7 primitive data types: string, number, bigint, boolean, null, undefined, and symbol.\n\n```JS\n  let s1 = Symbol('info')\n  let a = {\n    [s1]: function () {\n      console.log(\"哈哈哈\")\n    },\n    \"test\": function () {\n      console.log(\"TEST哈哈哈\")\n    },\n  }\n  a.test() // TEST哈哈哈\n  a[s1]() // 哈哈哈\n  a[Symbol('info')] // 报错\n```\n### Proxy\n> 修改制定对象的一些默认方法。通过`new Proxy(params1,params2)` 创建Proxy对象。参数1是被代理的对象。参数2是被修改的默认方法。\n```JS\n  let proxy = new Proxy({ name: \"wang\" }, {\n    get: function (target, propKey) {\n      if (propKey in target) {\n        return target[propKey]\n      }\n      return 20;\n    }\n  });\n  console.log(proxy.name) // wang\n  console.log(proxy.time) // 20\n```\n### FetchApi 和XHR(ajax,axios)的主要区别\n> 主要是请求方式的不同\n> XHR就是 `XMLHttpRequest` 的请求方式\n> FetchApi 类似 `function(){}.then().catch()`的模式，FetchAPI可以流式请求体的模式(下载大文件过程中显示数据流),更方便请求。\n### 实现一个盒子高度是宽度的一半(纯CSS)\npadding属性, padding 的百分比是根据盒子的宽度来决定的。\n  ```HTML\n   <style>\n    * {\n      padding: 0;\n      margin: 0;\n    }\n    .parent {\n      width: 1000px;\n      border: 1px solid red;\n    }\n\n    .child {\n      height: 0;\n      padding-bottom: 50%;\n      position: relative;\n    }\n\n    .content {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      background: pink;\n    }\n  </style>\n  <div class=\"parent\">\n    <div class=\"child\">\n      <div class=\"content\" />\n    </div>\n  </div>\n  ```\n\n### 不同浏览器标签页的通信\n\n### 线程与进程的区别\n**进程具有的特征：**\n  - 动态性：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态- 消亡的；\n  - 并发性：任何进程都可以同其他进行一起并发执行；\n  - 独立性：进程是系统进行资源分配和调度的一个独立单位；\n  - 结构性：进程由程序，数据和进程控制块三部分组成。\n**线程与进程的区别**\n  - 线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；\n  - 一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；\n  - 进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见；\n  - 调度和切换：线程上下文切换比进程上下文切换要快得多。\n  \n### 浏览器是如何工作的\n\n### 回流和重绘的区别\n浏览器在加载HTML的时候,会形成DOM树 和render树，DOM树含有HTML标签，包括`dispaly:none`的标签还有JS代码动态添加的元素。浏览器把CSS样式解析成结构体。DOM 树和结构体结合之后生成render树。所以render树每个节点都有自己的样式。render-tree中的元素的规模，尺寸，布局等发生改变时需要重建render树。称为回流。每个页面至少需要页面加载时这一个回流。完成回流之后，浏览器需要重新在屏幕上绘制受影响的部分。该过程称为重绘。\n如果render Tree中的部分元素更新只影响外观(如颜色)不会引起回流，只会发生重绘。<br/>\n**浏览器的优化：**显然回流的花销比重绘要高,回流的花销和 render tree 有多少节点有关。所以浏览器会维护一个队列。把所以会引起回流重绘的操作放入这个队列。当队列中的操作达到一定的数量。或者到了一定时间间隔。浏览器会进行一个批处理，把多次回流重绘变成一次回流重绘。\n**代码的优化：**把多次改变样式代码，多次添加删除元素等操作合并成一次操作。\n>[优质博客链接](http://blog.poetries.top/FE-Interview-Questions/improve/#_7-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98)\n### express和koa的区别\n在koa中,一切流程都是中间件。数据流向遵循洋葱模型。先入后出,也像递归模型。koa2中实现异步是通过async/awaite，koa1实现异步是通过generator/yield，而express实现异步是通过回调函数的方式。express内置了很多中间件。koa2基本没绑定其他框架。更容易定制化。扩展性好。express没有提供上下文机制。数据的控制需要自己手动实现。Koa依据洋葱模型实现数据的流入流出的功能。\n```JS\nconst Koa = require('koa')\nconst app = new Koa()\n\nconst mid1 = async (ctx, next) => {\n    ctx.body =  '前：' + '1\\n'\n    await next()\n    ctx.body =   ctx.body + '后：' + '1\\n'\n}\n\nconst mid2 = async (ctx, next) => {\n    ctx.body =    ctx.body + '前：'+ '2\\n'\n    await next()\n    ctx.body =    ctx.body + '后：'+ '2\\n'\n}\n\nconst mid3 = async (ctx, next) => {\n    ctx.body =  ctx.body + '前：'+  '3\\n'\n    await next()\n    ctx.body =   ctx.body + '后：'+ '3\\n'\n}\n\napp.use(mid1)\napp.use(mid2)\napp.use(mid3)\n\napp.listen(3000) \n// 前1 前2 前3\n// 后3 后2 后1\n```\n### koa的洋葱模型(koa中间件原理)\n初始化Koa实例后,用use方法来调用加载中间件。会有一个数组来存储中间件，use的调用顺序。决定了中间件的执行顺序。每一个中间件都是一个函数(如果不是会报错),接收两个参数,第一个ctx是上下文对象，另一个是next函数。项目启动后koa-componse模块对middleware中间件数组进行处理。会从middleware数组中取第一个函数开始执行,中间件函数调用next方法去执行下一个中间件函数(此时不代表当前中间件函数执行完毕了)，每个中间件函数执行完毕之后都会反回Promise对象。\n\n![洋葱模型图片](http://blogimage.lemonlife.top/202002132134_542.png?/)\n\n### mysql索引太多会有什么影响,索引种类\n\n(1) 空间：索引需要占用空间；\n\n(2) 时间：查询索引需要时间；\n\n(3) 维护：索引须要维护（数据变更时）；\n\n不建议使用索引的情况：\n\n(1) 数据量很小的表\n\n(2) 空间紧张有什么区别\n\n\n\n### 什么是SEO \n搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是：为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益；SEO包含站外SEO和站内SEO两方面；为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力。\n**搜索引擎优化：**\n  - 对网站的标题、关键字、描述精心设置，反映网站的定位，让搜索引擎明白网站是做什么的\n  - 网站内容优化：内容与关键字的对应，增加关键字的密度；\n  - 在网站上合理设置Robot.txt文件；\n**网页内部优化：**\n  - META标签优化：例如：TITLE，KEYWORDS，DESCRIPTION等的优化；\n  - title：只要强调重点即可，重要关键词出现不要超过2次，而且要靠前，每个页面的title要有所不同。\n  - description：把网页内容高度概括到这里，长度要合理，不可过分堆砌关键词，每个页面的description要有所不同。\n\n- keywords：列举几个重要的关键词即可，不可过分堆砌。\n>[转载自简书](https://www.jianshu.com/p/77d32ca7cb9d)\n\n### 实现BFS算法(广度优先遍历)\n\n### 实现观察者模式(发布订阅模式)\n### 手动实现Proxy\n\n```JS\nfunction clone(obj) {\n  if (Object.prototype.toString.call(obj) !== '[object Object]') return obj;\n  let newObj = new Object();\n  for (let key in obj) {\n    newObj[key] = clone(obj[key]);\n  }\n  return newObj;\n}\n\n//深度克隆当前对象\n//遍历当前对象所有属性\nfunction MyProxy(target, handle) {\n  let targetCopy = clone(target);\n\n  Object.keys(target).forEach(function (key) {\n    //Object.defineProperty 修改每一项的get set 方法 \n    Object.defineProperty(targetCopy, key, {\n      get: function () {\n        return handle.get && handle.get(target, key);\n      },\n      set: function (newVal) {\n        handle.set && handle.set(target, key, newVal);\n      }\n    });\n  });\n  return targetCopy;\n}\n\nlet myProxy = new MyProxy({ name: \"wmw\", son: { sonName: \"sonName\" } }, {\n  set: function () { console.log(\"set方法被拦截\") },\n  get: function () {\n    console.log('get方法被拦截')\n  }\n})\nmyProxy.name = 'xxx'\nmyProxy.year = \"2020\"\n```\n\n### Proxy 实现Vue数据双向绑定\n```html\n<body>\n  <div id=\"root\"></div>\n</body>\n<script>\n\n  let data = {\n    name: 'wmw',\n    age: 21\n  }\n  let el = document.getElementById('root')\n  let template = `\n    <div  >\n    姓名：{{name}}\n    <br/>\n    年龄：{{age}}\n    <br />\n    <input type=\"text\" v-model=\"name\"  id='input1'>\n    </div>\n  `\n  function renderHTML() {\n    let res = template.replace(/\\{\\{\\w+\\}\\}/g, key => {\n      key = key.slice(2, key.length - 2)\n      return data[key]\n    })\n    el.innerHTML = res\n  }\n  renderHTML()\n  function renderJS() {\n    Array.from(el.getElementsByTagName('input'))\n      .filter(ele => ele.getAttribute('v-model'))\n      .forEach(input => {\n        let key = input.getAttribute('v-model')\n        input.value = data[key]\n        input.onfocus = true\n        input.oninput = function () {\n          dataProxy[key] = this.value\n        }\n      })\n  }\n  renderJS()\n  let dataProxy = new Proxy(data, {\n    set(obj, name, value) {\n      // diff算法\n      obj[name] = value\n      renderHTML()\n      renderJS()\n    }\n  }) \n</script>\n```\n>[源码](https://github.com/ilovcoding/typescript-design-mode/blob/main/src/proxy/vue/index.html)\n\n### 单例模式/工厂模式\n```JS\nlet Person = (function () {\n  let instance = null\n  return class Person {\n    constructor() {\n      if (!instance) {\n        instance = this\n      } else {\n        return instance\n      }\n    }\n  }\n})()\n\nlet p1 = new Person()\nlet p2 = new Person()\nconsole.log(p1 == p2)\n```\n```JS\nlet Factory = (function () {\n  let s = {\n    Student(name, age) {\n      this.name = name\n      this.age = age\n      return this\n    },\n    Teacher(name, age) {\n      this.name = name\n      this.age = age\n      return this\n    }\n  }\n\n  return class {\n    constructor(type, name, age) {\n      if (s[type]) {\n        return s[type].call(this, name, age)\n      }\n    }\n  }\n})()\n\nlet stu = new Factory(\"Student\", '张三', 18)\nconsole.log(stu.name, stu.age) // 张三 18\n```\n\n### JS函数柯里化\n> Curry 把接受多个参数的函数，变成了接受一个单一参数(最初参数的第一个),并返回能正确运行的函数。\n```JS\nfunction add(x,y){\n  return x+y\n}\nfunction curryingAdd(x){\n  return function (y){\n    return x+y\n  }\n}\nadd(1,2)\ncurryingAdd(1)(2)\n```\n\n- 让参数能够复用，调用起来也更方便。\n```JS\nfunction check(reg,text){\n  return reg.text(text)\n}\ncheck(/\\d+/g,'test') // false\ncheck(/[a-z]+/g,'test') //true\n// Currying 后\nfunction curryingCheck(reg){\n  return function(txt){\n    return reg.test(txt)\n  }\n}\nvar hasNumber = curryingCheck(/\\d+/g)\nvar hasLetter = curryingCheck(/[a-z]+/g)\n\nhasNumber('test1') // true\nhasNumber('testtest') // false\nhasLetter('21212') // false\n```\n- 通用的柯理化函数  \n```JS\n/**\n * @param fn    待柯里化的原函数\n * @param len   所需的参数个数，默认为原函数的形参个数\n */\nfunction curry(fn,len = fn.length) {\n    return _curry.call(this,fn,len)\n}\n\n/**\n * @param fn    待柯里化的原函数\n * @param len   所需的参数个数\n * @param args  已接收的参数列表\n */\nfunction _curry(fn,len,...args1) {\n    return function (...args2) {\n      let _args = [...args1,...args2];\n      if(_args.length >= len){\n          return fn.apply(this,_args);\n      }else{\n          // 继续收集参数的过程\n          return _curry.call(this,fn,len,..._args)\n      }\n    }\n}\n\n```\n### 实现一个sum函数使得`sum(1,2,3).valueOf()`和`sum(1)(2)(3).valueOf()`执行输出的结果都等于6\n```JS\nfunction sum(a, ...args) {\n  return function (b = args[0]) {\n    return function (c = args[1]) {\n      return a + b + c\n    }\n  }\n}\nconsole.log(sum(1)(2)(3).valueOf()) //6 \nconsole.log(sum(1, 2, 3).valueOf()()()) //6\nfunction sum2(...args) {\n  if (args.length == 1) {\n    return function (b) {\n      return function (c) {\n        return args[0] + b + c\n      }\n    }\n  } else {\n    return args.reduce((a, b) => a + b)\n  }\n}\nconsole.log(sum2(1)(2)(3).valueOf()) //6\nconsole.log(sum2(1, 2, 3).valueOf()) // 6\n\n```\n\n### 手动实现对象深拷贝的方法\n> 面试我只想用ES5 的写法  \n```js\n// ES6的写法\nfunction merge(source) {\n  let obj = new Object()\n  for (const key of Reflect.ownKeys(source)) {\n    // Reflect.getOwnPropertyDescriptor(source,key)\n    //  获取对象的属性描述符  对象是否可写 等\n    Reflect.defineProperty(obj, key, Reflect.getOwnPropertyDescriptor(source, key))\n    if (Reflect.apply(Object.prototype.toString, source[key], []) === '[object Object]') {\n      Reflect.set(obj, key, merge(source[key]))\n    }\n  }\n  return obj\n}\n// ES5 的写法\nfunction clone(obj) {\n  if (Object.prototype.toString.call(obj) !== '[object Object]') return obj;\n  let newObj = new Object();\n  for (let key in obj) {\n    newObj[key] = clone(obj[key]);\n  }\n  return newObj;\n}\n\n```\n### 防抖节流\n- 防抖\n```js\nfunction debounce(fn, wait) {\n    var timeout = null;\n    return function() {\n        if(timeout !== null){\n          clearTimeout(timeout);\n        } \n        timeout = setTimeout(fn, wait);\n    }\n}\n// 处理函数\nfunction handle() {\n    console.log(Math.random()); \n}\n// 滚动事件\nwindow.addEventListener('scroll', debounce(handle, 1000));\n```\n- 节流\n```js\nvar throttle = function(func, delay) {\n var timer = null;\n var startTime = Date.now();\n return function() {\n     var curTime = Date.now();\n     var remaining = delay - (curTime - startTime);\n     var context = this;\n     var args = arguments;\n     clearTimeout(timer);\n      if (remaining <= 0) {\n        func.apply(context, args);\n        startTime = Date.now();\n      } else {\n        // 定时器解决，节流函数，最后一次需要被执行的问题\n        timer = setTimeout(func, remaining);\n      }\n  }\n}\nfunction handle() {\n  console.log(Math.random());\n}\nwindow.addEventListener('scroll', throttle(handle, 1000));\n```\n### 总结\n>面试需要 数据结构与算法，网络原理，底层知识，项目经验，设计模式，SQL语法\n>\n","source":"_posts/interview.md","raw":"---\ntitle: 面试题目\ndate: 2020-02-10 18:41:35\ntags: \n  -  面试\n---\n\n### 合并两个链表\n > 具体解法见博客 [合并两个排序的链表](http://lemonlife.top/2020/02/06/mergeListNode/)\n\n### 链表反序输出,不外申请内存空间\n > 具体解法见博客 [反转链表](http://lemonlife.top/2020/02/10/reverse-linked-list/)\n\n### 0.1+0.2===0.3吗?，为什么\n> 在JS运行环境中 `0.1+0.2=0.30000000000000004`\n> `(0.1).toString(2)=0.0001100110011001100110011001100110011001100110011001101`,小数在转换成二进制存储时容易造成无限循环的形式\n>解决办法: 可将小数转换成整数计算,如: `(0.1*10+0.2*10)/10` \n\n### 手动实现Array.reduce()\n数组先依次传给`a,b` 然后返回值给a,下一个值给b,依次迭代。直到数组结束。\n```JS\n   let array = [1,2,3,4]\n   let sum = array.reduce((a,b)=>a+b)\n   console.log(sum)  // 10\n```\n > 手动实现如下\n```JS\nlet array = [1,2,3,4,5]\nArray.prototype.MyReduce = function (params) {\n  if (this.length <= 2) {\n    return params(...this)\n  } else {\n    return [params(...this), ...this.slice(2)].MyReduce(params)\n  }\n}\nlet sum = array.MyReduce((a, b) => a + b)\nconsole.log(sum) // 15\nlet multiply = array.MyReduce((a, b) => a * b)\nconsole.log(multiply) // 120\n```\n### 垂直居中的方法\n1. `flex`布局\n    ```CSS\n    display: flex;\n    flex-direction: column;  \n    justify-content: center;\n    align-items: center;\n    ```\n2. 使用 `display:-webkit-box`\n   ```CSS\n    display: -webkit-box;\n    -webkit-box-align: center;\n    -webkit-box-pack: center;\n   ```\n3. 通过 `display:table-cell`, 对子元素设置宽高会失效\n   ```CSS\n    display: table-cell;\n    vertical-align: middle;\n    text-align: center;\n   ```\n4. 使用绝对定位和负边距,假设盒子本身宽高 `50px`\n   ```CSS\n    position: absolute;\n    left:50%;\n    top:50%;\n    margin-left:-25px;\n    margin-top:-25px;\n   ```\n5. 使用transform:translate定位\n   ```CSS\n    position: absolute;\n    top:50%;\n    left:50%;\n    width:100%;\n    transform:translate(-50%,-50%);\n   ```\n6.  针对文本可采用`line-height`来实现垂直居中,`text-align:center` 实现水平居中  \n### 跨域、jsonp原理、CORS原理\n跨域是浏览器的安全政策下的一种同源策略,同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。要求访问资源时要 `协议相同`、`域名相同` 、 `端口相同`。\n\n**解决不能跨域请求资源的办法**\n**JSONP:** JSONP是利用浏览器对script的资源引用没有同源限制，通过动态插入一个script标签，当资源加载到页面后会立即执行的原理实现跨域的。JSONP是一种非正式传输协议，该协议的一个要点就是允许用户传递一个callback或者开始就定义一个回调方法，参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。JSONP只支持GET请求而不支持POST等其它类型的HTTP请求,它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题，JSONP的优势在于支持老式浏览器，弊端也比较明显：需要客户端和服务端定制进行开发，服务端返回的数据不能是标准的Json数据，而是callback包裹的数据。<br/>\n**CORS**:(IE10以下不支持)CORS是现代浏览器支持跨域资源请求的一种方式，全称是\"跨域资源共享\"（Cross-origin resource sharing），当使用XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给该请求加一个请求头：Origin，后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Allow-Origin;浏览器判断该相应头中是否包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含浏览器直接驳回，这时我们无法拿到响应数据\n```Java\nresponse.setHeader(\"Access-Control-Allow-Origin\", origin);\nresponse.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, DELETE,PATCH\");\nresponse.setHeader(\"Access-Control-Max-Age\", \"3600\");\nresponse.setHeader(\"Access-Control-Allow-Headers\", \"x-requested-with\");\n// 是否支持cookie跨域\nresponse.addHeader(\"Access-Control-Allow-Credentials\", \"true\");\n复制代码\n```\n\n> [CSDN答案](https://blog.csdn.net/weixin_34150830/article/details/91438855) \n\n### `transform` 、`transition` 、 `animation` 区别\n>  `transform` 、`transition` 都是写在对应元素CSS样式里面的。`animation` 通过(`@keyframes`) 绑定对应的clss选择器,来控制元素样式。\n> `transform`有`rotate|skew|scale|translate`(旋转|扭曲|缩放|移动)等属性\n> `transition` ,只是一个过渡 只能设置 ,样式初始值和结束值,包括一些简单的控制样式过渡的属性\n> `animation` 不改变元素的属性。动画结束后还原。有很多动画api,基本可以控制每一帧动画。例如可以控制 动画间隔，以及动画次数,甚至可以控制反向播放\n\n### 介绍一下Promise以及内部的实现。\n>Promise是为了解决Javascript回调嵌套过多而产生的。因为支持链式调用，而且书写更加方便，并纳入了ES2015规范中 \n#### Promise/A+规范\n- pendding 表示初始状态,可以转移到 `fullfilled` 或者 `rejected` 状态。\n- `fullfilled` 表示操作成功，状态不可转移。\n- `rejected` 表示操作失败，状态不可转移。\n- 必须有一个 `then` 异步执行方法，`then` 接收两个参数且必须返回一个 `promise`。\n  \n![MDN上Promise状态图](http://blogimage.lemonlife.top/202002161328_665.png?/)\n\n#### 自己实现思路\n从上面描述可知，要实现Promise需要有\n- status 当前的状态(`pending|fullfilled|rejected`)\n- value `fullfilled`之后的返回值。\n- reason `rejected`之后的原因\n- fullfilledCallback `fillfulled`回调队列\n- rejectedCallback `rejected` 回调队列\n\n**简单版本**\n> 这个代码来源 github 面试写出这个已经够了，下面那个复杂版本，我自己写着玩的。\n```JS\nconst PENDING = 'pending'\nconst RESOLVED = 'resolved'\nconst REJECTED = 'rejected'\nfunction MyPromise(exec) {\n  let self = this\n  this.state = PENDING\n  this.value = null\n  this.resolvedCallBacks = []\n  this.rejectedCallBacks = []\n  function resolve(value) {\n    if (value instanceof MyPromise) {\n      return value.then(resolve, reject)\n    }\n    setTimeout(() => {\n      if (self.state === PENDING) {\n        self.state = RESOLVED\n        self.value = value\n        self.resolvedCallBacks.forEach(callback => {\n          callback(value)\n        })\n      }\n    })\n  }\n\n\n  function reject(reason) {\n    setTimeout(() => {\n      if (self.state === PENDING) {\n        self.state = REJECTED\n        self.value = reason\n        self.rejectedCallBacks.forEach(callback => {\n          callback(value)\n        })\n      }\n    })\n  }\n  try {\n    exec(resolve, reject)\n  } catch (e) {\n    reject(e)\n  }\n}\nMyPromise.prototype.then = function (onResolved, onRejected) {\n  onResolved = typeof onResolved === 'function' ? onResolved : function (value) {\n    return value\n  }\n  onRejected = typeof onRejected === 'function' ? onRejected : function (reason) {\n    throw reason\n  }\n\n  if (this.state === PENDING) {\n    this.resolvedCallBacks.push(onResolved)\n    this.rejectedCallBacks.push(onRejected)\n  }\n  if (this.state === RESOLVED) {\n    onResolved(this.value)\n  }\n  if (this.state === REJECTED) {\n    onRejected(this.value)\n  }\n}\n```\n**复杂版本** \n```js\n  const PENDING = 'pendiing'\n  const RESOLVED = 'resolved'\n  const REJECTED = 'rejected'\n  /**\n   * @param {Function} excutor 同步执行器函数 \n   */\n  function MyPromise(excutor) {\n    this.status = PENDING\n    this.data = undefined\n    this.callbacks = []\n    let _self = this\n    function resolve(value) {\n      // 状态 改成 resolve\n      // 报错value 数据\n      // 执行回调函数\n      if (_self.status !== PENDING) {\n        return\n      }\n      _self.status = RESOLVED\n      _self.data = value\n      if (_self.callbacks.length > 0) {\n        setTimeout(() => {\n          _self.callbacks.forEach(callbacksObj => {\n            callbacksObj.onResolved(value)\n          })\n        })\n      }\n\n    }\n    function reject(reason) {\n      if (_self.status !== PENDING) {\n        return\n      }\n      _self.status = REJECTED\n      _self.data = reason\n      if (_self.callbacks.length > 0) {\n        setTimeout(() => {\n          _self.callbacks.forEach(callbacksObj => {\n            callbacksObj.onRejected(value)\n          })\n        })\n      }\n    }\n    // 如果执行器 抛出异常 promise 变成 reject状态\n    try {\n      excutor(resolve, reject)\n    } catch (error) {\n      reject(error)\n    }\n  }\n\n  /**\n   * Promise 实例对象 then\n   *  @param {Function} onResolved 成功状态对的回调函数\n   *  @param {Function} onRejected 失败状态的回调函数\n   *  @return 一个新的promise对象 \n   */\n  MyPromise.prototype.then = function (onResolved, onRejected) {\n    const _self = this\n    // 实现异常传递\n    onRejected = typeof onRejected === 'function' ? onRejected : reason => { throw reason }\n    onResolved = typeof onResolved === 'function' ? onResolved : value => value\n\n    // 返回一个新的Promise对象\n    return new MyPromise((resolve, reject) => {\n      /**\n       * @param {} callback 调用指定的回调函数 \n       */\n      function handle(callback) {\n        try {\n          const result = callback(_self.data)\n          if (result instanceof MyPromise) {\n            result.then(resolve, reject)\n          } else {\n            resolve(result)\n          }\n        } catch (error) {\n          reject(error)\n        }\n      }\n\n      if (_self.status === PENDING) {\n        _self.callbacks.push({\n          onResolved,\n          onRejected\n        })\n      } else if (_self.status === RESOLVED) {\n\n        setTimeout(() => {\n          handle(onResolved)\n        })\n      } else {\n        setTimeout(() => {\n          handle(onRejected)\n        })\n      }\n    })\n  }\n  /**\n * Promise 实例对象 catch\n *  @param {Function} onRejected 失败状态的回调函数\n *  @return 一个新的promise对象 \n */\n  MyPromise.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected)\n  }\n```\n\n### JS实现异步有哪些方法\n> Javascript 的执行环境是单线程。就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。\n> **同步模式(Synchronous)：**程序的执行顺序与任务的排列顺序是一致的、同步的。\n> **异步模式(Asynchronous)：**每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。\n- 回调函数的形式\n  \n  把耗时的模块。放入定时器中。将其子模块,已回调函数的形式写入。[阮老师博客](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)\n  ```JS\n    // 假设f1是耗时的操作，f2需要f1的结果。 \n    function f1(callback){\n      setTimeout(function () {\n        // f1的任务代码\n        callback();\n      }, 1000);\n    }\n    f1(f2);\n  ```\n- 事件监听\n  任务的执行顺序不取决于代码的执行顺序。而是取决于某个事件是否发生。\n  `f1.trigger('done')`表示，执行完成后，立即触发done事件，从而开始执行f2。\n    ```JS\n      　f1.on('done', f2);\n        function f1(){\n          setTimeout(function(){\n            f1.trigger('done')\n          },1000)\n        }\n    ```\n- 发布订阅模式(观察者模式)\n  假设存在信号中心。某个任务完成时，向信号中心发布这个信号。其他订阅者，接收到信号之后。开始执行自己的函数\n  这种方法的性质与\"事件监听\"类似，但是明显优于后者。因为我们可以通过查看\"消息中心\"，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。\n  ```JS\n    jQuery.subscribe(\"done\", f2);\n    function f1(){\n      setTimeout(function(){\n        // f1任务代码\n        jQuery.publish(\"done\");\n      })\n    }\n    jQuery.unsubscribe(\"done\", f2);\n  ```\n  > 手动实现观察者模式\n  ```JS\n  const queuedObservers = new Set();\n  const observe = fn => queuedObservers.add(fn);\n  const observable = obj => new Proxy(obj, {set});\n\n  function set(target, key, value, receiver) {\n    /**\n     * Reflect对象的方法与Proxy对象的方法一一对应，\n     * 只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。\n     * 这就让Proxy对象可以方便地调用对应的Reflect方法，\n     * 完成默认行为，作为修改行为的基础。\n     * 也就是说，不管Proxy怎么修改默认行为，\n     * 你总可以在Reflect上获取默认行为\n     */\n    console.log(target,key,value,receiver) //{ name: '张三', age: 20 } 'name' '李四' { name: '张三', age: 20 }\n\n    Reflect.set(target, key, value, receiver);\n    console.log(target,key,value,receiver) // { name: '李四', age: 20 } 'name' '李四' { name: '李四', age: 20 }\n    queuedObservers.forEach(observer => observer());\n    // return result;\n  }\n  const person = observable({\n    name: '张三',\n    age: 20\n  });\n  function print() {\n    console.log(`${person.name}, ${person.age}`)\n  }\n  function print2() {\n    console.log(`年龄是, ${person.age}`)\n  }\n  observe(print);\n  observe(print2)\n  person.name = '李四'; \n  ```\n- Promise 对象\n  它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：`f1.().then(f2)`\n  这样写的优点在于，回调函数变成了链式写法，程序的流程可以看得很清楚。\n  ```JS\n  console.log(1)\n  new Promise((resolve)=>{\n    return resolve();\n   console.log(2)\n  }).then(()=>{\n   console.log(3)\n  })\n  setTimeout(()=>{\n   console.log(4)\n  },0)\n  console.log(5)\n  // 执行结果 1 2 5 3 4\n  ```\n### Symbol用法\n 最新的ECMAScript 标准定义了8种数据类型,7种原始类型 `undefined` `null` `bollean` `number` `bigint` `string` `symbol` ,1种复杂数据类`object` 。<br/>\n如果面试官问，你可以反问一句，是基础数据类型，还是数据类型，基础数据类型7种，数据类型8种<br/>\n\n![](http://blogimage.lemonlife.top/202002212036_7.png?/)\n\n**primitive的解释：** In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods. There are 7 primitive data types: string, number, bigint, boolean, null, undefined, and symbol.\n\n```JS\n  let s1 = Symbol('info')\n  let a = {\n    [s1]: function () {\n      console.log(\"哈哈哈\")\n    },\n    \"test\": function () {\n      console.log(\"TEST哈哈哈\")\n    },\n  }\n  a.test() // TEST哈哈哈\n  a[s1]() // 哈哈哈\n  a[Symbol('info')] // 报错\n```\n### Proxy\n> 修改制定对象的一些默认方法。通过`new Proxy(params1,params2)` 创建Proxy对象。参数1是被代理的对象。参数2是被修改的默认方法。\n```JS\n  let proxy = new Proxy({ name: \"wang\" }, {\n    get: function (target, propKey) {\n      if (propKey in target) {\n        return target[propKey]\n      }\n      return 20;\n    }\n  });\n  console.log(proxy.name) // wang\n  console.log(proxy.time) // 20\n```\n### FetchApi 和XHR(ajax,axios)的主要区别\n> 主要是请求方式的不同\n> XHR就是 `XMLHttpRequest` 的请求方式\n> FetchApi 类似 `function(){}.then().catch()`的模式，FetchAPI可以流式请求体的模式(下载大文件过程中显示数据流),更方便请求。\n### 实现一个盒子高度是宽度的一半(纯CSS)\npadding属性, padding 的百分比是根据盒子的宽度来决定的。\n  ```HTML\n   <style>\n    * {\n      padding: 0;\n      margin: 0;\n    }\n    .parent {\n      width: 1000px;\n      border: 1px solid red;\n    }\n\n    .child {\n      height: 0;\n      padding-bottom: 50%;\n      position: relative;\n    }\n\n    .content {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      background: pink;\n    }\n  </style>\n  <div class=\"parent\">\n    <div class=\"child\">\n      <div class=\"content\" />\n    </div>\n  </div>\n  ```\n\n### 不同浏览器标签页的通信\n\n### 线程与进程的区别\n**进程具有的特征：**\n  - 动态性：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态- 消亡的；\n  - 并发性：任何进程都可以同其他进行一起并发执行；\n  - 独立性：进程是系统进行资源分配和调度的一个独立单位；\n  - 结构性：进程由程序，数据和进程控制块三部分组成。\n**线程与进程的区别**\n  - 线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；\n  - 一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；\n  - 进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见；\n  - 调度和切换：线程上下文切换比进程上下文切换要快得多。\n  \n### 浏览器是如何工作的\n\n### 回流和重绘的区别\n浏览器在加载HTML的时候,会形成DOM树 和render树，DOM树含有HTML标签，包括`dispaly:none`的标签还有JS代码动态添加的元素。浏览器把CSS样式解析成结构体。DOM 树和结构体结合之后生成render树。所以render树每个节点都有自己的样式。render-tree中的元素的规模，尺寸，布局等发生改变时需要重建render树。称为回流。每个页面至少需要页面加载时这一个回流。完成回流之后，浏览器需要重新在屏幕上绘制受影响的部分。该过程称为重绘。\n如果render Tree中的部分元素更新只影响外观(如颜色)不会引起回流，只会发生重绘。<br/>\n**浏览器的优化：**显然回流的花销比重绘要高,回流的花销和 render tree 有多少节点有关。所以浏览器会维护一个队列。把所以会引起回流重绘的操作放入这个队列。当队列中的操作达到一定的数量。或者到了一定时间间隔。浏览器会进行一个批处理，把多次回流重绘变成一次回流重绘。\n**代码的优化：**把多次改变样式代码，多次添加删除元素等操作合并成一次操作。\n>[优质博客链接](http://blog.poetries.top/FE-Interview-Questions/improve/#_7-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98)\n### express和koa的区别\n在koa中,一切流程都是中间件。数据流向遵循洋葱模型。先入后出,也像递归模型。koa2中实现异步是通过async/awaite，koa1实现异步是通过generator/yield，而express实现异步是通过回调函数的方式。express内置了很多中间件。koa2基本没绑定其他框架。更容易定制化。扩展性好。express没有提供上下文机制。数据的控制需要自己手动实现。Koa依据洋葱模型实现数据的流入流出的功能。\n```JS\nconst Koa = require('koa')\nconst app = new Koa()\n\nconst mid1 = async (ctx, next) => {\n    ctx.body =  '前：' + '1\\n'\n    await next()\n    ctx.body =   ctx.body + '后：' + '1\\n'\n}\n\nconst mid2 = async (ctx, next) => {\n    ctx.body =    ctx.body + '前：'+ '2\\n'\n    await next()\n    ctx.body =    ctx.body + '后：'+ '2\\n'\n}\n\nconst mid3 = async (ctx, next) => {\n    ctx.body =  ctx.body + '前：'+  '3\\n'\n    await next()\n    ctx.body =   ctx.body + '后：'+ '3\\n'\n}\n\napp.use(mid1)\napp.use(mid2)\napp.use(mid3)\n\napp.listen(3000) \n// 前1 前2 前3\n// 后3 后2 后1\n```\n### koa的洋葱模型(koa中间件原理)\n初始化Koa实例后,用use方法来调用加载中间件。会有一个数组来存储中间件，use的调用顺序。决定了中间件的执行顺序。每一个中间件都是一个函数(如果不是会报错),接收两个参数,第一个ctx是上下文对象，另一个是next函数。项目启动后koa-componse模块对middleware中间件数组进行处理。会从middleware数组中取第一个函数开始执行,中间件函数调用next方法去执行下一个中间件函数(此时不代表当前中间件函数执行完毕了)，每个中间件函数执行完毕之后都会反回Promise对象。\n\n![洋葱模型图片](http://blogimage.lemonlife.top/202002132134_542.png?/)\n\n### mysql索引太多会有什么影响,索引种类\n\n(1) 空间：索引需要占用空间；\n\n(2) 时间：查询索引需要时间；\n\n(3) 维护：索引须要维护（数据变更时）；\n\n不建议使用索引的情况：\n\n(1) 数据量很小的表\n\n(2) 空间紧张有什么区别\n\n\n\n### 什么是SEO \n搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是：为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益；SEO包含站外SEO和站内SEO两方面；为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力。\n**搜索引擎优化：**\n  - 对网站的标题、关键字、描述精心设置，反映网站的定位，让搜索引擎明白网站是做什么的\n  - 网站内容优化：内容与关键字的对应，增加关键字的密度；\n  - 在网站上合理设置Robot.txt文件；\n**网页内部优化：**\n  - META标签优化：例如：TITLE，KEYWORDS，DESCRIPTION等的优化；\n  - title：只要强调重点即可，重要关键词出现不要超过2次，而且要靠前，每个页面的title要有所不同。\n  - description：把网页内容高度概括到这里，长度要合理，不可过分堆砌关键词，每个页面的description要有所不同。\n\n- keywords：列举几个重要的关键词即可，不可过分堆砌。\n>[转载自简书](https://www.jianshu.com/p/77d32ca7cb9d)\n\n### 实现BFS算法(广度优先遍历)\n\n### 实现观察者模式(发布订阅模式)\n### 手动实现Proxy\n\n```JS\nfunction clone(obj) {\n  if (Object.prototype.toString.call(obj) !== '[object Object]') return obj;\n  let newObj = new Object();\n  for (let key in obj) {\n    newObj[key] = clone(obj[key]);\n  }\n  return newObj;\n}\n\n//深度克隆当前对象\n//遍历当前对象所有属性\nfunction MyProxy(target, handle) {\n  let targetCopy = clone(target);\n\n  Object.keys(target).forEach(function (key) {\n    //Object.defineProperty 修改每一项的get set 方法 \n    Object.defineProperty(targetCopy, key, {\n      get: function () {\n        return handle.get && handle.get(target, key);\n      },\n      set: function (newVal) {\n        handle.set && handle.set(target, key, newVal);\n      }\n    });\n  });\n  return targetCopy;\n}\n\nlet myProxy = new MyProxy({ name: \"wmw\", son: { sonName: \"sonName\" } }, {\n  set: function () { console.log(\"set方法被拦截\") },\n  get: function () {\n    console.log('get方法被拦截')\n  }\n})\nmyProxy.name = 'xxx'\nmyProxy.year = \"2020\"\n```\n\n### Proxy 实现Vue数据双向绑定\n```html\n<body>\n  <div id=\"root\"></div>\n</body>\n<script>\n\n  let data = {\n    name: 'wmw',\n    age: 21\n  }\n  let el = document.getElementById('root')\n  let template = `\n    <div  >\n    姓名：{{name}}\n    <br/>\n    年龄：{{age}}\n    <br />\n    <input type=\"text\" v-model=\"name\"  id='input1'>\n    </div>\n  `\n  function renderHTML() {\n    let res = template.replace(/\\{\\{\\w+\\}\\}/g, key => {\n      key = key.slice(2, key.length - 2)\n      return data[key]\n    })\n    el.innerHTML = res\n  }\n  renderHTML()\n  function renderJS() {\n    Array.from(el.getElementsByTagName('input'))\n      .filter(ele => ele.getAttribute('v-model'))\n      .forEach(input => {\n        let key = input.getAttribute('v-model')\n        input.value = data[key]\n        input.onfocus = true\n        input.oninput = function () {\n          dataProxy[key] = this.value\n        }\n      })\n  }\n  renderJS()\n  let dataProxy = new Proxy(data, {\n    set(obj, name, value) {\n      // diff算法\n      obj[name] = value\n      renderHTML()\n      renderJS()\n    }\n  }) \n</script>\n```\n>[源码](https://github.com/ilovcoding/typescript-design-mode/blob/main/src/proxy/vue/index.html)\n\n### 单例模式/工厂模式\n```JS\nlet Person = (function () {\n  let instance = null\n  return class Person {\n    constructor() {\n      if (!instance) {\n        instance = this\n      } else {\n        return instance\n      }\n    }\n  }\n})()\n\nlet p1 = new Person()\nlet p2 = new Person()\nconsole.log(p1 == p2)\n```\n```JS\nlet Factory = (function () {\n  let s = {\n    Student(name, age) {\n      this.name = name\n      this.age = age\n      return this\n    },\n    Teacher(name, age) {\n      this.name = name\n      this.age = age\n      return this\n    }\n  }\n\n  return class {\n    constructor(type, name, age) {\n      if (s[type]) {\n        return s[type].call(this, name, age)\n      }\n    }\n  }\n})()\n\nlet stu = new Factory(\"Student\", '张三', 18)\nconsole.log(stu.name, stu.age) // 张三 18\n```\n\n### JS函数柯里化\n> Curry 把接受多个参数的函数，变成了接受一个单一参数(最初参数的第一个),并返回能正确运行的函数。\n```JS\nfunction add(x,y){\n  return x+y\n}\nfunction curryingAdd(x){\n  return function (y){\n    return x+y\n  }\n}\nadd(1,2)\ncurryingAdd(1)(2)\n```\n\n- 让参数能够复用，调用起来也更方便。\n```JS\nfunction check(reg,text){\n  return reg.text(text)\n}\ncheck(/\\d+/g,'test') // false\ncheck(/[a-z]+/g,'test') //true\n// Currying 后\nfunction curryingCheck(reg){\n  return function(txt){\n    return reg.test(txt)\n  }\n}\nvar hasNumber = curryingCheck(/\\d+/g)\nvar hasLetter = curryingCheck(/[a-z]+/g)\n\nhasNumber('test1') // true\nhasNumber('testtest') // false\nhasLetter('21212') // false\n```\n- 通用的柯理化函数  \n```JS\n/**\n * @param fn    待柯里化的原函数\n * @param len   所需的参数个数，默认为原函数的形参个数\n */\nfunction curry(fn,len = fn.length) {\n    return _curry.call(this,fn,len)\n}\n\n/**\n * @param fn    待柯里化的原函数\n * @param len   所需的参数个数\n * @param args  已接收的参数列表\n */\nfunction _curry(fn,len,...args1) {\n    return function (...args2) {\n      let _args = [...args1,...args2];\n      if(_args.length >= len){\n          return fn.apply(this,_args);\n      }else{\n          // 继续收集参数的过程\n          return _curry.call(this,fn,len,..._args)\n      }\n    }\n}\n\n```\n### 实现一个sum函数使得`sum(1,2,3).valueOf()`和`sum(1)(2)(3).valueOf()`执行输出的结果都等于6\n```JS\nfunction sum(a, ...args) {\n  return function (b = args[0]) {\n    return function (c = args[1]) {\n      return a + b + c\n    }\n  }\n}\nconsole.log(sum(1)(2)(3).valueOf()) //6 \nconsole.log(sum(1, 2, 3).valueOf()()()) //6\nfunction sum2(...args) {\n  if (args.length == 1) {\n    return function (b) {\n      return function (c) {\n        return args[0] + b + c\n      }\n    }\n  } else {\n    return args.reduce((a, b) => a + b)\n  }\n}\nconsole.log(sum2(1)(2)(3).valueOf()) //6\nconsole.log(sum2(1, 2, 3).valueOf()) // 6\n\n```\n\n### 手动实现对象深拷贝的方法\n> 面试我只想用ES5 的写法  \n```js\n// ES6的写法\nfunction merge(source) {\n  let obj = new Object()\n  for (const key of Reflect.ownKeys(source)) {\n    // Reflect.getOwnPropertyDescriptor(source,key)\n    //  获取对象的属性描述符  对象是否可写 等\n    Reflect.defineProperty(obj, key, Reflect.getOwnPropertyDescriptor(source, key))\n    if (Reflect.apply(Object.prototype.toString, source[key], []) === '[object Object]') {\n      Reflect.set(obj, key, merge(source[key]))\n    }\n  }\n  return obj\n}\n// ES5 的写法\nfunction clone(obj) {\n  if (Object.prototype.toString.call(obj) !== '[object Object]') return obj;\n  let newObj = new Object();\n  for (let key in obj) {\n    newObj[key] = clone(obj[key]);\n  }\n  return newObj;\n}\n\n```\n### 防抖节流\n- 防抖\n```js\nfunction debounce(fn, wait) {\n    var timeout = null;\n    return function() {\n        if(timeout !== null){\n          clearTimeout(timeout);\n        } \n        timeout = setTimeout(fn, wait);\n    }\n}\n// 处理函数\nfunction handle() {\n    console.log(Math.random()); \n}\n// 滚动事件\nwindow.addEventListener('scroll', debounce(handle, 1000));\n```\n- 节流\n```js\nvar throttle = function(func, delay) {\n var timer = null;\n var startTime = Date.now();\n return function() {\n     var curTime = Date.now();\n     var remaining = delay - (curTime - startTime);\n     var context = this;\n     var args = arguments;\n     clearTimeout(timer);\n      if (remaining <= 0) {\n        func.apply(context, args);\n        startTime = Date.now();\n      } else {\n        // 定时器解决，节流函数，最后一次需要被执行的问题\n        timer = setTimeout(func, remaining);\n      }\n  }\n}\nfunction handle() {\n  console.log(Math.random());\n}\nwindow.addEventListener('scroll', throttle(handle, 1000));\n```\n### 总结\n>面试需要 数据结构与算法，网络原理，底层知识，项目经验，设计模式，SQL语法\n>\n","slug":"interview","published":1,"updated":"2023-02-12T13:03:25.811Z","_id":"cl4ince6j000ucguf9fxbbgdl","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"合并两个链表\"><a class=\"markdownIt-Anchor\" href=\"#合并两个链表\"></a> 合并两个链表</h3>\n<blockquote>\n<p>具体解法见博客 <a href=\"http://lemonlife.top/2020/02/06/mergeListNode/\">合并两个排序的链表</a></p>\n</blockquote>\n<h3 id=\"链表反序输出不外申请内存空间\"><a class=\"markdownIt-Anchor\" href=\"#链表反序输出不外申请内存空间\"></a> 链表反序输出,不外申请内存空间</h3>\n<blockquote>\n<p>具体解法见博客 <a href=\"http://lemonlife.top/2020/02/10/reverse-linked-list/\">反转链表</a></p>\n</blockquote>\n<h3 id=\"010203吗为什么\"><a class=\"markdownIt-Anchor\" href=\"#010203吗为什么\"></a> 0.1+0.2===0.3吗?，为什么</h3>\n<blockquote>\n<p>在JS运行环境中 <code>0.1+0.2=0.30000000000000004</code><br />\n<code>(0.1).toString(2)=0.0001100110011001100110011001100110011001100110011001101</code>,小数在转换成二进制存储时容易造成无限循环的形式<br />\n解决办法: 可将小数转换成整数计算,如: <code>(0.1*10+0.2*10)/10</code></p>\n</blockquote>\n<h3 id=\"手动实现arrayreduce\"><a class=\"markdownIt-Anchor\" href=\"#手动实现arrayreduce\"></a> 手动实现Array.reduce()</h3>\n<p>数组先依次传给<code>a,b</code> 然后返回值给a,下一个值给b,依次迭代。直到数组结束。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = array.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum)  <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>手动实现如下</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">MyReduce</span> = <span class=\"keyword\">function</span> (<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">length</span> &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">params</span>(...<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"title function_\">params</span>(...<span class=\"variable language_\">this</span>), ...<span class=\"variable language_\">this</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>)].<span class=\"title class_\">MyReduce</span>(params)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = array.<span class=\"title class_\">MyReduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum) <span class=\"comment\">// 15</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> multiply = array.<span class=\"title class_\">MyReduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a * b)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(multiply) <span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"垂直居中的方法\"><a class=\"markdownIt-Anchor\" href=\"#垂直居中的方法\"></a> 垂直居中的方法</h3>\n<ol>\n<li><code>flex</code>布局 <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\"><span class=\"attribute\">flex-direction</span>: column;  </span><br><span class=\"line\"><span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\"><span class=\"attribute\">align-items</span>: center;</span><br></pre></td></tr></table></figure>\n</li>\n<li>使用 <code>display:-webkit-box</code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">-webkit-box-align: center;</span><br><span class=\"line\">-webkit-box-pack: center;</span><br></pre></td></tr></table></figure>\n</li>\n<li>通过 <code>display:table-cell</code>, 对子元素设置宽高会失效<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>: center;</span><br></pre></td></tr></table></figure>\n</li>\n<li>使用绝对定位和负边距,假设盒子本身宽高 <code>50px</code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">margin-left</span>:-<span class=\"number\">25px</span>;</span><br><span class=\"line\"><span class=\"attribute\">margin-top</span>:-<span class=\"number\">25px</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>使用transform:translate定位<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"><span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\"><span class=\"attribute\">transform</span>:<span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>,-<span class=\"number\">50%</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>针对文本可采用<code>line-height</code>来实现垂直居中,<code>text-align:center</code> 实现水平居中</li>\n</ol>\n<h3 id=\"跨域-jsonp原理-cors原理\"><a class=\"markdownIt-Anchor\" href=\"#跨域-jsonp原理-cors原理\"></a> 跨域、jsonp原理、CORS原理</h3>\n<p>跨域是浏览器的安全政策下的一种同源策略,同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。要求访问资源时要 <code>协议相同</code>、<code>域名相同</code> 、 <code>端口相同</code>。</p>\n<p><strong>解决不能跨域请求资源的办法</strong><br />\n<strong>JSONP:</strong> JSONP是利用浏览器对script的资源引用没有同源限制，通过动态插入一个script标签，当资源加载到页面后会立即执行的原理实现跨域的。JSONP是一种非正式传输协议，该协议的一个要点就是允许用户传递一个callback或者开始就定义一个回调方法，参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。JSONP只支持GET请求而不支持POST等其它类型的HTTP请求,它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题，JSONP的优势在于支持老式浏览器，弊端也比较明显：需要客户端和服务端定制进行开发，服务端返回的数据不能是标准的Json数据，而是callback包裹的数据。<br/><br />\n<strong>CORS</strong>:(IE10以下不支持)CORS是现代浏览器支持跨域资源请求的一种方式，全称是&quot;跨域资源共享&quot;（Cross-origin resource sharing），当使用XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给该请求加一个请求头：Origin，后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Allow-Origin;浏览器判断该相应头中是否包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含浏览器直接驳回，这时我们无法拿到响应数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;POST, GET, OPTIONS, DELETE,PATCH&quot;</span>);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>, <span class=\"string\">&quot;3600&quot;</span>);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;x-requested-with&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 是否支持cookie跨域</span></span><br><span class=\"line\">response.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_34150830/article/details/91438855\">CSDN答案</a></p>\n</blockquote>\n<h3 id=\"transform-transition-animation-区别\"><a class=\"markdownIt-Anchor\" href=\"#transform-transition-animation-区别\"></a> <code>transform</code> 、<code>transition</code> 、 <code>animation</code> 区别</h3>\n<blockquote>\n<p><code>transform</code> 、<code>transition</code> 都是写在对应元素CSS样式里面的。<code>animation</code> 通过(<code>@keyframes</code>) 绑定对应的clss选择器,来控制元素样式。<br />\n<code>transform</code>有<code>rotate|skew|scale|translate</code>(旋转|扭曲|缩放|移动)等属性<br />\n<code>transition</code> ,只是一个过渡 只能设置 ,样式初始值和结束值,包括一些简单的控制样式过渡的属性<br />\n<code>animation</code> 不改变元素的属性。动画结束后还原。有很多动画api,基本可以控制每一帧动画。例如可以控制 动画间隔，以及动画次数,甚至可以控制反向播放</p>\n</blockquote>\n<h3 id=\"介绍一下promise以及内部的实现\"><a class=\"markdownIt-Anchor\" href=\"#介绍一下promise以及内部的实现\"></a> 介绍一下Promise以及内部的实现。</h3>\n<blockquote>\n<p>Promise是为了解决Javascript回调嵌套过多而产生的。因为支持链式调用，而且书写更加方便，并纳入了ES2015规范中</p>\n</blockquote>\n<h4 id=\"promisea规范\"><a class=\"markdownIt-Anchor\" href=\"#promisea规范\"></a> Promise/A+规范</h4>\n<ul>\n<li>pendding 表示初始状态,可以转移到 <code>fullfilled</code> 或者 <code>rejected</code> 状态。</li>\n<li><code>fullfilled</code> 表示操作成功，状态不可转移。</li>\n<li><code>rejected</code> 表示操作失败，状态不可转移。</li>\n<li>必须有一个 <code>then</code> 异步执行方法，<code>then</code> 接收两个参数且必须返回一个 <code>promise</code>。</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202002161328_665.png?/\" alt=\"MDN上Promise状态图\" /></p>\n<h4 id=\"自己实现思路\"><a class=\"markdownIt-Anchor\" href=\"#自己实现思路\"></a> 自己实现思路</h4>\n<p>从上面描述可知，要实现Promise需要有</p>\n<ul>\n<li>status 当前的状态(<code>pending|fullfilled|rejected</code>)</li>\n<li>value <code>fullfilled</code>之后的返回值。</li>\n<li>reason <code>rejected</code>之后的原因</li>\n<li>fullfilledCallback <code>fillfulled</code>回调队列</li>\n<li>rejectedCallback <code>rejected</code> 回调队列</li>\n</ul>\n<p><strong>简单版本</strong></p>\n<blockquote>\n<p>这个代码来源 github 面试写出这个已经够了，下面那个复杂版本，我自己写着玩的。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RESOLVED</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyPromise</span>(<span class=\"params\">exec</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"variable constant_\">PENDING</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resolvedCallBacks</span> = []</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallBacks</span> = []</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (self.<span class=\"property\">state</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        self.<span class=\"property\">state</span> = <span class=\"variable constant_\">RESOLVED</span></span><br><span class=\"line\">        self.<span class=\"property\">value</span> = value</span><br><span class=\"line\">        self.<span class=\"property\">resolvedCallBacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">callback</span>(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (self.<span class=\"property\">state</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        self.<span class=\"property\">state</span> = <span class=\"variable constant_\">REJECTED</span></span><br><span class=\"line\">        self.<span class=\"property\">value</span> = reason</span><br><span class=\"line\">        self.<span class=\"property\">rejectedCallBacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">callback</span>(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">exec</span>(resolve, reject)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) &#123;</span><br><span class=\"line\">  onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">&#x27;function&#x27;</span> ? onResolved : <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">&#x27;function&#x27;</span> ? onRejected : <span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolvedCallBacks</span>.<span class=\"title function_\">push</span>(onResolved)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallBacks</span>.<span class=\"title function_\">push</span>(onRejected)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"variable constant_\">RESOLVED</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onResolved</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂版本</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pendiing&#x27;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"variable constant_\">RESOLVED</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; excutor 同步执行器函数 </span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">MyPromise</span>(<span class=\"params\">excutor</span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">callbacks</span> = []</span><br><span class=\"line\">   <span class=\"keyword\">let</span> _self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 状态 改成 resolve</span></span><br><span class=\"line\">     <span class=\"comment\">// 报错value 数据</span></span><br><span class=\"line\">     <span class=\"comment\">// 执行回调函数</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (_self.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     _self.<span class=\"property\">status</span> = <span class=\"variable constant_\">RESOLVED</span></span><br><span class=\"line\">     _self.<span class=\"property\">data</span> = value</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (_self.<span class=\"property\">callbacks</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         _self.<span class=\"property\">callbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">callbacksObj</span> =&gt;</span> &#123;</span><br><span class=\"line\">           callbacksObj.<span class=\"title function_\">onResolved</span>(value)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (_self.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     _self.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span></span><br><span class=\"line\">     _self.<span class=\"property\">data</span> = reason</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (_self.<span class=\"property\">callbacks</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         _self.<span class=\"property\">callbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">callbacksObj</span> =&gt;</span> &#123;</span><br><span class=\"line\">           callbacksObj.<span class=\"title function_\">onRejected</span>(value)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 如果执行器 抛出异常 promise 变成 reject状态</span></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">excutor</span>(resolve, reject)</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">     <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Promise 实例对象 then</span></span><br><span class=\"line\"><span class=\"comment\">  *  <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; onResolved 成功状态对的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">  *  <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; onRejected 失败状态的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">  *  <span class=\"doctag\">@return</span> 一个新的promise对象 </span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> _self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">   <span class=\"comment\">// 实现异常传递</span></span><br><span class=\"line\">   onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">&#x27;function&#x27;</span> ? onRejected : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;</span><br><span class=\"line\">   onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">&#x27;function&#x27;</span> ? onResolved : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 返回一个新的Promise对象</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@param</span> &#123;<span class=\"type\"></span>&#125; callback 调用指定的回调函数 </span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">const</span> result = <span class=\"title function_\">callback</span>(_self.<span class=\"property\">data</span>)</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">           result.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">         <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (_self.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">       _self.<span class=\"property\">callbacks</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">         onResolved,</span><br><span class=\"line\">         onRejected</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_self.<span class=\"property\">status</span> === <span class=\"variable constant_\">RESOLVED</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"title function_\">handle</span>(onResolved)</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"title function_\">handle</span>(onRejected)</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Promise 实例对象 catch</span></span><br><span class=\"line\"><span class=\"comment\">*  <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; onRejected 失败状态的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">*  <span class=\"doctag\">@return</span> 一个新的promise对象 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> <span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">catch</span> = <span class=\"keyword\">function</span> (<span class=\"params\">onRejected</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>, onRejected)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"js实现异步有哪些方法\"><a class=\"markdownIt-Anchor\" href=\"#js实现异步有哪些方法\"></a> JS实现异步有哪些方法</h3>\n<blockquote>\n<p>Javascript 的执行环境是单线程。就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。<br />\n**同步模式(Synchronous)：**程序的执行顺序与任务的排列顺序是一致的、同步的。<br />\n**异步模式(Asynchronous)：**每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。</p>\n</blockquote>\n<ul>\n<li>\n<p>回调函数的形式</p>\n<p>把耗时的模块。放入定时器中。将其子模块,已回调函数的形式写入。<a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\">阮老师博客</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设f1是耗时的操作，f2需要f1的结果。 </span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span>(<span class=\"params\">callback</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// f1的任务代码</span></span><br><span class=\"line\">    <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f1</span>(f2);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>事件监听<br />\n任务的执行顺序不取决于代码的执行顺序。而是取决于某个事件是否发生。<br />\n<code>f1.trigger('done')</code>表示，执行完成后，立即触发done事件，从而开始执行f2。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      　f1.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;done&#x27;</span>, f2);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    f1.<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;done&#x27;</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>发布订阅模式(观察者模式)<br />\n假设存在信号中心。某个任务完成时，向信号中心发布这个信号。其他订阅者，接收到信号之后。开始执行自己的函数<br />\n这种方法的性质与&quot;事件监听&quot;类似，但是明显优于后者。因为我们可以通过查看&quot;消息中心&quot;，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.<span class=\"title function_\">subscribe</span>(<span class=\"string\">&quot;done&quot;</span>, f2);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// f1任务代码</span></span><br><span class=\"line\">    jQuery.<span class=\"title function_\">publish</span>(<span class=\"string\">&quot;done&quot;</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jQuery.<span class=\"title function_\">unsubscribe</span>(<span class=\"string\">&quot;done&quot;</span>, f2);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>手动实现观察者模式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> queuedObservers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">observe</span> = fn =&gt; queuedObservers.<span class=\"title function_\">add</span>(fn);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">observable</span> = obj =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj, &#123;set&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">set</span>(<span class=\"params\">target, key, value, receiver</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Reflect对象的方法与Proxy对象的方法一一对应，</span></span><br><span class=\"line\"><span class=\"comment\">   * 只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。</span></span><br><span class=\"line\"><span class=\"comment\">   * 这就让Proxy对象可以方便地调用对应的Reflect方法，</span></span><br><span class=\"line\"><span class=\"comment\">   * 完成默认行为，作为修改行为的基础。</span></span><br><span class=\"line\"><span class=\"comment\">   * 也就是说，不管Proxy怎么修改默认行为，</span></span><br><span class=\"line\"><span class=\"comment\">   * 你总可以在Reflect上获取默认行为</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target,key,value,receiver) <span class=\"comment\">//&#123; name: &#x27;张三&#x27;, age: 20 &#125; &#x27;name&#x27; &#x27;李四&#x27; &#123; name: &#x27;张三&#x27;, age: 20 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">set</span>(target, key, value, receiver);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target,key,value,receiver) <span class=\"comment\">// &#123; name: &#x27;李四&#x27;, age: 20 &#125; &#x27;name&#x27; &#x27;李四&#x27; &#123; name: &#x27;李四&#x27;, age: 20 &#125;</span></span><br><span class=\"line\">  queuedObservers.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">observer</span> =&gt;</span> <span class=\"title function_\">observer</span>());</span><br><span class=\"line\">  <span class=\"comment\">// return result;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"title function_\">observable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;person.name&#125;</span>, <span class=\"subst\">$&#123;person.age&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">print2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`年龄是, <span class=\"subst\">$&#123;person.age&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">observe</span>(print);</span><br><span class=\"line\"><span class=\"title function_\">observe</span>(print2)</span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&#x27;李四&#x27;</span>; </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Promise 对象<br />\n它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：<code>f1.().then(f2)</code><br />\n这样写的优点在于，回调函数变成了链式写法，程序的流程可以看得很清楚。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 执行结果 1 2 5 3 4</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"symbol用法\"><a class=\"markdownIt-Anchor\" href=\"#symbol用法\"></a> Symbol用法</h3>\n<p>最新的ECMAScript 标准定义了8种数据类型,7种原始类型 <code>undefined</code> <code>null</code> <code>bollean</code> <code>number</code> <code>bigint</code> <code>string</code> <code>symbol</code> ,1种复杂数据类<code>object</code> 。<br/><br />\n如果面试官问，你可以反问一句，是基础数据类型，还是数据类型，基础数据类型7种，数据类型8种<br/></p>\n<p><img src=\"http://blogimage.lemonlife.top/202002212036_7.png?/\" alt=\"\" /></p>\n<p><strong>primitive的解释：</strong> In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods. There are 7 primitive data types: string, number, bigint, boolean, null, undefined, and symbol.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;info&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  [s1]: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;哈哈哈&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;TEST哈哈哈&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.<span class=\"title function_\">test</span>() <span class=\"comment\">// TEST哈哈哈</span></span><br><span class=\"line\">a[s1]() <span class=\"comment\">// 哈哈哈</span></span><br><span class=\"line\">a[<span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;info&#x27;</span>)] <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"proxy\"><a class=\"markdownIt-Anchor\" href=\"#proxy\"></a> Proxy</h3>\n<blockquote>\n<p>修改制定对象的一些默认方法。通过<code>new Proxy(params1,params2)</code> 创建Proxy对象。参数1是被代理的对象。参数2是被修改的默认方法。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wang&quot;</span> &#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\">target, propKey</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (propKey <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[propKey]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(proxy.<span class=\"property\">name</span>) <span class=\"comment\">// wang</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(proxy.<span class=\"property\">time</span>) <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"fetchapi-和xhrajaxaxios的主要区别\"><a class=\"markdownIt-Anchor\" href=\"#fetchapi-和xhrajaxaxios的主要区别\"></a> FetchApi 和XHR(ajax,axios)的主要区别</h3>\n<blockquote>\n<p>主要是请求方式的不同<br />\nXHR就是 <code>XMLHttpRequest</code> 的请求方式<br />\nFetchApi 类似 <code>function()&#123;&#125;.then().catch()</code>的模式，FetchAPI可以流式请求体的模式(下载大文件过程中显示数据流),更方便请求。</p>\n</blockquote>\n<h3 id=\"实现一个盒子高度是宽度的一半纯css\"><a class=\"markdownIt-Anchor\" href=\"#实现一个盒子高度是宽度的一半纯css\"></a> 实现一个盒子高度是宽度的一半(纯CSS)</h3>\n<p>padding属性, padding 的百分比是根据盒子的宽度来决定的。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">1000px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.content</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background</span>: pink;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"不同浏览器标签页的通信\"><a class=\"markdownIt-Anchor\" href=\"#不同浏览器标签页的通信\"></a> 不同浏览器标签页的通信</h3>\n<h3 id=\"线程与进程的区别\"><a class=\"markdownIt-Anchor\" href=\"#线程与进程的区别\"></a> 线程与进程的区别</h3>\n<p><strong>进程具有的特征：</strong></p>\n<ul>\n<li>动态性：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态- 消亡的；</li>\n<li>并发性：任何进程都可以同其他进行一起并发执行；</li>\n<li>独立性：进程是系统进行资源分配和调度的一个独立单位；</li>\n<li>结构性：进程由程序，数据和进程控制块三部分组成。<br />\n<strong>线程与进程的区别</strong></li>\n<li>线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；</li>\n<li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</li>\n<li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见；</li>\n<li>调度和切换：线程上下文切换比进程上下文切换要快得多。</li>\n</ul>\n<h3 id=\"浏览器是如何工作的\"><a class=\"markdownIt-Anchor\" href=\"#浏览器是如何工作的\"></a> 浏览器是如何工作的</h3>\n<h3 id=\"回流和重绘的区别\"><a class=\"markdownIt-Anchor\" href=\"#回流和重绘的区别\"></a> 回流和重绘的区别</h3>\n<p>浏览器在加载HTML的时候,会形成DOM树 和render树，DOM树含有HTML标签，包括<code>dispaly:none</code>的标签还有JS代码动态添加的元素。浏览器把CSS样式解析成结构体。DOM 树和结构体结合之后生成render树。所以render树每个节点都有自己的样式。render-tree中的元素的规模，尺寸，布局等发生改变时需要重建render树。称为回流。每个页面至少需要页面加载时这一个回流。完成回流之后，浏览器需要重新在屏幕上绘制受影响的部分。该过程称为重绘。<br />\n如果render Tree中的部分元素更新只影响外观(如颜色)不会引起回流，只会发生重绘。<br/><br />\n**浏览器的优化：**显然回流的花销比重绘要高,回流的花销和 render tree 有多少节点有关。所以浏览器会维护一个队列。把所以会引起回流重绘的操作放入这个队列。当队列中的操作达到一定的数量。或者到了一定时间间隔。浏览器会进行一个批处理，把多次回流重绘变成一次回流重绘。<br />\n**代码的优化：**把多次改变样式代码，多次添加删除元素等操作合并成一次操作。</p>\n<blockquote>\n<p><a href=\"http://blog.poetries.top/FE-Interview-Questions/improve/#_7-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98\">优质博客链接</a></p>\n</blockquote>\n<h3 id=\"express和koa的区别\"><a class=\"markdownIt-Anchor\" href=\"#express和koa的区别\"></a> express和koa的区别</h3>\n<p>在koa中,一切流程都是中间件。数据流向遵循洋葱模型。先入后出,也像递归模型。koa2中实现异步是通过async/awaite，koa1实现异步是通过generator/yield，而express实现异步是通过回调函数的方式。express内置了很多中间件。koa2基本没绑定其他框架。更容易定制化。扩展性好。express没有提供上下文机制。数据的控制需要自己手动实现。Koa依据洋葱模型实现数据的流入流出的功能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Koa</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;koa&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mid1</span> = <span class=\"keyword\">async</span> (<span class=\"params\">ctx, next</span>) =&gt; &#123;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =  <span class=\"string\">&#x27;前：&#x27;</span> + <span class=\"string\">&#x27;1\\n&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =   ctx.<span class=\"property\">body</span> + <span class=\"string\">&#x27;后：&#x27;</span> + <span class=\"string\">&#x27;1\\n&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mid2</span> = <span class=\"keyword\">async</span> (<span class=\"params\">ctx, next</span>) =&gt; &#123;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =    ctx.<span class=\"property\">body</span> + <span class=\"string\">&#x27;前：&#x27;</span>+ <span class=\"string\">&#x27;2\\n&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =    ctx.<span class=\"property\">body</span> + <span class=\"string\">&#x27;后：&#x27;</span>+ <span class=\"string\">&#x27;2\\n&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mid3</span> = <span class=\"keyword\">async</span> (<span class=\"params\">ctx, next</span>) =&gt; &#123;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =  ctx.<span class=\"property\">body</span> + <span class=\"string\">&#x27;前：&#x27;</span>+  <span class=\"string\">&#x27;3\\n&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =   ctx.<span class=\"property\">body</span> + <span class=\"string\">&#x27;后：&#x27;</span>+ <span class=\"string\">&#x27;3\\n&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(mid1)</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(mid2)</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(mid3)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>) </span><br><span class=\"line\"><span class=\"comment\">// 前1 前2 前3</span></span><br><span class=\"line\"><span class=\"comment\">// 后3 后2 后1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"koa的洋葱模型koa中间件原理\"><a class=\"markdownIt-Anchor\" href=\"#koa的洋葱模型koa中间件原理\"></a> koa的洋葱模型(koa中间件原理)</h3>\n<p>初始化Koa实例后,用use方法来调用加载中间件。会有一个数组来存储中间件，use的调用顺序。决定了中间件的执行顺序。每一个中间件都是一个函数(如果不是会报错),接收两个参数,第一个ctx是上下文对象，另一个是next函数。项目启动后koa-componse模块对middleware中间件数组进行处理。会从middleware数组中取第一个函数开始执行,中间件函数调用next方法去执行下一个中间件函数(此时不代表当前中间件函数执行完毕了)，每个中间件函数执行完毕之后都会反回Promise对象。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002132134_542.png?/\" alt=\"洋葱模型图片\" /></p>\n<h3 id=\"mysql索引太多会有什么影响索引种类\"><a class=\"markdownIt-Anchor\" href=\"#mysql索引太多会有什么影响索引种类\"></a> mysql索引太多会有什么影响,索引种类</h3>\n<p>(1) 空间：索引需要占用空间；</p>\n<p>(2) 时间：查询索引需要时间；</p>\n<p>(3) 维护：索引须要维护（数据变更时）；</p>\n<p>不建议使用索引的情况：</p>\n<p>(1) 数据量很小的表</p>\n<p>(2) 空间紧张有什么区别</p>\n<h3 id=\"什么是seo\"><a class=\"markdownIt-Anchor\" href=\"#什么是seo\"></a> 什么是SEO</h3>\n<p>搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是：为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益；SEO包含站外SEO和站内SEO两方面；为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力。<br />\n<strong>搜索引擎优化：</strong></p>\n<ul>\n<li>\n<p>对网站的标题、关键字、描述精心设置，反映网站的定位，让搜索引擎明白网站是做什么的</p>\n</li>\n<li>\n<p>网站内容优化：内容与关键字的对应，增加关键字的密度；</p>\n</li>\n<li>\n<p>在网站上合理设置Robot.txt文件；<br />\n<strong>网页内部优化：</strong></p>\n</li>\n<li>\n<p>META标签优化：例如：TITLE，KEYWORDS，DESCRIPTION等的优化；</p>\n</li>\n<li>\n<p>title：只要强调重点即可，重要关键词出现不要超过2次，而且要靠前，每个页面的title要有所不同。</p>\n</li>\n<li>\n<p>description：把网页内容高度概括到这里，长度要合理，不可过分堆砌关键词，每个页面的description要有所不同。</p>\n</li>\n<li>\n<p>keywords：列举几个重要的关键词即可，不可过分堆砌。</p>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/77d32ca7cb9d\">转载自简书</a></p>\n</blockquote>\n<h3 id=\"实现bfs算法广度优先遍历\"><a class=\"markdownIt-Anchor\" href=\"#实现bfs算法广度优先遍历\"></a> 实现BFS算法(广度优先遍历)</h3>\n<h3 id=\"实现观察者模式发布订阅模式\"><a class=\"markdownIt-Anchor\" href=\"#实现观察者模式发布订阅模式\"></a> 实现观察者模式(发布订阅模式)</h3>\n<h3 id=\"手动实现proxy\"><a class=\"markdownIt-Anchor\" href=\"#手动实现proxy\"></a> 手动实现Proxy</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj) !== <span class=\"string\">&#x27;[object Object]&#x27;</span>) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    newObj[key] = <span class=\"title function_\">clone</span>(obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//深度克隆当前对象</span></span><br><span class=\"line\"><span class=\"comment\">//遍历当前对象所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyProxy</span>(<span class=\"params\">target, handle</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> targetCopy = <span class=\"title function_\">clone</span>(target);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(target).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//Object.defineProperty 修改每一项的get set 方法 </span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(targetCopy, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handle.<span class=\"property\">get</span> &amp;&amp; handle.<span class=\"title function_\">get</span>(target, key);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">        handle.<span class=\"property\">set</span> &amp;&amp; handle.<span class=\"title function_\">set</span>(target, key, newVal);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> targetCopy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myProxy = <span class=\"keyword\">new</span> <span class=\"title class_\">MyProxy</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wmw&quot;</span>, <span class=\"attr\">son</span>: &#123; <span class=\"attr\">sonName</span>: <span class=\"string\">&quot;sonName&quot;</span> &#125; &#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;set方法被拦截&quot;</span>) &#125;,</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;get方法被拦截&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">myProxy.<span class=\"property\">name</span> = <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">myProxy.<span class=\"property\">year</span> = <span class=\"string\">&quot;2020&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"proxy-实现vue数据双向绑定\"><a class=\"markdownIt-Anchor\" href=\"#proxy-实现vue数据双向绑定\"></a> Proxy 实现Vue数据双向绑定</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> data = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;wmw&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">age</span>: <span class=\"number\">21</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> template = <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    &lt;div  &gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    姓名：&#123;&#123;name&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    &lt;br/&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    年龄：&#123;&#123;age&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    &lt;br /&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    &lt;input type=&quot;text&quot; v-model=&quot;name&quot;  id=&#x27;input1&#x27;&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">  `</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">renderHTML</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> res = template.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\&#123;\\&#123;\\w+\\&#125;\\&#125;/g</span>, <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      key = key.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>, key.<span class=\"property\">length</span> - <span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> data[key]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    el.<span class=\"property\">innerHTML</span> = res</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">renderHTML</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">renderJS</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(el.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;input&#x27;</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">      .<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> ele.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;v-model&#x27;</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">      .<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">input</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> key = input.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;v-model&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        input.<span class=\"property\">value</span> = data[key]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        input.<span class=\"property\">onfocus</span> = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        input.<span class=\"property\">oninput</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          dataProxy[key] = <span class=\"variable language_\">this</span>.<span class=\"property\">value</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">renderJS</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> dataProxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(data, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">set</span>(<span class=\"params\">obj, name, value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// diff算法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      obj[name] = value</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">renderHTML</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">renderJS</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;) </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://github.com/ilovcoding/typescript-design-mode/blob/main/src/proxy/vue/index.html\">源码</a></p>\n</blockquote>\n<h3 id=\"单例模式工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#单例模式工厂模式\"></a> 单例模式/工厂模式</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Person</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> instance = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">        instance = <span class=\"variable language_\">this</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1 == p2)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Factory</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Student</span>(name, age) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title class_\">Teacher</span>(name, age) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">type, name, age</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s[type]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s[type].<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name, age)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stu = <span class=\"keyword\">new</span> <span class=\"title class_\">Factory</span>(<span class=\"string\">&quot;Student&quot;</span>, <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stu.<span class=\"property\">name</span>, stu.<span class=\"property\">age</span>) <span class=\"comment\">// 张三 18</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"js函数柯里化\"><a class=\"markdownIt-Anchor\" href=\"#js函数柯里化\"></a> JS函数柯里化</h3>\n<blockquote>\n<p>Curry 把接受多个参数的函数，变成了接受一个单一参数(最初参数的第一个),并返回能正确运行的函数。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x,y</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curryingAdd</span>(<span class=\"params\">x</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">y</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"title function_\">curryingAdd</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>让参数能够复用，调用起来也更方便。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">check</span>(<span class=\"params\">reg,text</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.<span class=\"title function_\">text</span>(text)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">check</span>(<span class=\"regexp\">/\\d+/g</span>,<span class=\"string\">&#x27;test&#x27;</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title function_\">check</span>(<span class=\"regexp\">/[a-z]+/g</span>,<span class=\"string\">&#x27;test&#x27;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">// Currying 后</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curryingCheck</span>(<span class=\"params\">reg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">txt</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.<span class=\"title function_\">test</span>(txt)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hasNumber = <span class=\"title function_\">curryingCheck</span>(<span class=\"regexp\">/\\d+/g</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> hasLetter = <span class=\"title function_\">curryingCheck</span>(<span class=\"regexp\">/[a-z]+/g</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">hasNumber</span>(<span class=\"string\">&#x27;test1&#x27;</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title function_\">hasNumber</span>(<span class=\"string\">&#x27;testtest&#x27;</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title function_\">hasLetter</span>(<span class=\"string\">&#x27;21212&#x27;</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>通用的柯理化函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> fn    待柯里化的原函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> len   所需的参数个数，默认为原函数的形参个数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn,len = fn.length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _curry.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,fn,len)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> fn    待柯里化的原函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> len   所需的参数个数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> args  已接收的参数列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_curry</span>(<span class=\"params\">fn,len,...args1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _args = [...args1,...args2];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(_args.<span class=\"property\">length</span> &gt;= len)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>,_args);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 继续收集参数的过程</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> _curry.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,fn,len,..._args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"实现一个sum函数使得sum123valueof和sum123valueof执行输出的结果都等于6\"><a class=\"markdownIt-Anchor\" href=\"#实现一个sum函数使得sum123valueof和sum123valueof执行输出的结果都等于6\"></a> 实现一个sum函数使得<code>sum(1,2,3).valueOf()</code>和<code>sum(1)(2)(3).valueOf()</code>执行输出的结果都等于6</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">b = args[<span class=\"number\">0</span>]</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">c = args[<span class=\"number\">1</span>]</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a + b + c</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>).<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">//6 </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).<span class=\"title function_\">valueOf</span>()()()) <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum2</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">b</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> args[<span class=\"number\">0</span>] + b + c</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum2</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>).<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum2</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// 6</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"手动实现对象深拷贝的方法\"><a class=\"markdownIt-Anchor\" href=\"#手动实现对象深拷贝的方法\"></a> 手动实现对象深拷贝的方法</h3>\n<blockquote>\n<p>面试我只想用ES5 的写法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">merge</span>(<span class=\"params\">source</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(source)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Reflect.getOwnPropertyDescriptor(source,key)</span></span><br><span class=\"line\">    <span class=\"comment\">//  获取对象的属性描述符  对象是否可写 等</span></span><br><span class=\"line\">    <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">defineProperty</span>(obj, key, <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(source, key))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Reflect</span>.<span class=\"title function_\">apply</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>, source[key], []) === <span class=\"string\">&#x27;[object Object]&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">set</span>(obj, key, <span class=\"title function_\">merge</span>(source[key]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ES5 的写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj) !== <span class=\"string\">&#x27;[object Object]&#x27;</span>) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    newObj[key] = <span class=\"title function_\">clone</span>(obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"防抖节流\"><a class=\"markdownIt-Anchor\" href=\"#防抖节流\"></a> 防抖节流</h3>\n<ul>\n<li>防抖</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timeout !== <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">          <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(fn, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 滚动事件</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"title function_\">debounce</span>(handle, <span class=\"number\">1000</span>));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>节流</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"keyword\">function</span>(<span class=\"params\">func, delay</span>) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> startTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> curTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">     <span class=\"keyword\">var</span> remaining = delay - (curTime - startTime);</span><br><span class=\"line\">     <span class=\"keyword\">var</span> context = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">     <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        func.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        startTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定时器解决，节流函数，最后一次需要被执行的问题</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(func, remaining);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"title function_\">throttle</span>(handle, <span class=\"number\">1000</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n<blockquote>\n<p>面试需要 数据结构与算法，网络原理，底层知识，项目经验，设计模式，SQL语法</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"合并两个链表\"><a class=\"markdownIt-Anchor\" href=\"#合并两个链表\"></a> 合并两个链表</h3>\n<blockquote>\n<p>具体解法见博客 <a href=\"http://lemonlife.top/2020/02/06/mergeListNode/\">合并两个排序的链表</a></p>\n</blockquote>\n<h3 id=\"链表反序输出不外申请内存空间\"><a class=\"markdownIt-Anchor\" href=\"#链表反序输出不外申请内存空间\"></a> 链表反序输出,不外申请内存空间</h3>\n<blockquote>\n<p>具体解法见博客 <a href=\"http://lemonlife.top/2020/02/10/reverse-linked-list/\">反转链表</a></p>\n</blockquote>\n<h3 id=\"010203吗为什么\"><a class=\"markdownIt-Anchor\" href=\"#010203吗为什么\"></a> 0.1+0.2===0.3吗?，为什么</h3>\n<blockquote>\n<p>在JS运行环境中 <code>0.1+0.2=0.30000000000000004</code><br />\n<code>(0.1).toString(2)=0.0001100110011001100110011001100110011001100110011001101</code>,小数在转换成二进制存储时容易造成无限循环的形式<br />\n解决办法: 可将小数转换成整数计算,如: <code>(0.1*10+0.2*10)/10</code></p>\n</blockquote>\n<h3 id=\"手动实现arrayreduce\"><a class=\"markdownIt-Anchor\" href=\"#手动实现arrayreduce\"></a> 手动实现Array.reduce()</h3>\n<p>数组先依次传给<code>a,b</code> 然后返回值给a,下一个值给b,依次迭代。直到数组结束。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = array.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum)  <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>手动实现如下</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">MyReduce</span> = <span class=\"keyword\">function</span> (<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">length</span> &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">params</span>(...<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"title function_\">params</span>(...<span class=\"variable language_\">this</span>), ...<span class=\"variable language_\">this</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>)].<span class=\"title class_\">MyReduce</span>(params)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = array.<span class=\"title class_\">MyReduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum) <span class=\"comment\">// 15</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> multiply = array.<span class=\"title class_\">MyReduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a * b)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(multiply) <span class=\"comment\">// 120</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"垂直居中的方法\"><a class=\"markdownIt-Anchor\" href=\"#垂直居中的方法\"></a> 垂直居中的方法</h3>\n<ol>\n<li><code>flex</code>布局 <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\"><span class=\"attribute\">flex-direction</span>: column;  </span><br><span class=\"line\"><span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\"><span class=\"attribute\">align-items</span>: center;</span><br></pre></td></tr></table></figure>\n</li>\n<li>使用 <code>display:-webkit-box</code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">-webkit-box-align: center;</span><br><span class=\"line\">-webkit-box-pack: center;</span><br></pre></td></tr></table></figure>\n</li>\n<li>通过 <code>display:table-cell</code>, 对子元素设置宽高会失效<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\"><span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\"><span class=\"attribute\">text-align</span>: center;</span><br></pre></td></tr></table></figure>\n</li>\n<li>使用绝对定位和负边距,假设盒子本身宽高 <code>50px</code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">margin-left</span>:-<span class=\"number\">25px</span>;</span><br><span class=\"line\"><span class=\"attribute\">margin-top</span>:-<span class=\"number\">25px</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>使用transform:translate定位<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"><span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\"><span class=\"attribute\">transform</span>:<span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>,-<span class=\"number\">50%</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>针对文本可采用<code>line-height</code>来实现垂直居中,<code>text-align:center</code> 实现水平居中</li>\n</ol>\n<h3 id=\"跨域-jsonp原理-cors原理\"><a class=\"markdownIt-Anchor\" href=\"#跨域-jsonp原理-cors原理\"></a> 跨域、jsonp原理、CORS原理</h3>\n<p>跨域是浏览器的安全政策下的一种同源策略,同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。要求访问资源时要 <code>协议相同</code>、<code>域名相同</code> 、 <code>端口相同</code>。</p>\n<p><strong>解决不能跨域请求资源的办法</strong><br />\n<strong>JSONP:</strong> JSONP是利用浏览器对script的资源引用没有同源限制，通过动态插入一个script标签，当资源加载到页面后会立即执行的原理实现跨域的。JSONP是一种非正式传输协议，该协议的一个要点就是允许用户传递一个callback或者开始就定义一个回调方法，参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。JSONP只支持GET请求而不支持POST等其它类型的HTTP请求,它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题，JSONP的优势在于支持老式浏览器，弊端也比较明显：需要客户端和服务端定制进行开发，服务端返回的数据不能是标准的Json数据，而是callback包裹的数据。<br/><br />\n<strong>CORS</strong>:(IE10以下不支持)CORS是现代浏览器支持跨域资源请求的一种方式，全称是&quot;跨域资源共享&quot;（Cross-origin resource sharing），当使用XMLHttpRequest发送请求时，浏览器发现该请求不符合同源策略，会给该请求加一个请求头：Origin，后台进行一系列处理，如果确定接受请求则在返回结果中加入一个响应头：Access-Control-Allow-Origin;浏览器判断该相应头中是否包含Origin的值，如果有则浏览器会处理响应，我们就可以拿到响应数据，如果不包含浏览器直接驳回，这时我们无法拿到响应数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;POST, GET, OPTIONS, DELETE,PATCH&quot;</span>);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>, <span class=\"string\">&quot;3600&quot;</span>);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;x-requested-with&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 是否支持cookie跨域</span></span><br><span class=\"line\">response.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_34150830/article/details/91438855\">CSDN答案</a></p>\n</blockquote>\n<h3 id=\"transform-transition-animation-区别\"><a class=\"markdownIt-Anchor\" href=\"#transform-transition-animation-区别\"></a> <code>transform</code> 、<code>transition</code> 、 <code>animation</code> 区别</h3>\n<blockquote>\n<p><code>transform</code> 、<code>transition</code> 都是写在对应元素CSS样式里面的。<code>animation</code> 通过(<code>@keyframes</code>) 绑定对应的clss选择器,来控制元素样式。<br />\n<code>transform</code>有<code>rotate|skew|scale|translate</code>(旋转|扭曲|缩放|移动)等属性<br />\n<code>transition</code> ,只是一个过渡 只能设置 ,样式初始值和结束值,包括一些简单的控制样式过渡的属性<br />\n<code>animation</code> 不改变元素的属性。动画结束后还原。有很多动画api,基本可以控制每一帧动画。例如可以控制 动画间隔，以及动画次数,甚至可以控制反向播放</p>\n</blockquote>\n<h3 id=\"介绍一下promise以及内部的实现\"><a class=\"markdownIt-Anchor\" href=\"#介绍一下promise以及内部的实现\"></a> 介绍一下Promise以及内部的实现。</h3>\n<blockquote>\n<p>Promise是为了解决Javascript回调嵌套过多而产生的。因为支持链式调用，而且书写更加方便，并纳入了ES2015规范中</p>\n</blockquote>\n<h4 id=\"promisea规范\"><a class=\"markdownIt-Anchor\" href=\"#promisea规范\"></a> Promise/A+规范</h4>\n<ul>\n<li>pendding 表示初始状态,可以转移到 <code>fullfilled</code> 或者 <code>rejected</code> 状态。</li>\n<li><code>fullfilled</code> 表示操作成功，状态不可转移。</li>\n<li><code>rejected</code> 表示操作失败，状态不可转移。</li>\n<li>必须有一个 <code>then</code> 异步执行方法，<code>then</code> 接收两个参数且必须返回一个 <code>promise</code>。</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202002161328_665.png?/\" alt=\"MDN上Promise状态图\" /></p>\n<h4 id=\"自己实现思路\"><a class=\"markdownIt-Anchor\" href=\"#自己实现思路\"></a> 自己实现思路</h4>\n<p>从上面描述可知，要实现Promise需要有</p>\n<ul>\n<li>status 当前的状态(<code>pending|fullfilled|rejected</code>)</li>\n<li>value <code>fullfilled</code>之后的返回值。</li>\n<li>reason <code>rejected</code>之后的原因</li>\n<li>fullfilledCallback <code>fillfulled</code>回调队列</li>\n<li>rejectedCallback <code>rejected</code> 回调队列</li>\n</ul>\n<p><strong>简单版本</strong></p>\n<blockquote>\n<p>这个代码来源 github 面试写出这个已经够了，下面那个复杂版本，我自己写着玩的。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RESOLVED</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyPromise</span>(<span class=\"params\">exec</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"variable constant_\">PENDING</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">resolvedCallBacks</span> = []</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallBacks</span> = []</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (self.<span class=\"property\">state</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        self.<span class=\"property\">state</span> = <span class=\"variable constant_\">RESOLVED</span></span><br><span class=\"line\">        self.<span class=\"property\">value</span> = value</span><br><span class=\"line\">        self.<span class=\"property\">resolvedCallBacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">callback</span>(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (self.<span class=\"property\">state</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        self.<span class=\"property\">state</span> = <span class=\"variable constant_\">REJECTED</span></span><br><span class=\"line\">        self.<span class=\"property\">value</span> = reason</span><br><span class=\"line\">        self.<span class=\"property\">rejectedCallBacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">callback</span>(value)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">exec</span>(resolve, reject)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) &#123;</span><br><span class=\"line\">  onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">&#x27;function&#x27;</span> ? onResolved : <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">&#x27;function&#x27;</span> ? onRejected : <span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> reason</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolvedCallBacks</span>.<span class=\"title function_\">push</span>(onResolved)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallBacks</span>.<span class=\"title function_\">push</span>(onRejected)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"variable constant_\">RESOLVED</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onResolved</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂版本</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pendiing&#x27;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"variable constant_\">RESOLVED</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; excutor 同步执行器函数 </span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">MyPromise</span>(<span class=\"params\">excutor</span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">status</span> = <span class=\"variable constant_\">PENDING</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">callbacks</span> = []</span><br><span class=\"line\">   <span class=\"keyword\">let</span> _self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 状态 改成 resolve</span></span><br><span class=\"line\">     <span class=\"comment\">// 报错value 数据</span></span><br><span class=\"line\">     <span class=\"comment\">// 执行回调函数</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (_self.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     _self.<span class=\"property\">status</span> = <span class=\"variable constant_\">RESOLVED</span></span><br><span class=\"line\">     _self.<span class=\"property\">data</span> = value</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (_self.<span class=\"property\">callbacks</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         _self.<span class=\"property\">callbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">callbacksObj</span> =&gt;</span> &#123;</span><br><span class=\"line\">           callbacksObj.<span class=\"title function_\">onResolved</span>(value)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">reject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (_self.<span class=\"property\">status</span> !== <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     _self.<span class=\"property\">status</span> = <span class=\"variable constant_\">REJECTED</span></span><br><span class=\"line\">     _self.<span class=\"property\">data</span> = reason</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (_self.<span class=\"property\">callbacks</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         _self.<span class=\"property\">callbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">callbacksObj</span> =&gt;</span> &#123;</span><br><span class=\"line\">           callbacksObj.<span class=\"title function_\">onRejected</span>(value)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 如果执行器 抛出异常 promise 变成 reject状态</span></span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">     <span class=\"title function_\">excutor</span>(resolve, reject)</span><br><span class=\"line\">   &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">     <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Promise 实例对象 then</span></span><br><span class=\"line\"><span class=\"comment\">  *  <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; onResolved 成功状态对的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">  *  <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; onRejected 失败状态的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">  *  <span class=\"doctag\">@return</span> 一个新的promise对象 </span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> _self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">   <span class=\"comment\">// 实现异常传递</span></span><br><span class=\"line\">   onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">&#x27;function&#x27;</span> ? onRejected : <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> reason &#125;</span><br><span class=\"line\">   onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">&#x27;function&#x27;</span> ? onResolved : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 返回一个新的Promise对象</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@param</span> &#123;<span class=\"type\"></span>&#125; callback 调用指定的回调函数 </span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">const</span> result = <span class=\"title function_\">callback</span>(_self.<span class=\"property\">data</span>)</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">           result.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"title function_\">resolve</span>(result)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">         <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (_self.<span class=\"property\">status</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">       _self.<span class=\"property\">callbacks</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">         onResolved,</span><br><span class=\"line\">         onRejected</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_self.<span class=\"property\">status</span> === <span class=\"variable constant_\">RESOLVED</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"title function_\">handle</span>(onResolved)</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"title function_\">handle</span>(onRejected)</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Promise 实例对象 catch</span></span><br><span class=\"line\"><span class=\"comment\">*  <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; onRejected 失败状态的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">*  <span class=\"doctag\">@return</span> 一个新的promise对象 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> <span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">catch</span> = <span class=\"keyword\">function</span> (<span class=\"params\">onRejected</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(<span class=\"literal\">null</span>, onRejected)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"js实现异步有哪些方法\"><a class=\"markdownIt-Anchor\" href=\"#js实现异步有哪些方法\"></a> JS实现异步有哪些方法</h3>\n<blockquote>\n<p>Javascript 的执行环境是单线程。就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。<br />\n**同步模式(Synchronous)：**程序的执行顺序与任务的排列顺序是一致的、同步的。<br />\n**异步模式(Asynchronous)：**每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。</p>\n</blockquote>\n<ul>\n<li>\n<p>回调函数的形式</p>\n<p>把耗时的模块。放入定时器中。将其子模块,已回调函数的形式写入。<a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\">阮老师博客</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设f1是耗时的操作，f2需要f1的结果。 </span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span>(<span class=\"params\">callback</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// f1的任务代码</span></span><br><span class=\"line\">    <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f1</span>(f2);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>事件监听<br />\n任务的执行顺序不取决于代码的执行顺序。而是取决于某个事件是否发生。<br />\n<code>f1.trigger('done')</code>表示，执行完成后，立即触发done事件，从而开始执行f2。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      　f1.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;done&#x27;</span>, f2);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    f1.<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;done&#x27;</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>发布订阅模式(观察者模式)<br />\n假设存在信号中心。某个任务完成时，向信号中心发布这个信号。其他订阅者，接收到信号之后。开始执行自己的函数<br />\n这种方法的性质与&quot;事件监听&quot;类似，但是明显优于后者。因为我们可以通过查看&quot;消息中心&quot;，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.<span class=\"title function_\">subscribe</span>(<span class=\"string\">&quot;done&quot;</span>, f2);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// f1任务代码</span></span><br><span class=\"line\">    jQuery.<span class=\"title function_\">publish</span>(<span class=\"string\">&quot;done&quot;</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jQuery.<span class=\"title function_\">unsubscribe</span>(<span class=\"string\">&quot;done&quot;</span>, f2);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>手动实现观察者模式</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> queuedObservers = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">observe</span> = fn =&gt; queuedObservers.<span class=\"title function_\">add</span>(fn);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">observable</span> = obj =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj, &#123;set&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">set</span>(<span class=\"params\">target, key, value, receiver</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Reflect对象的方法与Proxy对象的方法一一对应，</span></span><br><span class=\"line\"><span class=\"comment\">   * 只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。</span></span><br><span class=\"line\"><span class=\"comment\">   * 这就让Proxy对象可以方便地调用对应的Reflect方法，</span></span><br><span class=\"line\"><span class=\"comment\">   * 完成默认行为，作为修改行为的基础。</span></span><br><span class=\"line\"><span class=\"comment\">   * 也就是说，不管Proxy怎么修改默认行为，</span></span><br><span class=\"line\"><span class=\"comment\">   * 你总可以在Reflect上获取默认行为</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target,key,value,receiver) <span class=\"comment\">//&#123; name: &#x27;张三&#x27;, age: 20 &#125; &#x27;name&#x27; &#x27;李四&#x27; &#123; name: &#x27;张三&#x27;, age: 20 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">set</span>(target, key, value, receiver);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(target,key,value,receiver) <span class=\"comment\">// &#123; name: &#x27;李四&#x27;, age: 20 &#125; &#x27;name&#x27; &#x27;李四&#x27; &#123; name: &#x27;李四&#x27;, age: 20 &#125;</span></span><br><span class=\"line\">  queuedObservers.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">observer</span> =&gt;</span> <span class=\"title function_\">observer</span>());</span><br><span class=\"line\">  <span class=\"comment\">// return result;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"title function_\">observable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;person.name&#125;</span>, <span class=\"subst\">$&#123;person.age&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">print2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`年龄是, <span class=\"subst\">$&#123;person.age&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">observe</span>(print);</span><br><span class=\"line\"><span class=\"title function_\">observe</span>(print2)</span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&#x27;李四&#x27;</span>; </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Promise 对象<br />\n它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：<code>f1.().then(f2)</code><br />\n这样写的优点在于，回调函数变成了链式写法，程序的流程可以看得很清楚。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 执行结果 1 2 5 3 4</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"symbol用法\"><a class=\"markdownIt-Anchor\" href=\"#symbol用法\"></a> Symbol用法</h3>\n<p>最新的ECMAScript 标准定义了8种数据类型,7种原始类型 <code>undefined</code> <code>null</code> <code>bollean</code> <code>number</code> <code>bigint</code> <code>string</code> <code>symbol</code> ,1种复杂数据类<code>object</code> 。<br/><br />\n如果面试官问，你可以反问一句，是基础数据类型，还是数据类型，基础数据类型7种，数据类型8种<br/></p>\n<p><img src=\"http://blogimage.lemonlife.top/202002212036_7.png?/\" alt=\"\" /></p>\n<p><strong>primitive的解释：</strong> In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods. There are 7 primitive data types: string, number, bigint, boolean, null, undefined, and symbol.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;info&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  [s1]: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;哈哈哈&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;TEST哈哈哈&quot;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.<span class=\"title function_\">test</span>() <span class=\"comment\">// TEST哈哈哈</span></span><br><span class=\"line\">a[s1]() <span class=\"comment\">// 哈哈哈</span></span><br><span class=\"line\">a[<span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;info&#x27;</span>)] <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"proxy\"><a class=\"markdownIt-Anchor\" href=\"#proxy\"></a> Proxy</h3>\n<blockquote>\n<p>修改制定对象的一些默认方法。通过<code>new Proxy(params1,params2)</code> 创建Proxy对象。参数1是被代理的对象。参数2是被修改的默认方法。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wang&quot;</span> &#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\">target, propKey</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (propKey <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[propKey]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(proxy.<span class=\"property\">name</span>) <span class=\"comment\">// wang</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(proxy.<span class=\"property\">time</span>) <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"fetchapi-和xhrajaxaxios的主要区别\"><a class=\"markdownIt-Anchor\" href=\"#fetchapi-和xhrajaxaxios的主要区别\"></a> FetchApi 和XHR(ajax,axios)的主要区别</h3>\n<blockquote>\n<p>主要是请求方式的不同<br />\nXHR就是 <code>XMLHttpRequest</code> 的请求方式<br />\nFetchApi 类似 <code>function()&#123;&#125;.then().catch()</code>的模式，FetchAPI可以流式请求体的模式(下载大文件过程中显示数据流),更方便请求。</p>\n</blockquote>\n<h3 id=\"实现一个盒子高度是宽度的一半纯css\"><a class=\"markdownIt-Anchor\" href=\"#实现一个盒子高度是宽度的一半纯css\"></a> 实现一个盒子高度是宽度的一半(纯CSS)</h3>\n<p>padding属性, padding 的百分比是根据盒子的宽度来决定的。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  * &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.parent</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">1000px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.child</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.content</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background</span>: pink;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"不同浏览器标签页的通信\"><a class=\"markdownIt-Anchor\" href=\"#不同浏览器标签页的通信\"></a> 不同浏览器标签页的通信</h3>\n<h3 id=\"线程与进程的区别\"><a class=\"markdownIt-Anchor\" href=\"#线程与进程的区别\"></a> 线程与进程的区别</h3>\n<p><strong>进程具有的特征：</strong></p>\n<ul>\n<li>动态性：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态- 消亡的；</li>\n<li>并发性：任何进程都可以同其他进行一起并发执行；</li>\n<li>独立性：进程是系统进行资源分配和调度的一个独立单位；</li>\n<li>结构性：进程由程序，数据和进程控制块三部分组成。<br />\n<strong>线程与进程的区别</strong></li>\n<li>线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；</li>\n<li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</li>\n<li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见；</li>\n<li>调度和切换：线程上下文切换比进程上下文切换要快得多。</li>\n</ul>\n<h3 id=\"浏览器是如何工作的\"><a class=\"markdownIt-Anchor\" href=\"#浏览器是如何工作的\"></a> 浏览器是如何工作的</h3>\n<h3 id=\"回流和重绘的区别\"><a class=\"markdownIt-Anchor\" href=\"#回流和重绘的区别\"></a> 回流和重绘的区别</h3>\n<p>浏览器在加载HTML的时候,会形成DOM树 和render树，DOM树含有HTML标签，包括<code>dispaly:none</code>的标签还有JS代码动态添加的元素。浏览器把CSS样式解析成结构体。DOM 树和结构体结合之后生成render树。所以render树每个节点都有自己的样式。render-tree中的元素的规模，尺寸，布局等发生改变时需要重建render树。称为回流。每个页面至少需要页面加载时这一个回流。完成回流之后，浏览器需要重新在屏幕上绘制受影响的部分。该过程称为重绘。<br />\n如果render Tree中的部分元素更新只影响外观(如颜色)不会引起回流，只会发生重绘。<br/><br />\n**浏览器的优化：**显然回流的花销比重绘要高,回流的花销和 render tree 有多少节点有关。所以浏览器会维护一个队列。把所以会引起回流重绘的操作放入这个队列。当队列中的操作达到一定的数量。或者到了一定时间间隔。浏览器会进行一个批处理，把多次回流重绘变成一次回流重绘。<br />\n**代码的优化：**把多次改变样式代码，多次添加删除元素等操作合并成一次操作。</p>\n<blockquote>\n<p><a href=\"http://blog.poetries.top/FE-Interview-Questions/improve/#_7-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98\">优质博客链接</a></p>\n</blockquote>\n<h3 id=\"express和koa的区别\"><a class=\"markdownIt-Anchor\" href=\"#express和koa的区别\"></a> express和koa的区别</h3>\n<p>在koa中,一切流程都是中间件。数据流向遵循洋葱模型。先入后出,也像递归模型。koa2中实现异步是通过async/awaite，koa1实现异步是通过generator/yield，而express实现异步是通过回调函数的方式。express内置了很多中间件。koa2基本没绑定其他框架。更容易定制化。扩展性好。express没有提供上下文机制。数据的控制需要自己手动实现。Koa依据洋葱模型实现数据的流入流出的功能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Koa</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;koa&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Koa</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mid1</span> = <span class=\"keyword\">async</span> (<span class=\"params\">ctx, next</span>) =&gt; &#123;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =  <span class=\"string\">&#x27;前：&#x27;</span> + <span class=\"string\">&#x27;1\\n&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =   ctx.<span class=\"property\">body</span> + <span class=\"string\">&#x27;后：&#x27;</span> + <span class=\"string\">&#x27;1\\n&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mid2</span> = <span class=\"keyword\">async</span> (<span class=\"params\">ctx, next</span>) =&gt; &#123;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =    ctx.<span class=\"property\">body</span> + <span class=\"string\">&#x27;前：&#x27;</span>+ <span class=\"string\">&#x27;2\\n&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =    ctx.<span class=\"property\">body</span> + <span class=\"string\">&#x27;后：&#x27;</span>+ <span class=\"string\">&#x27;2\\n&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mid3</span> = <span class=\"keyword\">async</span> (<span class=\"params\">ctx, next</span>) =&gt; &#123;</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =  ctx.<span class=\"property\">body</span> + <span class=\"string\">&#x27;前：&#x27;</span>+  <span class=\"string\">&#x27;3\\n&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    ctx.<span class=\"property\">body</span> =   ctx.<span class=\"property\">body</span> + <span class=\"string\">&#x27;后：&#x27;</span>+ <span class=\"string\">&#x27;3\\n&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(mid1)</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(mid2)</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(mid3)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>) </span><br><span class=\"line\"><span class=\"comment\">// 前1 前2 前3</span></span><br><span class=\"line\"><span class=\"comment\">// 后3 后2 后1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"koa的洋葱模型koa中间件原理\"><a class=\"markdownIt-Anchor\" href=\"#koa的洋葱模型koa中间件原理\"></a> koa的洋葱模型(koa中间件原理)</h3>\n<p>初始化Koa实例后,用use方法来调用加载中间件。会有一个数组来存储中间件，use的调用顺序。决定了中间件的执行顺序。每一个中间件都是一个函数(如果不是会报错),接收两个参数,第一个ctx是上下文对象，另一个是next函数。项目启动后koa-componse模块对middleware中间件数组进行处理。会从middleware数组中取第一个函数开始执行,中间件函数调用next方法去执行下一个中间件函数(此时不代表当前中间件函数执行完毕了)，每个中间件函数执行完毕之后都会反回Promise对象。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002132134_542.png?/\" alt=\"洋葱模型图片\" /></p>\n<h3 id=\"mysql索引太多会有什么影响索引种类\"><a class=\"markdownIt-Anchor\" href=\"#mysql索引太多会有什么影响索引种类\"></a> mysql索引太多会有什么影响,索引种类</h3>\n<p>(1) 空间：索引需要占用空间；</p>\n<p>(2) 时间：查询索引需要时间；</p>\n<p>(3) 维护：索引须要维护（数据变更时）；</p>\n<p>不建议使用索引的情况：</p>\n<p>(1) 数据量很小的表</p>\n<p>(2) 空间紧张有什么区别</p>\n<h3 id=\"什么是seo\"><a class=\"markdownIt-Anchor\" href=\"#什么是seo\"></a> 什么是SEO</h3>\n<p>搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是：为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益；SEO包含站外SEO和站内SEO两方面；为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力。<br />\n<strong>搜索引擎优化：</strong></p>\n<ul>\n<li>\n<p>对网站的标题、关键字、描述精心设置，反映网站的定位，让搜索引擎明白网站是做什么的</p>\n</li>\n<li>\n<p>网站内容优化：内容与关键字的对应，增加关键字的密度；</p>\n</li>\n<li>\n<p>在网站上合理设置Robot.txt文件；<br />\n<strong>网页内部优化：</strong></p>\n</li>\n<li>\n<p>META标签优化：例如：TITLE，KEYWORDS，DESCRIPTION等的优化；</p>\n</li>\n<li>\n<p>title：只要强调重点即可，重要关键词出现不要超过2次，而且要靠前，每个页面的title要有所不同。</p>\n</li>\n<li>\n<p>description：把网页内容高度概括到这里，长度要合理，不可过分堆砌关键词，每个页面的description要有所不同。</p>\n</li>\n<li>\n<p>keywords：列举几个重要的关键词即可，不可过分堆砌。</p>\n</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/77d32ca7cb9d\">转载自简书</a></p>\n</blockquote>\n<h3 id=\"实现bfs算法广度优先遍历\"><a class=\"markdownIt-Anchor\" href=\"#实现bfs算法广度优先遍历\"></a> 实现BFS算法(广度优先遍历)</h3>\n<h3 id=\"实现观察者模式发布订阅模式\"><a class=\"markdownIt-Anchor\" href=\"#实现观察者模式发布订阅模式\"></a> 实现观察者模式(发布订阅模式)</h3>\n<h3 id=\"手动实现proxy\"><a class=\"markdownIt-Anchor\" href=\"#手动实现proxy\"></a> 手动实现Proxy</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj) !== <span class=\"string\">&#x27;[object Object]&#x27;</span>) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    newObj[key] = <span class=\"title function_\">clone</span>(obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//深度克隆当前对象</span></span><br><span class=\"line\"><span class=\"comment\">//遍历当前对象所有属性</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyProxy</span>(<span class=\"params\">target, handle</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> targetCopy = <span class=\"title function_\">clone</span>(target);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(target).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//Object.defineProperty 修改每一项的get set 方法 </span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(targetCopy, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handle.<span class=\"property\">get</span> &amp;&amp; handle.<span class=\"title function_\">get</span>(target, key);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">        handle.<span class=\"property\">set</span> &amp;&amp; handle.<span class=\"title function_\">set</span>(target, key, newVal);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> targetCopy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myProxy = <span class=\"keyword\">new</span> <span class=\"title class_\">MyProxy</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wmw&quot;</span>, <span class=\"attr\">son</span>: &#123; <span class=\"attr\">sonName</span>: <span class=\"string\">&quot;sonName&quot;</span> &#125; &#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;set方法被拦截&quot;</span>) &#125;,</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;get方法被拦截&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">myProxy.<span class=\"property\">name</span> = <span class=\"string\">&#x27;xxx&#x27;</span></span><br><span class=\"line\">myProxy.<span class=\"property\">year</span> = <span class=\"string\">&quot;2020&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"proxy-实现vue数据双向绑定\"><a class=\"markdownIt-Anchor\" href=\"#proxy-实现vue数据双向绑定\"></a> Proxy 实现Vue数据双向绑定</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> data = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;wmw&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">age</span>: <span class=\"number\">21</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> template = <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    &lt;div  &gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    姓名：&#123;&#123;name&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    &lt;br/&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    年龄：&#123;&#123;age&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    &lt;br /&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    &lt;input type=&quot;text&quot; v-model=&quot;name&quot;  id=&#x27;input1&#x27;&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">    &lt;/div&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">  `</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">renderHTML</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> res = template.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\&#123;\\&#123;\\w+\\&#125;\\&#125;/g</span>, <span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      key = key.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>, key.<span class=\"property\">length</span> - <span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> data[key]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    el.<span class=\"property\">innerHTML</span> = res</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">renderHTML</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">renderJS</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(el.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;input&#x27;</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">      .<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> ele.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;v-model&#x27;</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\">      .<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">input</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> key = input.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;v-model&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        input.<span class=\"property\">value</span> = data[key]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        input.<span class=\"property\">onfocus</span> = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        input.<span class=\"property\">oninput</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          dataProxy[key] = <span class=\"variable language_\">this</span>.<span class=\"property\">value</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">renderJS</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> dataProxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(data, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">set</span>(<span class=\"params\">obj, name, value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// diff算法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      obj[name] = value</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">renderHTML</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">renderJS</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;) </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://github.com/ilovcoding/typescript-design-mode/blob/main/src/proxy/vue/index.html\">源码</a></p>\n</blockquote>\n<h3 id=\"单例模式工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#单例模式工厂模式\"></a> 单例模式/工厂模式</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Person</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> instance = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">        instance = <span class=\"variable language_\">this</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1 == p2)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Factory</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Student</span>(name, age) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title class_\">Teacher</span>(name, age) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">type, name, age</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s[type]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s[type].<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name, age)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stu = <span class=\"keyword\">new</span> <span class=\"title class_\">Factory</span>(<span class=\"string\">&quot;Student&quot;</span>, <span class=\"string\">&#x27;张三&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stu.<span class=\"property\">name</span>, stu.<span class=\"property\">age</span>) <span class=\"comment\">// 张三 18</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"js函数柯里化\"><a class=\"markdownIt-Anchor\" href=\"#js函数柯里化\"></a> JS函数柯里化</h3>\n<blockquote>\n<p>Curry 把接受多个参数的函数，变成了接受一个单一参数(最初参数的第一个),并返回能正确运行的函数。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">x,y</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curryingAdd</span>(<span class=\"params\">x</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">y</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"title function_\">curryingAdd</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>让参数能够复用，调用起来也更方便。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">check</span>(<span class=\"params\">reg,text</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reg.<span class=\"title function_\">text</span>(text)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">check</span>(<span class=\"regexp\">/\\d+/g</span>,<span class=\"string\">&#x27;test&#x27;</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title function_\">check</span>(<span class=\"regexp\">/[a-z]+/g</span>,<span class=\"string\">&#x27;test&#x27;</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">// Currying 后</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curryingCheck</span>(<span class=\"params\">reg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">txt</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reg.<span class=\"title function_\">test</span>(txt)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hasNumber = <span class=\"title function_\">curryingCheck</span>(<span class=\"regexp\">/\\d+/g</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> hasLetter = <span class=\"title function_\">curryingCheck</span>(<span class=\"regexp\">/[a-z]+/g</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">hasNumber</span>(<span class=\"string\">&#x27;test1&#x27;</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title function_\">hasNumber</span>(<span class=\"string\">&#x27;testtest&#x27;</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"title function_\">hasLetter</span>(<span class=\"string\">&#x27;21212&#x27;</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>通用的柯理化函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> fn    待柯里化的原函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> len   所需的参数个数，默认为原函数的形参个数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn,len = fn.length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _curry.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,fn,len)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> fn    待柯里化的原函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> len   所需的参数个数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> args  已接收的参数列表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_curry</span>(<span class=\"params\">fn,len,...args1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _args = [...args1,...args2];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(_args.<span class=\"property\">length</span> &gt;= len)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>,_args);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 继续收集参数的过程</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> _curry.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,fn,len,..._args)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"实现一个sum函数使得sum123valueof和sum123valueof执行输出的结果都等于6\"><a class=\"markdownIt-Anchor\" href=\"#实现一个sum函数使得sum123valueof和sum123valueof执行输出的结果都等于6\"></a> 实现一个sum函数使得<code>sum(1,2,3).valueOf()</code>和<code>sum(1)(2)(3).valueOf()</code>执行输出的结果都等于6</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">b = args[<span class=\"number\">0</span>]</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">c = args[<span class=\"number\">1</span>]</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a + b + c</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>).<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">//6 </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).<span class=\"title function_\">valueOf</span>()()()) <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum2</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">b</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> args[<span class=\"number\">0</span>] + b + c</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum2</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>).<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">//6</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum2</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>).<span class=\"title function_\">valueOf</span>()) <span class=\"comment\">// 6</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"手动实现对象深拷贝的方法\"><a class=\"markdownIt-Anchor\" href=\"#手动实现对象深拷贝的方法\"></a> 手动实现对象深拷贝的方法</h3>\n<blockquote>\n<p>面试我只想用ES5 的写法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">merge</span>(<span class=\"params\">source</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(source)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Reflect.getOwnPropertyDescriptor(source,key)</span></span><br><span class=\"line\">    <span class=\"comment\">//  获取对象的属性描述符  对象是否可写 等</span></span><br><span class=\"line\">    <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">defineProperty</span>(obj, key, <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(source, key))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Reflect</span>.<span class=\"title function_\">apply</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>, source[key], []) === <span class=\"string\">&#x27;[object Object]&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">set</span>(obj, key, <span class=\"title function_\">merge</span>(source[key]))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ES5 的写法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj) !== <span class=\"string\">&#x27;[object Object]&#x27;</span>) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    newObj[key] = <span class=\"title function_\">clone</span>(obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"防抖节流\"><a class=\"markdownIt-Anchor\" href=\"#防抖节流\"></a> 防抖节流</h3>\n<ul>\n<li>防抖</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(timeout !== <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">          <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(fn, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 处理函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 滚动事件</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"title function_\">debounce</span>(handle, <span class=\"number\">1000</span>));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>节流</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"keyword\">function</span>(<span class=\"params\">func, delay</span>) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> startTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> curTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">     <span class=\"keyword\">var</span> remaining = delay - (curTime - startTime);</span><br><span class=\"line\">     <span class=\"keyword\">var</span> context = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">     <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        func.<span class=\"title function_\">apply</span>(context, args);</span><br><span class=\"line\">        startTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 定时器解决，节流函数，最后一次需要被执行的问题</span></span><br><span class=\"line\">        timer = <span class=\"built_in\">setTimeout</span>(func, remaining);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, <span class=\"title function_\">throttle</span>(handle, <span class=\"number\">1000</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n<blockquote>\n<p>面试需要 数据结构与算法，网络原理，底层知识，项目经验，设计模式，SQL语法</p>\n</blockquote>\n"},{"title":"删除排序数组中的重复项","date":"2020-02-13T05:30:41.000Z","_content":"### 删除排序数组中的重复项\n给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br/>\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\n```\n给定 nums = [0,0,1,1,1,2,2,3,3,4],\n函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。\n你不需要考虑数组中超出新长度后面的元素\n```\n### 解题思路\n本题可采用 `双指针模型` 解题,在数组头部声明两个指针 `i,j` 指针 `i` 固定,指针 `j` 向后移动。遇到指针`j`指向的数,不等于指针`i`指向的数的时候,指针`i`+1,并且把此时指向的数的数值改成此时指针 `j` 指向的数值。\n### 代码\n```JS\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    // if(nums.length>0){\n    //   let index;\n    //   nums = nums.filter(value=>{\n    //     if(value != index){\n    //       index = value\n    //       return true\n    //     }\n    //   })\n    // }\n    if(nums.length<=1){\n      return nums.length\n    }\n    let i = 0,j =1\n    while(j<nums.length){\n      if(nums[i] != nums[j]){\n        i++\n        nums[i] = nums[j]\n      }\n      j++ \n    }\n    return i+1 \n};\n```","source":"_posts/leetcode-26.md","raw":"---\ntitle: 删除排序数组中的重复项\ndate: 2020-02-13 13:30:41\ntags:\n  - 算法与数据结构\n  - LeetCode\n---\n### 删除排序数组中的重复项\n给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br/>\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\n```\n给定 nums = [0,0,1,1,1,2,2,3,3,4],\n函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。\n你不需要考虑数组中超出新长度后面的元素\n```\n### 解题思路\n本题可采用 `双指针模型` 解题,在数组头部声明两个指针 `i,j` 指针 `i` 固定,指针 `j` 向后移动。遇到指针`j`指向的数,不等于指针`i`指向的数的时候,指针`i`+1,并且把此时指向的数的数值改成此时指针 `j` 指向的数值。\n### 代码\n```JS\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    // if(nums.length>0){\n    //   let index;\n    //   nums = nums.filter(value=>{\n    //     if(value != index){\n    //       index = value\n    //       return true\n    //     }\n    //   })\n    // }\n    if(nums.length<=1){\n      return nums.length\n    }\n    let i = 0,j =1\n    while(j<nums.length){\n      if(nums[i] != nums[j]){\n        i++\n        nums[i] = nums[j]\n      }\n      j++ \n    }\n    return i+1 \n};\n```","slug":"leetcode-26","published":1,"updated":"2021-08-07T01:59:03.344Z","_id":"cl4ince6k000xcgufgw0y21r1","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"删除排序数组中的重复项\"><a class=\"markdownIt-Anchor\" href=\"#删除排序数组中的重复项\"></a> 删除排序数组中的重复项</h3>\n<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br/><br />\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class=\"line\">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class=\"line\">你不需要考虑数组中超出新长度后面的元素</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<p>本题可采用 <code>双指针模型</code> 解题,在数组头部声明两个指针 <code>i,j</code> 指针 <code>i</code> 固定,指针 <code>j</code> 向后移动。遇到指针<code>j</code>指向的数,不等于指针<code>i</code>指向的数的时候,指针<code>i</code>+1,并且把此时指向的数的数值改成此时指针 <code>j</code> 指向的数值。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// if(nums.length&gt;0)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   let index;</span></span><br><span class=\"line\">    <span class=\"comment\">//   nums = nums.filter(value=&gt;&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     if(value != index)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//       index = value</span></span><br><span class=\"line\">    <span class=\"comment\">//       return true</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.<span class=\"property\">length</span>&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nums.<span class=\"property\">length</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>,j =<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;nums.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(nums[i] != nums[j])&#123;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">        nums[i] = nums[j]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      j++ </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+<span class=\"number\">1</span> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"删除排序数组中的重复项\"><a class=\"markdownIt-Anchor\" href=\"#删除排序数组中的重复项\"></a> 删除排序数组中的重复项</h3>\n<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br/><br />\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class=\"line\">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class=\"line\">你不需要考虑数组中超出新长度后面的元素</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<p>本题可采用 <code>双指针模型</code> 解题,在数组头部声明两个指针 <code>i,j</code> 指针 <code>i</code> 固定,指针 <code>j</code> 向后移动。遇到指针<code>j</code>指向的数,不等于指针<code>i</code>指向的数的时候,指针<code>i</code>+1,并且把此时指向的数的数值改成此时指针 <code>j</code> 指向的数值。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// if(nums.length&gt;0)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   let index;</span></span><br><span class=\"line\">    <span class=\"comment\">//   nums = nums.filter(value=&gt;&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     if(value != index)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//       index = value</span></span><br><span class=\"line\">    <span class=\"comment\">//       return true</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums.<span class=\"property\">length</span>&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nums.<span class=\"property\">length</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>,j =<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;nums.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(nums[i] != nums[j])&#123;</span><br><span class=\"line\">        i++</span><br><span class=\"line\">        nums[i] = nums[j]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      j++ </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+<span class=\"number\">1</span> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"反转一个单链表","date":"2020-02-13T07:48:58.000Z","_content":"> 反转一个单链表\n```\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n```\n### 解决思路\n先提取下链表头结点(打断原有链表)。再从先剩下的链表中,取链表头结点。加到上一步取下来的节点的头部。引用LeetCode网友的一句话 `斩断过去,不忘前事`。依次往后完成链表反转。\n### 代码\n```JS\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\n\nvar reverseList = function(head) {\n    let pre = null \n    while(head!=null){\n      let tmp = head.next\n      // 斩断过去\n      head.next = pre\n      pre = head\n      // 不忘前事\n      head = tmp\n    }\n    return pre\n};\n```","source":"_posts/leetcode-206.md","raw":"---\ntitle: 反转一个单链表\ndate: 2020-02-13 15:48:58\ntags:\n  - 算法与数据结构\n  - LeetCode\n---\n> 反转一个单链表\n```\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n```\n### 解决思路\n先提取下链表头结点(打断原有链表)。再从先剩下的链表中,取链表头结点。加到上一步取下来的节点的头部。引用LeetCode网友的一句话 `斩断过去,不忘前事`。依次往后完成链表反转。\n### 代码\n```JS\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\n\nvar reverseList = function(head) {\n    let pre = null \n    while(head!=null){\n      let tmp = head.next\n      // 斩断过去\n      head.next = pre\n      pre = head\n      // 不忘前事\n      head = tmp\n    }\n    return pre\n};\n```","slug":"leetcode-206","published":1,"updated":"2021-08-07T01:59:03.344Z","_id":"cl4ince6k000zcguf61m44377","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>反转一个单链表</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class=\"line\">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<p>先提取下链表头结点(打断原有链表)。再从先剩下的链表中,取链表头结点。加到上一步取下来的节点的头部。引用LeetCode网友的一句话 <code>斩断过去,不忘前事</code>。依次往后完成链表反转。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"keyword\">function</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tmp = head.<span class=\"property\">next</span></span><br><span class=\"line\">      <span class=\"comment\">// 斩断过去</span></span><br><span class=\"line\">      head.<span class=\"property\">next</span> = pre</span><br><span class=\"line\">      pre = head</span><br><span class=\"line\">      <span class=\"comment\">// 不忘前事</span></span><br><span class=\"line\">      head = tmp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>反转一个单链表</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class=\"line\">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<p>先提取下链表头结点(打断原有链表)。再从先剩下的链表中,取链表头结点。加到上一步取下来的节点的头部。引用LeetCode网友的一句话 <code>斩断过去,不忘前事</code>。依次往后完成链表反转。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">head</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"keyword\">function</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tmp = head.<span class=\"property\">next</span></span><br><span class=\"line\">      <span class=\"comment\">// 斩断过去</span></span><br><span class=\"line\">      head.<span class=\"property\">next</span> = pre</span><br><span class=\"line\">      pre = head</span><br><span class=\"line\">      <span class=\"comment\">// 不忘前事</span></span><br><span class=\"line\">      head = tmp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"无重复字符的最长子串","date":"2020-02-13T04:21:31.000Z","_content":"### 无重复字符的最长子串\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n```\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n### 思路\n这题算是一个典型的滑动窗口模型,可以解决的问题。从一开始扩展窗口。每次遇到有重复的数字,或者窗口本身内部有重复的数字，窗口前进一格。\n### 代码\n```JS\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let slideWindow = []\n    let sArr = s.split(\"\")\n    if(sArr.length<=3){\n      return new Set(sArr).size\n    }\n    for(let i=0;i<sArr.length;i++){\n      let set = new Set(slideWindow)\n      if(set.has(sArr[i]) || set.size < slideWindow.length){\n        slideWindow.shift()\n      }\n      slideWindow.push(sArr[i])\n    }\n    return slideWindow.length\n};\n```","source":"_posts/leetcode-3.md","raw":"---\ntitle: 无重复字符的最长子串\ndate: 2020-02-13 12:21:31\ntags:\n  - 算法与数据结构\n  - LeetCode\n---\n### 无重复字符的最长子串\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n```\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n### 思路\n这题算是一个典型的滑动窗口模型,可以解决的问题。从一开始扩展窗口。每次遇到有重复的数字,或者窗口本身内部有重复的数字，窗口前进一格。\n### 代码\n```JS\n/**\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let slideWindow = []\n    let sArr = s.split(\"\")\n    if(sArr.length<=3){\n      return new Set(sArr).size\n    }\n    for(let i=0;i<sArr.length;i++){\n      let set = new Set(slideWindow)\n      if(set.has(sArr[i]) || set.size < slideWindow.length){\n        slideWindow.shift()\n      }\n      slideWindow.push(sArr[i])\n    }\n    return slideWindow.length\n};\n```","slug":"leetcode-3","published":1,"updated":"2021-08-07T01:59:03.344Z","_id":"cl4ince6l0011cgufekm3hs23","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"无重复字符的最长子串\"><a class=\"markdownIt-Anchor\" href=\"#无重复字符的最长子串\"></a> 无重复字符的最长子串</h3>\n<p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;pwwkew&quot;</span><br><span class=\"line\">输出: 3</span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class=\"line\">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n<p>这题算是一个典型的滑动窗口模型,可以解决的问题。从一开始扩展窗口。每次遇到有重复的数字,或者窗口本身内部有重复的数字，窗口前进一格。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slideWindow = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sArr = s.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sArr.<span class=\"property\">length</span>&lt;=<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(sArr).<span class=\"property\">size</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;sArr.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(slideWindow)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(set.<span class=\"title function_\">has</span>(sArr[i]) || set.<span class=\"property\">size</span> &lt; slideWindow.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">        slideWindow.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      slideWindow.<span class=\"title function_\">push</span>(sArr[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slideWindow.<span class=\"property\">length</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"无重复字符的最长子串\"><a class=\"markdownIt-Anchor\" href=\"#无重复字符的最长子串\"></a> 无重复字符的最长子串</h3>\n<p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;pwwkew&quot;</span><br><span class=\"line\">输出: 3</span><br><span class=\"line\">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class=\"line\">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路\"><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n<p>这题算是一个典型的滑动窗口模型,可以解决的问题。从一开始扩展窗口。每次遇到有重复的数字,或者窗口本身内部有重复的数字，窗口前进一格。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slideWindow = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sArr = s.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sArr.<span class=\"property\">length</span>&lt;=<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(sArr).<span class=\"property\">size</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;sArr.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(slideWindow)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(set.<span class=\"title function_\">has</span>(sArr[i]) || set.<span class=\"property\">size</span> &lt; slideWindow.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">        slideWindow.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      slideWindow.<span class=\"title function_\">push</span>(sArr[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slideWindow.<span class=\"property\">length</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"二叉树的序列化与反序列化","date":"2020-02-29T17:36:23.000Z","_content":"### 题目描述\n序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。\n\n请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。\n```\n你可以将以下二叉树：\n\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\n序列化为 \"[1,2,3,null,null,4,5]\"\n```\n### 解决思路\n其实这题说这么多，意思就是，我给你一颗二叉树，你帮我把它变成字符串，然后再通过字符串，把二叉树还原。至于字符串长什么样，你随意。只要你能还原。于是乎，就是如何保持节点和还原节点的问题。感觉还是先序遍历，比较简单。其次BFS按层扫描，保持节点也是容易想到的，前者是使用递归后者是使用while循环。\n### 代码\n- DFS深度优先遍历(先序遍历的实现)\n```js\nvar serialize = function (root) {\n  let str = ''\n  function perOrder(root) {\n    if (root == null) {\n      str += \"null,\"\n    } else {\n      str += `${root.val},`\n      perOrder(root.left)\n      perOrder(root.right)\n    }\n    return str\n  }\n  perOrder(root)\n  return str\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function (data) {\n  let dataArr = data.split(',')\n  dataArr.pop()\n  function build(arr) {\n    if (arr.length === 0) {\n      return null\n    }\n    if (arr[0] == \"null\") {\n      arr.shift()\n      return null\n    }\n    let treeNode = new TreeNode(arr[0])\n    arr.shift()\n    treeNode.left = build(arr)\n    treeNode.right = build(arr)\n    return treeNode    \n  }\n  return build(dataArr)\n}\n```\n\n- BFS(按层扫描的代码实现)\n\n```js\n\n\nvar serialize = function (root) {\n  if (root == null) return '';\n  let str = ''\n  let queue = [root]\n  while (queue.length !== 0) {\n    let rootNode = queue.shift()\n    if (rootNode == null) {\n      str += 'null,'\n    } else {\n      str += `${rootNode.val},`\n      queue.push(rootNode.left)\n      queue.push(rootNode.right)\n    }\n  }\n  return str\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function (data) {\n  let nodes = data.split(',')\n  nodes.pop()\n  if (nodes.length == 0 || nodes[0] == 'null') {\n    return null\n  }\n  const root = new TreeNode(parseInt(nodes.shift()))\n  let queue = [root]\n  while (nodes.length !== 0 && queue.length !==0 ) {\n    let node = queue.shift()\n    let treeNode = nodes.shift()\n    if (treeNode !== 'null') {\n      node.left = new TreeNode(parseInt(treeNode))\n      queue.push(node.left)\n    }else{\n      node.left = null\n    }\n    treeNode = nodes.shift()\n    if (treeNode !== 'null') {\n      node.right = new TreeNode(parseInt(treeNode))\n      queue.push(node.right)\n    } else {\n      node.right = null\n    }\n  }\n  return root\n}\n```","source":"_posts/leetcode-297.md","raw":"---\ntitle: 二叉树的序列化与反序列化\ndate: 2020-03-01 01:36:23\ntags:\n  - 算法与数据结构\n  - 剑指Offer\n---\n### 题目描述\n序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。\n\n请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。\n```\n你可以将以下二叉树：\n\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\n序列化为 \"[1,2,3,null,null,4,5]\"\n```\n### 解决思路\n其实这题说这么多，意思就是，我给你一颗二叉树，你帮我把它变成字符串，然后再通过字符串，把二叉树还原。至于字符串长什么样，你随意。只要你能还原。于是乎，就是如何保持节点和还原节点的问题。感觉还是先序遍历，比较简单。其次BFS按层扫描，保持节点也是容易想到的，前者是使用递归后者是使用while循环。\n### 代码\n- DFS深度优先遍历(先序遍历的实现)\n```js\nvar serialize = function (root) {\n  let str = ''\n  function perOrder(root) {\n    if (root == null) {\n      str += \"null,\"\n    } else {\n      str += `${root.val},`\n      perOrder(root.left)\n      perOrder(root.right)\n    }\n    return str\n  }\n  perOrder(root)\n  return str\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function (data) {\n  let dataArr = data.split(',')\n  dataArr.pop()\n  function build(arr) {\n    if (arr.length === 0) {\n      return null\n    }\n    if (arr[0] == \"null\") {\n      arr.shift()\n      return null\n    }\n    let treeNode = new TreeNode(arr[0])\n    arr.shift()\n    treeNode.left = build(arr)\n    treeNode.right = build(arr)\n    return treeNode    \n  }\n  return build(dataArr)\n}\n```\n\n- BFS(按层扫描的代码实现)\n\n```js\n\n\nvar serialize = function (root) {\n  if (root == null) return '';\n  let str = ''\n  let queue = [root]\n  while (queue.length !== 0) {\n    let rootNode = queue.shift()\n    if (rootNode == null) {\n      str += 'null,'\n    } else {\n      str += `${rootNode.val},`\n      queue.push(rootNode.left)\n      queue.push(rootNode.right)\n    }\n  }\n  return str\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function (data) {\n  let nodes = data.split(',')\n  nodes.pop()\n  if (nodes.length == 0 || nodes[0] == 'null') {\n    return null\n  }\n  const root = new TreeNode(parseInt(nodes.shift()))\n  let queue = [root]\n  while (nodes.length !== 0 && queue.length !==0 ) {\n    let node = queue.shift()\n    let treeNode = nodes.shift()\n    if (treeNode !== 'null') {\n      node.left = new TreeNode(parseInt(treeNode))\n      queue.push(node.left)\n    }else{\n      node.left = null\n    }\n    treeNode = nodes.shift()\n    if (treeNode !== 'null') {\n      node.right = new TreeNode(parseInt(treeNode))\n      queue.push(node.right)\n    } else {\n      node.right = null\n    }\n  }\n  return root\n}\n```","slug":"leetcode-297","published":1,"updated":"2021-08-07T01:59:03.344Z","_id":"cl4ince6m0013cguf4etu1s5m","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p>\n<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你可以将以下二叉树：</span><br><span class=\"line\"></span><br><span class=\"line\">    1</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  2   3</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    4   5</span><br><span class=\"line\"></span><br><span class=\"line\">序列化为 &quot;[1,2,3,null,null,4,5]&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<p>其实这题说这么多，意思就是，我给你一颗二叉树，你帮我把它变成字符串，然后再通过字符串，把二叉树还原。至于字符串长什么样，你随意。只要你能还原。于是乎，就是如何保持节点和还原节点的问题。感觉还是先序遍历，比较简单。其次BFS按层扫描，保持节点也是容易想到的，前者是使用递归后者是使用while循环。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<ul>\n<li>DFS深度优先遍历(先序遍历的实现)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> serialize = <span class=\"keyword\">function</span> (<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">perOrder</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      str += <span class=\"string\">&quot;null,&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      str += <span class=\"string\">`<span class=\"subst\">$&#123;root.val&#125;</span>,`</span></span><br><span class=\"line\">      <span class=\"title function_\">perOrder</span>(root.<span class=\"property\">left</span>)</span><br><span class=\"line\">      <span class=\"title function_\">perOrder</span>(root.<span class=\"property\">right</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">perOrder</span>(root)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Decodes your encoded data to tree.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deserialize = <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dataArr = data.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">  dataArr.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">build</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[<span class=\"number\">0</span>] == <span class=\"string\">&quot;null&quot;</span>) &#123;</span><br><span class=\"line\">      arr.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> treeNode = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(arr[<span class=\"number\">0</span>])</span><br><span class=\"line\">    arr.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    treeNode.<span class=\"property\">left</span> = <span class=\"title function_\">build</span>(arr)</span><br><span class=\"line\">    treeNode.<span class=\"property\">right</span> = <span class=\"title function_\">build</span>(arr)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> treeNode    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">build</span>(dataArr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>BFS(按层扫描的代码实现)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> serialize = <span class=\"keyword\">function</span> (<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> queue = [root]</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (queue.<span class=\"property\">length</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rootNode = queue.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootNode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      str += <span class=\"string\">&#x27;null,&#x27;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      str += <span class=\"string\">`<span class=\"subst\">$&#123;rootNode.val&#125;</span>,`</span></span><br><span class=\"line\">      queue.<span class=\"title function_\">push</span>(rootNode.<span class=\"property\">left</span>)</span><br><span class=\"line\">      queue.<span class=\"title function_\">push</span>(rootNode.<span class=\"property\">right</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Decodes your encoded data to tree.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deserialize = <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nodes = data.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">  nodes.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nodes.<span class=\"property\">length</span> == <span class=\"number\">0</span> || nodes[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;null&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"built_in\">parseInt</span>(nodes.<span class=\"title function_\">shift</span>()))</span><br><span class=\"line\">  <span class=\"keyword\">let</span> queue = [root]</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (nodes.<span class=\"property\">length</span> !== <span class=\"number\">0</span> &amp;&amp; queue.<span class=\"property\">length</span> !==<span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = queue.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> treeNode = nodes.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (treeNode !== <span class=\"string\">&#x27;null&#x27;</span>) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">left</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"built_in\">parseInt</span>(treeNode))</span><br><span class=\"line\">      queue.<span class=\"title function_\">push</span>(node.<span class=\"property\">left</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      node.<span class=\"property\">left</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    treeNode = nodes.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (treeNode !== <span class=\"string\">&#x27;null&#x27;</span>) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">right</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"built_in\">parseInt</span>(treeNode))</span><br><span class=\"line\">      queue.<span class=\"title function_\">push</span>(node.<span class=\"property\">right</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      node.<span class=\"property\">right</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> root</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p>\n<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你可以将以下二叉树：</span><br><span class=\"line\"></span><br><span class=\"line\">    1</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  2   3</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    4   5</span><br><span class=\"line\"></span><br><span class=\"line\">序列化为 &quot;[1,2,3,null,null,4,5]&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<p>其实这题说这么多，意思就是，我给你一颗二叉树，你帮我把它变成字符串，然后再通过字符串，把二叉树还原。至于字符串长什么样，你随意。只要你能还原。于是乎，就是如何保持节点和还原节点的问题。感觉还是先序遍历，比较简单。其次BFS按层扫描，保持节点也是容易想到的，前者是使用递归后者是使用while循环。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<ul>\n<li>DFS深度优先遍历(先序遍历的实现)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> serialize = <span class=\"keyword\">function</span> (<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">perOrder</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      str += <span class=\"string\">&quot;null,&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      str += <span class=\"string\">`<span class=\"subst\">$&#123;root.val&#125;</span>,`</span></span><br><span class=\"line\">      <span class=\"title function_\">perOrder</span>(root.<span class=\"property\">left</span>)</span><br><span class=\"line\">      <span class=\"title function_\">perOrder</span>(root.<span class=\"property\">right</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">perOrder</span>(root)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Decodes your encoded data to tree.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deserialize = <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dataArr = data.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">  dataArr.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">build</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[<span class=\"number\">0</span>] == <span class=\"string\">&quot;null&quot;</span>) &#123;</span><br><span class=\"line\">      arr.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> treeNode = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(arr[<span class=\"number\">0</span>])</span><br><span class=\"line\">    arr.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    treeNode.<span class=\"property\">left</span> = <span class=\"title function_\">build</span>(arr)</span><br><span class=\"line\">    treeNode.<span class=\"property\">right</span> = <span class=\"title function_\">build</span>(arr)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> treeNode    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">build</span>(dataArr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>BFS(按层扫描的代码实现)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> serialize = <span class=\"keyword\">function</span> (<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> queue = [root]</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (queue.<span class=\"property\">length</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rootNode = queue.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootNode == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      str += <span class=\"string\">&#x27;null,&#x27;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      str += <span class=\"string\">`<span class=\"subst\">$&#123;rootNode.val&#125;</span>,`</span></span><br><span class=\"line\">      queue.<span class=\"title function_\">push</span>(rootNode.<span class=\"property\">left</span>)</span><br><span class=\"line\">      queue.<span class=\"title function_\">push</span>(rootNode.<span class=\"property\">right</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Decodes your encoded data to tree.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deserialize = <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nodes = data.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">  nodes.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nodes.<span class=\"property\">length</span> == <span class=\"number\">0</span> || nodes[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;null&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"built_in\">parseInt</span>(nodes.<span class=\"title function_\">shift</span>()))</span><br><span class=\"line\">  <span class=\"keyword\">let</span> queue = [root]</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (nodes.<span class=\"property\">length</span> !== <span class=\"number\">0</span> &amp;&amp; queue.<span class=\"property\">length</span> !==<span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = queue.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> treeNode = nodes.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (treeNode !== <span class=\"string\">&#x27;null&#x27;</span>) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">left</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"built_in\">parseInt</span>(treeNode))</span><br><span class=\"line\">      queue.<span class=\"title function_\">push</span>(node.<span class=\"property\">left</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      node.<span class=\"property\">left</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    treeNode = nodes.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (treeNode !== <span class=\"string\">&#x27;null&#x27;</span>) &#123;</span><br><span class=\"line\">      node.<span class=\"property\">right</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"built_in\">parseInt</span>(treeNode))</span><br><span class=\"line\">      queue.<span class=\"title function_\">push</span>(node.<span class=\"property\">right</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      node.<span class=\"property\">right</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> root</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"零钱兑换","date":"2020-03-08T11:20:16.000Z","_content":"### 题目\n给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。\n```\n输入: coins = [1, 2, 5], amount = 11\n输出: 3 \n解释: 11 = 5 + 5 + 1\n```\n```\n输入: coins = [2], amount = 3\n输出: -1\n```\n### 解答\n> 待解答😵😵😵😵\n### 代码\n\n#### 动态规划法\n```js\n/**\n * @param {number[]} coins\n * @param {number} amount\n * @return {number}\n */\nvar coinChange = function (coins, amount) {\n  if(amount === 0) return 0;\n  let res = [0]\n  function temp(i) {\n    let min = Number.MAX_VALUE\n    for (let j = 0; j < coins.length; j++) {\n      let index = i - coins[j]\n      if (index >= 0 && index < res.length && res[index] < min) {\n        min = res[index]\n      }\n    }\n    return min\n  }\n  for (let i = 1; i <= amount; i++) {\n    res[i] = temp(i) + 1\n  }\n  return res[amount] > amount ? -1 : res[amount]\n};\n```\n#### 贪心+回溯方法\n\n\n>来源：力扣（LeetCode）\n>链接：https://leetcode-cn.com/problems/coin-change\n>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。","source":"_posts/leetcode-322.md","raw":"---\ntitle: 零钱兑换\ndate: 2020-03-08 19:20:16\ntags:\n  - 算法与数据结构\n  - LeetCode\n---\n### 题目\n给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。\n```\n输入: coins = [1, 2, 5], amount = 11\n输出: 3 \n解释: 11 = 5 + 5 + 1\n```\n```\n输入: coins = [2], amount = 3\n输出: -1\n```\n### 解答\n> 待解答😵😵😵😵\n### 代码\n\n#### 动态规划法\n```js\n/**\n * @param {number[]} coins\n * @param {number} amount\n * @return {number}\n */\nvar coinChange = function (coins, amount) {\n  if(amount === 0) return 0;\n  let res = [0]\n  function temp(i) {\n    let min = Number.MAX_VALUE\n    for (let j = 0; j < coins.length; j++) {\n      let index = i - coins[j]\n      if (index >= 0 && index < res.length && res[index] < min) {\n        min = res[index]\n      }\n    }\n    return min\n  }\n  for (let i = 1; i <= amount; i++) {\n    res[i] = temp(i) + 1\n  }\n  return res[amount] > amount ? -1 : res[amount]\n};\n```\n#### 贪心+回溯方法\n\n\n>来源：力扣（LeetCode）\n>链接：https://leetcode-cn.com/problems/coin-change\n>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。","slug":"leetcode-322","published":1,"updated":"2021-08-07T01:59:03.345Z","_id":"cl4ince6n0016cgufgctr7kxv","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h3>\n<p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: coins = [1, 2, 5], amount = 11</span><br><span class=\"line\">输出: 3 </span><br><span class=\"line\">解释: 11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: coins = [2], amount = 3</span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure>\n<h3 id=\"解答\"><a class=\"markdownIt-Anchor\" href=\"#解答\"></a> 解答</h3>\n<blockquote>\n<p>待解答😵😵😵😵</p>\n</blockquote>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<h4 id=\"动态规划法\"><a class=\"markdownIt-Anchor\" href=\"#动态规划法\"></a> 动态规划法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">coins</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">amount</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> coinChange = <span class=\"keyword\">function</span> (<span class=\"params\">coins, amount</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(amount === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">temp</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> min = <span class=\"title class_\">Number</span>.<span class=\"property\">MAX_VALUE</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; coins.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = i - coins[j]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; res.<span class=\"property\">length</span> &amp;&amp; res[index] &lt; min) &#123;</span><br><span class=\"line\">        min = res[index]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= amount; i++) &#123;</span><br><span class=\"line\">    res[i] = <span class=\"title function_\">temp</span>(i) + <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res[amount] &gt; amount ? -<span class=\"number\">1</span> : res[amount]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"贪心回溯方法\"><a class=\"markdownIt-Anchor\" href=\"#贪心回溯方法\"></a> 贪心+回溯方法</h4>\n<blockquote>\n<p>来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/coin-change\">https://leetcode-cn.com/problems/coin-change</a><br />\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h3>\n<p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: coins = [1, 2, 5], amount = 11</span><br><span class=\"line\">输出: 3 </span><br><span class=\"line\">解释: 11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: coins = [2], amount = 3</span><br><span class=\"line\">输出: -1</span><br></pre></td></tr></table></figure>\n<h3 id=\"解答\"><a class=\"markdownIt-Anchor\" href=\"#解答\"></a> 解答</h3>\n<blockquote>\n<p>待解答😵😵😵😵</p>\n</blockquote>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<h4 id=\"动态规划法\"><a class=\"markdownIt-Anchor\" href=\"#动态规划法\"></a> 动态规划法</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">coins</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">amount</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> coinChange = <span class=\"keyword\">function</span> (<span class=\"params\">coins, amount</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(amount === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">temp</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> min = <span class=\"title class_\">Number</span>.<span class=\"property\">MAX_VALUE</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; coins.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = i - coins[j]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; res.<span class=\"property\">length</span> &amp;&amp; res[index] &lt; min) &#123;</span><br><span class=\"line\">        min = res[index]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= amount; i++) &#123;</span><br><span class=\"line\">    res[i] = <span class=\"title function_\">temp</span>(i) + <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res[amount] &gt; amount ? -<span class=\"number\">1</span> : res[amount]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"贪心回溯方法\"><a class=\"markdownIt-Anchor\" href=\"#贪心回溯方法\"></a> 贪心+回溯方法</h4>\n<blockquote>\n<p>来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/coin-change\">https://leetcode-cn.com/problems/coin-change</a><br />\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n</blockquote>\n"},{"title":"最长回文子串","date":"2020-02-13T03:22:47.000Z","_content":"### 最长回文子串\n给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。\n```\n输入: \"babad\"\n输出: \"bab\"\n注意: \"aba\" 也是一个有效答案。\n```\n### 解题思路\n根据回文的特点，可知长度有 奇偶 两种,因此 我们分别以每个字符作为奇数类别的中心，分别向两边扩展。然后用两个相等的字符串作为偶数类别中心。向两边扩展。最后得到,两类中最长的回文字符串返回。\n### 代码\n```JS\nvar longestPalindrome = function(s) {\n    sArr = s.split(\"\")\n    if(s.length<=1) return s;\n    let oddStr = sArr[0]\n    let evenStr = \"\"\n    for(let i =0;i<s.length-1;i++){\n      if(sArr[i] == sArr[i+1]){\n        // 找到相等的字符串\n        let tmpEvenStr = sArr[i]+sArr[i+1]\n        let index = 1 //定义偏移量\n        while((i-index) >=0 && (i+1+index) < sArr.length && sArr[i-index] == sArr[i+index+1]){\n          tmpEvenStr =  sArr[i-index] + tmpEvenStr + sArr[i+index+1]\n          index ++\n        }\n        if(tmpEvenStr.length > evenStr.length){\n          evenStr = tmpEvenStr\n        }\n      }\n      let oddNumOffset = 1\n      let tmpOddStr = sArr[i]\n      while((i-oddNumOffset) >=0 && (i+oddNumOffset) <= sArr.length && sArr[i-oddNumOffset] == sArr[i+oddNumOffset]){\n        tmpOddStr = sArr[i-oddNumOffset] + tmpOddStr + sArr[i+oddNumOffset]\n        oddNumOffset++\n      }\n      if(tmpOddStr.length > oddStr.length){\n        oddStr = tmpOddStr\n      }\n    }\n    if(oddStr.length>evenStr.length){\n      return oddStr\n    }else{\n      return evenStr\n    }\n};\n```\n### 性能\n```\n执行用时 :152 ms, 在所有 JavaScript 提交中击败了56.65%的用户\n内存消耗 :50.5 MB, 在所有 JavaScript 提交中击败了27.49%的用户\n```","source":"_posts/leetcode-5.md","raw":"---\ntitle: 最长回文子串\ndate: 2020-02-13 11:22:47\ntags:\n  - 算法与数据结构\n  - LeetCode\n---\n### 最长回文子串\n给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。\n```\n输入: \"babad\"\n输出: \"bab\"\n注意: \"aba\" 也是一个有效答案。\n```\n### 解题思路\n根据回文的特点，可知长度有 奇偶 两种,因此 我们分别以每个字符作为奇数类别的中心，分别向两边扩展。然后用两个相等的字符串作为偶数类别中心。向两边扩展。最后得到,两类中最长的回文字符串返回。\n### 代码\n```JS\nvar longestPalindrome = function(s) {\n    sArr = s.split(\"\")\n    if(s.length<=1) return s;\n    let oddStr = sArr[0]\n    let evenStr = \"\"\n    for(let i =0;i<s.length-1;i++){\n      if(sArr[i] == sArr[i+1]){\n        // 找到相等的字符串\n        let tmpEvenStr = sArr[i]+sArr[i+1]\n        let index = 1 //定义偏移量\n        while((i-index) >=0 && (i+1+index) < sArr.length && sArr[i-index] == sArr[i+index+1]){\n          tmpEvenStr =  sArr[i-index] + tmpEvenStr + sArr[i+index+1]\n          index ++\n        }\n        if(tmpEvenStr.length > evenStr.length){\n          evenStr = tmpEvenStr\n        }\n      }\n      let oddNumOffset = 1\n      let tmpOddStr = sArr[i]\n      while((i-oddNumOffset) >=0 && (i+oddNumOffset) <= sArr.length && sArr[i-oddNumOffset] == sArr[i+oddNumOffset]){\n        tmpOddStr = sArr[i-oddNumOffset] + tmpOddStr + sArr[i+oddNumOffset]\n        oddNumOffset++\n      }\n      if(tmpOddStr.length > oddStr.length){\n        oddStr = tmpOddStr\n      }\n    }\n    if(oddStr.length>evenStr.length){\n      return oddStr\n    }else{\n      return evenStr\n    }\n};\n```\n### 性能\n```\n执行用时 :152 ms, 在所有 JavaScript 提交中击败了56.65%的用户\n内存消耗 :50.5 MB, 在所有 JavaScript 提交中击败了27.49%的用户\n```","slug":"leetcode-5","published":1,"updated":"2021-08-07T01:59:03.345Z","_id":"cl4ince6n0018cgufbslw2vov","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"最长回文子串\"><a class=\"markdownIt-Anchor\" href=\"#最长回文子串\"></a> 最长回文子串</h3>\n<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;babad&quot;</span><br><span class=\"line\">输出: &quot;bab&quot;</span><br><span class=\"line\">注意: &quot;aba&quot; 也是一个有效答案。</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<p>根据回文的特点，可知长度有 奇偶 两种,因此 我们分别以每个字符作为奇数类别的中心，分别向两边扩展。然后用两个相等的字符串作为偶数类别中心。向两边扩展。最后得到,两类中最长的回文字符串返回。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> longestPalindrome = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    sArr = s.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.<span class=\"property\">length</span>&lt;=<span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oddStr = sArr[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> evenStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;s.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(sArr[i] == sArr[i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 找到相等的字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmpEvenStr = sArr[i]+sArr[i+<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">1</span> <span class=\"comment\">//定义偏移量</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>((i-index) &gt;=<span class=\"number\">0</span> &amp;&amp; (i+<span class=\"number\">1</span>+index) &lt; sArr.<span class=\"property\">length</span> &amp;&amp; sArr[i-index] == sArr[i+index+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">          tmpEvenStr =  sArr[i-index] + tmpEvenStr + sArr[i+index+<span class=\"number\">1</span>]</span><br><span class=\"line\">          index ++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmpEvenStr.<span class=\"property\">length</span> &gt; evenStr.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">          evenStr = tmpEvenStr</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> oddNumOffset = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> tmpOddStr = sArr[i]</span><br><span class=\"line\">      <span class=\"keyword\">while</span>((i-oddNumOffset) &gt;=<span class=\"number\">0</span> &amp;&amp; (i+oddNumOffset) &lt;= sArr.<span class=\"property\">length</span> &amp;&amp; sArr[i-oddNumOffset] == sArr[i+oddNumOffset])&#123;</span><br><span class=\"line\">        tmpOddStr = sArr[i-oddNumOffset] + tmpOddStr + sArr[i+oddNumOffset]</span><br><span class=\"line\">        oddNumOffset++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(tmpOddStr.<span class=\"property\">length</span> &gt; oddStr.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">        oddStr = tmpOddStr</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(oddStr.<span class=\"property\">length</span>&gt;evenStr.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> oddStr</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> evenStr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"性能\"><a class=\"markdownIt-Anchor\" href=\"#性能\"></a> 性能</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行用时 :152 ms, 在所有 JavaScript 提交中击败了56.65%的用户</span><br><span class=\"line\">内存消耗 :50.5 MB, 在所有 JavaScript 提交中击败了27.49%的用户</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"最长回文子串\"><a class=\"markdownIt-Anchor\" href=\"#最长回文子串\"></a> 最长回文子串</h3>\n<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;babad&quot;</span><br><span class=\"line\">输出: &quot;bab&quot;</span><br><span class=\"line\">注意: &quot;aba&quot; 也是一个有效答案。</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<p>根据回文的特点，可知长度有 奇偶 两种,因此 我们分别以每个字符作为奇数类别的中心，分别向两边扩展。然后用两个相等的字符串作为偶数类别中心。向两边扩展。最后得到,两类中最长的回文字符串返回。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> longestPalindrome = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">    sArr = s.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s.<span class=\"property\">length</span>&lt;=<span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oddStr = sArr[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> evenStr = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i =<span class=\"number\">0</span>;i&lt;s.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(sArr[i] == sArr[i+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 找到相等的字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> tmpEvenStr = sArr[i]+sArr[i+<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">1</span> <span class=\"comment\">//定义偏移量</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>((i-index) &gt;=<span class=\"number\">0</span> &amp;&amp; (i+<span class=\"number\">1</span>+index) &lt; sArr.<span class=\"property\">length</span> &amp;&amp; sArr[i-index] == sArr[i+index+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">          tmpEvenStr =  sArr[i-index] + tmpEvenStr + sArr[i+index+<span class=\"number\">1</span>]</span><br><span class=\"line\">          index ++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tmpEvenStr.<span class=\"property\">length</span> &gt; evenStr.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">          evenStr = tmpEvenStr</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> oddNumOffset = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> tmpOddStr = sArr[i]</span><br><span class=\"line\">      <span class=\"keyword\">while</span>((i-oddNumOffset) &gt;=<span class=\"number\">0</span> &amp;&amp; (i+oddNumOffset) &lt;= sArr.<span class=\"property\">length</span> &amp;&amp; sArr[i-oddNumOffset] == sArr[i+oddNumOffset])&#123;</span><br><span class=\"line\">        tmpOddStr = sArr[i-oddNumOffset] + tmpOddStr + sArr[i+oddNumOffset]</span><br><span class=\"line\">        oddNumOffset++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(tmpOddStr.<span class=\"property\">length</span> &gt; oddStr.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">        oddStr = tmpOddStr</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(oddStr.<span class=\"property\">length</span>&gt;evenStr.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> oddStr</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> evenStr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"性能\"><a class=\"markdownIt-Anchor\" href=\"#性能\"></a> 性能</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行用时 :152 ms, 在所有 JavaScript 提交中击败了56.65%的用户</span><br><span class=\"line\">内存消耗 :50.5 MB, 在所有 JavaScript 提交中击败了27.49%的用户</span><br></pre></td></tr></table></figure>"},{"title":"验证二叉搜索树","date":"2020-02-13T16:22:54.000Z","_content":"## 验证二叉搜索树\n给定一个二叉树，判断其是否是一个有效的二叉搜索树。\n假设一个二叉搜索树具有如下特征：\n- 节点的左子树只包含小于当前节点的数。\n- 节点的右子树只包含大于当前节点的数。\n- 所有左子树和右子树自身必须也是二叉搜索树。\n```\n输入:\n    5\n   / \\\n  1   4\n     / \\\n    3   6\n输出: false\n解释: 输入为: [5,1,4,null,null,3,6]。\n     根节点的值为 5 ，但是其右子节点值为 4 。\n```\n### 解决思路\n- 中序遍历结果为什序\n### 代码\n- 中序遍历法\n  \n```JS\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function(root) {\n   let arr = []\n   function inOrder(root){\n     if(root == null){\n       return arr\n     }\n     inOrder(root.left)\n     arr.push(root.val)\n     inOrder(root.right)\n     return arr\n   }\n   inOrder(root)\n\n   for(let i=0;i<arr.length-1;i++){\n     if(arr[i+1]<=arr[i]){\n       return false\n     }\n   }\n   return true\n};\n```\n","source":"_posts/leetcode-98.md","raw":"---\ntitle: 验证二叉搜索树\ndate: 2020-02-14 00:22:54\ntags:\n  - 算法与数据结构\n  - LeetCode\n---\n## 验证二叉搜索树\n给定一个二叉树，判断其是否是一个有效的二叉搜索树。\n假设一个二叉搜索树具有如下特征：\n- 节点的左子树只包含小于当前节点的数。\n- 节点的右子树只包含大于当前节点的数。\n- 所有左子树和右子树自身必须也是二叉搜索树。\n```\n输入:\n    5\n   / \\\n  1   4\n     / \\\n    3   6\n输出: false\n解释: 输入为: [5,1,4,null,null,3,6]。\n     根节点的值为 5 ，但是其右子节点值为 4 。\n```\n### 解决思路\n- 中序遍历结果为什序\n### 代码\n- 中序遍历法\n  \n```JS\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function(root) {\n   let arr = []\n   function inOrder(root){\n     if(root == null){\n       return arr\n     }\n     inOrder(root.left)\n     arr.push(root.val)\n     inOrder(root.right)\n     return arr\n   }\n   inOrder(root)\n\n   for(let i=0;i<arr.length-1;i++){\n     if(arr[i+1]<=arr[i]){\n       return false\n     }\n   }\n   return true\n};\n```\n","slug":"leetcode-98","published":1,"updated":"2021-08-07T01:59:03.345Z","_id":"cl4ince6o001acguf433a6nku","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"验证二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#验证二叉搜索树\"></a> 验证二叉搜索树</h2>\n<p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。<br />\n假设一个二叉搜索树具有如下特征：</p>\n<ul>\n<li>节点的左子树只包含小于当前节点的数。</li>\n<li>节点的右子树只包含大于当前节点的数。</li>\n<li>所有左子树和右子树自身必须也是二叉搜索树。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">    5</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  1   4</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    3   6</span><br><span class=\"line\">输出: false</span><br><span class=\"line\">解释: 输入为: [5,1,4,null,null,3,6]。</span><br><span class=\"line\">     根节点的值为 5 ，但是其右子节点值为 4 。</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<ul>\n<li>中序遍历结果为什序</li>\n</ul>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<ul>\n<li>中序遍历法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isValidBST = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">inOrder</span>(<span class=\"params\">root</span>)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"title function_\">inOrder</span>(root.<span class=\"property\">left</span>)</span><br><span class=\"line\">     arr.<span class=\"title function_\">push</span>(root.<span class=\"property\">val</span>)</span><br><span class=\"line\">     <span class=\"title function_\">inOrder</span>(root.<span class=\"property\">right</span>)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">inOrder</span>(root)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(arr[i+<span class=\"number\">1</span>]&lt;=arr[i])&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"验证二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#验证二叉搜索树\"></a> 验证二叉搜索树</h2>\n<p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。<br />\n假设一个二叉搜索树具有如下特征：</p>\n<ul>\n<li>节点的左子树只包含小于当前节点的数。</li>\n<li>节点的右子树只包含大于当前节点的数。</li>\n<li>所有左子树和右子树自身必须也是二叉搜索树。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">    5</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  1   4</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    3   6</span><br><span class=\"line\">输出: false</span><br><span class=\"line\">解释: 输入为: [5,1,4,null,null,3,6]。</span><br><span class=\"line\">     根节点的值为 5 ，但是其右子节点值为 4 。</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<ul>\n<li>中序遍历结果为什序</li>\n</ul>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<ul>\n<li>中序遍历法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isValidBST = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">inOrder</span>(<span class=\"params\">root</span>)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"title function_\">inOrder</span>(root.<span class=\"property\">left</span>)</span><br><span class=\"line\">     arr.<span class=\"title function_\">push</span>(root.<span class=\"property\">val</span>)</span><br><span class=\"line\">     <span class=\"title function_\">inOrder</span>(root.<span class=\"property\">right</span>)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">inOrder</span>(root)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(arr[i+<span class=\"number\">1</span>]&lt;=arr[i])&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"和为s的连续正数序列","date":"2020-03-06T14:10:51.000Z","_content":"### 题目\n```\n输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。\n\n序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。\n```\n```\n输入：target = 9\n输出：[[2,3,4],[4,5]]\n```\n```\n输入：target = 15\n输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n```\n\n### 解题思路\n先把数分解9=1+8=2+7=3+6=4+5,按这种，找到可能组成正确结果的数组，根据数的结构，易知结果可能存在`[1,2,3,4,5]`中，不难发现数组最后一个数,如果target是偶数就是`target/2`,如果是奇数就是`target/2`取整加一，即`Math.floor(target/2)+1` 或采用二进制取整`(target/2 | 0) + 1`,再对找到的数组采用滑动窗口模型，找出答案。\n\n### 代码\n```js\nvar findContinuousSequence = function (target) {\n  let index = target % 2 === 0 ? target / 2 : (target / 2 | 0) + 1\n  let res = []\n  let temp = []\n  let sum = 0\n  for (let i = 1; i <= index; i++) {\n    temp.push(i)\n    sum = sum + i\n    while (sum > target) {\n      sum -= temp[0]\n      temp.shift()\n    }\n    if (sum === target) {\n      temp.length >= 2 && res.push([...temp])\n    }\n  }\n  return res;\n};\n```\n> 来源：力扣（LeetCode）\n>链接：https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\n>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。","source":"_posts/leetcode-lian-xu-zheng-shu-lcof.md","raw":"---\ntitle: 和为s的连续正数序列\ndate: 2020-03-06 22:10:51\ntags:\n  - 算法与数据结构\n  - LeetCode\n---\n### 题目\n```\n输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。\n\n序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。\n```\n```\n输入：target = 9\n输出：[[2,3,4],[4,5]]\n```\n```\n输入：target = 15\n输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n```\n\n### 解题思路\n先把数分解9=1+8=2+7=3+6=4+5,按这种，找到可能组成正确结果的数组，根据数的结构，易知结果可能存在`[1,2,3,4,5]`中，不难发现数组最后一个数,如果target是偶数就是`target/2`,如果是奇数就是`target/2`取整加一，即`Math.floor(target/2)+1` 或采用二进制取整`(target/2 | 0) + 1`,再对找到的数组采用滑动窗口模型，找出答案。\n\n### 代码\n```js\nvar findContinuousSequence = function (target) {\n  let index = target % 2 === 0 ? target / 2 : (target / 2 | 0) + 1\n  let res = []\n  let temp = []\n  let sum = 0\n  for (let i = 1; i <= index; i++) {\n    temp.push(i)\n    sum = sum + i\n    while (sum > target) {\n      sum -= temp[0]\n      temp.shift()\n    }\n    if (sum === target) {\n      temp.length >= 2 && res.push([...temp])\n    }\n  }\n  return res;\n};\n```\n> 来源：力扣（LeetCode）\n>链接：https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\n>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。","slug":"leetcode-lian-xu-zheng-shu-lcof","published":1,"updated":"2021-08-07T01:59:03.346Z","_id":"cl4ince6p001dcgufcd6bec5o","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</span><br><span class=\"line\"></span><br><span class=\"line\">序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 9</span><br><span class=\"line\">输出：[[2,3,4],[4,5]]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 15</span><br><span class=\"line\">输出：[[1,2,3,4,5],[4,5,6],[7,8]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<p>先把数分解9=1+8=2+7=3+6=4+5,按这种，找到可能组成正确结果的数组，根据数的结构，易知结果可能存在<code>[1,2,3,4,5]</code>中，不难发现数组最后一个数,如果target是偶数就是<code>target/2</code>,如果是奇数就是<code>target/2</code>取整加一，即<code>Math.floor(target/2)+1</code> 或采用二进制取整<code>(target/2 | 0) + 1</code>,再对找到的数组采用滑动窗口模型，找出答案。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findContinuousSequence = <span class=\"keyword\">function</span> (<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = target % <span class=\"number\">2</span> === <span class=\"number\">0</span> ? target / <span class=\"number\">2</span> : (target / <span class=\"number\">2</span> | <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= index; i++) &#123;</span><br><span class=\"line\">    temp.<span class=\"title function_\">push</span>(i)</span><br><span class=\"line\">    sum = sum + i</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sum &gt; target) &#123;</span><br><span class=\"line\">      sum -= temp[<span class=\"number\">0</span>]</span><br><span class=\"line\">      temp.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === target) &#123;</span><br><span class=\"line\">      temp.<span class=\"property\">length</span> &gt;= <span class=\"number\">2</span> &amp;&amp; res.<span class=\"title function_\">push</span>([...temp])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\">https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof</a><br />\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</span><br><span class=\"line\"></span><br><span class=\"line\">序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 9</span><br><span class=\"line\">输出：[[2,3,4],[4,5]]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 15</span><br><span class=\"line\">输出：[[1,2,3,4,5],[4,5,6],[7,8]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<p>先把数分解9=1+8=2+7=3+6=4+5,按这种，找到可能组成正确结果的数组，根据数的结构，易知结果可能存在<code>[1,2,3,4,5]</code>中，不难发现数组最后一个数,如果target是偶数就是<code>target/2</code>,如果是奇数就是<code>target/2</code>取整加一，即<code>Math.floor(target/2)+1</code> 或采用二进制取整<code>(target/2 | 0) + 1</code>,再对找到的数组采用滑动窗口模型，找出答案。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> findContinuousSequence = <span class=\"keyword\">function</span> (<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = target % <span class=\"number\">2</span> === <span class=\"number\">0</span> ? target / <span class=\"number\">2</span> : (target / <span class=\"number\">2</span> | <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= index; i++) &#123;</span><br><span class=\"line\">    temp.<span class=\"title function_\">push</span>(i)</span><br><span class=\"line\">    sum = sum + i</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sum &gt; target) &#123;</span><br><span class=\"line\">      sum -= temp[<span class=\"number\">0</span>]</span><br><span class=\"line\">      temp.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === target) &#123;</span><br><span class=\"line\">      temp.<span class=\"property\">length</span> &gt;= <span class=\"number\">2</span> &amp;&amp; res.<span class=\"title function_\">push</span>([...temp])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\">https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof</a><br />\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n</blockquote>\n"},{"title":"腐烂的橘子","date":"2020-03-04T01:27:10.000Z","_content":"### 题目描述\n![图片来源LeetCode](http://blogimage.lemonlife.top/202003040932_499.png?/)\n```\n在给定的网格中，每个单元格可以有以下三个值之一：\n\n值 0 代表空单元格；\n值 1 代表新鲜橘子；\n值 2 代表腐烂的橘子。\n每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。\n\n返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。\n```\n```\n输入：[[2,1,1],[1,1,0],[0,1,1]]\n输出：4\n```\n```\n输入：[[2,1,1],[0,1,1],[1,0,1]]\n输出：-1\n解释：左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。\n```\n```\n输入：[[0,2]]\n输出：0\n解释：因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。\n```\n### 解题思路\n\n你站在这别动，我去买几个橘子😂😂😂\n1. 写一个函数把 每次坏掉的橘子记录下来，存在数组里面，函数的返回值是坏掉橘子的位置,组成的数组\n   ```js\n     function count(grid) {\n       let arr = []\n       for (let i = 0; i < grid.length; i++) {\n         for (let j = 0; j < grid[0].length; j++) {\n           if (grid[i][j] === 2) {\n             arr.push([i, j])\n           }\n         }\n       }\n       return arr\n     }\n   ```\n2. 定义一个 坏橘子的操作,取出上面统计的结果，循环遍历每个元素,把数组中的每个坏橘子，周围的好橘子腐烂掉。\n每次，所有的腐烂操作结束后，再进行一次，统计坏橘子的位置，如果发现，统计函数返回的坏橘子的位置数组，和上次一样。说明能被腐烂的已经全腐烂了，此时返回times(即bad函数被调用的次数-1),否则继续调用bad函数，进行坏橘子的操作。\n   ```js\n     let times = 0;\n     let badsArr = count(grid)\n     function bad() {\n       badsArr.forEach(([i, j]) => {\n         if (i - 1 >= 0 && grid[i - 1][j] == 1) {\n           grid[i - 1][j] = 2\n         }\n         if (i + 1 < grid.length && grid[i + 1][j] == 1) {\n           grid[i + 1][j] = 2\n         }\n         if (j - 1 >= 0 && grid[i][j - 1] ==1) {\n           grid[i][j - 1] = 2\n         }\n         if (j + 1 < grid[0].length && grid[i][j + 1] ==1) {\n           grid[i][j + 1] = 2\n         }\n       })\n       let newBadsArr = count(grid)\n       if (newBadsArr.length === badsArr.length) {\n         return times\n       } else {\n         times++\n         badsArr = newBadsArr\n         return bad()\n       }\n     }\n     bad()\n   ```\n3. 上述，两个过程都结束之后，我们再次看一下现在的二维橘子数组，如果在数组里面，找到了好的橘子。说明，没完全腐烂成功，返回 `-1`,否则 返回 `times`\n   ```js\n     for (let i = 0; i < grid.length; i++) {\n       for (let j = 0; j < grid[0].length; j++) {\n         if (grid[i][j] === 1) {\n           return -1\n         }\n       }\n     }\n   ```\n### 完整代码如下\n\n```javascript\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar orangesRotting = function (grid) {\n  function count(grid) {\n    let arr = []\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[0].length; j++) {\n        if (grid[i][j] === 2) {\n          arr.push([i, j])\n        }\n      }\n    }\n    return arr\n  }\n  let times = 0;\n  let badsArr = count(grid)\n  function bad() {\n    badsArr.forEach(([i, j]) => {\n      if (i - 1 >= 0 && grid[i - 1][j] == 1) {\n        grid[i - 1][j] = 2\n      }\n      if (i + 1 < grid.length && grid[i + 1][j] == 1) {\n        grid[i + 1][j] = 2\n      }\n      if (j - 1 >= 0 && grid[i][j - 1] ==1) {\n        grid[i][j - 1] = 2\n      }\n      if (j + 1 < grid[0].length && grid[i][j + 1] ==1) {\n        grid[i][j + 1] = 2\n      }\n    })\n    let newBadsArr = count(grid)\n    if (newBadsArr.length === badsArr.length) {\n      return times\n    } else {\n      times++\n      badsArr = newBadsArr\n      return bad()\n    }\n  }\n  bad()\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        return -1\n      }\n    }\n  }\n  return times\n};\n```\n\n>题目来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/rotting-oranges\n","source":"_posts/leetcode-994.md","raw":"---\ntitle: 腐烂的橘子\ndate: 2020-03-04 09:27:10\ntags:\n  - 算法与数据结构\n  - LeetCode\n---\n### 题目描述\n![图片来源LeetCode](http://blogimage.lemonlife.top/202003040932_499.png?/)\n```\n在给定的网格中，每个单元格可以有以下三个值之一：\n\n值 0 代表空单元格；\n值 1 代表新鲜橘子；\n值 2 代表腐烂的橘子。\n每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。\n\n返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。\n```\n```\n输入：[[2,1,1],[1,1,0],[0,1,1]]\n输出：4\n```\n```\n输入：[[2,1,1],[0,1,1],[1,0,1]]\n输出：-1\n解释：左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。\n```\n```\n输入：[[0,2]]\n输出：0\n解释：因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。\n```\n### 解题思路\n\n你站在这别动，我去买几个橘子😂😂😂\n1. 写一个函数把 每次坏掉的橘子记录下来，存在数组里面，函数的返回值是坏掉橘子的位置,组成的数组\n   ```js\n     function count(grid) {\n       let arr = []\n       for (let i = 0; i < grid.length; i++) {\n         for (let j = 0; j < grid[0].length; j++) {\n           if (grid[i][j] === 2) {\n             arr.push([i, j])\n           }\n         }\n       }\n       return arr\n     }\n   ```\n2. 定义一个 坏橘子的操作,取出上面统计的结果，循环遍历每个元素,把数组中的每个坏橘子，周围的好橘子腐烂掉。\n每次，所有的腐烂操作结束后，再进行一次，统计坏橘子的位置，如果发现，统计函数返回的坏橘子的位置数组，和上次一样。说明能被腐烂的已经全腐烂了，此时返回times(即bad函数被调用的次数-1),否则继续调用bad函数，进行坏橘子的操作。\n   ```js\n     let times = 0;\n     let badsArr = count(grid)\n     function bad() {\n       badsArr.forEach(([i, j]) => {\n         if (i - 1 >= 0 && grid[i - 1][j] == 1) {\n           grid[i - 1][j] = 2\n         }\n         if (i + 1 < grid.length && grid[i + 1][j] == 1) {\n           grid[i + 1][j] = 2\n         }\n         if (j - 1 >= 0 && grid[i][j - 1] ==1) {\n           grid[i][j - 1] = 2\n         }\n         if (j + 1 < grid[0].length && grid[i][j + 1] ==1) {\n           grid[i][j + 1] = 2\n         }\n       })\n       let newBadsArr = count(grid)\n       if (newBadsArr.length === badsArr.length) {\n         return times\n       } else {\n         times++\n         badsArr = newBadsArr\n         return bad()\n       }\n     }\n     bad()\n   ```\n3. 上述，两个过程都结束之后，我们再次看一下现在的二维橘子数组，如果在数组里面，找到了好的橘子。说明，没完全腐烂成功，返回 `-1`,否则 返回 `times`\n   ```js\n     for (let i = 0; i < grid.length; i++) {\n       for (let j = 0; j < grid[0].length; j++) {\n         if (grid[i][j] === 1) {\n           return -1\n         }\n       }\n     }\n   ```\n### 完整代码如下\n\n```javascript\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar orangesRotting = function (grid) {\n  function count(grid) {\n    let arr = []\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[0].length; j++) {\n        if (grid[i][j] === 2) {\n          arr.push([i, j])\n        }\n      }\n    }\n    return arr\n  }\n  let times = 0;\n  let badsArr = count(grid)\n  function bad() {\n    badsArr.forEach(([i, j]) => {\n      if (i - 1 >= 0 && grid[i - 1][j] == 1) {\n        grid[i - 1][j] = 2\n      }\n      if (i + 1 < grid.length && grid[i + 1][j] == 1) {\n        grid[i + 1][j] = 2\n      }\n      if (j - 1 >= 0 && grid[i][j - 1] ==1) {\n        grid[i][j - 1] = 2\n      }\n      if (j + 1 < grid[0].length && grid[i][j + 1] ==1) {\n        grid[i][j + 1] = 2\n      }\n    })\n    let newBadsArr = count(grid)\n    if (newBadsArr.length === badsArr.length) {\n      return times\n    } else {\n      times++\n      badsArr = newBadsArr\n      return bad()\n    }\n  }\n  bad()\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        return -1\n      }\n    }\n  }\n  return times\n};\n```\n\n>题目来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/rotting-oranges\n","slug":"leetcode-994","published":1,"updated":"2021-08-07T01:59:03.346Z","_id":"cl4ince6p001ecguf1tqpaxvv","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p><img src=\"http://blogimage.lemonlife.top/202003040932_499.png?/\" alt=\"图片来源LeetCode\" /></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在给定的网格中，每个单元格可以有以下三个值之一：</span><br><span class=\"line\"></span><br><span class=\"line\">值 0 代表空单元格；</span><br><span class=\"line\">值 1 代表新鲜橘子；</span><br><span class=\"line\">值 2 代表腐烂的橘子。</span><br><span class=\"line\">每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。</span><br><span class=\"line\"></span><br><span class=\"line\">返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[[2,1,1],[1,1,0],[0,1,1]]</span><br><span class=\"line\">输出：4</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[[2,1,1],[0,1,1],[1,0,1]]</span><br><span class=\"line\">输出：-1</span><br><span class=\"line\">解释：左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[[0,2]]</span><br><span class=\"line\">输出：0</span><br><span class=\"line\">解释：因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<p>你站在这别动，我去买几个橘子😂😂😂</p>\n<ol>\n<li>写一个函数把 每次坏掉的橘子记录下来，存在数组里面，函数的返回值是坏掉橘子的位置,组成的数组<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">count</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; grid.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grid[i][j] === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>([i, j])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>定义一个 坏橘子的操作,取出上面统计的结果，循环遍历每个元素,把数组中的每个坏橘子，周围的好橘子腐烂掉。<br />\n每次，所有的腐烂操作结束后，再进行一次，统计坏橘子的位置，如果发现，统计函数返回的坏橘子的位置数组，和上次一样。说明能被腐烂的已经全腐烂了，此时返回times(即bad函数被调用的次数-1),否则继续调用bad函数，进行坏橘子的操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> times = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> badsArr = <span class=\"title function_\">count</span>(grid)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bad</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  badsArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">[i, j]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i - <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      grid[i - <span class=\"number\">1</span>][j] = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &lt; grid.<span class=\"property\">length</span> &amp;&amp; grid[i + <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      grid[i + <span class=\"number\">1</span>][j] = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i][j - <span class=\"number\">1</span>] ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      grid[i][j - <span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span> &amp;&amp; grid[i][j + <span class=\"number\">1</span>] ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      grid[i][j + <span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newBadsArr = <span class=\"title function_\">count</span>(grid)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newBadsArr.<span class=\"property\">length</span> === badsArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> times</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    times++</span><br><span class=\"line\">    badsArr = newBadsArr</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">bad</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">bad</span>()</span><br></pre></td></tr></table></figure>\n</li>\n<li>上述，两个过程都结束之后，我们再次看一下现在的二维橘子数组，如果在数组里面，找到了好的橘子。说明，没完全腐烂成功，返回 <code>-1</code>,否则 返回 <code>times</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; grid.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grid[i][j] === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"完整代码如下\"><a class=\"markdownIt-Anchor\" href=\"#完整代码如下\"></a> 完整代码如下</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">grid</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> orangesRotting = <span class=\"keyword\">function</span> (<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">count</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; grid.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid[i][j] === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">          arr.<span class=\"title function_\">push</span>([i, j])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> times = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> badsArr = <span class=\"title function_\">count</span>(grid)</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">bad</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    badsArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">[i, j]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i - <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        grid[i - <span class=\"number\">1</span>][j] = <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &lt; grid.<span class=\"property\">length</span> &amp;&amp; grid[i + <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        grid[i + <span class=\"number\">1</span>][j] = <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i][j - <span class=\"number\">1</span>] ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        grid[i][j - <span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span> &amp;&amp; grid[i][j + <span class=\"number\">1</span>] ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        grid[i][j + <span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newBadsArr = <span class=\"title function_\">count</span>(grid)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newBadsArr.<span class=\"property\">length</span> === badsArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> times</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      times++</span><br><span class=\"line\">      badsArr = newBadsArr</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">bad</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">bad</span>()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; grid.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grid[i][j] === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> times</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>题目来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/rotting-oranges\">https://leetcode-cn.com/problems/rotting-oranges</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p><img src=\"http://blogimage.lemonlife.top/202003040932_499.png?/\" alt=\"图片来源LeetCode\" /></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在给定的网格中，每个单元格可以有以下三个值之一：</span><br><span class=\"line\"></span><br><span class=\"line\">值 0 代表空单元格；</span><br><span class=\"line\">值 1 代表新鲜橘子；</span><br><span class=\"line\">值 2 代表腐烂的橘子。</span><br><span class=\"line\">每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。</span><br><span class=\"line\"></span><br><span class=\"line\">返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[[2,1,1],[1,1,0],[0,1,1]]</span><br><span class=\"line\">输出：4</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[[2,1,1],[0,1,1],[1,0,1]]</span><br><span class=\"line\">输出：-1</span><br><span class=\"line\">解释：左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[[0,2]]</span><br><span class=\"line\">输出：0</span><br><span class=\"line\">解释：因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<p>你站在这别动，我去买几个橘子😂😂😂</p>\n<ol>\n<li>写一个函数把 每次坏掉的橘子记录下来，存在数组里面，函数的返回值是坏掉橘子的位置,组成的数组<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">count</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; grid.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grid[i][j] === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">push</span>([i, j])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>定义一个 坏橘子的操作,取出上面统计的结果，循环遍历每个元素,把数组中的每个坏橘子，周围的好橘子腐烂掉。<br />\n每次，所有的腐烂操作结束后，再进行一次，统计坏橘子的位置，如果发现，统计函数返回的坏橘子的位置数组，和上次一样。说明能被腐烂的已经全腐烂了，此时返回times(即bad函数被调用的次数-1),否则继续调用bad函数，进行坏橘子的操作。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> times = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> badsArr = <span class=\"title function_\">count</span>(grid)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bad</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  badsArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">[i, j]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i - <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      grid[i - <span class=\"number\">1</span>][j] = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &lt; grid.<span class=\"property\">length</span> &amp;&amp; grid[i + <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      grid[i + <span class=\"number\">1</span>][j] = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i][j - <span class=\"number\">1</span>] ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      grid[i][j - <span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span> &amp;&amp; grid[i][j + <span class=\"number\">1</span>] ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      grid[i][j + <span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newBadsArr = <span class=\"title function_\">count</span>(grid)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newBadsArr.<span class=\"property\">length</span> === badsArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> times</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    times++</span><br><span class=\"line\">    badsArr = newBadsArr</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">bad</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">bad</span>()</span><br></pre></td></tr></table></figure>\n</li>\n<li>上述，两个过程都结束之后，我们再次看一下现在的二维橘子数组，如果在数组里面，找到了好的橘子。说明，没完全腐烂成功，返回 <code>-1</code>,否则 返回 <code>times</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; grid.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grid[i][j] === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"完整代码如下\"><a class=\"markdownIt-Anchor\" href=\"#完整代码如下\"></a> 完整代码如下</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">grid</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> orangesRotting = <span class=\"keyword\">function</span> (<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">count</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; grid.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grid[i][j] === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">          arr.<span class=\"title function_\">push</span>([i, j])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> times = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> badsArr = <span class=\"title function_\">count</span>(grid)</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">bad</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    badsArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">[i, j]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i - <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        grid[i - <span class=\"number\">1</span>][j] = <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &lt; grid.<span class=\"property\">length</span> &amp;&amp; grid[i + <span class=\"number\">1</span>][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        grid[i + <span class=\"number\">1</span>][j] = <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; grid[i][j - <span class=\"number\">1</span>] ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        grid[i][j - <span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span> &amp;&amp; grid[i][j + <span class=\"number\">1</span>] ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        grid[i][j + <span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newBadsArr = <span class=\"title function_\">count</span>(grid)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newBadsArr.<span class=\"property\">length</span> === badsArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> times</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      times++</span><br><span class=\"line\">      badsArr = newBadsArr</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">bad</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">bad</span>()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; grid.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (grid[i][j] === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> times</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>题目来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/rotting-oranges\">https://leetcode-cn.com/problems/rotting-oranges</a></p>\n</blockquote>\n"},{"title":"按摩师~动态规划","date":"2020-03-24T14:31:17.000Z","_content":"### 题目\n\n>来源：力扣（LeetCode）\n>链接：https://leetcode-cn.com/problems/the-masseuse-lcci\n\n一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。\n```\n输入： [1,2,3,1]\n输出： 4\n解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。\n```\n```\n输入： [2,1,4,5,3,1,1,3]\n输出： 12\n解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。\n```\n### 解题思路\n本题中 面对每一个预约，我们有只有两种选择，选或者不选。因此 我们定义变量dpy （yes）表示 选；定义dpn (no) 表示不选。\n\n如果 目前这个预约我选了，那么之前那个预约一定是不选的， 所以 `dpy = dpn + nums[i]`\n\n如果目前这个预约我不选，不选就意味着，可以理解成当前这个预约不存在，那么决定我当前dpn的值，肯定是上一次 选和不选 两个状态中的最大值。所以 `dpn = Math.max(dpy,dpn)`\n\n### 代码\n```js\nvar massage = function (nums) {\n  if (nums.length === 0) return 0;\n  let dpn = 0 // 不预约\n  let dpy = nums[0] //预约\n  for (let i = 1; i < nums.length; i++) {\n    [dpn,dpy] = [Math.max(dpn,dpy),dpn+nums[i]]\n  }\n  return Math.max(dpn, dpy)\n};\n```","source":"_posts/leetcode-the-masseuse-lcci.md","raw":"---\ntitle: 按摩师~动态规划\ndate: 2020-03-24 22:31:17\ntags:\n  - 算法与数据结构\n  - LeetCode\n---\n### 题目\n\n>来源：力扣（LeetCode）\n>链接：https://leetcode-cn.com/problems/the-masseuse-lcci\n\n一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。\n```\n输入： [1,2,3,1]\n输出： 4\n解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。\n```\n```\n输入： [2,1,4,5,3,1,1,3]\n输出： 12\n解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。\n```\n### 解题思路\n本题中 面对每一个预约，我们有只有两种选择，选或者不选。因此 我们定义变量dpy （yes）表示 选；定义dpn (no) 表示不选。\n\n如果 目前这个预约我选了，那么之前那个预约一定是不选的， 所以 `dpy = dpn + nums[i]`\n\n如果目前这个预约我不选，不选就意味着，可以理解成当前这个预约不存在，那么决定我当前dpn的值，肯定是上一次 选和不选 两个状态中的最大值。所以 `dpn = Math.max(dpy,dpn)`\n\n### 代码\n```js\nvar massage = function (nums) {\n  if (nums.length === 0) return 0;\n  let dpn = 0 // 不预约\n  let dpy = nums[0] //预约\n  for (let i = 1; i < nums.length; i++) {\n    [dpn,dpy] = [Math.max(dpn,dpy),dpn+nums[i]]\n  }\n  return Math.max(dpn, dpy)\n};\n```","slug":"leetcode-the-masseuse-lcci","published":1,"updated":"2021-08-07T01:59:03.347Z","_id":"cl4ince6q001gcguf721kf5i5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h3>\n<blockquote>\n<p>来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/the-masseuse-lcci\">https://leetcode-cn.com/problems/the-masseuse-lcci</a></p>\n</blockquote>\n<p>一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： [1,2,3,1]</span><br><span class=\"line\">输出： 4</span><br><span class=\"line\">解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： [2,1,4,5,3,1,1,3]</span><br><span class=\"line\">输出： 12</span><br><span class=\"line\">解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<p>本题中 面对每一个预约，我们有只有两种选择，选或者不选。因此 我们定义变量dpy （yes）表示 选；定义dpn (no) 表示不选。</p>\n<p>如果 目前这个预约我选了，那么之前那个预约一定是不选的， 所以 <code>dpy = dpn + nums[i]</code></p>\n<p>如果目前这个预约我不选，不选就意味着，可以理解成当前这个预约不存在，那么决定我当前dpn的值，肯定是上一次 选和不选 两个状态中的最大值。所以 <code>dpn = Math.max(dpy,dpn)</code></p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> massage = <span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dpn = <span class=\"number\">0</span> <span class=\"comment\">// 不预约</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dpy = nums[<span class=\"number\">0</span>] <span class=\"comment\">//预约</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    [dpn,dpy] = [<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(dpn,dpy),dpn+nums[i]]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(dpn, dpy)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h3>\n<blockquote>\n<p>来源：力扣（LeetCode）<br />\n链接：<a href=\"https://leetcode-cn.com/problems/the-masseuse-lcci\">https://leetcode-cn.com/problems/the-masseuse-lcci</a></p>\n</blockquote>\n<p>一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： [1,2,3,1]</span><br><span class=\"line\">输出： 4</span><br><span class=\"line\">解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： [2,1,4,5,3,1,1,3]</span><br><span class=\"line\">输出： 12</span><br><span class=\"line\">解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<p>本题中 面对每一个预约，我们有只有两种选择，选或者不选。因此 我们定义变量dpy （yes）表示 选；定义dpn (no) 表示不选。</p>\n<p>如果 目前这个预约我选了，那么之前那个预约一定是不选的， 所以 <code>dpy = dpn + nums[i]</code></p>\n<p>如果目前这个预约我不选，不选就意味着，可以理解成当前这个预约不存在，那么决定我当前dpn的值，肯定是上一次 选和不选 两个状态中的最大值。所以 <code>dpn = Math.max(dpy,dpn)</code></p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> massage = <span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dpn = <span class=\"number\">0</span> <span class=\"comment\">// 不预约</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dpy = nums[<span class=\"number\">0</span>] <span class=\"comment\">//预约</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    [dpn,dpy] = [<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(dpn,dpy),dpn+nums[i]]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(dpn, dpy)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"单词的压缩编码~后缀树","date":"2020-03-28T14:42:24.000Z","_content":"\n>来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/short-encoding-of-words\n### 题目\n给定一个单词列表，我们将这个列表编码成一个索引字符串 S 与一个索引列表 A。\n\n例如，如果这个列表是 [\"time\", \"me\", \"bell\"]，我们就可以将其表示为 S = \"time#bell#\" 和 indexes = [0, 2, 5]。\n\n对于每一个索引，我们可以通过从字符串 S 中索引的位置开始读取字符串，直到 \"#\" 结束，来恢复我们之前的单词列表。\n\n那么成功对给定单词列表进行编码的最小字符串长度是多少呢？\n\n```\n输入: words = [\"time\", \"me\", \"bell\"]\n输出: 10\n说明: S = \"time#bell#\" ， indexes = [0, 2, 5] 。\n\n```\n### 解题思路\n1. 根据题目是从一个单词某个索引处，读取到该单词的末尾结束。且必须要读到末尾，，因为只有末尾有分割符\"#\",因此很自然的就想到了后缀树的思想\n2. JavaScript 并没有内置，后缀树这种数据结构，我们可以用Map的嵌套，来模拟一个后缀字典树。\n### 代码\n```js\nvar minimumLengthEncoding = function (words) {\n  if (words.length === 0) return 0;\n  // 使用Map 数据结构模仿后缀字典树\n  let tree = new Map();\n  function insert(word) {\n    word = `${word}`\n    let _tree = tree\n    for (let i = word.length - 1; i >= 0; i--) {\n      if (!_tree.has(word[i])) {\n        _tree.set(word[i], new Map())\n      }\n      _tree = _tree.get(word[i])\n    }\n  }\n  // 向字典树中插入单词\n  words.map(value => insert(value))\n  // 统计出 生成的字典树，有多少字母，以及多少个单词\n  let letters = 0\n  let bound = 0\n  function orderMap(tree, temp) {\n    if (tree.size === 0) {\n      letters += temp\n      bound += 1\n      return\n    }\n    for (let [key, value] of tree) {\n      let _temp = temp\n      orderMap(tree.get(key), ++_temp)\n    }\n  }\n  orderMap(tree, 0)\n  return letters + bound;\n};\n```","source":"_posts/leetcode-short-encoding-of-words.md","raw":"---\ntitle: 单词的压缩编码~后缀树\ndate: 2020-03-28 22:42:24\ntags:\n  - 算法与数据结构\n  - LeetCode\n---\n\n>来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/short-encoding-of-words\n### 题目\n给定一个单词列表，我们将这个列表编码成一个索引字符串 S 与一个索引列表 A。\n\n例如，如果这个列表是 [\"time\", \"me\", \"bell\"]，我们就可以将其表示为 S = \"time#bell#\" 和 indexes = [0, 2, 5]。\n\n对于每一个索引，我们可以通过从字符串 S 中索引的位置开始读取字符串，直到 \"#\" 结束，来恢复我们之前的单词列表。\n\n那么成功对给定单词列表进行编码的最小字符串长度是多少呢？\n\n```\n输入: words = [\"time\", \"me\", \"bell\"]\n输出: 10\n说明: S = \"time#bell#\" ， indexes = [0, 2, 5] 。\n\n```\n### 解题思路\n1. 根据题目是从一个单词某个索引处，读取到该单词的末尾结束。且必须要读到末尾，，因为只有末尾有分割符\"#\",因此很自然的就想到了后缀树的思想\n2. JavaScript 并没有内置，后缀树这种数据结构，我们可以用Map的嵌套，来模拟一个后缀字典树。\n### 代码\n```js\nvar minimumLengthEncoding = function (words) {\n  if (words.length === 0) return 0;\n  // 使用Map 数据结构模仿后缀字典树\n  let tree = new Map();\n  function insert(word) {\n    word = `${word}`\n    let _tree = tree\n    for (let i = word.length - 1; i >= 0; i--) {\n      if (!_tree.has(word[i])) {\n        _tree.set(word[i], new Map())\n      }\n      _tree = _tree.get(word[i])\n    }\n  }\n  // 向字典树中插入单词\n  words.map(value => insert(value))\n  // 统计出 生成的字典树，有多少字母，以及多少个单词\n  let letters = 0\n  let bound = 0\n  function orderMap(tree, temp) {\n    if (tree.size === 0) {\n      letters += temp\n      bound += 1\n      return\n    }\n    for (let [key, value] of tree) {\n      let _temp = temp\n      orderMap(tree.get(key), ++_temp)\n    }\n  }\n  orderMap(tree, 0)\n  return letters + bound;\n};\n```","slug":"leetcode-short-encoding-of-words","published":1,"updated":"2021-08-07T01:59:03.346Z","_id":"cl4ince6r001icguf1ablfu2f","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode-cn.com/problems/short-encoding-of-words\">https://leetcode-cn.com/problems/short-encoding-of-words</a></p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h3>\n<p>给定一个单词列表，我们将这个列表编码成一个索引字符串 S 与一个索引列表 A。</p>\n<p>例如，如果这个列表是 [“time”, “me”, “bell”]，我们就可以将其表示为 S = “time#bell#” 和 indexes = [0, 2, 5]。</p>\n<p>对于每一个索引，我们可以通过从字符串 S 中索引的位置开始读取字符串，直到 “#” 结束，来恢复我们之前的单词列表。</p>\n<p>那么成功对给定单词列表进行编码的最小字符串长度是多少呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: words = [&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</span><br><span class=\"line\">输出: 10</span><br><span class=\"line\">说明: S = &quot;time#bell#&quot; ， indexes = [0, 2, 5] 。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<ol>\n<li>根据题目是从一个单词某个索引处，读取到该单词的末尾结束。且必须要读到末尾，，因为只有末尾有分割符&quot;#&quot;,因此很自然的就想到了后缀树的思想</li>\n<li>JavaScript 并没有内置，后缀树这种数据结构，我们可以用Map的嵌套，来模拟一个后缀字典树。</li>\n</ol>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minimumLengthEncoding = <span class=\"keyword\">function</span> (<span class=\"params\">words</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (words.<span class=\"property\">length</span> === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用Map 数据结构模仿后缀字典树</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tree = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">insert</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">    word = <span class=\"string\">`<span class=\"subst\">$&#123;word&#125;</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> _tree = tree</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = word.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!_tree.<span class=\"title function_\">has</span>(word[i])) &#123;</span><br><span class=\"line\">        _tree.<span class=\"title function_\">set</span>(word[i], <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      _tree = _tree.<span class=\"title function_\">get</span>(word[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 向字典树中插入单词</span></span><br><span class=\"line\">  words.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"title function_\">insert</span>(value))</span><br><span class=\"line\">  <span class=\"comment\">// 统计出 生成的字典树，有多少字母，以及多少个单词</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> letters = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> bound = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">orderMap</span>(<span class=\"params\">tree, temp</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree.<span class=\"property\">size</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      letters += temp</span><br><span class=\"line\">      bound += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> tree) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _temp = temp</span><br><span class=\"line\">      <span class=\"title function_\">orderMap</span>(tree.<span class=\"title function_\">get</span>(key), ++_temp)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">orderMap</span>(tree, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> letters + bound;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>来源：力扣（LeetCode）链接：<a href=\"https://leetcode-cn.com/problems/short-encoding-of-words\">https://leetcode-cn.com/problems/short-encoding-of-words</a></p>\n</blockquote>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目</h3>\n<p>给定一个单词列表，我们将这个列表编码成一个索引字符串 S 与一个索引列表 A。</p>\n<p>例如，如果这个列表是 [“time”, “me”, “bell”]，我们就可以将其表示为 S = “time#bell#” 和 indexes = [0, 2, 5]。</p>\n<p>对于每一个索引，我们可以通过从字符串 S 中索引的位置开始读取字符串，直到 “#” 结束，来恢复我们之前的单词列表。</p>\n<p>那么成功对给定单词列表进行编码的最小字符串长度是多少呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: words = [&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</span><br><span class=\"line\">输出: 10</span><br><span class=\"line\">说明: S = &quot;time#bell#&quot; ， indexes = [0, 2, 5] 。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<ol>\n<li>根据题目是从一个单词某个索引处，读取到该单词的末尾结束。且必须要读到末尾，，因为只有末尾有分割符&quot;#&quot;,因此很自然的就想到了后缀树的思想</li>\n<li>JavaScript 并没有内置，后缀树这种数据结构，我们可以用Map的嵌套，来模拟一个后缀字典树。</li>\n</ol>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minimumLengthEncoding = <span class=\"keyword\">function</span> (<span class=\"params\">words</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (words.<span class=\"property\">length</span> === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用Map 数据结构模仿后缀字典树</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tree = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">insert</span>(<span class=\"params\">word</span>) &#123;</span><br><span class=\"line\">    word = <span class=\"string\">`<span class=\"subst\">$&#123;word&#125;</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> _tree = tree</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = word.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!_tree.<span class=\"title function_\">has</span>(word[i])) &#123;</span><br><span class=\"line\">        _tree.<span class=\"title function_\">set</span>(word[i], <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      _tree = _tree.<span class=\"title function_\">get</span>(word[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 向字典树中插入单词</span></span><br><span class=\"line\">  words.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"title function_\">insert</span>(value))</span><br><span class=\"line\">  <span class=\"comment\">// 统计出 生成的字典树，有多少字母，以及多少个单词</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> letters = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> bound = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">orderMap</span>(<span class=\"params\">tree, temp</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree.<span class=\"property\">size</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      letters += temp</span><br><span class=\"line\">      bound += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> tree) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _temp = temp</span><br><span class=\"line\">      <span class=\"title function_\">orderMap</span>(tree.<span class=\"title function_\">get</span>(key), ++_temp)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">orderMap</span>(tree, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> letters + bound;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"连续数组","date":"2020-02-17T13:35:59.000Z","_content":"\n给定一个二进制数组, 找到含有相同数量的 0 和 1 的最长连续子数组（的长度）。\n\n```\n输入: [0,1]\n输出: 2\n说明: [0, 1] 是具有相同数量0和1的最长连续子数组。\n```\n### 解决思路\n把0当成-1,然后依次累加数组中的元素，记录每次求和不同的结果的下标。存入Map,如果遇到相同的值，当前下标减去Map中存在的下标即为最大的长度。(循环的思想)。所有要提前存放好Map(0,-1)\n### 代码\n```JS\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxLength = function (nums) {\n  let map = new Map()\n  let count = 0\n  let maxLength = 0\n  map.set(0,-1)\n  for (let i = 0; i < nums.length; i++) {\n    if(nums[i]==0){\n      count -= 1\n    }else{\n      count+=1\n    }\n    if(!map.has(count)){\n       map.set(count,i)\n    }else{\n      maxLength = Math.max(maxLength,i - map.get(count))\n    }\n  }\n  return maxLength\n};\n```","source":"_posts/leetcode-525.md","raw":"---\ntitle: 连续数组\ndate: 2020-02-17 21:35:59\ntags: \n  - 算法与数据结构\n  - LeetCode\n---\n\n给定一个二进制数组, 找到含有相同数量的 0 和 1 的最长连续子数组（的长度）。\n\n```\n输入: [0,1]\n输出: 2\n说明: [0, 1] 是具有相同数量0和1的最长连续子数组。\n```\n### 解决思路\n把0当成-1,然后依次累加数组中的元素，记录每次求和不同的结果的下标。存入Map,如果遇到相同的值，当前下标减去Map中存在的下标即为最大的长度。(循环的思想)。所有要提前存放好Map(0,-1)\n### 代码\n```JS\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxLength = function (nums) {\n  let map = new Map()\n  let count = 0\n  let maxLength = 0\n  map.set(0,-1)\n  for (let i = 0; i < nums.length; i++) {\n    if(nums[i]==0){\n      count -= 1\n    }else{\n      count+=1\n    }\n    if(!map.has(count)){\n       map.set(count,i)\n    }else{\n      maxLength = Math.max(maxLength,i - map.get(count))\n    }\n  }\n  return maxLength\n};\n```","slug":"leetcode-525","published":1,"updated":"2021-08-07T01:59:03.345Z","_id":"cl4ince6s001lcguf1rzq7cpd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>给定一个二进制数组, 找到含有相同数量的 0 和 1 的最长连续子数组（的长度）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [0,1]</span><br><span class=\"line\">输出: 2</span><br><span class=\"line\">说明: [0, 1] 是具有相同数量0和1的最长连续子数组。</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<p>把0当成-1,然后依次累加数组中的元素，记录每次求和不同的结果的下标。存入Map,如果遇到相同的值，当前下标减去Map中存在的下标即为最大的长度。(循环的思想)。所有要提前存放好Map(0,-1)</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findMaxLength = <span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxLength = <span class=\"number\">0</span></span><br><span class=\"line\">  map.<span class=\"title function_\">set</span>(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      count -= <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      count+=<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!map.<span class=\"title function_\">has</span>(count))&#123;</span><br><span class=\"line\">       map.<span class=\"title function_\">set</span>(count,i)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      maxLength = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(maxLength,i - map.<span class=\"title function_\">get</span>(count))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxLength</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>给定一个二进制数组, 找到含有相同数量的 0 和 1 的最长连续子数组（的长度）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [0,1]</span><br><span class=\"line\">输出: 2</span><br><span class=\"line\">说明: [0, 1] 是具有相同数量0和1的最长连续子数组。</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<p>把0当成-1,然后依次累加数组中的元素，记录每次求和不同的结果的下标。存入Map,如果遇到相同的值，当前下标减去Map中存在的下标即为最大的长度。(循环的思想)。所有要提前存放好Map(0,-1)</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findMaxLength = <span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxLength = <span class=\"number\">0</span></span><br><span class=\"line\">  map.<span class=\"title function_\">set</span>(<span class=\"number\">0</span>,-<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      count -= <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      count+=<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!map.<span class=\"title function_\">has</span>(count))&#123;</span><br><span class=\"line\">       map.<span class=\"title function_\">set</span>(count,i)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      maxLength = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(maxLength,i - map.<span class=\"title function_\">get</span>(count))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxLength</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"合并两个排序的链表","date":"2020-02-06T10:27:27.000Z","_content":"## 合并两个排序的链表\n> 输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。\n```Java\n  /*\n  public class ListNode {\n      int val;\n      ListNode next = null;\n\n      ListNode(int val) {\n          this.val = val;\n      }\n  }*/\n```\n\n## 我的思路\n> 因为两个链表都是有序的，因此只要以一个链表为基准,把另一个链表的值依次插入即可\n## 我的解决办法\n- Java\n```Java\n  import java.util.ArrayList;\n  public class Solution {\n      public ListNode pList1;\n      public ListNode addNode(int val){\n          //已经到List1最后一个 说明List2后面都比List1要大\n           if(pList1.next == null){\n              pList1.next = new ListNode(val);\n              return pList1.next;\n          }\n          //后一项比前一项大的情况\n          if(pList1.next.val>=val){\n              ListNode newListNode = new ListNode(val);\n              newListNode.next = pList1.next;\n              pList1.next = newListNode;\n              return newListNode;\n          }\n          // 不满足上面两种的情况 继续迭代\n          pList1 = pList1.next;\n          return addNode(val);\n      }\n      public ListNode Merge(ListNode list1,ListNode list2) {\n          // 链表1的指针\n          pList1 = list1;\n          while(list2 != null){\n              addNode(list2.val);\n              list2 = list2.next; \n          }\n          return list1;\n      }\n  }\n```\n- JavaScript\n```JavaScript\n  function Merge(pHead1, pHead2)\n  {\n      // write code here\n      //排除 第一项pHead1大于pHead2的情况\n      if(pHead1!=null&& pHead2!=null && pHead1.val >= pHead2.val){\n          let newListNode = new ListNode(pHead2.val)\n          newListNode.next = pHead1\n          pHead1 = newListNode\n          pHead2 = pHead2.next\n      }\n      // 提取链表指针\n      let head1 = pHead1\n      function add(val){\n          //情况1 pHead1 已经到了最后\n          if(head1.next == null){\n              head1.next = new ListNode(val)\n              return;\n          }\n          // 情况2 从小到大迭代 pHead1，发现 后一个值比pHead2的当前值大\n          // 插入当前值\n          if(head1.next.val>=val){\n              let newListNode = new ListNode(val)\n               //插入到 比他大的节点前\n               newListNode.next = head1.next\n               head1.next = newListNode\n               return;\n          }\n          //不满足以上两种情况 迭代pHead1链表\n          head1 = head1.next\n          return add(val)\n      }\n      // 迭代pHead2\n      while(pHead2!=null){\n          add(pHead2.val)\n          pHead2=pHead2.next\n      }\n      return pHead1\n  }\n```","source":"_posts/mergeListNode.md","raw":"---\ntitle: 合并两个排序的链表\ndate: 2020-02-06 18:27:27\ntags:\n  - 算法与数据结构\n  - 剑指Offer\n---\n## 合并两个排序的链表\n> 输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。\n```Java\n  /*\n  public class ListNode {\n      int val;\n      ListNode next = null;\n\n      ListNode(int val) {\n          this.val = val;\n      }\n  }*/\n```\n\n## 我的思路\n> 因为两个链表都是有序的，因此只要以一个链表为基准,把另一个链表的值依次插入即可\n## 我的解决办法\n- Java\n```Java\n  import java.util.ArrayList;\n  public class Solution {\n      public ListNode pList1;\n      public ListNode addNode(int val){\n          //已经到List1最后一个 说明List2后面都比List1要大\n           if(pList1.next == null){\n              pList1.next = new ListNode(val);\n              return pList1.next;\n          }\n          //后一项比前一项大的情况\n          if(pList1.next.val>=val){\n              ListNode newListNode = new ListNode(val);\n              newListNode.next = pList1.next;\n              pList1.next = newListNode;\n              return newListNode;\n          }\n          // 不满足上面两种的情况 继续迭代\n          pList1 = pList1.next;\n          return addNode(val);\n      }\n      public ListNode Merge(ListNode list1,ListNode list2) {\n          // 链表1的指针\n          pList1 = list1;\n          while(list2 != null){\n              addNode(list2.val);\n              list2 = list2.next; \n          }\n          return list1;\n      }\n  }\n```\n- JavaScript\n```JavaScript\n  function Merge(pHead1, pHead2)\n  {\n      // write code here\n      //排除 第一项pHead1大于pHead2的情况\n      if(pHead1!=null&& pHead2!=null && pHead1.val >= pHead2.val){\n          let newListNode = new ListNode(pHead2.val)\n          newListNode.next = pHead1\n          pHead1 = newListNode\n          pHead2 = pHead2.next\n      }\n      // 提取链表指针\n      let head1 = pHead1\n      function add(val){\n          //情况1 pHead1 已经到了最后\n          if(head1.next == null){\n              head1.next = new ListNode(val)\n              return;\n          }\n          // 情况2 从小到大迭代 pHead1，发现 后一个值比pHead2的当前值大\n          // 插入当前值\n          if(head1.next.val>=val){\n              let newListNode = new ListNode(val)\n               //插入到 比他大的节点前\n               newListNode.next = head1.next\n               head1.next = newListNode\n               return;\n          }\n          //不满足以上两种情况 迭代pHead1链表\n          head1 = head1.next\n          return add(val)\n      }\n      // 迭代pHead2\n      while(pHead2!=null){\n          add(pHead2.val)\n          pHead2=pHead2.next\n      }\n      return pHead1\n  }\n```","slug":"mergeListNode","published":1,"updated":"2021-08-07T01:59:03.347Z","_id":"cl4ince6t001ncguf8han49mn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"合并两个排序的链表\"><a class=\"markdownIt-Anchor\" href=\"#合并两个排序的链表\"></a> 合并两个排序的链表</h2>\n<blockquote>\n<p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"我的思路\"><a class=\"markdownIt-Anchor\" href=\"#我的思路\"></a> 我的思路</h2>\n<blockquote>\n<p>因为两个链表都是有序的，因此只要以一个链表为基准,把另一个链表的值依次插入即可</p>\n</blockquote>\n<h2 id=\"我的解决办法\"><a class=\"markdownIt-Anchor\" href=\"#我的解决办法\"></a> 我的解决办法</h2>\n<ul>\n<li>Java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode pList1;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">addNode</span><span class=\"params\">(<span class=\"type\">int</span> val)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//已经到List1最后一个 说明List2后面都比List1要大</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>(pList1.next == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            pList1.next = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pList1.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//后一项比前一项大的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pList1.next.val&gt;=val)&#123;</span><br><span class=\"line\">            <span class=\"type\">ListNode</span> <span class=\"variable\">newListNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val);</span><br><span class=\"line\">            newListNode.next = pList1.next;</span><br><span class=\"line\">            pList1.next = newListNode;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> newListNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不满足上面两种的情况 继续迭代</span></span><br><span class=\"line\">        pList1 = pList1.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> addNode(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">Merge</span><span class=\"params\">(ListNode list1,ListNode list2)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 链表1的指针</span></span><br><span class=\"line\">        pList1 = list1;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(list2 != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            addNode(list2.val);</span><br><span class=\"line\">            list2 = list2.next; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JavaScript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Merge</span>(<span class=\"params\">pHead1, pHead2</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// write code here</span></span><br><span class=\"line\">    <span class=\"comment\">//排除 第一项pHead1大于pHead2的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pHead1!=<span class=\"literal\">null</span>&amp;&amp; pHead2!=<span class=\"literal\">null</span> &amp;&amp; pHead1.<span class=\"property\">val</span> &gt;= pHead2.<span class=\"property\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newListNode = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(pHead2.<span class=\"property\">val</span>)</span><br><span class=\"line\">        newListNode.<span class=\"property\">next</span> = pHead1</span><br><span class=\"line\">        pHead1 = newListNode</span><br><span class=\"line\">        pHead2 = pHead2.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 提取链表指针</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> head1 = pHead1</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//情况1 pHead1 已经到了最后</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head1.<span class=\"property\">next</span> == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            head1.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 情况2 从小到大迭代 pHead1，发现 后一个值比pHead2的当前值大</span></span><br><span class=\"line\">        <span class=\"comment\">// 插入当前值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head1.<span class=\"property\">next</span>.<span class=\"property\">val</span>&gt;=val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newListNode = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val)</span><br><span class=\"line\">             <span class=\"comment\">//插入到 比他大的节点前</span></span><br><span class=\"line\">             newListNode.<span class=\"property\">next</span> = head1.<span class=\"property\">next</span></span><br><span class=\"line\">             head1.<span class=\"property\">next</span> = newListNode</span><br><span class=\"line\">             <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//不满足以上两种情况 迭代pHead1链表</span></span><br><span class=\"line\">        head1 = head1.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 迭代pHead2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pHead2!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">add</span>(pHead2.<span class=\"property\">val</span>)</span><br><span class=\"line\">        pHead2=pHead2.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pHead1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"合并两个排序的链表\"><a class=\"markdownIt-Anchor\" href=\"#合并两个排序的链表\"></a> 合并两个排序的链表</h2>\n<blockquote>\n<p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"我的思路\"><a class=\"markdownIt-Anchor\" href=\"#我的思路\"></a> 我的思路</h2>\n<blockquote>\n<p>因为两个链表都是有序的，因此只要以一个链表为基准,把另一个链表的值依次插入即可</p>\n</blockquote>\n<h2 id=\"我的解决办法\"><a class=\"markdownIt-Anchor\" href=\"#我的解决办法\"></a> 我的解决办法</h2>\n<ul>\n<li>Java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode pList1;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">addNode</span><span class=\"params\">(<span class=\"type\">int</span> val)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//已经到List1最后一个 说明List2后面都比List1要大</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>(pList1.next == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            pList1.next = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pList1.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//后一项比前一项大的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pList1.next.val&gt;=val)&#123;</span><br><span class=\"line\">            <span class=\"type\">ListNode</span> <span class=\"variable\">newListNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val);</span><br><span class=\"line\">            newListNode.next = pList1.next;</span><br><span class=\"line\">            pList1.next = newListNode;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> newListNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不满足上面两种的情况 继续迭代</span></span><br><span class=\"line\">        pList1 = pList1.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> addNode(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">Merge</span><span class=\"params\">(ListNode list1,ListNode list2)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 链表1的指针</span></span><br><span class=\"line\">        pList1 = list1;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(list2 != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            addNode(list2.val);</span><br><span class=\"line\">            list2 = list2.next; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JavaScript</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Merge</span>(<span class=\"params\">pHead1, pHead2</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// write code here</span></span><br><span class=\"line\">    <span class=\"comment\">//排除 第一项pHead1大于pHead2的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pHead1!=<span class=\"literal\">null</span>&amp;&amp; pHead2!=<span class=\"literal\">null</span> &amp;&amp; pHead1.<span class=\"property\">val</span> &gt;= pHead2.<span class=\"property\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newListNode = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(pHead2.<span class=\"property\">val</span>)</span><br><span class=\"line\">        newListNode.<span class=\"property\">next</span> = pHead1</span><br><span class=\"line\">        pHead1 = newListNode</span><br><span class=\"line\">        pHead2 = pHead2.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 提取链表指针</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> head1 = pHead1</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//情况1 pHead1 已经到了最后</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head1.<span class=\"property\">next</span> == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            head1.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 情况2 从小到大迭代 pHead1，发现 后一个值比pHead2的当前值大</span></span><br><span class=\"line\">        <span class=\"comment\">// 插入当前值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head1.<span class=\"property\">next</span>.<span class=\"property\">val</span>&gt;=val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newListNode = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(val)</span><br><span class=\"line\">             <span class=\"comment\">//插入到 比他大的节点前</span></span><br><span class=\"line\">             newListNode.<span class=\"property\">next</span> = head1.<span class=\"property\">next</span></span><br><span class=\"line\">             head1.<span class=\"property\">next</span> = newListNode</span><br><span class=\"line\">             <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//不满足以上两种情况 迭代pHead1链表</span></span><br><span class=\"line\">        head1 = head1.<span class=\"property\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(val)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 迭代pHead2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(pHead2!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">add</span>(pHead2.<span class=\"property\">val</span>)</span><br><span class=\"line\">        pHead2=pHead2.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pHead1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"重建二叉树","date":"2020-02-04T09:16:40.000Z","_content":"## 重建二叉树\n> 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。\n\n## 分析问题\n> 根据前序遍历先遍历根节点的特点,可知前序遍历的序列中前一部分可能是根节点。根据中序遍历先遍历左节点再遍历根节点的特点。在中序遍历的结果中左节点在根节点的左边。因此中序遍历中和前序遍历相等的点为根节点,节点左边可构成左子树。\n\n\n## 解决问题\n> 从上分析知,1为根节点1的左子树由 `4,7,2` 构成;2为根节点2的左子树由 `4,7` 构成;依次类推,易知可采用递归解决问题。\n```Java\nimport java.util.Arrays;\npublic class Solution {\n        public TreeNode reConstructBinaryTree(int [] pre,int [] in) {\n           if(pre.length == 0){\n               return null;\n           }\n           int rootValue = pre[0];\n           TreeNode tree = new TreeNode(rootValue);\n           if(pre.length ==1){\n               return tree;\n           }\n          int rootIndex = 0;\n          for(int i =0;i<in.length;i++){\n              if(rootValue == in[i]){\n                  rootIndex = i;\n                  break;\n            }\n          }\n        tree.left = reConstructBinaryTree(Arrays.copyOfRange(pre,1,rootIndex+1),Arrays.copyOfRange(in,0,rootIndex));\n        tree.right = reConstructBinaryTree(Arrays.copyOfRange(pre,rootIndex+1,in.length),Arrays.copyOfRange(in,rootIndex+1,in.length));\n        return tree;\n    }\n}\n```\n\n\n","source":"_posts/reConstructBinaryTree.md","raw":"---\ntitle: 重建二叉树\ndate: 2020-02-04 17:16:40\ntags:\n  - 算法与数据结构\n  - 剑指Offer\n---\n## 重建二叉树\n> 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。\n\n## 分析问题\n> 根据前序遍历先遍历根节点的特点,可知前序遍历的序列中前一部分可能是根节点。根据中序遍历先遍历左节点再遍历根节点的特点。在中序遍历的结果中左节点在根节点的左边。因此中序遍历中和前序遍历相等的点为根节点,节点左边可构成左子树。\n\n\n## 解决问题\n> 从上分析知,1为根节点1的左子树由 `4,7,2` 构成;2为根节点2的左子树由 `4,7` 构成;依次类推,易知可采用递归解决问题。\n```Java\nimport java.util.Arrays;\npublic class Solution {\n        public TreeNode reConstructBinaryTree(int [] pre,int [] in) {\n           if(pre.length == 0){\n               return null;\n           }\n           int rootValue = pre[0];\n           TreeNode tree = new TreeNode(rootValue);\n           if(pre.length ==1){\n               return tree;\n           }\n          int rootIndex = 0;\n          for(int i =0;i<in.length;i++){\n              if(rootValue == in[i]){\n                  rootIndex = i;\n                  break;\n            }\n          }\n        tree.left = reConstructBinaryTree(Arrays.copyOfRange(pre,1,rootIndex+1),Arrays.copyOfRange(in,0,rootIndex));\n        tree.right = reConstructBinaryTree(Arrays.copyOfRange(pre,rootIndex+1,in.length),Arrays.copyOfRange(in,rootIndex+1,in.length));\n        return tree;\n    }\n}\n```\n\n\n","slug":"reConstructBinaryTree","published":1,"updated":"2021-08-07T01:59:03.347Z","_id":"cl4ince6u001pcgufhxkadlkk","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"重建二叉树\"><a class=\"markdownIt-Anchor\" href=\"#重建二叉树\"></a> 重建二叉树</h2>\n<blockquote>\n<p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>\n</blockquote>\n<h2 id=\"分析问题\"><a class=\"markdownIt-Anchor\" href=\"#分析问题\"></a> 分析问题</h2>\n<blockquote>\n<p>根据前序遍历先遍历根节点的特点,可知前序遍历的序列中前一部分可能是根节点。根据中序遍历先遍历左节点再遍历根节点的特点。在中序遍历的结果中左节点在根节点的左边。因此中序遍历中和前序遍历相等的点为根节点,节点左边可构成左子树。</p>\n</blockquote>\n<h2 id=\"解决问题\"><a class=\"markdownIt-Anchor\" href=\"#解决问题\"></a> 解决问题</h2>\n<blockquote>\n<p>从上分析知,1为根节点1的左子树由 <code>4,7,2</code> 构成;2为根节点2的左子树由 <code>4,7</code> 构成;依次类推,易知可采用递归解决问题。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">reConstructBinaryTree</span><span class=\"params\">(<span class=\"type\">int</span> [] pre,<span class=\"type\">int</span> [] in)</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(pre.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"type\">int</span> <span class=\"variable\">rootValue</span> <span class=\"operator\">=</span> pre[<span class=\"number\">0</span>];</span><br><span class=\"line\">           <span class=\"type\">TreeNode</span> <span class=\"variable\">tree</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(rootValue);</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(pre.length ==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">rootIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;i&lt;in.length;i++)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(rootValue == in[i])&#123;</span><br><span class=\"line\">                  rootIndex = i;</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        tree.left = reConstructBinaryTree(Arrays.copyOfRange(pre,<span class=\"number\">1</span>,rootIndex+<span class=\"number\">1</span>),Arrays.copyOfRange(in,<span class=\"number\">0</span>,rootIndex));</span><br><span class=\"line\">        tree.right = reConstructBinaryTree(Arrays.copyOfRange(pre,rootIndex+<span class=\"number\">1</span>,in.length),Arrays.copyOfRange(in,rootIndex+<span class=\"number\">1</span>,in.length));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"重建二叉树\"><a class=\"markdownIt-Anchor\" href=\"#重建二叉树\"></a> 重建二叉树</h2>\n<blockquote>\n<p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>\n</blockquote>\n<h2 id=\"分析问题\"><a class=\"markdownIt-Anchor\" href=\"#分析问题\"></a> 分析问题</h2>\n<blockquote>\n<p>根据前序遍历先遍历根节点的特点,可知前序遍历的序列中前一部分可能是根节点。根据中序遍历先遍历左节点再遍历根节点的特点。在中序遍历的结果中左节点在根节点的左边。因此中序遍历中和前序遍历相等的点为根节点,节点左边可构成左子树。</p>\n</blockquote>\n<h2 id=\"解决问题\"><a class=\"markdownIt-Anchor\" href=\"#解决问题\"></a> 解决问题</h2>\n<blockquote>\n<p>从上分析知,1为根节点1的左子树由 <code>4,7,2</code> 构成;2为根节点2的左子树由 <code>4,7</code> 构成;依次类推,易知可采用递归解决问题。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">reConstructBinaryTree</span><span class=\"params\">(<span class=\"type\">int</span> [] pre,<span class=\"type\">int</span> [] in)</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(pre.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"type\">int</span> <span class=\"variable\">rootValue</span> <span class=\"operator\">=</span> pre[<span class=\"number\">0</span>];</span><br><span class=\"line\">           <span class=\"type\">TreeNode</span> <span class=\"variable\">tree</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(rootValue);</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(pre.length ==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">rootIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;i&lt;in.length;i++)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(rootValue == in[i])&#123;</span><br><span class=\"line\">                  rootIndex = i;</span><br><span class=\"line\">                  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        tree.left = reConstructBinaryTree(Arrays.copyOfRange(pre,<span class=\"number\">1</span>,rootIndex+<span class=\"number\">1</span>),Arrays.copyOfRange(in,<span class=\"number\">0</span>,rootIndex));</span><br><span class=\"line\">        tree.right = reConstructBinaryTree(Arrays.copyOfRange(pre,rootIndex+<span class=\"number\">1</span>,in.length),Arrays.copyOfRange(in,rootIndex+<span class=\"number\">1</span>,in.length));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"正则表达式","date":"2020-03-21T13:35:26.000Z","_content":"> 做自己喜欢的事保持进步。\n\n首先推荐两个网址，[用图形化解释你写的正则](https://jex.im/regulex/#!flags=&re=%5E(a%7Cb)*%3F%24),[很方便测试正则的网站](https://regexr.com/)\n\n正则表达式基础可参看[菜鸟教程~正则表达式](https://www.runoob.com/regexp/regexp-syntax.html),后面本文中的基础语法只是对教程中的一些解释。推荐用一小时过一遍菜鸟教程，再继续看下文。\n\n## 语法\n\n你可以把正则表达式，看成是一门编程语言，其中有一些字符，就是规定了一些基础的语法，像JavaScript的 `function` 表示函数，`let`声明变量,用 `+ - * / ()` 表示四则运算一样。\n \n### 基本写法和修饰符\n可以直接采用 `/正则表达式/修饰符` 这种,把正则表达式直接写在`//` 注释符号双斜杠中间，或者采用ES6的 `RegExp(\"正则表达式\",\"修饰符\")` 的形式(ES5,也有RegExp,不过没有第二个参数)。\n```js\nnew RegExp('xyz','i')\n//等价于\n/xyz/i\n//等价于ES5中的\nnew RegExp('/xyz/i')\n```\n\n#### 对于修饰符ES5中只有`igm`也是比较常用的三种。\n\n> `i`表示不区分匹配的大小写，即 `a` 可以匹配到`A或a`\n\n![区分大小写匹配](http://blogimage.lemonlife.top/202003231105_156.png?/)\n\n![不区分大小写匹配](http://blogimage.lemonlife.top/202003231106_287.png?/)\n\n> `g` 表示全局匹配，有点递归执行函数的意思。\n\n如果用`/a/i` 匹配Aa,从上图可知匹配到 `A` 后，正则函数将不再继续向后执行。如果使用`/a/ig` ,匹配到`A`后将继续向后执行,匹配到a。两次匹配是相互独立的，每次匹配的结果都存在数组里面最后返回 [A,a]\n\n![全局匹配](http://blogimage.lemonlife.top/202003231110_791.png?/)\n\n> `m` 表示,多行(multiline)匹配。你可能会想 `g` 全局匹配吗？为什么还要多行匹配呢？\n\n可以看到下图中通过g的全局匹配，我们的确匹配到了多行文本中所有的Aa(图中红色箭头是指换行符可以用`\\x0a`匹配)。\n\n![](http://blogimage.lemonlife.top/202003231132_796.png?/)\n\n现在分析一下 `/^Aa\\x0a/g` 这个表达式。猜猜这个会匹配到什么？(^表示必须以A字符开头)。首先肯定可以匹配到第一行的Aa。对于第二行和第三行的字符还能匹配到吗？\n![](http://blogimage.lemonlife.top/202003231153_510.png?/)\n\n当我们全局扫描到第一行时匹配到了`Aa\\n` (\\n 表示末尾的换行符哈),但是我们接着往下继续扫描时候，正则表达式还记着我的第一行还有东西呢，因此再后面匹配的时候，正则表达式发现，开始的字符就不是A了，于是就停止了匹配。\n\n如果我们加上m修饰符，能让正则表达式变成一个健忘症患者，忘记上一行的内容。那么 `/^Aa\\x0a/gm` 就会是像下面这样\n\n- 第一次表达式面对的文本(\\n表示换行符)\n  ```\n  Aa\\n\n  Aa\\n\n  Aa\\n\n  ```\n  匹配到`Aa\\n`\n\n- 第二次表达式面对的文本，(忘掉了第一行)\n  ```\n  Aa\\n\n  Aa\\n\n  ```\n  匹配到`Aa\\n`\n\n\n- 第三次表达式面对的文本，(忘掉了前两行)\n  ```\n  Aa\\n\n  ```\n  匹配到`Aa\\n`\n\n所以最后我们可以看到，又成功的匹配到了三行以A开始的文本\n![](http://blogimage.lemonlife.top/202003231204_357.png?/)\n\n下面继续分析通过`/^Aa\\x0a$/m`(表示字符串必须已A开始换行符结束，中间是a)，匹配相同的文本，结果又是什么？\n\n从上面的的分析可知，第一次正则表达式面对的是三行完整的文字，的确是A开始但是后面不满足,中间是a,结尾是换行符的条件。同样面对第二行时，也不满足条件。直到面对第三行文本的时候(此时忘记了前两行了)，刚刚好就是 `Aa\\n`\n\n![](http://blogimage.lemonlife.top/202003231212_614.png?/)\n\n#### ES6新增u和y修饰符\n> u 修饰符是针对Unicode编码的,\n\n为了让正则表达式能正确处理四个字节的 UTF-16 编码.类似于(`\\ud83d\\ude18`) 。 ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符。直接来图吧。\n\n![](http://blogimage.lemonlife.top/202003231605_990.png?/)\n\n![](http://blogimage.lemonlife.top/202003231607_852.png?/)\n\n对比上面两个图, 可以先说明一下表情😘对应的Unicode编码就是 `\\ud83d\\ude18`,正则表达式最初的意思就是想匹配最开始的😘。\n可是你会发现，什么情况 /^\\ud83d/ 为啥也命中了这个表情，很明显就是在没有指定u修饰符的情况下，ES5 把 😘 这个可爱的表情拆成了，两个字符 `\\ud83d` 和 `\\ude18`。\n\n![](http://blogimage.lemonlife.top/202003231613_459.png?/)\n\n![](http://blogimage.lemonlife.top/202003231613_746.png?/)\n\n果然我们加上u修饰符之后,只有`\\ud83d\\ude18`能匹配到 😘 了。\n\n> 除了u修饰符，ES6 还为正则表达式添加了y修饰符，叫做“粘连”（sticky）修饰符。\n\n前面说过正则有点递归调用的意思，g修饰符每次进行新的调用的时候，不用在意字符串的位置，而y修饰符相当于每次都在正则表达式上加了一个 `^` 指定了，必须是开始第一个。\n\n```js\nlet str = \"AaAaAa\"\nlet rg = /A/g\nlet ry = /A/y\nlet ryAa = /Aa/y\n```\n执行 `rg.exec(str)` ,可以看到字符串中的三个A都被匹配到了\n\n![](http://blogimage.lemonlife.top/202003231635_501.png?/)\n\n执行 `ry.exec(str)` ,可以看到字符串中只有第一个A被匹配到了,因为y修饰符的原因，第一次执行的时候相当于`/^A/`去匹配，匹配完之后剩下字符串aAaAa,然后`/^A/` 再去匹配。然后就什么都匹配不到了\n\n![](http://blogimage.lemonlife.top/202003231640_48.png?/)\n\n执行 `ryAa.exec(str)` ,可以看到每次都拿/Aa/y去匹配，相当于/^Aa/,然后三个Aa就都匹配到了。\n\n![](http://blogimage.lemonlife.top/202003231649_959.png?/)\n\n#### 暂不支持的s修饰符\n\n> `s`修饰符(single)，意思是无论文本中有没有换行符，统一把这些文本当成一行。\n\n**友情提示一下s修饰符，现在的浏览器可能都不能支持,应该是[PCRE](https://baike.baidu.com/item/PCRE/7401536?fr=aladdin)和ES2018 引入的语法**\n\n这个修饰符与 multiline 有点相反的意思。下面我们来演示一种场景。先补充一个知识 `.*` 表示贪婪匹配，可以匹配到除换行符之外的任意字符。\n\n定义 `/A.*a/g` 正则表达式，易知该正则表达式意思是：匹配任意位置A开始，中间可以是任何字符，最后遇到a结束。来匹配下面文本\n\n```\nAxxxyyya\n```\n\n易知 上面的文本可以被完整的匹配。(即 会匹配到 Axxxyyya)\n\n![](http://blogimage.lemonlife.top/202003231418_437.png?/)\n\n如果我们把文本改成下面这个多行，会怎么样呢？正则表达式不变，还能匹配到所有文字吗？(注意上面贪婪匹配的定义)\n```\nA\nxxx\nyyy\na\n```\n\n![](http://blogimage.lemonlife.top/202003231427_174.png?/)\n\n`/A.*a/gs` 正则表达式改成这样会怎么样呢。不想解释了直接看图吧，看完就知道s修饰符大概怎么用了🐶\n\n![](http://blogimage.lemonlife.top/202003231429_130.png?/)\n\n### 其他语法\n\n> 特殊字符，限定符之类的直接从 [菜鸟教程](https://www.runoob.com/regexp/regexp-syntax.html) 截图了。\n\n![特殊字符](http://blogimage.lemonlife.top/202003231717_753.png?/)\n\n![限定符](http://blogimage.lemonlife.top/202003231718_930.png?/)\n\n有一点想说明一下，菜鸟教程中有说，对于一些相当于是编程语言中的保留字，概念的一些正则关键字。(\\n 换行符,\\t制表符，\\v,垂直制表符，空格，\\{, 以及html左标签\\<等...这些都是不用记的)。 对于这些特殊字符都是[ASCII码表](https://tool.oschina.net/commons?type=4)里面有的。可以统一采用`\\x16进制的ASCII`表示,比如`\\x0a`表示换行符，`\\x20` 匹配空格,`\\x20*` 匹配任意个数的空格等。\n\n**补充：边界匹配**\n`/\\bCha/`  匹配句子中的单词,且这个单词必须要以Cha开始。(Chapter)\n\n`/ter\\b/` 匹配句子中的单词,且这个单词必须要以ter结束。(Chapter)\n\n`/\\Bapt/` 匹配句子中的单词，且这个单词中间必须要有，apt字符。(可以匹配Chapter ，但是不能匹配 aptitude 因为这个单词中apt出现在，开始不再单词中间)\n\n## 常见的一些组合语法\n### 分组\n正则表达式通过()进行分组，主要使用场景是在[JavaScript replace函数中](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace),\n\n可以看到下图中 `/(\\w+)\\s(\\w+)/ig` 根据(),将这些元素分成了两组, 然后依次对应着JS replace函数中的`$1,$2...`\n\n![](http://blogimage.lemonlife.top/202003241114_203.png?/)\n\n- 字符串前后两两交换位置\n```js\nlet str = 'Talk is cheap show me the code'\nstr.replace(/(\\w+)\\s(\\w+)/ig,(_,p1,p2)=>{\n  return `${p2} ${p1}`\n})\n// is Talk show cheap the me code\n```\n### 捕获于非捕获\n在JavaScript中我们采用$1,$2....，依次获取每个()表达式中匹配到的文本，同样用\\1\\2...依次引用，正则表达式中()匹配到的文本，我们把这种行为称为捕获。看图\n\n![](http://blogimage.lemonlife.top/202003251109_562.png?/)\n\n![](http://blogimage.lemonlife.top/202003251109_87.png?/)\n\n如果我们不想让某一个()表达式中的内容被捕获，这个过程就称为非捕获，非捕获表达式(?:xxx),如上我们将正则表达式中的 `(two)` 改成 `(?:two)` 此时依然要匹配 `one,two,three,one,three`,应该把`\\3` 改成`\\2`,因为此时`two` 不会被捕获,`\\2`从之前对应two变成对应three，看图就行\n\n![](http://blogimage.lemonlife.top/202003251131_298.png?/)\n\n![](http://blogimage.lemonlife.top/202003251133_381.png?/)\n\n### 前项查找\n形如 `待查找字符(?=\"查找条件)`, 我们把`(?=xxx)` 这种格式的式子称作条件表达式，一般我们把想要查找的字符放在，条件表达式前面。因此称为前项查找。 \n\n![/lo(?=ck)/g](http://blogimage.lemonlife.top/202003241237_799.png?/)\n\n![](http://blogimage.lemonlife.top/202003241240_909.png?/)\n\n- 否定前项查找，即对条件取反的操作\n\n![/lo(?!ck)/g](http://blogimage.lemonlife.top/202003241243_836.png?/)\n![](http://blogimage.lemonlife.top/202003241244_917.png?/)\n\n### 后项查找\n同上 给两个单词，`condition`,`action`，同样只是条件表达式形式不一样，而且带查找字符，要放在条件表达式 `(?<=xxx)` 后面。 \n\n![/(?<=ac)tion/g](http://blogimage.lemonlife.top/202003241252_467.png?/)\n\n- 否定后项查找\n\n![/(?<!ac)tion/g](http://blogimage.lemonlife.top/202003241253_914.png?/)\n\n### 逻辑处理\n\n#### 或 |,[]\n匹配 字符串 \"tea,ten,test,term\"。\n\n![/te(a|n|st|rm)/g](http://blogimage.lemonlife.top/202003241258_125.png?/)\n\n![](http://blogimage.lemonlife.top/202003241259_312.png?/)\n\n![/te[anstrm]/g](http://blogimage.lemonlife.top/202003241301_229.png?/)\n![](http://blogimage.lemonlife.top/202003241301_614.png?/)\n#### 非 [^],!\n\n![/te[^ans]/g](http://blogimage.lemonlife.top/202003241304_922.png?/)\n![](http://blogimage.lemonlife.top/202003241304_809.png?/)\n\n!操作，参看前面的前向查找和后项查找\n\n## 正则表达式JS应用\n> 部分案例来源于[JS 正则迷你书](https://github.com/qdlaoyao/js-regex-mini-book),以及[该书掘金地址](https://juejin.im/post/5965943ff265da6c30653879)\n\n\n### 匹配千分位\n- 解法1\n```js\nfunction thousands(num, sep) {\n  let str = new String(num)\n  const arr = str.split('.')\n  let reg = /(\\d+)(\\d{3})/\n  let integer = arr[0]\n  let decimal = arr.length > 1 ? `.${arr[1]}` : ''\n  while (reg.test(integer)) {\n    integer = integer.replace(reg, \"$1\" + sep + \"$2\")\n  }\n  return `${integer}${decimal}`\n}\nconsole.log(thousands(1234567890000,',')) //\n```\n- 解法二 利用前向查找结合 `/(?!^)(?=(\\d{3})+$)/g` (我们假设是正整数，小数的话，和方法一一样，分割一下就行) 或者 可以写成 `/(?<=\\d+)(?=(\\d{3})+$)/g` 以及 `\\B(?=(\\d{3})+$)` 总之都是为了过滤边界条件\n\n![/(?!^)(?=(\\d{3})+$)/g](http://blogimage.lemonlife.top/202003250158_667.png?/)\n\n```js\n\"123456789\".replace(/(?<=\\d+)(?=(\\d{3})+$)/g,',') // 123,456,789\n\n\"123456789\".replace(/(?!^)(?=(\\d{3})+$)/g,',') //  123,456,789\n\n```\n\n### window操作系统文件路径\n\n```\nF:\\study\\javascript\\regex\\regular expression.pdf\n\nF:\\study\\javascript\\regex\\\n\nF:\\study\\\\javascript\n\nF:\\\n\nF:\\x*x\\\n```\n首先匹配盘符`^[a-zA-Z]:\\\\`，接着匹配文件夹，排除一些字符即可`[^\\\\:*<>|'\"?,。/]+\\\\` (假设中文标点啥的已经被排除了),文件夹可能出现很多次`([^\\\\:*<>|'\"?/]+\\\\)*`,结尾的文件夹没有 `\\` , `([^\\\\:*<>|'\"?/]+)?$`，所以最后的正则表达式是\n`^[a-zA-Z]:\\\\([^\\\\:*<>|'\"?/]+\\\\)*([^\\\\:*<>|'\"?/]+)?$`\n\n![window操作系统文件路径](http://blogimage.lemonlife.top/202003241746_567.png?/)\n\n![匹配结果](http://blogimage.lemonlife.top/202003241747_272.png?/)\n\n\n### 校验密码\n规定了密码只能是，大写或者小写字母，或者是数字。且至少含有三种字符中的两种,密码位数只能是6-12位\n\n```\n1234567\nabcdef\nABCDEF\nABCDEF234\n1ABCDEF\nabcDEFG\n1abcDEF\n```\n首先可以确定密码只能是大小写字母和数字组成，且位数是6~12位的情况。`/^[0-9A-Za-z]{6,12}$/`\n\n![](http://blogimage.lemonlife.top/202003251002_768.png?/)\n\n接下来就是要防止全是数字，或者全是小写字母和全是大写字母的情况出现。很明显就是要给出合适的条件表达式，所以无法就是前项查找，或者后项查找，然而因为是排除，所以就要对查找表达式取反。\n\n按照前项表达式可在 `/^[0-9A-Za-z]{6,12}$/` 前添加查找条件,如添加`(?!^[0-9]{6,12}$)`过滤掉都是数字的情况，同理针对大小写字母可以写出如下表达式。\n\n`(?!^[0-9]{6,12}$)(?!^[A-Z]{6,12}$)(?!^[a-z]{6,12}$)^[0-9A-Za-z]{6,12}$`\n\n![前项查找](http://blogimage.lemonlife.top/202003251052_816.png?/)\n\n![](http://blogimage.lemonlife.top/202003251052_312.png?/)\n\n同理也可采用后项查找，把查找条件放在表达式后面。\n\n![/^[0-9A-Za-z]{6,12}$(?<!^[0-9]{6,12}$)(?<!^[a-z]{6,12}$)(?<!^[A-Z]{6,12}$)/g](http://blogimage.lemonlife.top/202003251054_824.png?/)\n\n### 匹配日期\n匹配出用 `-`用做分割符的日期 `xxxx-xx-xx`,或者用 `/ .` 做为分隔符,对于`xxxx-xx.xx`这种分隔符不一致的不匹配。\n```\n2016-06-12\n2016/06/12\n2016.06.12\n2016-06.12\n2016.06/12\n```\n需要引入一个方向引用的概念，在正则表达式中使用`\\1`匹配第一个()表达式中的匹配到内容。 用`\\2` 匹配第二个括号表达式中匹配的内容。例如正则表达式`/(one),(two),(three),\\1,\\3/g`直接看图吧\n\n![](http://blogimage.lemonlife.top/202003251109_562.png?/)\n\n![](http://blogimage.lemonlife.top/202003251109_87.png?/)\n\n所以日期的正则表达式就容易写了 `/^\\d{4}(-|\\x2f|\\x2e)d{2}\\1d{2}$/g` (2f,2e是16进制47,46表示/和.) ，如下图：\n\n![](http://blogimage.lemonlife.top/202003251118_437.png?/)\n\n![](http://blogimage.lemonlife.top/202003251118_179.png?/)\n\n### 单词首字母转成大写\n```\nthis is a programming technique which will help you parallelize your code and speed up performance\n```\n题目的思路很明确就是如何匹配到单词的首字母的问题，因此我们可以采用 `(\\b\\w)`来匹配单词首字母。\n\n![](http://blogimage.lemonlife.top/202003251151_238.png?/)\n\n![](http://blogimage.lemonlife.top/202003251152_538.png?/)\n\n```js\nfunction titleize(str) {\n\treturn str.toLowerCase().replace(/(\\b\\w)/g, function(c) {\n\t\treturn c.toUpperCase();\n\t});\n}\ntitleize('上述文本')\n```\n![代码执行结果](http://blogimage.lemonlife.top/202003251153_928.png?/)\n\n### 匹配IPv4地址\n`((25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)`\n\n![](http://blogimage.lemonlife.top/202003251325_470.png?/)\n\n![IPV4匹配结果](http://blogimage.lemonlife.top/202003251326_432.png?/)\n\n### 匹配国内身份证号\n\n身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X。\n\n`(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)`\n\n![](http://blogimage.lemonlife.top/202003251330_597.png?/)\n\n### 匹配国内手机号码\n[三大运营商号码段~2019年](https://zhidao.baidu.com/question/434432697263212804.html)\n\n170为虚拟号码要排除，166,198,199 是新增号码段，所以正则表达式为\n\n`/^(?!170)^((13|14|15|17|18)[0-9]|166|198|199)\\d{8}$/g`\n\n![](http://blogimage.lemonlife.top/202003251346_11.png?/)\n\n![匹配结果](http://blogimage.lemonlife.top/202003251344_947.png?/)\n\n### 座机号码匹配\n\n注意开始符号`^`和结束符号 `$` 的位置，注意不要把 `/^((\\d{3}-)?\\d{8}|(\\d{4}-)?\\d{7})$/g`  写成了`/^(\\d{3}-)?\\d{8}|(\\d{4}-)?\\d{7}$/g`  ,这和正则表达式运算符优先级有关，不细说了直接看图\n\n![正确的写法](http://blogimage.lemonlife.top/202003251354_853.png?/)\n\n![错误的写法](http://blogimage.lemonlife.top/202003251355_657.png?/)\n\n![匹配结果](http://blogimage.lemonlife.top/202003251356_902.png?/)","source":"_posts/regular-expression.md","raw":"---\ntitle: 正则表达式\ndate: 2020-03-21 21:35:26\ntags:\n  - 正则表达式 \n---\n> 做自己喜欢的事保持进步。\n\n首先推荐两个网址，[用图形化解释你写的正则](https://jex.im/regulex/#!flags=&re=%5E(a%7Cb)*%3F%24),[很方便测试正则的网站](https://regexr.com/)\n\n正则表达式基础可参看[菜鸟教程~正则表达式](https://www.runoob.com/regexp/regexp-syntax.html),后面本文中的基础语法只是对教程中的一些解释。推荐用一小时过一遍菜鸟教程，再继续看下文。\n\n## 语法\n\n你可以把正则表达式，看成是一门编程语言，其中有一些字符，就是规定了一些基础的语法，像JavaScript的 `function` 表示函数，`let`声明变量,用 `+ - * / ()` 表示四则运算一样。\n \n### 基本写法和修饰符\n可以直接采用 `/正则表达式/修饰符` 这种,把正则表达式直接写在`//` 注释符号双斜杠中间，或者采用ES6的 `RegExp(\"正则表达式\",\"修饰符\")` 的形式(ES5,也有RegExp,不过没有第二个参数)。\n```js\nnew RegExp('xyz','i')\n//等价于\n/xyz/i\n//等价于ES5中的\nnew RegExp('/xyz/i')\n```\n\n#### 对于修饰符ES5中只有`igm`也是比较常用的三种。\n\n> `i`表示不区分匹配的大小写，即 `a` 可以匹配到`A或a`\n\n![区分大小写匹配](http://blogimage.lemonlife.top/202003231105_156.png?/)\n\n![不区分大小写匹配](http://blogimage.lemonlife.top/202003231106_287.png?/)\n\n> `g` 表示全局匹配，有点递归执行函数的意思。\n\n如果用`/a/i` 匹配Aa,从上图可知匹配到 `A` 后，正则函数将不再继续向后执行。如果使用`/a/ig` ,匹配到`A`后将继续向后执行,匹配到a。两次匹配是相互独立的，每次匹配的结果都存在数组里面最后返回 [A,a]\n\n![全局匹配](http://blogimage.lemonlife.top/202003231110_791.png?/)\n\n> `m` 表示,多行(multiline)匹配。你可能会想 `g` 全局匹配吗？为什么还要多行匹配呢？\n\n可以看到下图中通过g的全局匹配，我们的确匹配到了多行文本中所有的Aa(图中红色箭头是指换行符可以用`\\x0a`匹配)。\n\n![](http://blogimage.lemonlife.top/202003231132_796.png?/)\n\n现在分析一下 `/^Aa\\x0a/g` 这个表达式。猜猜这个会匹配到什么？(^表示必须以A字符开头)。首先肯定可以匹配到第一行的Aa。对于第二行和第三行的字符还能匹配到吗？\n![](http://blogimage.lemonlife.top/202003231153_510.png?/)\n\n当我们全局扫描到第一行时匹配到了`Aa\\n` (\\n 表示末尾的换行符哈),但是我们接着往下继续扫描时候，正则表达式还记着我的第一行还有东西呢，因此再后面匹配的时候，正则表达式发现，开始的字符就不是A了，于是就停止了匹配。\n\n如果我们加上m修饰符，能让正则表达式变成一个健忘症患者，忘记上一行的内容。那么 `/^Aa\\x0a/gm` 就会是像下面这样\n\n- 第一次表达式面对的文本(\\n表示换行符)\n  ```\n  Aa\\n\n  Aa\\n\n  Aa\\n\n  ```\n  匹配到`Aa\\n`\n\n- 第二次表达式面对的文本，(忘掉了第一行)\n  ```\n  Aa\\n\n  Aa\\n\n  ```\n  匹配到`Aa\\n`\n\n\n- 第三次表达式面对的文本，(忘掉了前两行)\n  ```\n  Aa\\n\n  ```\n  匹配到`Aa\\n`\n\n所以最后我们可以看到，又成功的匹配到了三行以A开始的文本\n![](http://blogimage.lemonlife.top/202003231204_357.png?/)\n\n下面继续分析通过`/^Aa\\x0a$/m`(表示字符串必须已A开始换行符结束，中间是a)，匹配相同的文本，结果又是什么？\n\n从上面的的分析可知，第一次正则表达式面对的是三行完整的文字，的确是A开始但是后面不满足,中间是a,结尾是换行符的条件。同样面对第二行时，也不满足条件。直到面对第三行文本的时候(此时忘记了前两行了)，刚刚好就是 `Aa\\n`\n\n![](http://blogimage.lemonlife.top/202003231212_614.png?/)\n\n#### ES6新增u和y修饰符\n> u 修饰符是针对Unicode编码的,\n\n为了让正则表达式能正确处理四个字节的 UTF-16 编码.类似于(`\\ud83d\\ude18`) 。 ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符。直接来图吧。\n\n![](http://blogimage.lemonlife.top/202003231605_990.png?/)\n\n![](http://blogimage.lemonlife.top/202003231607_852.png?/)\n\n对比上面两个图, 可以先说明一下表情😘对应的Unicode编码就是 `\\ud83d\\ude18`,正则表达式最初的意思就是想匹配最开始的😘。\n可是你会发现，什么情况 /^\\ud83d/ 为啥也命中了这个表情，很明显就是在没有指定u修饰符的情况下，ES5 把 😘 这个可爱的表情拆成了，两个字符 `\\ud83d` 和 `\\ude18`。\n\n![](http://blogimage.lemonlife.top/202003231613_459.png?/)\n\n![](http://blogimage.lemonlife.top/202003231613_746.png?/)\n\n果然我们加上u修饰符之后,只有`\\ud83d\\ude18`能匹配到 😘 了。\n\n> 除了u修饰符，ES6 还为正则表达式添加了y修饰符，叫做“粘连”（sticky）修饰符。\n\n前面说过正则有点递归调用的意思，g修饰符每次进行新的调用的时候，不用在意字符串的位置，而y修饰符相当于每次都在正则表达式上加了一个 `^` 指定了，必须是开始第一个。\n\n```js\nlet str = \"AaAaAa\"\nlet rg = /A/g\nlet ry = /A/y\nlet ryAa = /Aa/y\n```\n执行 `rg.exec(str)` ,可以看到字符串中的三个A都被匹配到了\n\n![](http://blogimage.lemonlife.top/202003231635_501.png?/)\n\n执行 `ry.exec(str)` ,可以看到字符串中只有第一个A被匹配到了,因为y修饰符的原因，第一次执行的时候相当于`/^A/`去匹配，匹配完之后剩下字符串aAaAa,然后`/^A/` 再去匹配。然后就什么都匹配不到了\n\n![](http://blogimage.lemonlife.top/202003231640_48.png?/)\n\n执行 `ryAa.exec(str)` ,可以看到每次都拿/Aa/y去匹配，相当于/^Aa/,然后三个Aa就都匹配到了。\n\n![](http://blogimage.lemonlife.top/202003231649_959.png?/)\n\n#### 暂不支持的s修饰符\n\n> `s`修饰符(single)，意思是无论文本中有没有换行符，统一把这些文本当成一行。\n\n**友情提示一下s修饰符，现在的浏览器可能都不能支持,应该是[PCRE](https://baike.baidu.com/item/PCRE/7401536?fr=aladdin)和ES2018 引入的语法**\n\n这个修饰符与 multiline 有点相反的意思。下面我们来演示一种场景。先补充一个知识 `.*` 表示贪婪匹配，可以匹配到除换行符之外的任意字符。\n\n定义 `/A.*a/g` 正则表达式，易知该正则表达式意思是：匹配任意位置A开始，中间可以是任何字符，最后遇到a结束。来匹配下面文本\n\n```\nAxxxyyya\n```\n\n易知 上面的文本可以被完整的匹配。(即 会匹配到 Axxxyyya)\n\n![](http://blogimage.lemonlife.top/202003231418_437.png?/)\n\n如果我们把文本改成下面这个多行，会怎么样呢？正则表达式不变，还能匹配到所有文字吗？(注意上面贪婪匹配的定义)\n```\nA\nxxx\nyyy\na\n```\n\n![](http://blogimage.lemonlife.top/202003231427_174.png?/)\n\n`/A.*a/gs` 正则表达式改成这样会怎么样呢。不想解释了直接看图吧，看完就知道s修饰符大概怎么用了🐶\n\n![](http://blogimage.lemonlife.top/202003231429_130.png?/)\n\n### 其他语法\n\n> 特殊字符，限定符之类的直接从 [菜鸟教程](https://www.runoob.com/regexp/regexp-syntax.html) 截图了。\n\n![特殊字符](http://blogimage.lemonlife.top/202003231717_753.png?/)\n\n![限定符](http://blogimage.lemonlife.top/202003231718_930.png?/)\n\n有一点想说明一下，菜鸟教程中有说，对于一些相当于是编程语言中的保留字，概念的一些正则关键字。(\\n 换行符,\\t制表符，\\v,垂直制表符，空格，\\{, 以及html左标签\\<等...这些都是不用记的)。 对于这些特殊字符都是[ASCII码表](https://tool.oschina.net/commons?type=4)里面有的。可以统一采用`\\x16进制的ASCII`表示,比如`\\x0a`表示换行符，`\\x20` 匹配空格,`\\x20*` 匹配任意个数的空格等。\n\n**补充：边界匹配**\n`/\\bCha/`  匹配句子中的单词,且这个单词必须要以Cha开始。(Chapter)\n\n`/ter\\b/` 匹配句子中的单词,且这个单词必须要以ter结束。(Chapter)\n\n`/\\Bapt/` 匹配句子中的单词，且这个单词中间必须要有，apt字符。(可以匹配Chapter ，但是不能匹配 aptitude 因为这个单词中apt出现在，开始不再单词中间)\n\n## 常见的一些组合语法\n### 分组\n正则表达式通过()进行分组，主要使用场景是在[JavaScript replace函数中](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace),\n\n可以看到下图中 `/(\\w+)\\s(\\w+)/ig` 根据(),将这些元素分成了两组, 然后依次对应着JS replace函数中的`$1,$2...`\n\n![](http://blogimage.lemonlife.top/202003241114_203.png?/)\n\n- 字符串前后两两交换位置\n```js\nlet str = 'Talk is cheap show me the code'\nstr.replace(/(\\w+)\\s(\\w+)/ig,(_,p1,p2)=>{\n  return `${p2} ${p1}`\n})\n// is Talk show cheap the me code\n```\n### 捕获于非捕获\n在JavaScript中我们采用$1,$2....，依次获取每个()表达式中匹配到的文本，同样用\\1\\2...依次引用，正则表达式中()匹配到的文本，我们把这种行为称为捕获。看图\n\n![](http://blogimage.lemonlife.top/202003251109_562.png?/)\n\n![](http://blogimage.lemonlife.top/202003251109_87.png?/)\n\n如果我们不想让某一个()表达式中的内容被捕获，这个过程就称为非捕获，非捕获表达式(?:xxx),如上我们将正则表达式中的 `(two)` 改成 `(?:two)` 此时依然要匹配 `one,two,three,one,three`,应该把`\\3` 改成`\\2`,因为此时`two` 不会被捕获,`\\2`从之前对应two变成对应three，看图就行\n\n![](http://blogimage.lemonlife.top/202003251131_298.png?/)\n\n![](http://blogimage.lemonlife.top/202003251133_381.png?/)\n\n### 前项查找\n形如 `待查找字符(?=\"查找条件)`, 我们把`(?=xxx)` 这种格式的式子称作条件表达式，一般我们把想要查找的字符放在，条件表达式前面。因此称为前项查找。 \n\n![/lo(?=ck)/g](http://blogimage.lemonlife.top/202003241237_799.png?/)\n\n![](http://blogimage.lemonlife.top/202003241240_909.png?/)\n\n- 否定前项查找，即对条件取反的操作\n\n![/lo(?!ck)/g](http://blogimage.lemonlife.top/202003241243_836.png?/)\n![](http://blogimage.lemonlife.top/202003241244_917.png?/)\n\n### 后项查找\n同上 给两个单词，`condition`,`action`，同样只是条件表达式形式不一样，而且带查找字符，要放在条件表达式 `(?<=xxx)` 后面。 \n\n![/(?<=ac)tion/g](http://blogimage.lemonlife.top/202003241252_467.png?/)\n\n- 否定后项查找\n\n![/(?<!ac)tion/g](http://blogimage.lemonlife.top/202003241253_914.png?/)\n\n### 逻辑处理\n\n#### 或 |,[]\n匹配 字符串 \"tea,ten,test,term\"。\n\n![/te(a|n|st|rm)/g](http://blogimage.lemonlife.top/202003241258_125.png?/)\n\n![](http://blogimage.lemonlife.top/202003241259_312.png?/)\n\n![/te[anstrm]/g](http://blogimage.lemonlife.top/202003241301_229.png?/)\n![](http://blogimage.lemonlife.top/202003241301_614.png?/)\n#### 非 [^],!\n\n![/te[^ans]/g](http://blogimage.lemonlife.top/202003241304_922.png?/)\n![](http://blogimage.lemonlife.top/202003241304_809.png?/)\n\n!操作，参看前面的前向查找和后项查找\n\n## 正则表达式JS应用\n> 部分案例来源于[JS 正则迷你书](https://github.com/qdlaoyao/js-regex-mini-book),以及[该书掘金地址](https://juejin.im/post/5965943ff265da6c30653879)\n\n\n### 匹配千分位\n- 解法1\n```js\nfunction thousands(num, sep) {\n  let str = new String(num)\n  const arr = str.split('.')\n  let reg = /(\\d+)(\\d{3})/\n  let integer = arr[0]\n  let decimal = arr.length > 1 ? `.${arr[1]}` : ''\n  while (reg.test(integer)) {\n    integer = integer.replace(reg, \"$1\" + sep + \"$2\")\n  }\n  return `${integer}${decimal}`\n}\nconsole.log(thousands(1234567890000,',')) //\n```\n- 解法二 利用前向查找结合 `/(?!^)(?=(\\d{3})+$)/g` (我们假设是正整数，小数的话，和方法一一样，分割一下就行) 或者 可以写成 `/(?<=\\d+)(?=(\\d{3})+$)/g` 以及 `\\B(?=(\\d{3})+$)` 总之都是为了过滤边界条件\n\n![/(?!^)(?=(\\d{3})+$)/g](http://blogimage.lemonlife.top/202003250158_667.png?/)\n\n```js\n\"123456789\".replace(/(?<=\\d+)(?=(\\d{3})+$)/g,',') // 123,456,789\n\n\"123456789\".replace(/(?!^)(?=(\\d{3})+$)/g,',') //  123,456,789\n\n```\n\n### window操作系统文件路径\n\n```\nF:\\study\\javascript\\regex\\regular expression.pdf\n\nF:\\study\\javascript\\regex\\\n\nF:\\study\\\\javascript\n\nF:\\\n\nF:\\x*x\\\n```\n首先匹配盘符`^[a-zA-Z]:\\\\`，接着匹配文件夹，排除一些字符即可`[^\\\\:*<>|'\"?,。/]+\\\\` (假设中文标点啥的已经被排除了),文件夹可能出现很多次`([^\\\\:*<>|'\"?/]+\\\\)*`,结尾的文件夹没有 `\\` , `([^\\\\:*<>|'\"?/]+)?$`，所以最后的正则表达式是\n`^[a-zA-Z]:\\\\([^\\\\:*<>|'\"?/]+\\\\)*([^\\\\:*<>|'\"?/]+)?$`\n\n![window操作系统文件路径](http://blogimage.lemonlife.top/202003241746_567.png?/)\n\n![匹配结果](http://blogimage.lemonlife.top/202003241747_272.png?/)\n\n\n### 校验密码\n规定了密码只能是，大写或者小写字母，或者是数字。且至少含有三种字符中的两种,密码位数只能是6-12位\n\n```\n1234567\nabcdef\nABCDEF\nABCDEF234\n1ABCDEF\nabcDEFG\n1abcDEF\n```\n首先可以确定密码只能是大小写字母和数字组成，且位数是6~12位的情况。`/^[0-9A-Za-z]{6,12}$/`\n\n![](http://blogimage.lemonlife.top/202003251002_768.png?/)\n\n接下来就是要防止全是数字，或者全是小写字母和全是大写字母的情况出现。很明显就是要给出合适的条件表达式，所以无法就是前项查找，或者后项查找，然而因为是排除，所以就要对查找表达式取反。\n\n按照前项表达式可在 `/^[0-9A-Za-z]{6,12}$/` 前添加查找条件,如添加`(?!^[0-9]{6,12}$)`过滤掉都是数字的情况，同理针对大小写字母可以写出如下表达式。\n\n`(?!^[0-9]{6,12}$)(?!^[A-Z]{6,12}$)(?!^[a-z]{6,12}$)^[0-9A-Za-z]{6,12}$`\n\n![前项查找](http://blogimage.lemonlife.top/202003251052_816.png?/)\n\n![](http://blogimage.lemonlife.top/202003251052_312.png?/)\n\n同理也可采用后项查找，把查找条件放在表达式后面。\n\n![/^[0-9A-Za-z]{6,12}$(?<!^[0-9]{6,12}$)(?<!^[a-z]{6,12}$)(?<!^[A-Z]{6,12}$)/g](http://blogimage.lemonlife.top/202003251054_824.png?/)\n\n### 匹配日期\n匹配出用 `-`用做分割符的日期 `xxxx-xx-xx`,或者用 `/ .` 做为分隔符,对于`xxxx-xx.xx`这种分隔符不一致的不匹配。\n```\n2016-06-12\n2016/06/12\n2016.06.12\n2016-06.12\n2016.06/12\n```\n需要引入一个方向引用的概念，在正则表达式中使用`\\1`匹配第一个()表达式中的匹配到内容。 用`\\2` 匹配第二个括号表达式中匹配的内容。例如正则表达式`/(one),(two),(three),\\1,\\3/g`直接看图吧\n\n![](http://blogimage.lemonlife.top/202003251109_562.png?/)\n\n![](http://blogimage.lemonlife.top/202003251109_87.png?/)\n\n所以日期的正则表达式就容易写了 `/^\\d{4}(-|\\x2f|\\x2e)d{2}\\1d{2}$/g` (2f,2e是16进制47,46表示/和.) ，如下图：\n\n![](http://blogimage.lemonlife.top/202003251118_437.png?/)\n\n![](http://blogimage.lemonlife.top/202003251118_179.png?/)\n\n### 单词首字母转成大写\n```\nthis is a programming technique which will help you parallelize your code and speed up performance\n```\n题目的思路很明确就是如何匹配到单词的首字母的问题，因此我们可以采用 `(\\b\\w)`来匹配单词首字母。\n\n![](http://blogimage.lemonlife.top/202003251151_238.png?/)\n\n![](http://blogimage.lemonlife.top/202003251152_538.png?/)\n\n```js\nfunction titleize(str) {\n\treturn str.toLowerCase().replace(/(\\b\\w)/g, function(c) {\n\t\treturn c.toUpperCase();\n\t});\n}\ntitleize('上述文本')\n```\n![代码执行结果](http://blogimage.lemonlife.top/202003251153_928.png?/)\n\n### 匹配IPv4地址\n`((25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)`\n\n![](http://blogimage.lemonlife.top/202003251325_470.png?/)\n\n![IPV4匹配结果](http://blogimage.lemonlife.top/202003251326_432.png?/)\n\n### 匹配国内身份证号\n\n身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X。\n\n`(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)`\n\n![](http://blogimage.lemonlife.top/202003251330_597.png?/)\n\n### 匹配国内手机号码\n[三大运营商号码段~2019年](https://zhidao.baidu.com/question/434432697263212804.html)\n\n170为虚拟号码要排除，166,198,199 是新增号码段，所以正则表达式为\n\n`/^(?!170)^((13|14|15|17|18)[0-9]|166|198|199)\\d{8}$/g`\n\n![](http://blogimage.lemonlife.top/202003251346_11.png?/)\n\n![匹配结果](http://blogimage.lemonlife.top/202003251344_947.png?/)\n\n### 座机号码匹配\n\n注意开始符号`^`和结束符号 `$` 的位置，注意不要把 `/^((\\d{3}-)?\\d{8}|(\\d{4}-)?\\d{7})$/g`  写成了`/^(\\d{3}-)?\\d{8}|(\\d{4}-)?\\d{7}$/g`  ,这和正则表达式运算符优先级有关，不细说了直接看图\n\n![正确的写法](http://blogimage.lemonlife.top/202003251354_853.png?/)\n\n![错误的写法](http://blogimage.lemonlife.top/202003251355_657.png?/)\n\n![匹配结果](http://blogimage.lemonlife.top/202003251356_902.png?/)","slug":"regular-expression","published":1,"updated":"2021-08-07T01:59:03.348Z","_id":"cl4ince6v001rcguf059370f1","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>做自己喜欢的事保持进步。</p>\n</blockquote>\n<p>首先推荐两个网址，<a href=\"https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24\">用图形化解释你写的正则</a>,<a href=\"https://regexr.com/\">很方便测试正则的网站</a></p>\n<p>正则表达式基础可参看<a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">菜鸟教程~正则表达式</a>,后面本文中的基础语法只是对教程中的一些解释。推荐用一小时过一遍菜鸟教程，再继续看下文。</p>\n<h2 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\"></a> 语法</h2>\n<p>你可以把正则表达式，看成是一门编程语言，其中有一些字符，就是规定了一些基础的语法，像JavaScript的 <code>function</code> 表示函数，<code>let</code>声明变量,用 <code>+ - * / ()</code> 表示四则运算一样。</p>\n<h3 id=\"基本写法和修饰符\"><a class=\"markdownIt-Anchor\" href=\"#基本写法和修饰符\"></a> 基本写法和修饰符</h3>\n<p>可以直接采用 <code>/正则表达式/修饰符</code> 这种,把正则表达式直接写在<code>//</code> 注释符号双斜杠中间，或者采用ES6的 <code>RegExp(&quot;正则表达式&quot;,&quot;修饰符&quot;)</code> 的形式(ES5,也有RegExp,不过没有第二个参数)。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;xyz&#x27;</span>,<span class=\"string\">&#x27;i&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\">/xyz/i</span><br><span class=\"line\"><span class=\"comment\">//等价于ES5中的</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;/xyz/i&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"对于修饰符es5中只有igm也是比较常用的三种\"><a class=\"markdownIt-Anchor\" href=\"#对于修饰符es5中只有igm也是比较常用的三种\"></a> 对于修饰符ES5中只有<code>igm</code>也是比较常用的三种。</h4>\n<blockquote>\n<p><code>i</code>表示不区分匹配的大小写，即 <code>a</code> 可以匹配到<code>A或a</code></p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202003231105_156.png?/\" alt=\"区分大小写匹配\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231106_287.png?/\" alt=\"不区分大小写匹配\" /></p>\n<blockquote>\n<p><code>g</code> 表示全局匹配，有点递归执行函数的意思。</p>\n</blockquote>\n<p>如果用<code>/a/i</code> 匹配Aa,从上图可知匹配到 <code>A</code> 后，正则函数将不再继续向后执行。如果使用<code>/a/ig</code> ,匹配到<code>A</code>后将继续向后执行,匹配到a。两次匹配是相互独立的，每次匹配的结果都存在数组里面最后返回 [A,a]</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231110_791.png?/\" alt=\"全局匹配\" /></p>\n<blockquote>\n<p><code>m</code> 表示,多行(multiline)匹配。你可能会想 <code>g</code> 全局匹配吗？为什么还要多行匹配呢？</p>\n</blockquote>\n<p>可以看到下图中通过g的全局匹配，我们的确匹配到了多行文本中所有的Aa(图中红色箭头是指换行符可以用<code>\\x0a</code>匹配)。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231132_796.png?/\" alt=\"\" /></p>\n<p>现在分析一下 <code>/^Aa\\x0a/g</code> 这个表达式。猜猜这个会匹配到什么？(^表示必须以A字符开头)。首先肯定可以匹配到第一行的Aa。对于第二行和第三行的字符还能匹配到吗？<br />\n<img src=\"http://blogimage.lemonlife.top/202003231153_510.png?/\" alt=\"\" /></p>\n<p>当我们全局扫描到第一行时匹配到了<code>Aa\\n</code> (\\n 表示末尾的换行符哈),但是我们接着往下继续扫描时候，正则表达式还记着我的第一行还有东西呢，因此再后面匹配的时候，正则表达式发现，开始的字符就不是A了，于是就停止了匹配。</p>\n<p>如果我们加上m修饰符，能让正则表达式变成一个健忘症患者，忘记上一行的内容。那么 <code>/^Aa\\x0a/gm</code> 就会是像下面这样</p>\n<ul>\n<li>\n<p>第一次表达式面对的文本(\\n表示换行符)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Aa\\n</span><br><span class=\"line\">Aa\\n</span><br><span class=\"line\">Aa\\n</span><br></pre></td></tr></table></figure>\n<p>匹配到<code>Aa\\n</code></p>\n</li>\n<li>\n<p>第二次表达式面对的文本，(忘掉了第一行)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Aa\\n</span><br><span class=\"line\">Aa\\n</span><br></pre></td></tr></table></figure>\n<p>匹配到<code>Aa\\n</code></p>\n</li>\n<li>\n<p>第三次表达式面对的文本，(忘掉了前两行)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Aa\\n</span><br></pre></td></tr></table></figure>\n<p>匹配到<code>Aa\\n</code></p>\n</li>\n</ul>\n<p>所以最后我们可以看到，又成功的匹配到了三行以A开始的文本<br />\n<img src=\"http://blogimage.lemonlife.top/202003231204_357.png?/\" alt=\"\" /></p>\n<p>下面继续分析通过<code>/^Aa\\x0a$/m</code>(表示字符串必须已A开始换行符结束，中间是a)，匹配相同的文本，结果又是什么？</p>\n<p>从上面的的分析可知，第一次正则表达式面对的是三行完整的文字，的确是A开始但是后面不满足,中间是a,结尾是换行符的条件。同样面对第二行时，也不满足条件。直到面对第三行文本的时候(此时忘记了前两行了)，刚刚好就是 <code>Aa\\n</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231212_614.png?/\" alt=\"\" /></p>\n<h4 id=\"es6新增u和y修饰符\"><a class=\"markdownIt-Anchor\" href=\"#es6新增u和y修饰符\"></a> ES6新增u和y修饰符</h4>\n<blockquote>\n<p>u 修饰符是针对Unicode编码的,</p>\n</blockquote>\n<p>为了让正则表达式能正确处理四个字节的 UTF-16 编码.类似于(<code>\\ud83d\\ude18</code>) 。 ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符。直接来图吧。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231605_990.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231607_852.png?/\" alt=\"\" /></p>\n<p>对比上面两个图, 可以先说明一下表情😘对应的Unicode编码就是 <code>\\ud83d\\ude18</code>,正则表达式最初的意思就是想匹配最开始的😘。<br />\n可是你会发现，什么情况 /^\\ud83d/ 为啥也命中了这个表情，很明显就是在没有指定u修饰符的情况下，ES5 把 😘 这个可爱的表情拆成了，两个字符 <code>\\ud83d</code> 和 <code>\\ude18</code>。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231613_459.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231613_746.png?/\" alt=\"\" /></p>\n<p>果然我们加上u修饰符之后,只有<code>\\ud83d\\ude18</code>能匹配到 😘 了。</p>\n<blockquote>\n<p>除了u修饰符，ES6 还为正则表达式添加了y修饰符，叫做“粘连”（sticky）修饰符。</p>\n</blockquote>\n<p>前面说过正则有点递归调用的意思，g修饰符每次进行新的调用的时候，不用在意字符串的位置，而y修饰符相当于每次都在正则表达式上加了一个 <code>^</code> 指定了，必须是开始第一个。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;AaAaAa&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> rg = <span class=\"regexp\">/A/g</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ry = <span class=\"regexp\">/A/y</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ryAa = <span class=\"regexp\">/Aa/y</span></span><br></pre></td></tr></table></figure>\n<p>执行 <code>rg.exec(str)</code> ,可以看到字符串中的三个A都被匹配到了</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231635_501.png?/\" alt=\"\" /></p>\n<p>执行 <code>ry.exec(str)</code> ,可以看到字符串中只有第一个A被匹配到了,因为y修饰符的原因，第一次执行的时候相当于<code>/^A/</code>去匹配，匹配完之后剩下字符串aAaAa,然后<code>/^A/</code> 再去匹配。然后就什么都匹配不到了</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231640_48.png?/\" alt=\"\" /></p>\n<p>执行 <code>ryAa.exec(str)</code> ,可以看到每次都拿/Aa/y去匹配，相当于/^Aa/,然后三个Aa就都匹配到了。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231649_959.png?/\" alt=\"\" /></p>\n<h4 id=\"暂不支持的s修饰符\"><a class=\"markdownIt-Anchor\" href=\"#暂不支持的s修饰符\"></a> 暂不支持的s修饰符</h4>\n<blockquote>\n<p><code>s</code>修饰符(single)，意思是无论文本中有没有换行符，统一把这些文本当成一行。</p>\n</blockquote>\n<p><strong>友情提示一下s修饰符，现在的浏览器可能都不能支持,应该是<a href=\"https://baike.baidu.com/item/PCRE/7401536?fr=aladdin\">PCRE</a>和ES2018 引入的语法</strong></p>\n<p>这个修饰符与 multiline 有点相反的意思。下面我们来演示一种场景。先补充一个知识 <code>.*</code> 表示贪婪匹配，可以匹配到除换行符之外的任意字符。</p>\n<p>定义 <code>/A.*a/g</code> 正则表达式，易知该正则表达式意思是：匹配任意位置A开始，中间可以是任何字符，最后遇到a结束。来匹配下面文本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Axxxyyya</span><br></pre></td></tr></table></figure>\n<p>易知 上面的文本可以被完整的匹配。(即 会匹配到 Axxxyyya)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231418_437.png?/\" alt=\"\" /></p>\n<p>如果我们把文本改成下面这个多行，会怎么样呢？正则表达式不变，还能匹配到所有文字吗？(注意上面贪婪匹配的定义)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A</span><br><span class=\"line\">xxx</span><br><span class=\"line\">yyy</span><br><span class=\"line\">a</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/202003231427_174.png?/\" alt=\"\" /></p>\n<p><code>/A.*a/gs</code> 正则表达式改成这样会怎么样呢。不想解释了直接看图吧，看完就知道s修饰符大概怎么用了🐶</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231429_130.png?/\" alt=\"\" /></p>\n<h3 id=\"其他语法\"><a class=\"markdownIt-Anchor\" href=\"#其他语法\"></a> 其他语法</h3>\n<blockquote>\n<p>特殊字符，限定符之类的直接从 <a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">菜鸟教程</a> 截图了。</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202003231717_753.png?/\" alt=\"特殊字符\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231718_930.png?/\" alt=\"限定符\" /></p>\n<p>有一点想说明一下，菜鸟教程中有说，对于一些相当于是编程语言中的保留字，概念的一些正则关键字。(\\n 换行符,\\t制表符，\\v,垂直制表符，空格，{, 以及html左标签&lt;等…这些都是不用记的)。 对于这些特殊字符都是<a href=\"https://tool.oschina.net/commons?type=4\">ASCII码表</a>里面有的。可以统一采用<code>\\x16进制的ASCII</code>表示,比如<code>\\x0a</code>表示换行符，<code>\\x20</code> 匹配空格,<code>\\x20*</code> 匹配任意个数的空格等。</p>\n<p><strong>补充：边界匹配</strong><br />\n<code>/\\bCha/</code>  匹配句子中的单词,且这个单词必须要以Cha开始。(Chapter)</p>\n<p><code>/ter\\b/</code> 匹配句子中的单词,且这个单词必须要以ter结束。(Chapter)</p>\n<p><code>/\\Bapt/</code> 匹配句子中的单词，且这个单词中间必须要有，apt字符。(可以匹配Chapter ，但是不能匹配 aptitude 因为这个单词中apt出现在，开始不再单词中间)</p>\n<h2 id=\"常见的一些组合语法\"><a class=\"markdownIt-Anchor\" href=\"#常见的一些组合语法\"></a> 常见的一些组合语法</h2>\n<h3 id=\"分组\"><a class=\"markdownIt-Anchor\" href=\"#分组\"></a> 分组</h3>\n<p>正则表达式通过()进行分组，主要使用场景是在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\">JavaScript replace函数中</a>,</p>\n<p>可以看到下图中 <code>/(\\w+)\\s(\\w+)/ig</code> 根据(),将这些元素分成了两组, 然后依次对应着JS replace函数中的<code>$1,$2...</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241114_203.png?/\" alt=\"\" /></p>\n<ul>\n<li>字符串前后两两交换位置</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;Talk is cheap show me the code&#x27;</span></span><br><span class=\"line\">str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\w+)\\s(\\w+)/ig</span>,<span class=\"function\">(<span class=\"params\">_,p1,p2</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;p2&#125;</span> <span class=\"subst\">$&#123;p1&#125;</span>`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// is Talk show cheap the me code</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"捕获于非捕获\"><a class=\"markdownIt-Anchor\" href=\"#捕获于非捕获\"></a> 捕获于非捕获</h3>\n<p>在JavaScript中我们采用$1,$2…，依次获取每个()表达式中匹配到的文本，同样用\\1\\2…依次引用，正则表达式中()匹配到的文本，我们把这种行为称为捕获。看图</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251109_562.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251109_87.png?/\" alt=\"\" /></p>\n<p>如果我们不想让某一个()表达式中的内容被捕获，这个过程就称为非捕获，非捕获表达式(?:xxx),如上我们将正则表达式中的 <code>(two)</code> 改成 <code>(?:two)</code> 此时依然要匹配 <code>one,two,three,one,three</code>,应该把<code>\\3</code> 改成<code>\\2</code>,因为此时<code>two</code> 不会被捕获,<code>\\2</code>从之前对应two变成对应three，看图就行</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251131_298.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251133_381.png?/\" alt=\"\" /></p>\n<h3 id=\"前项查找\"><a class=\"markdownIt-Anchor\" href=\"#前项查找\"></a> 前项查找</h3>\n<p>形如 <code>待查找字符(?=&quot;查找条件)</code>, 我们把<code>(?=xxx)</code> 这种格式的式子称作条件表达式，一般我们把想要查找的字符放在，条件表达式前面。因此称为前项查找。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241237_799.png?/\" alt=\"/lo(?=ck)/g\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241240_909.png?/\" alt=\"\" /></p>\n<ul>\n<li>否定前项查找，即对条件取反的操作</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202003241243_836.png?/\" alt=\"/lo(?!ck)/g\" /><br />\n<img src=\"http://blogimage.lemonlife.top/202003241244_917.png?/\" alt=\"\" /></p>\n<h3 id=\"后项查找\"><a class=\"markdownIt-Anchor\" href=\"#后项查找\"></a> 后项查找</h3>\n<p>同上 给两个单词，<code>condition</code>,<code>action</code>，同样只是条件表达式形式不一样，而且带查找字符，要放在条件表达式 <code>(?&lt;=xxx)</code> 后面。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241252_467.png?/\" alt=\"/(?&lt;=ac)tion/g\" /></p>\n<ul>\n<li>否定后项查找</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202003241253_914.png?/\" alt=\"/(?&lt;!ac)tion/g\" /></p>\n<h3 id=\"逻辑处理\"><a class=\"markdownIt-Anchor\" href=\"#逻辑处理\"></a> 逻辑处理</h3>\n<h4 id=\"或\"><a class=\"markdownIt-Anchor\" href=\"#或\"></a> 或 |,[]</h4>\n<p>匹配 字符串 “tea,ten,test,term”。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241258_125.png?/\" alt=\"/te(a|n|st|rm)/g\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241259_312.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241301_229.png?/\" alt=\"/te[anstrm]/g\" /><br />\n<img src=\"http://blogimage.lemonlife.top/202003241301_614.png?/\" alt=\"\" /></p>\n<h4 id=\"非\"><a class=\"markdownIt-Anchor\" href=\"#非\"></a> 非 [^],!</h4>\n<p><img src=\"http://blogimage.lemonlife.top/202003241304_922.png?/\" alt=\"/te[^ans]/g\" /><br />\n<img src=\"http://blogimage.lemonlife.top/202003241304_809.png?/\" alt=\"\" /></p>\n<p>!操作，参看前面的前向查找和后项查找</p>\n<h2 id=\"正则表达式js应用\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式js应用\"></a> 正则表达式JS应用</h2>\n<blockquote>\n<p>部分案例来源于<a href=\"https://github.com/qdlaoyao/js-regex-mini-book\">JS 正则迷你书</a>,以及<a href=\"https://juejin.im/post/5965943ff265da6c30653879\">该书掘金地址</a></p>\n</blockquote>\n<h3 id=\"匹配千分位\"><a class=\"markdownIt-Anchor\" href=\"#匹配千分位\"></a> 匹配千分位</h3>\n<ul>\n<li>解法1</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thousands</span>(<span class=\"params\">num, sep</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(num)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = str.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/(\\d+)(\\d&#123;3&#125;)/</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> integer = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> decimal = arr.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span> ? <span class=\"string\">`.<span class=\"subst\">$&#123;arr[<span class=\"number\">1</span>]&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (reg.<span class=\"title function_\">test</span>(integer)) &#123;</span><br><span class=\"line\">    integer = integer.<span class=\"title function_\">replace</span>(reg, <span class=\"string\">&quot;$1&quot;</span> + sep + <span class=\"string\">&quot;$2&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;integer&#125;</span><span class=\"subst\">$&#123;decimal&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">thousands</span>(<span class=\"number\">1234567890000</span>,<span class=\"string\">&#x27;,&#x27;</span>)) <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>解法二 利用前向查找结合 <code>/(?!^)(?=(\\d&#123;3&#125;)+$)/g</code> (我们假设是正整数，小数的话，和方法一一样，分割一下就行) 或者 可以写成 <code>/(?&lt;=\\d+)(?=(\\d&#123;3&#125;)+$)/g</code> 以及 <code>\\B(?=(\\d&#123;3&#125;)+$)</code> 总之都是为了过滤边界条件</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202003250158_667.png?/\" alt=\"/(?!^)(?=(\\d{3})+$)/g\" /></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;123456789&quot;</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(?&lt;=\\d+)(?=(\\d&#123;3&#125;)+$)/g</span>,<span class=\"string\">&#x27;,&#x27;</span>) <span class=\"comment\">// 123,456,789</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;123456789&quot;</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(?!^)(?=(\\d&#123;3&#125;)+$)/g</span>,<span class=\"string\">&#x27;,&#x27;</span>) <span class=\"comment\">//  123,456,789</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"window操作系统文件路径\"><a class=\"markdownIt-Anchor\" href=\"#window操作系统文件路径\"></a> window操作系统文件路径</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F:\\study\\javascript\\regex\\regular expression.pdf</span><br><span class=\"line\"></span><br><span class=\"line\">F:\\study\\javascript\\regex\\</span><br><span class=\"line\"></span><br><span class=\"line\">F:\\study\\\\javascript</span><br><span class=\"line\"></span><br><span class=\"line\">F:\\</span><br><span class=\"line\"></span><br><span class=\"line\">F:\\x*x\\</span><br></pre></td></tr></table></figure>\n<p>首先匹配盘符<code>^[a-zA-Z]:\\\\</code>，接着匹配文件夹，排除一些字符即可<code>[^\\\\:*&lt;&gt;|'&quot;?,。/]+\\\\</code> (假设中文标点啥的已经被排除了),文件夹可能出现很多次<code>([^\\\\:*&lt;&gt;|'&quot;?/]+\\\\)*</code>,结尾的文件夹没有 <code>\\</code> , <code>([^\\\\:*&lt;&gt;|'&quot;?/]+)?$</code>，所以最后的正则表达式是<br />\n<code>^[a-zA-Z]:\\\\([^\\\\:*&lt;&gt;|'&quot;?/]+\\\\)*([^\\\\:*&lt;&gt;|'&quot;?/]+)?$</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241746_567.png?/\" alt=\"window操作系统文件路径\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241747_272.png?/\" alt=\"匹配结果\" /></p>\n<h3 id=\"校验密码\"><a class=\"markdownIt-Anchor\" href=\"#校验密码\"></a> 校验密码</h3>\n<p>规定了密码只能是，大写或者小写字母，或者是数字。且至少含有三种字符中的两种,密码位数只能是6-12位</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1234567</span><br><span class=\"line\">abcdef</span><br><span class=\"line\">ABCDEF</span><br><span class=\"line\">ABCDEF234</span><br><span class=\"line\">1ABCDEF</span><br><span class=\"line\">abcDEFG</span><br><span class=\"line\">1abcDEF</span><br></pre></td></tr></table></figure>\n<p>首先可以确定密码只能是大小写字母和数字组成，且位数是6~12位的情况。<code>/^[0-9A-Za-z]&#123;6,12&#125;$/</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251002_768.png?/\" alt=\"\" /></p>\n<p>接下来就是要防止全是数字，或者全是小写字母和全是大写字母的情况出现。很明显就是要给出合适的条件表达式，所以无法就是前项查找，或者后项查找，然而因为是排除，所以就要对查找表达式取反。</p>\n<p>按照前项表达式可在 <code>/^[0-9A-Za-z]&#123;6,12&#125;$/</code> 前添加查找条件,如添加<code>(?!^[0-9]&#123;6,12&#125;$)</code>过滤掉都是数字的情况，同理针对大小写字母可以写出如下表达式。</p>\n<p><code>(?!^[0-9]&#123;6,12&#125;$)(?!^[A-Z]&#123;6,12&#125;$)(?!^[a-z]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251052_816.png?/\" alt=\"前项查找\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251052_312.png?/\" alt=\"\" /></p>\n<p>同理也可采用后项查找，把查找条件放在表达式后面。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251054_824.png?/\" alt=\"/[0-9A-Za-z]{6,12}$(?&lt;!^[0-9]{6,12}$)(?&lt;![a-z]{6,12})/g\" /></p>\n<h3 id=\"匹配日期\"><a class=\"markdownIt-Anchor\" href=\"#匹配日期\"></a> 匹配日期</h3>\n<p>匹配出用 <code>-</code>用做分割符的日期 <code>xxxx-xx-xx</code>,或者用 <code>/ .</code> 做为分隔符,对于<code>xxxx-xx.xx</code>这种分隔符不一致的不匹配。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016-06-12</span><br><span class=\"line\">2016/06/12</span><br><span class=\"line\">2016.06.12</span><br><span class=\"line\">2016-06.12</span><br><span class=\"line\">2016.06/12</span><br></pre></td></tr></table></figure>\n<p>需要引入一个方向引用的概念，在正则表达式中使用<code>\\1</code>匹配第一个()表达式中的匹配到内容。 用<code>\\2</code> 匹配第二个括号表达式中匹配的内容。例如正则表达式<code>/(one),(two),(three),\\1,\\3/g</code>直接看图吧</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251109_562.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251109_87.png?/\" alt=\"\" /></p>\n<p>所以日期的正则表达式就容易写了 <code>/^\\d&#123;4&#125;(-|\\x2f|\\x2e)d&#123;2&#125;\\1d&#123;2&#125;$/g</code> (2f,2e是16进制47,46表示/和.) ，如下图：</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251118_437.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251118_179.png?/\" alt=\"\" /></p>\n<h3 id=\"单词首字母转成大写\"><a class=\"markdownIt-Anchor\" href=\"#单词首字母转成大写\"></a> 单词首字母转成大写</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a programming technique which will help you parallelize your code and speed up performance</span><br></pre></td></tr></table></figure>\n<p>题目的思路很明确就是如何匹配到单词的首字母的问题，因此我们可以采用 <code>(\\b\\w)</code>来匹配单词首字母。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251151_238.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251152_538.png?/\" alt=\"\" /></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">titleize</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str.<span class=\"title function_\">toLowerCase</span>().<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\b\\w)/g</span>, <span class=\"keyword\">function</span>(<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c.<span class=\"title function_\">toUpperCase</span>();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">titleize</span>(<span class=\"string\">&#x27;上述文本&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/202003251153_928.png?/\" alt=\"代码执行结果\" /></p>\n<h3 id=\"匹配ipv4地址\"><a class=\"markdownIt-Anchor\" href=\"#匹配ipv4地址\"></a> 匹配IPv4地址</h3>\n<p><code>((25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251325_470.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251326_432.png?/\" alt=\"IPV4匹配结果\" /></p>\n<h3 id=\"匹配国内身份证号\"><a class=\"markdownIt-Anchor\" href=\"#匹配国内身份证号\"></a> 匹配国内身份证号</h3>\n<p>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X。</p>\n<p><code>(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251330_597.png?/\" alt=\"\" /></p>\n<h3 id=\"匹配国内手机号码\"><a class=\"markdownIt-Anchor\" href=\"#匹配国内手机号码\"></a> 匹配国内手机号码</h3>\n<p><a href=\"https://zhidao.baidu.com/question/434432697263212804.html\">三大运营商号码段~2019年</a></p>\n<p>170为虚拟号码要排除，166,198,199 是新增号码段，所以正则表达式为</p>\n<p><code>/^(?!170)^((13|14|15|17|18)[0-9]|166|198|199)\\d&#123;8&#125;$/g</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251346_11.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251344_947.png?/\" alt=\"匹配结果\" /></p>\n<h3 id=\"座机号码匹配\"><a class=\"markdownIt-Anchor\" href=\"#座机号码匹配\"></a> 座机号码匹配</h3>\n<p>注意开始符号<code>^</code>和结束符号 <code>$</code> 的位置，注意不要把 <code>/^((\\d&#123;3&#125;-)?\\d&#123;8&#125;|(\\d&#123;4&#125;-)?\\d&#123;7&#125;)$/g</code>  写成了<code>/^(\\d&#123;3&#125;-)?\\d&#123;8&#125;|(\\d&#123;4&#125;-)?\\d&#123;7&#125;$/g</code>  ,这和正则表达式运算符优先级有关，不细说了直接看图</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251354_853.png?/\" alt=\"正确的写法\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251355_657.png?/\" alt=\"错误的写法\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251356_902.png?/\" alt=\"匹配结果\" /></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>做自己喜欢的事保持进步。</p>\n</blockquote>\n<p>首先推荐两个网址，<a href=\"https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24\">用图形化解释你写的正则</a>,<a href=\"https://regexr.com/\">很方便测试正则的网站</a></p>\n<p>正则表达式基础可参看<a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">菜鸟教程~正则表达式</a>,后面本文中的基础语法只是对教程中的一些解释。推荐用一小时过一遍菜鸟教程，再继续看下文。</p>\n<h2 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\"></a> 语法</h2>\n<p>你可以把正则表达式，看成是一门编程语言，其中有一些字符，就是规定了一些基础的语法，像JavaScript的 <code>function</code> 表示函数，<code>let</code>声明变量,用 <code>+ - * / ()</code> 表示四则运算一样。</p>\n<h3 id=\"基本写法和修饰符\"><a class=\"markdownIt-Anchor\" href=\"#基本写法和修饰符\"></a> 基本写法和修饰符</h3>\n<p>可以直接采用 <code>/正则表达式/修饰符</code> 这种,把正则表达式直接写在<code>//</code> 注释符号双斜杠中间，或者采用ES6的 <code>RegExp(&quot;正则表达式&quot;,&quot;修饰符&quot;)</code> 的形式(ES5,也有RegExp,不过没有第二个参数)。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;xyz&#x27;</span>,<span class=\"string\">&#x27;i&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\">/xyz/i</span><br><span class=\"line\"><span class=\"comment\">//等价于ES5中的</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;/xyz/i&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"对于修饰符es5中只有igm也是比较常用的三种\"><a class=\"markdownIt-Anchor\" href=\"#对于修饰符es5中只有igm也是比较常用的三种\"></a> 对于修饰符ES5中只有<code>igm</code>也是比较常用的三种。</h4>\n<blockquote>\n<p><code>i</code>表示不区分匹配的大小写，即 <code>a</code> 可以匹配到<code>A或a</code></p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202003231105_156.png?/\" alt=\"区分大小写匹配\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231106_287.png?/\" alt=\"不区分大小写匹配\" /></p>\n<blockquote>\n<p><code>g</code> 表示全局匹配，有点递归执行函数的意思。</p>\n</blockquote>\n<p>如果用<code>/a/i</code> 匹配Aa,从上图可知匹配到 <code>A</code> 后，正则函数将不再继续向后执行。如果使用<code>/a/ig</code> ,匹配到<code>A</code>后将继续向后执行,匹配到a。两次匹配是相互独立的，每次匹配的结果都存在数组里面最后返回 [A,a]</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231110_791.png?/\" alt=\"全局匹配\" /></p>\n<blockquote>\n<p><code>m</code> 表示,多行(multiline)匹配。你可能会想 <code>g</code> 全局匹配吗？为什么还要多行匹配呢？</p>\n</blockquote>\n<p>可以看到下图中通过g的全局匹配，我们的确匹配到了多行文本中所有的Aa(图中红色箭头是指换行符可以用<code>\\x0a</code>匹配)。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231132_796.png?/\" alt=\"\" /></p>\n<p>现在分析一下 <code>/^Aa\\x0a/g</code> 这个表达式。猜猜这个会匹配到什么？(^表示必须以A字符开头)。首先肯定可以匹配到第一行的Aa。对于第二行和第三行的字符还能匹配到吗？<br />\n<img src=\"http://blogimage.lemonlife.top/202003231153_510.png?/\" alt=\"\" /></p>\n<p>当我们全局扫描到第一行时匹配到了<code>Aa\\n</code> (\\n 表示末尾的换行符哈),但是我们接着往下继续扫描时候，正则表达式还记着我的第一行还有东西呢，因此再后面匹配的时候，正则表达式发现，开始的字符就不是A了，于是就停止了匹配。</p>\n<p>如果我们加上m修饰符，能让正则表达式变成一个健忘症患者，忘记上一行的内容。那么 <code>/^Aa\\x0a/gm</code> 就会是像下面这样</p>\n<ul>\n<li>\n<p>第一次表达式面对的文本(\\n表示换行符)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Aa\\n</span><br><span class=\"line\">Aa\\n</span><br><span class=\"line\">Aa\\n</span><br></pre></td></tr></table></figure>\n<p>匹配到<code>Aa\\n</code></p>\n</li>\n<li>\n<p>第二次表达式面对的文本，(忘掉了第一行)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Aa\\n</span><br><span class=\"line\">Aa\\n</span><br></pre></td></tr></table></figure>\n<p>匹配到<code>Aa\\n</code></p>\n</li>\n<li>\n<p>第三次表达式面对的文本，(忘掉了前两行)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Aa\\n</span><br></pre></td></tr></table></figure>\n<p>匹配到<code>Aa\\n</code></p>\n</li>\n</ul>\n<p>所以最后我们可以看到，又成功的匹配到了三行以A开始的文本<br />\n<img src=\"http://blogimage.lemonlife.top/202003231204_357.png?/\" alt=\"\" /></p>\n<p>下面继续分析通过<code>/^Aa\\x0a$/m</code>(表示字符串必须已A开始换行符结束，中间是a)，匹配相同的文本，结果又是什么？</p>\n<p>从上面的的分析可知，第一次正则表达式面对的是三行完整的文字，的确是A开始但是后面不满足,中间是a,结尾是换行符的条件。同样面对第二行时，也不满足条件。直到面对第三行文本的时候(此时忘记了前两行了)，刚刚好就是 <code>Aa\\n</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231212_614.png?/\" alt=\"\" /></p>\n<h4 id=\"es6新增u和y修饰符\"><a class=\"markdownIt-Anchor\" href=\"#es6新增u和y修饰符\"></a> ES6新增u和y修饰符</h4>\n<blockquote>\n<p>u 修饰符是针对Unicode编码的,</p>\n</blockquote>\n<p>为了让正则表达式能正确处理四个字节的 UTF-16 编码.类似于(<code>\\ud83d\\ude18</code>) 。 ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符。直接来图吧。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231605_990.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231607_852.png?/\" alt=\"\" /></p>\n<p>对比上面两个图, 可以先说明一下表情😘对应的Unicode编码就是 <code>\\ud83d\\ude18</code>,正则表达式最初的意思就是想匹配最开始的😘。<br />\n可是你会发现，什么情况 /^\\ud83d/ 为啥也命中了这个表情，很明显就是在没有指定u修饰符的情况下，ES5 把 😘 这个可爱的表情拆成了，两个字符 <code>\\ud83d</code> 和 <code>\\ude18</code>。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231613_459.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231613_746.png?/\" alt=\"\" /></p>\n<p>果然我们加上u修饰符之后,只有<code>\\ud83d\\ude18</code>能匹配到 😘 了。</p>\n<blockquote>\n<p>除了u修饰符，ES6 还为正则表达式添加了y修饰符，叫做“粘连”（sticky）修饰符。</p>\n</blockquote>\n<p>前面说过正则有点递归调用的意思，g修饰符每次进行新的调用的时候，不用在意字符串的位置，而y修饰符相当于每次都在正则表达式上加了一个 <code>^</code> 指定了，必须是开始第一个。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;AaAaAa&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> rg = <span class=\"regexp\">/A/g</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ry = <span class=\"regexp\">/A/y</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ryAa = <span class=\"regexp\">/Aa/y</span></span><br></pre></td></tr></table></figure>\n<p>执行 <code>rg.exec(str)</code> ,可以看到字符串中的三个A都被匹配到了</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231635_501.png?/\" alt=\"\" /></p>\n<p>执行 <code>ry.exec(str)</code> ,可以看到字符串中只有第一个A被匹配到了,因为y修饰符的原因，第一次执行的时候相当于<code>/^A/</code>去匹配，匹配完之后剩下字符串aAaAa,然后<code>/^A/</code> 再去匹配。然后就什么都匹配不到了</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231640_48.png?/\" alt=\"\" /></p>\n<p>执行 <code>ryAa.exec(str)</code> ,可以看到每次都拿/Aa/y去匹配，相当于/^Aa/,然后三个Aa就都匹配到了。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231649_959.png?/\" alt=\"\" /></p>\n<h4 id=\"暂不支持的s修饰符\"><a class=\"markdownIt-Anchor\" href=\"#暂不支持的s修饰符\"></a> 暂不支持的s修饰符</h4>\n<blockquote>\n<p><code>s</code>修饰符(single)，意思是无论文本中有没有换行符，统一把这些文本当成一行。</p>\n</blockquote>\n<p><strong>友情提示一下s修饰符，现在的浏览器可能都不能支持,应该是<a href=\"https://baike.baidu.com/item/PCRE/7401536?fr=aladdin\">PCRE</a>和ES2018 引入的语法</strong></p>\n<p>这个修饰符与 multiline 有点相反的意思。下面我们来演示一种场景。先补充一个知识 <code>.*</code> 表示贪婪匹配，可以匹配到除换行符之外的任意字符。</p>\n<p>定义 <code>/A.*a/g</code> 正则表达式，易知该正则表达式意思是：匹配任意位置A开始，中间可以是任何字符，最后遇到a结束。来匹配下面文本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Axxxyyya</span><br></pre></td></tr></table></figure>\n<p>易知 上面的文本可以被完整的匹配。(即 会匹配到 Axxxyyya)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231418_437.png?/\" alt=\"\" /></p>\n<p>如果我们把文本改成下面这个多行，会怎么样呢？正则表达式不变，还能匹配到所有文字吗？(注意上面贪婪匹配的定义)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A</span><br><span class=\"line\">xxx</span><br><span class=\"line\">yyy</span><br><span class=\"line\">a</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/202003231427_174.png?/\" alt=\"\" /></p>\n<p><code>/A.*a/gs</code> 正则表达式改成这样会怎么样呢。不想解释了直接看图吧，看完就知道s修饰符大概怎么用了🐶</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231429_130.png?/\" alt=\"\" /></p>\n<h3 id=\"其他语法\"><a class=\"markdownIt-Anchor\" href=\"#其他语法\"></a> 其他语法</h3>\n<blockquote>\n<p>特殊字符，限定符之类的直接从 <a href=\"https://www.runoob.com/regexp/regexp-syntax.html\">菜鸟教程</a> 截图了。</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202003231717_753.png?/\" alt=\"特殊字符\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003231718_930.png?/\" alt=\"限定符\" /></p>\n<p>有一点想说明一下，菜鸟教程中有说，对于一些相当于是编程语言中的保留字，概念的一些正则关键字。(\\n 换行符,\\t制表符，\\v,垂直制表符，空格，{, 以及html左标签&lt;等…这些都是不用记的)。 对于这些特殊字符都是<a href=\"https://tool.oschina.net/commons?type=4\">ASCII码表</a>里面有的。可以统一采用<code>\\x16进制的ASCII</code>表示,比如<code>\\x0a</code>表示换行符，<code>\\x20</code> 匹配空格,<code>\\x20*</code> 匹配任意个数的空格等。</p>\n<p><strong>补充：边界匹配</strong><br />\n<code>/\\bCha/</code>  匹配句子中的单词,且这个单词必须要以Cha开始。(Chapter)</p>\n<p><code>/ter\\b/</code> 匹配句子中的单词,且这个单词必须要以ter结束。(Chapter)</p>\n<p><code>/\\Bapt/</code> 匹配句子中的单词，且这个单词中间必须要有，apt字符。(可以匹配Chapter ，但是不能匹配 aptitude 因为这个单词中apt出现在，开始不再单词中间)</p>\n<h2 id=\"常见的一些组合语法\"><a class=\"markdownIt-Anchor\" href=\"#常见的一些组合语法\"></a> 常见的一些组合语法</h2>\n<h3 id=\"分组\"><a class=\"markdownIt-Anchor\" href=\"#分组\"></a> 分组</h3>\n<p>正则表达式通过()进行分组，主要使用场景是在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\">JavaScript replace函数中</a>,</p>\n<p>可以看到下图中 <code>/(\\w+)\\s(\\w+)/ig</code> 根据(),将这些元素分成了两组, 然后依次对应着JS replace函数中的<code>$1,$2...</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241114_203.png?/\" alt=\"\" /></p>\n<ul>\n<li>字符串前后两两交换位置</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;Talk is cheap show me the code&#x27;</span></span><br><span class=\"line\">str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\w+)\\s(\\w+)/ig</span>,<span class=\"function\">(<span class=\"params\">_,p1,p2</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;p2&#125;</span> <span class=\"subst\">$&#123;p1&#125;</span>`</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// is Talk show cheap the me code</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"捕获于非捕获\"><a class=\"markdownIt-Anchor\" href=\"#捕获于非捕获\"></a> 捕获于非捕获</h3>\n<p>在JavaScript中我们采用$1,$2…，依次获取每个()表达式中匹配到的文本，同样用\\1\\2…依次引用，正则表达式中()匹配到的文本，我们把这种行为称为捕获。看图</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251109_562.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251109_87.png?/\" alt=\"\" /></p>\n<p>如果我们不想让某一个()表达式中的内容被捕获，这个过程就称为非捕获，非捕获表达式(?:xxx),如上我们将正则表达式中的 <code>(two)</code> 改成 <code>(?:two)</code> 此时依然要匹配 <code>one,two,three,one,three</code>,应该把<code>\\3</code> 改成<code>\\2</code>,因为此时<code>two</code> 不会被捕获,<code>\\2</code>从之前对应two变成对应three，看图就行</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251131_298.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251133_381.png?/\" alt=\"\" /></p>\n<h3 id=\"前项查找\"><a class=\"markdownIt-Anchor\" href=\"#前项查找\"></a> 前项查找</h3>\n<p>形如 <code>待查找字符(?=&quot;查找条件)</code>, 我们把<code>(?=xxx)</code> 这种格式的式子称作条件表达式，一般我们把想要查找的字符放在，条件表达式前面。因此称为前项查找。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241237_799.png?/\" alt=\"/lo(?=ck)/g\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241240_909.png?/\" alt=\"\" /></p>\n<ul>\n<li>否定前项查找，即对条件取反的操作</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202003241243_836.png?/\" alt=\"/lo(?!ck)/g\" /><br />\n<img src=\"http://blogimage.lemonlife.top/202003241244_917.png?/\" alt=\"\" /></p>\n<h3 id=\"后项查找\"><a class=\"markdownIt-Anchor\" href=\"#后项查找\"></a> 后项查找</h3>\n<p>同上 给两个单词，<code>condition</code>,<code>action</code>，同样只是条件表达式形式不一样，而且带查找字符，要放在条件表达式 <code>(?&lt;=xxx)</code> 后面。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241252_467.png?/\" alt=\"/(?&lt;=ac)tion/g\" /></p>\n<ul>\n<li>否定后项查找</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202003241253_914.png?/\" alt=\"/(?&lt;!ac)tion/g\" /></p>\n<h3 id=\"逻辑处理\"><a class=\"markdownIt-Anchor\" href=\"#逻辑处理\"></a> 逻辑处理</h3>\n<h4 id=\"或\"><a class=\"markdownIt-Anchor\" href=\"#或\"></a> 或 |,[]</h4>\n<p>匹配 字符串 “tea,ten,test,term”。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241258_125.png?/\" alt=\"/te(a|n|st|rm)/g\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241259_312.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241301_229.png?/\" alt=\"/te[anstrm]/g\" /><br />\n<img src=\"http://blogimage.lemonlife.top/202003241301_614.png?/\" alt=\"\" /></p>\n<h4 id=\"非\"><a class=\"markdownIt-Anchor\" href=\"#非\"></a> 非 [^],!</h4>\n<p><img src=\"http://blogimage.lemonlife.top/202003241304_922.png?/\" alt=\"/te[^ans]/g\" /><br />\n<img src=\"http://blogimage.lemonlife.top/202003241304_809.png?/\" alt=\"\" /></p>\n<p>!操作，参看前面的前向查找和后项查找</p>\n<h2 id=\"正则表达式js应用\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式js应用\"></a> 正则表达式JS应用</h2>\n<blockquote>\n<p>部分案例来源于<a href=\"https://github.com/qdlaoyao/js-regex-mini-book\">JS 正则迷你书</a>,以及<a href=\"https://juejin.im/post/5965943ff265da6c30653879\">该书掘金地址</a></p>\n</blockquote>\n<h3 id=\"匹配千分位\"><a class=\"markdownIt-Anchor\" href=\"#匹配千分位\"></a> 匹配千分位</h3>\n<ul>\n<li>解法1</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thousands</span>(<span class=\"params\">num, sep</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(num)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = str.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/(\\d+)(\\d&#123;3&#125;)/</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> integer = arr[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> decimal = arr.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span> ? <span class=\"string\">`.<span class=\"subst\">$&#123;arr[<span class=\"number\">1</span>]&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (reg.<span class=\"title function_\">test</span>(integer)) &#123;</span><br><span class=\"line\">    integer = integer.<span class=\"title function_\">replace</span>(reg, <span class=\"string\">&quot;$1&quot;</span> + sep + <span class=\"string\">&quot;$2&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;integer&#125;</span><span class=\"subst\">$&#123;decimal&#125;</span>`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">thousands</span>(<span class=\"number\">1234567890000</span>,<span class=\"string\">&#x27;,&#x27;</span>)) <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>解法二 利用前向查找结合 <code>/(?!^)(?=(\\d&#123;3&#125;)+$)/g</code> (我们假设是正整数，小数的话，和方法一一样，分割一下就行) 或者 可以写成 <code>/(?&lt;=\\d+)(?=(\\d&#123;3&#125;)+$)/g</code> 以及 <code>\\B(?=(\\d&#123;3&#125;)+$)</code> 总之都是为了过滤边界条件</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202003250158_667.png?/\" alt=\"/(?!^)(?=(\\d{3})+$)/g\" /></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;123456789&quot;</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(?&lt;=\\d+)(?=(\\d&#123;3&#125;)+$)/g</span>,<span class=\"string\">&#x27;,&#x27;</span>) <span class=\"comment\">// 123,456,789</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;123456789&quot;</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(?!^)(?=(\\d&#123;3&#125;)+$)/g</span>,<span class=\"string\">&#x27;,&#x27;</span>) <span class=\"comment\">//  123,456,789</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"window操作系统文件路径\"><a class=\"markdownIt-Anchor\" href=\"#window操作系统文件路径\"></a> window操作系统文件路径</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F:\\study\\javascript\\regex\\regular expression.pdf</span><br><span class=\"line\"></span><br><span class=\"line\">F:\\study\\javascript\\regex\\</span><br><span class=\"line\"></span><br><span class=\"line\">F:\\study\\\\javascript</span><br><span class=\"line\"></span><br><span class=\"line\">F:\\</span><br><span class=\"line\"></span><br><span class=\"line\">F:\\x*x\\</span><br></pre></td></tr></table></figure>\n<p>首先匹配盘符<code>^[a-zA-Z]:\\\\</code>，接着匹配文件夹，排除一些字符即可<code>[^\\\\:*&lt;&gt;|'&quot;?,。/]+\\\\</code> (假设中文标点啥的已经被排除了),文件夹可能出现很多次<code>([^\\\\:*&lt;&gt;|'&quot;?/]+\\\\)*</code>,结尾的文件夹没有 <code>\\</code> , <code>([^\\\\:*&lt;&gt;|'&quot;?/]+)?$</code>，所以最后的正则表达式是<br />\n<code>^[a-zA-Z]:\\\\([^\\\\:*&lt;&gt;|'&quot;?/]+\\\\)*([^\\\\:*&lt;&gt;|'&quot;?/]+)?$</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241746_567.png?/\" alt=\"window操作系统文件路径\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003241747_272.png?/\" alt=\"匹配结果\" /></p>\n<h3 id=\"校验密码\"><a class=\"markdownIt-Anchor\" href=\"#校验密码\"></a> 校验密码</h3>\n<p>规定了密码只能是，大写或者小写字母，或者是数字。且至少含有三种字符中的两种,密码位数只能是6-12位</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1234567</span><br><span class=\"line\">abcdef</span><br><span class=\"line\">ABCDEF</span><br><span class=\"line\">ABCDEF234</span><br><span class=\"line\">1ABCDEF</span><br><span class=\"line\">abcDEFG</span><br><span class=\"line\">1abcDEF</span><br></pre></td></tr></table></figure>\n<p>首先可以确定密码只能是大小写字母和数字组成，且位数是6~12位的情况。<code>/^[0-9A-Za-z]&#123;6,12&#125;$/</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251002_768.png?/\" alt=\"\" /></p>\n<p>接下来就是要防止全是数字，或者全是小写字母和全是大写字母的情况出现。很明显就是要给出合适的条件表达式，所以无法就是前项查找，或者后项查找，然而因为是排除，所以就要对查找表达式取反。</p>\n<p>按照前项表达式可在 <code>/^[0-9A-Za-z]&#123;6,12&#125;$/</code> 前添加查找条件,如添加<code>(?!^[0-9]&#123;6,12&#125;$)</code>过滤掉都是数字的情况，同理针对大小写字母可以写出如下表达式。</p>\n<p><code>(?!^[0-9]&#123;6,12&#125;$)(?!^[A-Z]&#123;6,12&#125;$)(?!^[a-z]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251052_816.png?/\" alt=\"前项查找\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251052_312.png?/\" alt=\"\" /></p>\n<p>同理也可采用后项查找，把查找条件放在表达式后面。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251054_824.png?/\" alt=\"/[0-9A-Za-z]{6,12}$(?&lt;!^[0-9]{6,12}$)(?&lt;![a-z]{6,12})/g\" /></p>\n<h3 id=\"匹配日期\"><a class=\"markdownIt-Anchor\" href=\"#匹配日期\"></a> 匹配日期</h3>\n<p>匹配出用 <code>-</code>用做分割符的日期 <code>xxxx-xx-xx</code>,或者用 <code>/ .</code> 做为分隔符,对于<code>xxxx-xx.xx</code>这种分隔符不一致的不匹配。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2016-06-12</span><br><span class=\"line\">2016/06/12</span><br><span class=\"line\">2016.06.12</span><br><span class=\"line\">2016-06.12</span><br><span class=\"line\">2016.06/12</span><br></pre></td></tr></table></figure>\n<p>需要引入一个方向引用的概念，在正则表达式中使用<code>\\1</code>匹配第一个()表达式中的匹配到内容。 用<code>\\2</code> 匹配第二个括号表达式中匹配的内容。例如正则表达式<code>/(one),(two),(three),\\1,\\3/g</code>直接看图吧</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251109_562.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251109_87.png?/\" alt=\"\" /></p>\n<p>所以日期的正则表达式就容易写了 <code>/^\\d&#123;4&#125;(-|\\x2f|\\x2e)d&#123;2&#125;\\1d&#123;2&#125;$/g</code> (2f,2e是16进制47,46表示/和.) ，如下图：</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251118_437.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251118_179.png?/\" alt=\"\" /></p>\n<h3 id=\"单词首字母转成大写\"><a class=\"markdownIt-Anchor\" href=\"#单词首字母转成大写\"></a> 单词首字母转成大写</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a programming technique which will help you parallelize your code and speed up performance</span><br></pre></td></tr></table></figure>\n<p>题目的思路很明确就是如何匹配到单词的首字母的问题，因此我们可以采用 <code>(\\b\\w)</code>来匹配单词首字母。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251151_238.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251152_538.png?/\" alt=\"\" /></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">titleize</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str.<span class=\"title function_\">toLowerCase</span>().<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\b\\w)/g</span>, <span class=\"keyword\">function</span>(<span class=\"params\">c</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c.<span class=\"title function_\">toUpperCase</span>();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">titleize</span>(<span class=\"string\">&#x27;上述文本&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/202003251153_928.png?/\" alt=\"代码执行结果\" /></p>\n<h3 id=\"匹配ipv4地址\"><a class=\"markdownIt-Anchor\" href=\"#匹配ipv4地址\"></a> 匹配IPv4地址</h3>\n<p><code>((25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251325_470.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251326_432.png?/\" alt=\"IPV4匹配结果\" /></p>\n<h3 id=\"匹配国内身份证号\"><a class=\"markdownIt-Anchor\" href=\"#匹配国内身份证号\"></a> 匹配国内身份证号</h3>\n<p>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X。</p>\n<p><code>(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251330_597.png?/\" alt=\"\" /></p>\n<h3 id=\"匹配国内手机号码\"><a class=\"markdownIt-Anchor\" href=\"#匹配国内手机号码\"></a> 匹配国内手机号码</h3>\n<p><a href=\"https://zhidao.baidu.com/question/434432697263212804.html\">三大运营商号码段~2019年</a></p>\n<p>170为虚拟号码要排除，166,198,199 是新增号码段，所以正则表达式为</p>\n<p><code>/^(?!170)^((13|14|15|17|18)[0-9]|166|198|199)\\d&#123;8&#125;$/g</code></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251346_11.png?/\" alt=\"\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251344_947.png?/\" alt=\"匹配结果\" /></p>\n<h3 id=\"座机号码匹配\"><a class=\"markdownIt-Anchor\" href=\"#座机号码匹配\"></a> 座机号码匹配</h3>\n<p>注意开始符号<code>^</code>和结束符号 <code>$</code> 的位置，注意不要把 <code>/^((\\d&#123;3&#125;-)?\\d&#123;8&#125;|(\\d&#123;4&#125;-)?\\d&#123;7&#125;)$/g</code>  写成了<code>/^(\\d&#123;3&#125;-)?\\d&#123;8&#125;|(\\d&#123;4&#125;-)?\\d&#123;7&#125;$/g</code>  ,这和正则表达式运算符优先级有关，不细说了直接看图</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251354_853.png?/\" alt=\"正确的写法\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251355_657.png?/\" alt=\"错误的写法\" /></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003251356_902.png?/\" alt=\"匹配结果\" /></p>\n"},{"title":"redis 和 mongo 入门","date":"2021-08-26T15:37:26.000Z","_content":"\n# redis\n## 基础类型\n### string\nredis 的 字符串类型，可以支持 `string`，`number`，`bitmap` 等操作。\n- string 类型\n\nstring 类型支持的操作有  `STRLEN` 获取字符串长度。`APPEND` 字符串拼接等。  当然所有的数据类型都支持基础操作 `set` `get`。\n\n```\n127.0.0.1:6379> set string1 \"hello word\"\nOK\n127.0.0.1:6379> get string1\n\"hello word\"\n127.0.0.1:6379> STRLEN string1\n(integer) 10\n127.0.0.1:6379> APPEND string1 abc\n(integer) 13\n127.0.0.1:6379> get string1\n\"hello wordabc\"\n```\nredis string 中的长度都是指字节长度。如果字符串中含有中文字符，可能会出现一个字符含有多个字节的情况。\n单个汉字`utf8`编码一般占3个字节、\n```bash\n127.0.0.1:6379> set str1 中国\nOK\n127.0.0.1:6379> STRLEN str1\n(integer) 6\n127.0.0.1:6379> get str1\n\"\\xe4\\xb8\\xad\\xe5\\x9b\\xbd\"\n```\n- number 类型\nnumber 类型额外还支持对存入数值的加减操作。\n```bash\n127.0.0.1:6379> set num1 1\nOK\n127.0.0.1:6379> get num1\n\"1\"\n127.0.0.1:6379> INCR num1\n(integer) 2\n127.0.0.1:6379> OBJECT encoding num1\n\"int\"\n127.0.0.1:6379> DECR num1\n(integer) 1\n127.0.0.1:6379> get num1\n\"1\"\n127.0.0.1:6379> INCRBY num1 10\n(integer) 11\n127.0.0.1:6379> get num1\n\"11\"\n```\n- bitmap 类型\n是一种二进制类型的字符串。二进制字符特点就是速度快。设置方法是通过 `redis-cli` 运行指令 `SERBIT key offset value` 这样的方式，\n其中 offset 字符的起始位置。value 是 `0 或 1`。\n```\n127.0.0.1:6379> SETBIT k1 1 1\n(integer) 0\n127.0.0.1:6379> STRLEN k1\n(integer) 1\n127.0.0.1:6379> get k1\n\"@\"\n127.0.0.1:6379> SETBIT k1 7 1\n(integer) 0\n127.0.0.1:6379> get k1\n\"A\"\n```\n`BITCOUNT` 统计 key 中字符规定范围的字节内部有多少个1 `BITCONUT key 字节起始位置 字节结束位置`。\n`SETBIT` 操作的时候当offset的值超过一字节(8位，7)的时候。会自动拼接上下一个字节。 \n```bash\n127.0.0.1:6379> BITCOUNT k1 0 0\n(integer) 2\n127.0.0.1:6379> setbit k1  8 1\n(integer) 0\n127.0.0.1:6379> BITCOUNT k1 0 0\n(integer) 2\n127.0.0.1:6379> BITCOUNT k1 0 -1\n(integer) 3\n```\n![redis bitmap 设置过程](https://blogimage.lemonlife.top/20210829152446.png)\n\n> `redis-cli` 指令 `help @string` 可查看 string 类型的所有操作。\n```bash\n127.0.0.1:6379> help @string\n```\n### List \n环形链表。同向取用数据等于栈，异向取用数据等于队列的操作。\n```bash\n127.0.0.1:6379> help @list\n```\n### Hash\nredis 常用的 hash map 操作。多用于聚合数据。\n```bash\n127.0.0.1:6379> help @hash\n```\n### Set \n无序的去重集合。\n```bash\n127.0.0.1:6379> help @set\n```\n### SortedSet 有序集合\n主要应用，分页和排行榜。\n```bash\n127.0.0.1:6379> zadd z1 3.2 apple 1.2 banana 4.3 orange\n(integer) 3\n127.0.0.1:6379> ZRANGE z1 0 -1 withscores\n1) \"banana\"\n2) \"1.2\"\n3) \"apple\"\n4) \"3.2000000000000002\"\n5) \"orange\"\n6) \"4.2999999999999998\"\n127.0.0.1:6379> ZRANGE z1 0 1\n1) \"banana\"\n2) \"apple\"\n127.0.0.1:6379> ZREVRANGE z1 0 1\n1) \"orange\"\n2) \"apple\"\n```\n底层实现。存入的数据量少于 128 或者 当个元素小于 64byte的时候采用 `zipList` 实现。超过了使用 `skipList` 实现。\n![redis 排序底层实现逻辑](https://blogimage.lemonlife.top/20210829164526.png)\n ```bash\n127.0.0.1:6379> help @sorted_set\n```\n### 持久化\n![redis 持久化方式](https://blogimage.lemonlife.top/20210829170412.png)\n\n### 分布式\n\n- 强一致性\n请求到达 redis 集群时。redis 必须写完所有的机器，才能给客户端返回。但是只要有一个机器不可用了就会导致整个集群无法正常工作。\n强一致性一定程度上会影响服务的可用性。\n![强一致性流程](https://blogimage.lemonlife.top/20210829205743.png)\n- 弱一致性\n![弱一致性流程，redis默认采用的方式](https://blogimage.lemonlife.top/20210829210034.png)\n- 最终一致性\n最终一致性是指 redis 将数据的操作成功写入某个黑盒程序后，返回给客户端，其他的机器通过消费黑盒中的数据来达到和主机器一样的数据。实现最终一致性。\n![最终一致性](https://blogimage.lemonlife.top/20210829211654.png)\n## 多线程\n\n![传统Redis和Redis 6 多线程 模型对比](https://blogimage.lemonlife.top/20210829133707.png)\n","source":"_posts/redis-mongodb.md","raw":"---\ntitle: redis 和 mongo 入门\ndate: 2021-08-26 23:37:26\ntags:\n  - redis\n  - mongodb\n---\n\n# redis\n## 基础类型\n### string\nredis 的 字符串类型，可以支持 `string`，`number`，`bitmap` 等操作。\n- string 类型\n\nstring 类型支持的操作有  `STRLEN` 获取字符串长度。`APPEND` 字符串拼接等。  当然所有的数据类型都支持基础操作 `set` `get`。\n\n```\n127.0.0.1:6379> set string1 \"hello word\"\nOK\n127.0.0.1:6379> get string1\n\"hello word\"\n127.0.0.1:6379> STRLEN string1\n(integer) 10\n127.0.0.1:6379> APPEND string1 abc\n(integer) 13\n127.0.0.1:6379> get string1\n\"hello wordabc\"\n```\nredis string 中的长度都是指字节长度。如果字符串中含有中文字符，可能会出现一个字符含有多个字节的情况。\n单个汉字`utf8`编码一般占3个字节、\n```bash\n127.0.0.1:6379> set str1 中国\nOK\n127.0.0.1:6379> STRLEN str1\n(integer) 6\n127.0.0.1:6379> get str1\n\"\\xe4\\xb8\\xad\\xe5\\x9b\\xbd\"\n```\n- number 类型\nnumber 类型额外还支持对存入数值的加减操作。\n```bash\n127.0.0.1:6379> set num1 1\nOK\n127.0.0.1:6379> get num1\n\"1\"\n127.0.0.1:6379> INCR num1\n(integer) 2\n127.0.0.1:6379> OBJECT encoding num1\n\"int\"\n127.0.0.1:6379> DECR num1\n(integer) 1\n127.0.0.1:6379> get num1\n\"1\"\n127.0.0.1:6379> INCRBY num1 10\n(integer) 11\n127.0.0.1:6379> get num1\n\"11\"\n```\n- bitmap 类型\n是一种二进制类型的字符串。二进制字符特点就是速度快。设置方法是通过 `redis-cli` 运行指令 `SERBIT key offset value` 这样的方式，\n其中 offset 字符的起始位置。value 是 `0 或 1`。\n```\n127.0.0.1:6379> SETBIT k1 1 1\n(integer) 0\n127.0.0.1:6379> STRLEN k1\n(integer) 1\n127.0.0.1:6379> get k1\n\"@\"\n127.0.0.1:6379> SETBIT k1 7 1\n(integer) 0\n127.0.0.1:6379> get k1\n\"A\"\n```\n`BITCOUNT` 统计 key 中字符规定范围的字节内部有多少个1 `BITCONUT key 字节起始位置 字节结束位置`。\n`SETBIT` 操作的时候当offset的值超过一字节(8位，7)的时候。会自动拼接上下一个字节。 \n```bash\n127.0.0.1:6379> BITCOUNT k1 0 0\n(integer) 2\n127.0.0.1:6379> setbit k1  8 1\n(integer) 0\n127.0.0.1:6379> BITCOUNT k1 0 0\n(integer) 2\n127.0.0.1:6379> BITCOUNT k1 0 -1\n(integer) 3\n```\n![redis bitmap 设置过程](https://blogimage.lemonlife.top/20210829152446.png)\n\n> `redis-cli` 指令 `help @string` 可查看 string 类型的所有操作。\n```bash\n127.0.0.1:6379> help @string\n```\n### List \n环形链表。同向取用数据等于栈，异向取用数据等于队列的操作。\n```bash\n127.0.0.1:6379> help @list\n```\n### Hash\nredis 常用的 hash map 操作。多用于聚合数据。\n```bash\n127.0.0.1:6379> help @hash\n```\n### Set \n无序的去重集合。\n```bash\n127.0.0.1:6379> help @set\n```\n### SortedSet 有序集合\n主要应用，分页和排行榜。\n```bash\n127.0.0.1:6379> zadd z1 3.2 apple 1.2 banana 4.3 orange\n(integer) 3\n127.0.0.1:6379> ZRANGE z1 0 -1 withscores\n1) \"banana\"\n2) \"1.2\"\n3) \"apple\"\n4) \"3.2000000000000002\"\n5) \"orange\"\n6) \"4.2999999999999998\"\n127.0.0.1:6379> ZRANGE z1 0 1\n1) \"banana\"\n2) \"apple\"\n127.0.0.1:6379> ZREVRANGE z1 0 1\n1) \"orange\"\n2) \"apple\"\n```\n底层实现。存入的数据量少于 128 或者 当个元素小于 64byte的时候采用 `zipList` 实现。超过了使用 `skipList` 实现。\n![redis 排序底层实现逻辑](https://blogimage.lemonlife.top/20210829164526.png)\n ```bash\n127.0.0.1:6379> help @sorted_set\n```\n### 持久化\n![redis 持久化方式](https://blogimage.lemonlife.top/20210829170412.png)\n\n### 分布式\n\n- 强一致性\n请求到达 redis 集群时。redis 必须写完所有的机器，才能给客户端返回。但是只要有一个机器不可用了就会导致整个集群无法正常工作。\n强一致性一定程度上会影响服务的可用性。\n![强一致性流程](https://blogimage.lemonlife.top/20210829205743.png)\n- 弱一致性\n![弱一致性流程，redis默认采用的方式](https://blogimage.lemonlife.top/20210829210034.png)\n- 最终一致性\n最终一致性是指 redis 将数据的操作成功写入某个黑盒程序后，返回给客户端，其他的机器通过消费黑盒中的数据来达到和主机器一样的数据。实现最终一致性。\n![最终一致性](https://blogimage.lemonlife.top/20210829211654.png)\n## 多线程\n\n![传统Redis和Redis 6 多线程 模型对比](https://blogimage.lemonlife.top/20210829133707.png)\n","slug":"redis-mongodb","published":1,"updated":"2021-08-29T13:17:38.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4ince6v001ucgufas1tag60","content":"<h1 id=\"redis\"><a class=\"markdownIt-Anchor\" href=\"#redis\"></a> redis</h1>\n<h2 id=\"基础类型\"><a class=\"markdownIt-Anchor\" href=\"#基础类型\"></a> 基础类型</h2>\n<h3 id=\"string\"><a class=\"markdownIt-Anchor\" href=\"#string\"></a> string</h3>\n<p>redis 的 字符串类型，可以支持 <code>string</code>，<code>number</code>，<code>bitmap</code> 等操作。</p>\n<ul>\n<li>string 类型</li>\n</ul>\n<p>string 类型支持的操作有  <code>STRLEN</code> 获取字符串长度。<code>APPEND</code> 字符串拼接等。  当然所有的数据类型都支持基础操作 <code>set</code> <code>get</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set string1 &quot;hello word&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get string1</span><br><span class=\"line\">&quot;hello word&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN string1</span><br><span class=\"line\">(integer) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; APPEND string1 abc</span><br><span class=\"line\">(integer) 13</span><br><span class=\"line\">127.0.0.1:6379&gt; get string1</span><br><span class=\"line\">&quot;hello wordabc&quot;</span><br></pre></td></tr></table></figure>\n<p>redis string 中的长度都是指字节长度。如果字符串中含有中文字符，可能会出现一个字符含有多个字节的情况。<br />\n单个汉字<code>utf8</code>编码一般占3个字节、</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> str1 中国</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN str1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; get str1</span><br><span class=\"line\"><span class=\"string\">&quot;\\xe4\\xb8\\xad\\xe5\\x9b\\xbd&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>number 类型<br />\nnumber 类型额外还支持对存入数值的加减操作。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> num1 1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get num1</span><br><span class=\"line\"><span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; INCR num1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; OBJECT encoding num1</span><br><span class=\"line\"><span class=\"string\">&quot;int&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; DECR num1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get num1</span><br><span class=\"line\"><span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY num1 10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 11</span><br><span class=\"line\">127.0.0.1:6379&gt; get num1</span><br><span class=\"line\"><span class=\"string\">&quot;11&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>bitmap 类型<br />\n是一种二进制类型的字符串。二进制字符特点就是速度快。设置方法是通过 <code>redis-cli</code> 运行指令 <code>SERBIT key offset value</code> 这样的方式，<br />\n其中 offset 字符的起始位置。value 是 <code>0 或 1</code>。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SETBIT k1 1 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN k1</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get k1</span><br><span class=\"line\">&quot;@&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; SETBIT k1 7 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get k1</span><br><span class=\"line\">&quot;A&quot;</span><br></pre></td></tr></table></figure>\n<p><code>BITCOUNT</code> 统计 key 中字符规定范围的字节内部有多少个1 <code>BITCONUT key 字节起始位置 字节结束位置</code>。<br />\n<code>SETBIT</code> 操作的时候当offset的值超过一字节(8位，7)的时候。会自动拼接上下一个字节。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BITCOUNT k1 0 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k1  8 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; BITCOUNT k1 0 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; BITCOUNT k1 0 -1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20210829152446.png\" alt=\"redis bitmap 设置过程\" /></p>\n<blockquote>\n<p><code>redis-cli</code> 指令 <code>help @string</code> 可查看 string 类型的所有操作。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">help</span> @string</span><br></pre></td></tr></table></figure>\n<h3 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\"></a> List</h3>\n<p>环形链表。同向取用数据等于栈，异向取用数据等于队列的操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">help</span> @list</span><br></pre></td></tr></table></figure>\n<h3 id=\"hash\"><a class=\"markdownIt-Anchor\" href=\"#hash\"></a> Hash</h3>\n<p>redis 常用的 hash map 操作。多用于聚合数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">help</span> @<span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\"></a> Set</h3>\n<p>无序的去重集合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">help</span> @<span class=\"built_in\">set</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sortedset-有序集合\"><a class=\"markdownIt-Anchor\" href=\"#sortedset-有序集合\"></a> SortedSet 有序集合</h3>\n<p>主要应用，分页和排行榜。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd z1 3.2 apple 1.2 banana 4.3 orange</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE z1 0 -1 withscores</span><br><span class=\"line\">1) <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;1.2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;apple&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;3.2000000000000002&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;orange&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;4.2999999999999998&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE z1 0 1</span><br><span class=\"line\">1) <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;apple&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGE z1 0 1</span><br><span class=\"line\">1) <span class=\"string\">&quot;orange&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;apple&quot;</span></span><br></pre></td></tr></table></figure>\n<p>底层实现。存入的数据量少于 128 或者 当个元素小于 64byte的时候采用 <code>zipList</code> 实现。超过了使用 <code>skipList</code> 实现。<br />\n<img src=\"https://blogimage.lemonlife.top/20210829164526.png\" alt=\"redis 排序底层实现逻辑\" /></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">help</span> @sorted_set</span><br></pre></td></tr></table></figure>\n<h3 id=\"持久化\"><a class=\"markdownIt-Anchor\" href=\"#持久化\"></a> 持久化</h3>\n<p><img src=\"https://blogimage.lemonlife.top/20210829170412.png\" alt=\"redis 持久化方式\" /></p>\n<h3 id=\"分布式\"><a class=\"markdownIt-Anchor\" href=\"#分布式\"></a> 分布式</h3>\n<ul>\n<li>强一致性<br />\n请求到达 redis 集群时。redis 必须写完所有的机器，才能给客户端返回。但是只要有一个机器不可用了就会导致整个集群无法正常工作。<br />\n强一致性一定程度上会影响服务的可用性。<br />\n<img src=\"https://blogimage.lemonlife.top/20210829205743.png\" alt=\"强一致性流程\" /></li>\n<li>弱一致性<br />\n<img src=\"https://blogimage.lemonlife.top/20210829210034.png\" alt=\"弱一致性流程，redis默认采用的方式\" /></li>\n<li>最终一致性<br />\n最终一致性是指 redis 将数据的操作成功写入某个黑盒程序后，返回给客户端，其他的机器通过消费黑盒中的数据来达到和主机器一样的数据。实现最终一致性。<br />\n<img src=\"https://blogimage.lemonlife.top/20210829211654.png\" alt=\"最终一致性\" /></li>\n</ul>\n<h2 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\"></a> 多线程</h2>\n<p><img src=\"https://blogimage.lemonlife.top/20210829133707.png\" alt=\"传统Redis和Redis 6 多线程 模型对比\" /></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"redis\"><a class=\"markdownIt-Anchor\" href=\"#redis\"></a> redis</h1>\n<h2 id=\"基础类型\"><a class=\"markdownIt-Anchor\" href=\"#基础类型\"></a> 基础类型</h2>\n<h3 id=\"string\"><a class=\"markdownIt-Anchor\" href=\"#string\"></a> string</h3>\n<p>redis 的 字符串类型，可以支持 <code>string</code>，<code>number</code>，<code>bitmap</code> 等操作。</p>\n<ul>\n<li>string 类型</li>\n</ul>\n<p>string 类型支持的操作有  <code>STRLEN</code> 获取字符串长度。<code>APPEND</code> 字符串拼接等。  当然所有的数据类型都支持基础操作 <code>set</code> <code>get</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set string1 &quot;hello word&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get string1</span><br><span class=\"line\">&quot;hello word&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN string1</span><br><span class=\"line\">(integer) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; APPEND string1 abc</span><br><span class=\"line\">(integer) 13</span><br><span class=\"line\">127.0.0.1:6379&gt; get string1</span><br><span class=\"line\">&quot;hello wordabc&quot;</span><br></pre></td></tr></table></figure>\n<p>redis string 中的长度都是指字节长度。如果字符串中含有中文字符，可能会出现一个字符含有多个字节的情况。<br />\n单个汉字<code>utf8</code>编码一般占3个字节、</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> str1 中国</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN str1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; get str1</span><br><span class=\"line\"><span class=\"string\">&quot;\\xe4\\xb8\\xad\\xe5\\x9b\\xbd&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>number 类型<br />\nnumber 类型额外还支持对存入数值的加减操作。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> num1 1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get num1</span><br><span class=\"line\"><span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; INCR num1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; OBJECT encoding num1</span><br><span class=\"line\"><span class=\"string\">&quot;int&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; DECR num1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get num1</span><br><span class=\"line\"><span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; INCRBY num1 10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 11</span><br><span class=\"line\">127.0.0.1:6379&gt; get num1</span><br><span class=\"line\"><span class=\"string\">&quot;11&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>bitmap 类型<br />\n是一种二进制类型的字符串。二进制字符特点就是速度快。设置方法是通过 <code>redis-cli</code> 运行指令 <code>SERBIT key offset value</code> 这样的方式，<br />\n其中 offset 字符的起始位置。value 是 <code>0 或 1</code>。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; SETBIT k1 1 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; STRLEN k1</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get k1</span><br><span class=\"line\">&quot;@&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; SETBIT k1 7 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get k1</span><br><span class=\"line\">&quot;A&quot;</span><br></pre></td></tr></table></figure>\n<p><code>BITCOUNT</code> 统计 key 中字符规定范围的字节内部有多少个1 <code>BITCONUT key 字节起始位置 字节结束位置</code>。<br />\n<code>SETBIT</code> 操作的时候当offset的值超过一字节(8位，7)的时候。会自动拼接上下一个字节。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BITCOUNT k1 0 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit k1  8 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; BITCOUNT k1 0 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; BITCOUNT k1 0 -1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://blogimage.lemonlife.top/20210829152446.png\" alt=\"redis bitmap 设置过程\" /></p>\n<blockquote>\n<p><code>redis-cli</code> 指令 <code>help @string</code> 可查看 string 类型的所有操作。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">help</span> @string</span><br></pre></td></tr></table></figure>\n<h3 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\"></a> List</h3>\n<p>环形链表。同向取用数据等于栈，异向取用数据等于队列的操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">help</span> @list</span><br></pre></td></tr></table></figure>\n<h3 id=\"hash\"><a class=\"markdownIt-Anchor\" href=\"#hash\"></a> Hash</h3>\n<p>redis 常用的 hash map 操作。多用于聚合数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">help</span> @<span class=\"built_in\">hash</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\"></a> Set</h3>\n<p>无序的去重集合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">help</span> @<span class=\"built_in\">set</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"sortedset-有序集合\"><a class=\"markdownIt-Anchor\" href=\"#sortedset-有序集合\"></a> SortedSet 有序集合</h3>\n<p>主要应用，分页和排行榜。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd z1 3.2 apple 1.2 banana 4.3 orange</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE z1 0 -1 withscores</span><br><span class=\"line\">1) <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;1.2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;apple&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;3.2000000000000002&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;orange&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;4.2999999999999998&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE z1 0 1</span><br><span class=\"line\">1) <span class=\"string\">&quot;banana&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;apple&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGE z1 0 1</span><br><span class=\"line\">1) <span class=\"string\">&quot;orange&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;apple&quot;</span></span><br></pre></td></tr></table></figure>\n<p>底层实现。存入的数据量少于 128 或者 当个元素小于 64byte的时候采用 <code>zipList</code> 实现。超过了使用 <code>skipList</code> 实现。<br />\n<img src=\"https://blogimage.lemonlife.top/20210829164526.png\" alt=\"redis 排序底层实现逻辑\" /></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">help</span> @sorted_set</span><br></pre></td></tr></table></figure>\n<h3 id=\"持久化\"><a class=\"markdownIt-Anchor\" href=\"#持久化\"></a> 持久化</h3>\n<p><img src=\"https://blogimage.lemonlife.top/20210829170412.png\" alt=\"redis 持久化方式\" /></p>\n<h3 id=\"分布式\"><a class=\"markdownIt-Anchor\" href=\"#分布式\"></a> 分布式</h3>\n<ul>\n<li>强一致性<br />\n请求到达 redis 集群时。redis 必须写完所有的机器，才能给客户端返回。但是只要有一个机器不可用了就会导致整个集群无法正常工作。<br />\n强一致性一定程度上会影响服务的可用性。<br />\n<img src=\"https://blogimage.lemonlife.top/20210829205743.png\" alt=\"强一致性流程\" /></li>\n<li>弱一致性<br />\n<img src=\"https://blogimage.lemonlife.top/20210829210034.png\" alt=\"弱一致性流程，redis默认采用的方式\" /></li>\n<li>最终一致性<br />\n最终一致性是指 redis 将数据的操作成功写入某个黑盒程序后，返回给客户端，其他的机器通过消费黑盒中的数据来达到和主机器一样的数据。实现最终一致性。<br />\n<img src=\"https://blogimage.lemonlife.top/20210829211654.png\" alt=\"最终一致性\" /></li>\n</ul>\n<h2 id=\"多线程\"><a class=\"markdownIt-Anchor\" href=\"#多线程\"></a> 多线程</h2>\n<p><img src=\"https://blogimage.lemonlife.top/20210829133707.png\" alt=\"传统Redis和Redis 6 多线程 模型对比\" /></p>\n"},{"title":"顺时针打印矩阵","date":"2020-02-21T05:56:59.000Z","_content":"\n### 题目描述\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。\n```\n输入：matrix = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n]\n输出：[1,2,3,6,9,8,7,4,5]\n```\n### 解决思路\n题目要求顺时针打印，可以采用定义右(right)，下(down)，左(left)，上(up) 四个方向，和分别对应的四个边界，每次触碰到边界的时候，就需要转方向了。<br/>\n需要注意的是，当我们触碰到右边界时,需要改变的是上边界，此时上边界应该加一，右边界不变，因为 触碰到右边界说明上边界已经走完了。同理<br/>\n触碰到下边界时候，右边界减一，触碰到左边界时候下边界减一，触碰到上边界时候左边界加一，依次类推。\n\n### 代码\n```JS\n/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar spiralOrder = function (matrix) {\n  if (matrix.length == 1) return matrix[0];\n  if(matrix.length == 0) return matrix;\n  let dir = [[0, 1], [1, 0], [0, -1], [-1, 0]] //  右 下 左 上 四个方向\n  let up = 0 //定义上墙壁\n  let right = matrix[0].length - 1 // 定义右墙壁\n  let down = matrix.length - 1 // 定义下墙壁\n  let left = 0 // 定义左墙壁\n  let times = 0 // 转方向的次数\n  let res = []\n  let resLength = matrix[0].length * matrix.length //定义最终数据长度\n  let i = 0 //行\n  let j = 0 //列 \n  while (res.length != resLength) {\n    // 开始行走\n    // 右\n    if(j > right){\n      j--\n      up++\n      times++\n      i=i+dir[times % dir.length][0]\n      j=j+dir[times % dir.length][1]\n    }\n    // 下\n    if(i>down){\n      i--\n      right--\n      times++\n      i=i+dir[times % dir.length][0]\n      j=j+dir[times % dir.length][1]\n    }\n    //左\n    if(j<left){\n      j++\n      down--\n      times++\n      i=i+dir[times % dir.length][0]\n      j=j+dir[times % dir.length][1]\n    }\n    //上\n    if(i<up){\n      i++\n      left++\n      times++\n      i=i+dir[times % dir.length][0]\n      j=j+dir[times % dir.length][1]\n    }\n    res.push(matrix[i][j])\n    i=i+dir[times % dir.length][0]\n    j=j+dir[times % dir.length][1]\n  }\n  return res\n};\n```","source":"_posts/spiral-order-matrix.md","raw":"---\ntitle: 顺时针打印矩阵\ndate: 2020-02-21 13:56:59\ntags:\n  - 算法与数据结构\n  - 剑指Offer\n---\n\n### 题目描述\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。\n```\n输入：matrix = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n]\n输出：[1,2,3,6,9,8,7,4,5]\n```\n### 解决思路\n题目要求顺时针打印，可以采用定义右(right)，下(down)，左(left)，上(up) 四个方向，和分别对应的四个边界，每次触碰到边界的时候，就需要转方向了。<br/>\n需要注意的是，当我们触碰到右边界时,需要改变的是上边界，此时上边界应该加一，右边界不变，因为 触碰到右边界说明上边界已经走完了。同理<br/>\n触碰到下边界时候，右边界减一，触碰到左边界时候下边界减一，触碰到上边界时候左边界加一，依次类推。\n\n### 代码\n```JS\n/**\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar spiralOrder = function (matrix) {\n  if (matrix.length == 1) return matrix[0];\n  if(matrix.length == 0) return matrix;\n  let dir = [[0, 1], [1, 0], [0, -1], [-1, 0]] //  右 下 左 上 四个方向\n  let up = 0 //定义上墙壁\n  let right = matrix[0].length - 1 // 定义右墙壁\n  let down = matrix.length - 1 // 定义下墙壁\n  let left = 0 // 定义左墙壁\n  let times = 0 // 转方向的次数\n  let res = []\n  let resLength = matrix[0].length * matrix.length //定义最终数据长度\n  let i = 0 //行\n  let j = 0 //列 \n  while (res.length != resLength) {\n    // 开始行走\n    // 右\n    if(j > right){\n      j--\n      up++\n      times++\n      i=i+dir[times % dir.length][0]\n      j=j+dir[times % dir.length][1]\n    }\n    // 下\n    if(i>down){\n      i--\n      right--\n      times++\n      i=i+dir[times % dir.length][0]\n      j=j+dir[times % dir.length][1]\n    }\n    //左\n    if(j<left){\n      j++\n      down--\n      times++\n      i=i+dir[times % dir.length][0]\n      j=j+dir[times % dir.length][1]\n    }\n    //上\n    if(i<up){\n      i++\n      left++\n      times++\n      i=i+dir[times % dir.length][0]\n      j=j+dir[times % dir.length][1]\n    }\n    res.push(matrix[i][j])\n    i=i+dir[times % dir.length][0]\n    j=j+dir[times % dir.length][1]\n  }\n  return res\n};\n```","slug":"spiral-order-matrix","published":1,"updated":"2021-08-07T01:59:03.348Z","_id":"cl4ince6w001wcgufgei31svm","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：matrix = [</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [4,5,6],</span><br><span class=\"line\">  [7,8,9]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出：[1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<p>题目要求顺时针打印，可以采用定义右(right)，下(down)，左(left)，上(up) 四个方向，和分别对应的四个边界，每次触碰到边界的时候，就需要转方向了。<br/><br />\n需要注意的是，当我们触碰到右边界时,需要改变的是上边界，此时上边界应该加一，右边界不变，因为 触碰到右边界说明上边界已经走完了。同理<br/><br />\n触碰到下边界时候，右边界减一，触碰到左边界时候下边界减一，触碰到上边界时候左边界加一，依次类推。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">matrix</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> spiralOrder = <span class=\"keyword\">function</span> (<span class=\"params\">matrix</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (matrix.<span class=\"property\">length</span> == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> matrix[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(matrix.<span class=\"property\">length</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> matrix;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dir = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, -<span class=\"number\">1</span>], [-<span class=\"number\">1</span>, <span class=\"number\">0</span>]] <span class=\"comment\">//  右 下 左 上 四个方向</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> up = <span class=\"number\">0</span> <span class=\"comment\">//定义上墙壁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span> <span class=\"comment\">// 定义右墙壁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> down = matrix.<span class=\"property\">length</span> - <span class=\"number\">1</span> <span class=\"comment\">// 定义下墙壁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span> <span class=\"comment\">// 定义左墙壁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> times = <span class=\"number\">0</span> <span class=\"comment\">// 转方向的次数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resLength = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> * matrix.<span class=\"property\">length</span> <span class=\"comment\">//定义最终数据长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span> <span class=\"comment\">//行</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = <span class=\"number\">0</span> <span class=\"comment\">//列 </span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (res.<span class=\"property\">length</span> != resLength) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开始行走</span></span><br><span class=\"line\">    <span class=\"comment\">// 右</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j &gt; right)&#123;</span><br><span class=\"line\">      j--</span><br><span class=\"line\">      up++</span><br><span class=\"line\">      times++</span><br><span class=\"line\">      i=i+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">      j=j+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 下</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;down)&#123;</span><br><span class=\"line\">      i--</span><br><span class=\"line\">      right--</span><br><span class=\"line\">      times++</span><br><span class=\"line\">      i=i+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">      j=j+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//左</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&lt;left)&#123;</span><br><span class=\"line\">      j++</span><br><span class=\"line\">      down--</span><br><span class=\"line\">      times++</span><br><span class=\"line\">      i=i+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">      j=j+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;up)&#123;</span><br><span class=\"line\">      i++</span><br><span class=\"line\">      left++</span><br><span class=\"line\">      times++</span><br><span class=\"line\">      i=i+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">      j=j+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(matrix[i][j])</span><br><span class=\"line\">    i=i+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">    j=j+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：matrix = [</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [4,5,6],</span><br><span class=\"line\">  [7,8,9]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出：[1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决思路\"><a class=\"markdownIt-Anchor\" href=\"#解决思路\"></a> 解决思路</h3>\n<p>题目要求顺时针打印，可以采用定义右(right)，下(down)，左(left)，上(up) 四个方向，和分别对应的四个边界，每次触碰到边界的时候，就需要转方向了。<br/><br />\n需要注意的是，当我们触碰到右边界时,需要改变的是上边界，此时上边界应该加一，右边界不变，因为 触碰到右边界说明上边界已经走完了。同理<br/><br />\n触碰到下边界时候，右边界减一，触碰到左边界时候下边界减一，触碰到上边界时候左边界加一，依次类推。</p>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">matrix</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> spiralOrder = <span class=\"keyword\">function</span> (<span class=\"params\">matrix</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (matrix.<span class=\"property\">length</span> == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> matrix[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(matrix.<span class=\"property\">length</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> matrix;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dir = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, -<span class=\"number\">1</span>], [-<span class=\"number\">1</span>, <span class=\"number\">0</span>]] <span class=\"comment\">//  右 下 左 上 四个方向</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> up = <span class=\"number\">0</span> <span class=\"comment\">//定义上墙壁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span> <span class=\"comment\">// 定义右墙壁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> down = matrix.<span class=\"property\">length</span> - <span class=\"number\">1</span> <span class=\"comment\">// 定义下墙壁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span> <span class=\"comment\">// 定义左墙壁</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> times = <span class=\"number\">0</span> <span class=\"comment\">// 转方向的次数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resLength = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> * matrix.<span class=\"property\">length</span> <span class=\"comment\">//定义最终数据长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span> <span class=\"comment\">//行</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = <span class=\"number\">0</span> <span class=\"comment\">//列 </span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (res.<span class=\"property\">length</span> != resLength) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开始行走</span></span><br><span class=\"line\">    <span class=\"comment\">// 右</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j &gt; right)&#123;</span><br><span class=\"line\">      j--</span><br><span class=\"line\">      up++</span><br><span class=\"line\">      times++</span><br><span class=\"line\">      i=i+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">      j=j+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 下</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;down)&#123;</span><br><span class=\"line\">      i--</span><br><span class=\"line\">      right--</span><br><span class=\"line\">      times++</span><br><span class=\"line\">      i=i+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">      j=j+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//左</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(j&lt;left)&#123;</span><br><span class=\"line\">      j++</span><br><span class=\"line\">      down--</span><br><span class=\"line\">      times++</span><br><span class=\"line\">      i=i+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">      j=j+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&lt;up)&#123;</span><br><span class=\"line\">      i++</span><br><span class=\"line\">      left++</span><br><span class=\"line\">      times++</span><br><span class=\"line\">      i=i+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">      j=j+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(matrix[i][j])</span><br><span class=\"line\">    i=i+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">    j=j+dir[times % dir.<span class=\"property\">length</span>][<span class=\"number\">1</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"反转链表","date":"2020-02-10T13:08:24.000Z","_content":"## 反转链表\n> 反转一个单链表。\n```\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n```\n### 解题思路\n> 斩断过去,不忘前事,定义一个变量储存链表，定义另一个临时变量插入链表\n### 解决方法\n```JavaScript\nvar reverseList = function(head) {\n    let pre = null \n    while(head!=null){\n      let tmp = head.next\n      // 斩断过去\n      head.next = pre\n      pre = head\n      // 不忘前事\n      head = tmp\n    }\n    return pre\n};\n```\n\n## 反转指定位置的链表\n```JS\nvar reverseBetween = function(head, m, n) {\n  const originList = new ListNode(0)\n  originList.next = head\n\n  let listNode = originList\n\n  for (let i = 0; i < m - 1; i++) {\n    listNode = listNode.next\n  }\n\n  let prev = null\n  let cur = listNode.next\n\n  for (let i = 0; i < n - m + 1; i++) {\n    let next = cur.next\n    cur.next = prev\n    prev = cur\n    cur = next\n  }\n\n  // 将 m 的 next 指向 n 指针的 next, 同时将排在 m 前面一位的指针的 next 指向 n\n  listNode.next.next = cur\n  listNode.next = prev\n  return originList.next\n}\n```","source":"_posts/reverse-linked-list.md","raw":"---\ntitle: 反转链表\ndate: 2020-02-10 21:08:24\ntags: \n  - 算法与数据结构\n  - LeetCode\n---\n## 反转链表\n> 反转一个单链表。\n```\n输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n```\n### 解题思路\n> 斩断过去,不忘前事,定义一个变量储存链表，定义另一个临时变量插入链表\n### 解决方法\n```JavaScript\nvar reverseList = function(head) {\n    let pre = null \n    while(head!=null){\n      let tmp = head.next\n      // 斩断过去\n      head.next = pre\n      pre = head\n      // 不忘前事\n      head = tmp\n    }\n    return pre\n};\n```\n\n## 反转指定位置的链表\n```JS\nvar reverseBetween = function(head, m, n) {\n  const originList = new ListNode(0)\n  originList.next = head\n\n  let listNode = originList\n\n  for (let i = 0; i < m - 1; i++) {\n    listNode = listNode.next\n  }\n\n  let prev = null\n  let cur = listNode.next\n\n  for (let i = 0; i < n - m + 1; i++) {\n    let next = cur.next\n    cur.next = prev\n    prev = cur\n    cur = next\n  }\n\n  // 将 m 的 next 指向 n 指针的 next, 同时将排在 m 前面一位的指针的 next 指向 n\n  listNode.next.next = cur\n  listNode.next = prev\n  return originList.next\n}\n```","slug":"reverse-linked-list","published":1,"updated":"2021-08-07T01:59:03.348Z","_id":"cl4ince6w001ycguf2ig54p8r","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"反转链表\"><a class=\"markdownIt-Anchor\" href=\"#反转链表\"></a> 反转链表</h2>\n<blockquote>\n<p>反转一个单链表。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class=\"line\">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * function ListNode(val) &#123;</span><br><span class=\"line\"> *     this.val = val;</span><br><span class=\"line\"> *     this.next = null;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<blockquote>\n<p>斩断过去,不忘前事,定义一个变量储存链表，定义另一个临时变量插入链表</p>\n</blockquote>\n<h3 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\"></a> 解决方法</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"keyword\">function</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tmp = head.<span class=\"property\">next</span></span><br><span class=\"line\">      <span class=\"comment\">// 斩断过去</span></span><br><span class=\"line\">      head.<span class=\"property\">next</span> = pre</span><br><span class=\"line\">      pre = head</span><br><span class=\"line\">      <span class=\"comment\">// 不忘前事</span></span><br><span class=\"line\">      head = tmp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反转指定位置的链表\"><a class=\"markdownIt-Anchor\" href=\"#反转指定位置的链表\"></a> 反转指定位置的链表</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseBetween = <span class=\"keyword\">function</span>(<span class=\"params\">head, m, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> originList = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  originList.<span class=\"property\">next</span> = head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> listNode = originList</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    listNode = listNode.<span class=\"property\">next</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cur = listNode.<span class=\"property\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n - m + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = cur.<span class=\"property\">next</span></span><br><span class=\"line\">    cur.<span class=\"property\">next</span> = prev</span><br><span class=\"line\">    prev = cur</span><br><span class=\"line\">    cur = next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将 m 的 next 指向 n 指针的 next, 同时将排在 m 前面一位的指针的 next 指向 n</span></span><br><span class=\"line\">  listNode.<span class=\"property\">next</span>.<span class=\"property\">next</span> = cur</span><br><span class=\"line\">  listNode.<span class=\"property\">next</span> = prev</span><br><span class=\"line\">  <span class=\"keyword\">return</span> originList.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"反转链表\"><a class=\"markdownIt-Anchor\" href=\"#反转链表\"></a> 反转链表</h2>\n<blockquote>\n<p>反转一个单链表。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class=\"line\">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * function ListNode(val) &#123;</span><br><span class=\"line\"> *     this.val = val;</span><br><span class=\"line\"> *     this.next = null;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<h3 id=\"解题思路\"><a class=\"markdownIt-Anchor\" href=\"#解题思路\"></a> 解题思路</h3>\n<blockquote>\n<p>斩断过去,不忘前事,定义一个变量储存链表，定义另一个临时变量插入链表</p>\n</blockquote>\n<h3 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\"></a> 解决方法</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseList = <span class=\"keyword\">function</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pre = <span class=\"literal\">null</span> </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> tmp = head.<span class=\"property\">next</span></span><br><span class=\"line\">      <span class=\"comment\">// 斩断过去</span></span><br><span class=\"line\">      head.<span class=\"property\">next</span> = pre</span><br><span class=\"line\">      pre = head</span><br><span class=\"line\">      <span class=\"comment\">// 不忘前事</span></span><br><span class=\"line\">      head = tmp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反转指定位置的链表\"><a class=\"markdownIt-Anchor\" href=\"#反转指定位置的链表\"></a> 反转指定位置的链表</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reverseBetween = <span class=\"keyword\">function</span>(<span class=\"params\">head, m, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> originList = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  originList.<span class=\"property\">next</span> = head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> listNode = originList</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    listNode = listNode.<span class=\"property\">next</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cur = listNode.<span class=\"property\">next</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n - m + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = cur.<span class=\"property\">next</span></span><br><span class=\"line\">    cur.<span class=\"property\">next</span> = prev</span><br><span class=\"line\">    prev = cur</span><br><span class=\"line\">    cur = next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将 m 的 next 指向 n 指针的 next, 同时将排在 m 前面一位的指针的 next 指向 n</span></span><br><span class=\"line\">  listNode.<span class=\"property\">next</span>.<span class=\"property\">next</span> = cur</span><br><span class=\"line\">  listNode.<span class=\"property\">next</span> = prev</span><br><span class=\"line\">  <span class=\"keyword\">return</span> originList.<span class=\"property\">next</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"排序算法[转载]","date":"2019-07-27T06:02:47.000Z","_content":"### 1、基本介绍\n\n​\t\t排序算法比较基础，但是设计到很多计算机科学的想法，如下：\n\n​\t\t\t1、比较和非比较的策略\n\n​\t\t\t2、迭代和递归的实现\n\n​\t\t\t3、分而治之思想\n\n​\t\t\t4、最佳、最差、平均情况时间复杂度分析\n\n​\t\t\t5、随机算法\n\n### 2、排序算法的分类\n\n#### \t\t算法分类\n\n![](http://blogimage.lemonlife.top/201909181100_29.jpg?/)\n\n#### \t\t算法总结\n\n![](http://blogimage.lemonlife.top/201909181101_243.jpg?/)\n\n### 3、冒泡排序\n\n#### \t\t（1）冒泡排序的介绍\n\n​\t\t冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n#### \t\t（2）冒泡排序的原理：\n\n​\t\t1、如果元素大小关系不正确，交换这两个数（在本例中为a> b），\n\n​\t\t2、比较一对相邻元素（a，b），\n\n​\t\t3、重复步骤1和2，直到我们到达数组的末尾（最后一对是第（N-2）和（N-1）项，因为我们的数组从零开始）\n\n​\t\t4、到目前为止，最大的元素将在最后的位置。 然后我们将N减少1，并重复步骤1，直到N = 1。\n\n#### \t\t（3）动图演示\n\n![](http://blogimage.lemonlife.top/201909181101_1.jpg?/)\n\n#### \t\t（4）代码演示\n\n```java\npublic static void bubbleSort(int array[]) {\n        int t = 0;\n        for (int i = 0; i < array.length - 1; i++){\n            for (int j = 0; j < array.length - 1 - i; j++){\n                if (array[j] > array[j + 1]) {\n                    t = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = t;\n                }\n            }\n        }\n    }\n```\n**JavaScript实现**\n```TS\n  method(arr: number[]): number[] {\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[i] > arr[j]) {\n          [arr[i], arr[j]] = [arr[j], arr[i]]\n        }\n      }\n    }\n    return arr\n  }\n```\n### 4、选择排序\n\n#### （1）选择排序的介绍\n\n​\t\t选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。\n\n#### （2）选择排序的原理\n\n​\t\t1、在 **[L ... N-1]** 范围内找出最小项目 **X** 的位置，\n\n​\t\t2、用第 **L** 项交换X，\n\n​\t\t3、将下限 **L** 增加1并重复步骤1直到 **L = N-2**。\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181102_996.jpg?/)\n\n#### （4）代码演示\n\n```java\npublic static void selectionSort(int[] array) {\n        for (int i = 0; i < array.length; i++) {\n            int index = i;\n            for (int j = i; j < array.length; j++) {\n                if (array[j] < array[index]) \n                    index = j; \n            }\n            int temp = array[index];\n            array[index] = array[i];\n            array[i] = temp;\n        }\n    }\n```\n**JavaScript实现**\n```TS\n  method(arr: number[]): number[] {\n    for (let i = 0; i < arr.length; i++) {\n      let min = arr[i], minIndex = i;\n      for (let j = i + 1; j < arr.length; j++) {\n        if (min > arr[j]) {\n          // 每轮循环都获取到最小值\n          min = arr[j]\n          minIndex = j\n        }\n      }\n      // 确定最小值之后 再进行交换\n      arr[minIndex] = arr[i]\n      arr[i] = min\n    }\n    return arr\n  }\n```\n### 5、插入排序\n\n#### （1）插入排序的介绍\n\n​\t\t插入排序（Insertion sort）是一种简单直观且稳定的排序算法。如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。\n\n#### （2）插入排序的原理\n\n​\t\t1、从第一个元素开始，该元素可以认为已经被排序；\n\n​\t\t2、取出下一个元素，在已经排序的元素序列中从后向前扫描；\n\n​\t\t3、如果该元素（已排序）大于新元素，将该元素移到下一位置；\n\n​\t\t4、重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\n\n​\t\t5、将新元素插入到该位置后；\n\n​\t\t6、重复步骤2~5。\n\n#### （3）动态图演示\n\n![插入排序](http://blogimage.lemonlife.top/201909181102_303.jpg?/)\n\n#### （4）代码演示\n\n```java\npublic static void insertionSort(int[] array) {\n        int current;\n        for (int i = 0; i < array.length - 1; i++) {\n            current = array[i + 1];\n            int preIndex = i;\n            while (preIndex >= 0 && current < array[preIndex]) {\n                array[preIndex + 1] = array[preIndex];\n                preIndex--;\n            }\n            array[preIndex + 1] = current;\n        }\n    }\n```\nJavaScript代码实现\n```TS\n  method(arr: number[]): number[] {\n    let resArr = [arr[0]]\n    for (let i = 1; i < arr.length; i++) {\n      let insertIndex = 0\n      while (insertIndex < resArr.length) {\n        if (resArr[insertIndex] < arr[i]) {\n          insertIndex++\n        } else {\n          break\n        }\n      }\n      resArr.splice(insertIndex, 0, arr[i])\n    }\n    return resArr\n  }\n```\n\n### 6、归并排序\n\n#### （1）归并排序的介绍\n\n​\t\t归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。\n\n#### （2）归并排序的原理\n\n​\t\t1、将每对单个元素（默认情况下，已排序）归并为2个元素的有序数组，\n\n​\t\t2、将2个元素的每对有序数组归并成4个元素的有序数组，重复这个过程......，\n\n​\t\t3、最后一步：归并2个N / 2元素的排序数组（为了简化讨论，我们假设N是偶数）以获得完全排序的N个元素数组。\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181103_140.jpg?/)\n\n#### （4）代码演示\n\n```java\n\tpublic static int[] MergeSort(int[] array) {\n        if (array.length < 2) return array;\n        int mid = array.length / 2;\n        int[] left = Arrays.copyOfRange(array, 0, mid);\n        int[] right = Arrays.copyOfRange(array, mid, array.length);\n        return merge(MergeSort(left), MergeSort(right));\n    }\n\n    public static int[] merge(int[] left, int[] right) {\n        int[] result = new int[left.length + right.length];\n        for (int index = 0, i = 0, j = 0; index < result.length; index++) {\n            if (i >= left.length)\n                result[index] = right[j++];\n            else if (j >= right.length)\n                result[index] = left[i++];\n            else if (left[i] > right[j])\n                result[index] = right[j++];\n            else\n                result[index] = left[i++];\n        }\n        return result;\n    }\n```\n\n### 7、快速排序\n\n#### \t（1）快速排序的介绍\n\n​\t\t快速排序（Quicksort）是对冒泡排序的一种改进。\n\n​\t\t它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。\n\n#### \t（2）快速排序的原理\n\n​\t\t1、从数列中挑出一个元素，称为 “基准”（pivot）；\n​\t\t2、重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\n​\t\t3、递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n#### \t（3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181103_889.jpg?/)\n\n#### \t（4）代码演示\n**Java**  实现\n```java\n/**\n     * 快速排序方法\n     * @param array\n     * @param start\n     * @param end\n     * @return\n     */\n    public static int[] QuickSort(int[] array, int start, int end) {\n        if (array.length < 1 || start < 0 || end >= array.length || start > end) return null;\n        int smallIndex = partition(array, start, end);\n        if (smallIndex > start)\n            QuickSort(array, start, smallIndex - 1);\n        if (smallIndex < end)\n            QuickSort(array, smallIndex + 1, end);\n        return array;\n    }\n    /**\n     * 快速排序算法——partition\n     * @param array\n     * @param start\n     * @param end\n     * @return\n     */\n    public static int partition(int[] array, int start, int end) {\n        int pivot = (int) (start + Math.random() * (end - start + 1));\n        int smallIndex = start - 1;\n        swap(array, pivot, end);\n        for (int i = start; i <= end; i++)\n            if (array[i] <= array[end]) {\n                smallIndex++;\n                if (i > smallIndex)\n                    swap(array, i, smallIndex);\n            }\n        return smallIndex;\n    }\n\n    /**\n     * 交换数组内两个元素\n     * @param array\n     * @param i\n     * @param j\n     */\n    public static void swap(int[] array, int i, int j) {\n        int temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n```\n**JavaScript实现**\n```JavaScript\nfunction quickSort(arr: any[], left: number, right: number) {\n    let l = left // 左索引\n    let r = right // 右索引\n    let pivot = arr[Math.floor((l + r) / 2)]\n    while (l < r) {\n    //中线 在左边找 到一个比中间值大的值\n    while (arr[l] < pivot) {\n        l += 1\n    }\n    // 在中线右边找 比中间值小到值\n    while (arr[r] > pivot) {\n        r -= 1\n    }\n    if (l >= r) {\n        // 说明 左边都是比中值小的值 ，右边都是比中值大的值\n        break;\n    }\n    // l<r的时候交换 索引 l,r 对应的值\n    [arr[l], arr[r]] = [arr[r], arr[l]]\n    if (arr[l] == pivot || arr[r] == pivot) {\n        break;\n    }\n    }\n    if (l == r) {\n        l += 1\n        r -= 1\n    }\n    if (left < r) {\n        quickSort(arr, left, r)\n    }\n    if (right > l) {\n        quickSort(arr, l, right)\n    }\n    return arr\n}\n```\n\n### 8、希尔排序\n\n#### （1）希尔排序的介绍\n\n​\t\t希尔排序(Shell's Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因D.L.Shell于1959年提出而得名。\n\n​\t\t希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n#### （2）希尔排序的原理\n\n​\t\t1、选择一个增量序列t1，t2，…，tk，其中ti>tj，tk=1；\n​\t\t2、按增量序列个数k，对序列进行k 趟排序；\n​\t\t3、每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181103_203.jpg?/)\n\n#### （4）代码演示\n\n```java\n\t/**\n     * 希尔排序\n     *\n     * @param array\n     * @return\n     */\n    public static int[] ShellSort(int[] array) {\n        int len = array.length;\n        int temp, gap = len / 2;\n        while (gap > 0) {\n            for (int i = gap; i < len; i++) {\n                temp = array[i];\n                int preIndex = i - gap;\n                while (preIndex >= 0 && array[preIndex] > temp) {\n                    array[preIndex + gap] = array[preIndex];\n                    preIndex -= gap;\n                }\n                array[preIndex + gap] = temp;\n            }\n            gap /= 2;\n        }\n        return array;\n    }\n```\nJavaScript 实现希尔排序的交换模式,因为交换很耗时\n```TS\nmethod(arr: number[]): number[] {\n    let offSet = Math.floor(arr.length / 2)\n    while (offSet > 0) {\n      for (let i = 0; i <= arr.length - offSet; i++) {\n        for (let j = i; j < arr.length - offSet; j += offSet) {\n          if (arr[j] > arr[j + offSet]) {\n            [arr[j], arr[j + offSet]] = [arr[j + offSet], arr[j]]\n          }\n        }\n      }\n      offSet = Math.floor(offSet / 2)\n    }\n    return arr\n  }\n```\nJavaScript 实现希尔排序的移位模式\n```TS\n  method(arr: number[]): number[] {\n    let offSet = Math.floor(arr.length / 2)\n    while (offSet > 0) {\n      // console.log('此轮offset为', offSet)\n      for (let i = 0; i < arr.length - offSet; i++) {\n        let min = arr[i], minIndex: number = i\n        for (let j = i; j < arr.length; j += offSet) {\n          // 修改查找方法 为 类选择排序\n          //开始查找最小的index\n          if (arr[j] < min) {\n            min = arr[j]\n            minIndex = j\n          }\n        }\n        arr[minIndex] = arr[i]\n        arr[i] = min\n      }\n      offSet = Math.floor(offSet / 2)\n    }\n    return arr\n  }\n```\n### 9、计数排序\n\n#### （1）计数排序的介绍\n\n​\t\t计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\n​\t\t计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。\n\n#### （2）计数排序的原理\n\n​\t\t1、找出待排序的数组中最大和最小的元素；\n​\t\t2、统计数组中每个值为i的元素出现的次数，存入数组C的第i项；\n​\t\t3、对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；\n​\t\t4、反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181104_130.jpg?/)\n\n#### （4）代码演示\n\n```java\n\t/**\n     * 计数排序\n     *\n     * @param array\n     * @return\n     */\n    public static int[] CountingSort(int[] array) {\n        if (array.length == 0) return array;\n        int bias, min = array[0], max = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] > max)\n                max = array[i];\n            if (array[i] < min)\n                min = array[i];\n        }\n        bias = 0 - min;\n        int[] bucket = new int[max - min + 1];\n        Arrays.fill(bucket, 0);\n        for (int i = 0; i < array.length; i++) {\n            bucket[array[i] + bias]++;\n        }\n        int index = 0, i = 0;\n        while (index < array.length) {\n            if (bucket[i] != 0) {\n                array[index] = i - bias;\n                bucket[i]--;\n                index++;\n            } else\n                i++;\n        }\n        return array;\n    }\n```\n**JavaScript实现**\n```TS\n  findMinMax(arr: number[]): number[] {\n    let minMax = [arr[0], arr[0]]\n    for (let i = 0; i < arr.length; i++) {\n      if (minMax[0] > arr[i]) minMax[0] = arr[i];\n      if (minMax[1] < arr[i]) minMax[1] = arr[i];\n    }\n    return minMax\n  }\n  method(arr: number[]): number[] {\n    let [min, max] = this.findMinMax(arr)\n    let countArr = new Array(max - min + 1)\n    arr.map(value => {\n      countArr[value - min] ? countArr[value - min] += 1 : countArr[value - min] = 1\n    })\n    arr = []\n    countArr.map((value, index) => {\n      while (value >= 1) {\n        arr.push(min + index)\n        value--\n      }\n    })\n    return arr\n  }\n```\n### 10、桶排序\n\n#### （1）桶排序的介绍\n\n​\t\t桶排序 (Bucket sort)或所谓的箱排序，是一个排序算法，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。\n\n#### （2）桶排序的原理\n\n​\t\t1、设置一个定量的数组当作空桶；\t\n​\t\t2、遍历输入数据，并且把数据一个一个放到对应的桶里去；\n​\t\t3、对每个不是空的桶进行排序；\n​\t\t4、从不是空的桶里把排好序的数据拼接起来。 \n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181104_316.jpg?/)\n\n#### （4）代码演示\n\n```java\n\t/**\n     * 桶排序\n     * \n     * @param array\n     * @param bucketSize\n     * @return\n     */\n    public static ArrayList<Integer> BucketSort(ArrayList<Integer> array, int bucketSize) {\n        if (array == null || array.size() < 2)\n            return array;\n        int max = array.get(0), min = array.get(0);\n        // 找到最大值最小值\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) > max)\n                max = array.get(i);\n            if (array.get(i) < min)\n                min = array.get(i);\n        }\n        int bucketCount = (max - min) / bucketSize + 1;\n        ArrayList<ArrayList<Integer>> bucketArr = new ArrayList<>(bucketCount);\n        ArrayList<Integer> resultArr = new ArrayList<>();\n        for (int i = 0; i < bucketCount; i++) {\n            bucketArr.add(new ArrayList<Integer>());\n        }\n        for (int i = 0; i < array.size(); i++) {\n            bucketArr.get((array.get(i) - min) / bucketSize).add(array.get(i));\n        }\n        for (int i = 0; i < bucketCount; i++) {\n            if (bucketSize == 1) { \n                for (int j = 0; j < bucketArr.get(i).size(); j++)\n                    resultArr.add(bucketArr.get(i).get(j));\n            } else {\n                if (bucketCount == 1)\n                    bucketSize--;\n                ArrayList<Integer> temp = BucketSort(bucketArr.get(i), bucketSize);\n                for (int j = 0; j < temp.size(); j++)\n                    resultArr.add(temp.get(j));\n            }\n        }\n        return resultArr;\n    }\n```\n\n### 11、基数排序\n\n#### （1）基数排序的介绍\n\n​\t\t基数排序也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为O(kn),为数组长度，k为数组中的数的最大的位数；\n​\t\t基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的\n\n#### （2）基数排序的原理\n\n​\t\t1、取得数组中的最大数，并取得位数；\n​\t\t2、arr为原始数组，从最低位开始取每个位组成radix数组；\n​\t\t3、对radix进行计数排序（利用计数排序适用于小范围数的特点）；\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181104_775.jpg?/)\n\n#### （4）代码演示\n\n```java\n\t/**\n     * 基数排序\n     * @param array\n     * @return\n     */\n    public static int[] RadixSort(int[] array) {\n        if (array == null || array.length < 2)\n            return array;\n        // 1.先算出最大数的位数；\n        int max = array[0];\n        for (int i = 1; i < array.length; i++) {\n            max = Math.max(max, array[i]);\n        }\n        int maxDigit = 0;\n        while (max != 0) {\n            max /= 10;\n            maxDigit++;\n        }\n        int mod = 10, div = 1;\n        ArrayList<ArrayList<Integer>> bucketList = new ArrayList<ArrayList<Integer>>();\n        for (int i = 0; i < 10; i++)\n            bucketList.add(new ArrayList<Integer>());\n        for (int i = 0; i < maxDigit; i++, mod *= 10, div *= 10) {\n            for (int j = 0; j < array.length; j++) {\n                int num = (array[j] % mod) / div;\n                bucketList.get(num).add(array[j]);\n            }\n            int index = 0;\n            for (int j = 0; j < bucketList.size(); j++) {\n                for (int k = 0; k < bucketList.get(j).size(); k++)\n                    array[index++] = bucketList.get(j).get(k);\n                bucketList.get(j).clear();\n            }\n        }\n        return array;\n    }\n```\n**JavaScript实现**\n```TS\n  method(arr: number[]): number[] {\n    //定义10个装数的桶\n    let bucket = new Array(10)\n    for (let i = 0; i < 10; i++) {\n      bucket[i] = []\n    }\n    // 取出个位数做 放入桶中\n    arr = arr.filter(value => { bucket[value % 10].push(value) })\n    bucket.map((value) => {\n      while (value.length > 0) {\n        arr.push(value.shift())\n      }\n    })\n    // 取出 10位数 放桶中\n    arr = arr.filter(value => { bucket[Math.floor((value / 10)) % 10].push(value) })\n    bucket.map((value) => {\n      while (value.length > 0) {\n        arr.push(value.shift())\n      }\n    })\n    // 取出百位数 放入桶中\n    arr = arr.filter(value => { bucket[Math.floor((value / 100)) % 10].push(value) })\n    bucket.map((value) => {\n      while (value.length > 0) {\n        arr.push(value.shift())\n      }\n    })\n    return arr\n  }\n```\n### 12、堆排序\n\n#### （1）堆排序的介绍\n\n​\t\t堆排序（英语：Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。\n\n#### （2）堆排序的原理\n\n​\t\t1、将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；\n​\t\t2、将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]<=R[n]；\n​\t\t3、由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181105_568.jpg?/)\n\n#### （4）代码演示\n\n```java\n//声明全局变量，用于记录数组array的长度；\nstatic int len;\n    /**\n     * 堆排序算法\n     *\n     * @param array\n     * @return\n     */\n    public static int[] HeapSort(int[] array) {\n        len = array.length;\n        if (len < 1) return array;\n        //1.构建一个最大堆\n        buildMaxHeap(array);\n        //2.循环将堆首位（最大值）与末位交换，然后在重新调整最大堆\n        while (len > 0) {\n            swap(array, 0, len - 1);\n            len--;\n            adjustHeap(array, 0);\n        }\n        return array;\n    }\n    /**\n     * 建立最大堆\n     *\n     * @param array\n     */\n    public static void buildMaxHeap(int[] array) {\n        //从最后一个非叶子节点开始向上构造最大堆\n        for (int i = (len/2 - 1); i >= 0; i--) { \n            adjustHeap(array, i);\n        }\n    }\n    /**\n     * 调整使之成为最大堆\n     *\n     * @param array\n     * @param i\n     */\n    public static void adjustHeap(int[] array, int i) {\n        int maxIndex = i;\n        //如果有左子树，且左子树大于父节点，则将最大指针指向左子树\n        if (i * 2 < len && array[i * 2] > array[maxIndex])\n            maxIndex = i * 2;\n        //如果有右子树，且右子树大于父节点，则将最大指针指向右子树\n        if (i * 2 + 1 < len && array[i * 2 + 1] > array[maxIndex])\n            maxIndex = i * 2 + 1;\n        //如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。\n        if (maxIndex != i) {\n            swap(array, maxIndex, i);\n            adjustHeap(array, maxIndex);\n        }\n    }\n```\n**JavaScript 实现基本堆排序**\n```JS\nclass TreeNode {\n  constructor(val) {\n    this.val = val\n    this.left = null\n    this.right = null\n  }\n}\nclass HeapSort {\n  constructor() {\n    // 定义一个变量存放二叉搜索树\n    this.tree = null\n  }\n  insert(val) {\n    if (this.tree == null) {\n      this.tree = new TreeNode(val)\n      return\n    }\n    let pTree = this.tree // 存一下指针\n    while (pTree != null) {\n      // 开始执行插入的流程\n      if (pTree.val >= val) {\n        if (pTree.left == null) {\n          pTree.left = new TreeNode(val)\n          return\n        }\n        pTree = pTree.left\n      } else {\n        if (pTree.right == null) {\n          pTree.right = new TreeNode(val)\n          return\n        }\n        pTree = pTree.right\n      }\n    }\n  }\n}\n// 中序遍历\nfunction inOrder(tree) {\n  if (tree == null) {\n    return\n  }\n  inOrder(tree.left)\n  console.log(tree.val)\n  inOrder(tree.right)\n}\n\nlet heapSort = new HeapSort()\nlet testArray = [7, 1, 9, 3, 8, 5, 6, 4]\ntestArray.map(value => heapSort.insert(value))\ninOrder(heapSort.tree) // 1 3 4 5 6 7 8 9\n```\n### 最后总结\n不同的排序算法有不同的应用场景,一般情况下如果数据都是正数，可以考虑采用基数排序，计数排序，桶排序之类的排序算法。其中计数排序算是最耗费空间的了，也是拿空间换时间最明显的那个😁\n\n>博客中中JavaScript部分是我自己写的,Java和文字引用于马老师,*马士兵教育公开课*。","source":"_posts/rank-method.md","raw":"---\ntitle: 排序算法[转载]\ndate: 2019-07-27 14:02:47\ntags:  算法与数据结构\n---\n### 1、基本介绍\n\n​\t\t排序算法比较基础，但是设计到很多计算机科学的想法，如下：\n\n​\t\t\t1、比较和非比较的策略\n\n​\t\t\t2、迭代和递归的实现\n\n​\t\t\t3、分而治之思想\n\n​\t\t\t4、最佳、最差、平均情况时间复杂度分析\n\n​\t\t\t5、随机算法\n\n### 2、排序算法的分类\n\n#### \t\t算法分类\n\n![](http://blogimage.lemonlife.top/201909181100_29.jpg?/)\n\n#### \t\t算法总结\n\n![](http://blogimage.lemonlife.top/201909181101_243.jpg?/)\n\n### 3、冒泡排序\n\n#### \t\t（1）冒泡排序的介绍\n\n​\t\t冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n#### \t\t（2）冒泡排序的原理：\n\n​\t\t1、如果元素大小关系不正确，交换这两个数（在本例中为a> b），\n\n​\t\t2、比较一对相邻元素（a，b），\n\n​\t\t3、重复步骤1和2，直到我们到达数组的末尾（最后一对是第（N-2）和（N-1）项，因为我们的数组从零开始）\n\n​\t\t4、到目前为止，最大的元素将在最后的位置。 然后我们将N减少1，并重复步骤1，直到N = 1。\n\n#### \t\t（3）动图演示\n\n![](http://blogimage.lemonlife.top/201909181101_1.jpg?/)\n\n#### \t\t（4）代码演示\n\n```java\npublic static void bubbleSort(int array[]) {\n        int t = 0;\n        for (int i = 0; i < array.length - 1; i++){\n            for (int j = 0; j < array.length - 1 - i; j++){\n                if (array[j] > array[j + 1]) {\n                    t = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = t;\n                }\n            }\n        }\n    }\n```\n**JavaScript实现**\n```TS\n  method(arr: number[]): number[] {\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = i + 1; j < arr.length; j++) {\n        if (arr[i] > arr[j]) {\n          [arr[i], arr[j]] = [arr[j], arr[i]]\n        }\n      }\n    }\n    return arr\n  }\n```\n### 4、选择排序\n\n#### （1）选择排序的介绍\n\n​\t\t选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。\n\n#### （2）选择排序的原理\n\n​\t\t1、在 **[L ... N-1]** 范围内找出最小项目 **X** 的位置，\n\n​\t\t2、用第 **L** 项交换X，\n\n​\t\t3、将下限 **L** 增加1并重复步骤1直到 **L = N-2**。\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181102_996.jpg?/)\n\n#### （4）代码演示\n\n```java\npublic static void selectionSort(int[] array) {\n        for (int i = 0; i < array.length; i++) {\n            int index = i;\n            for (int j = i; j < array.length; j++) {\n                if (array[j] < array[index]) \n                    index = j; \n            }\n            int temp = array[index];\n            array[index] = array[i];\n            array[i] = temp;\n        }\n    }\n```\n**JavaScript实现**\n```TS\n  method(arr: number[]): number[] {\n    for (let i = 0; i < arr.length; i++) {\n      let min = arr[i], minIndex = i;\n      for (let j = i + 1; j < arr.length; j++) {\n        if (min > arr[j]) {\n          // 每轮循环都获取到最小值\n          min = arr[j]\n          minIndex = j\n        }\n      }\n      // 确定最小值之后 再进行交换\n      arr[minIndex] = arr[i]\n      arr[i] = min\n    }\n    return arr\n  }\n```\n### 5、插入排序\n\n#### （1）插入排序的介绍\n\n​\t\t插入排序（Insertion sort）是一种简单直观且稳定的排序算法。如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。\n\n#### （2）插入排序的原理\n\n​\t\t1、从第一个元素开始，该元素可以认为已经被排序；\n\n​\t\t2、取出下一个元素，在已经排序的元素序列中从后向前扫描；\n\n​\t\t3、如果该元素（已排序）大于新元素，将该元素移到下一位置；\n\n​\t\t4、重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\n\n​\t\t5、将新元素插入到该位置后；\n\n​\t\t6、重复步骤2~5。\n\n#### （3）动态图演示\n\n![插入排序](http://blogimage.lemonlife.top/201909181102_303.jpg?/)\n\n#### （4）代码演示\n\n```java\npublic static void insertionSort(int[] array) {\n        int current;\n        for (int i = 0; i < array.length - 1; i++) {\n            current = array[i + 1];\n            int preIndex = i;\n            while (preIndex >= 0 && current < array[preIndex]) {\n                array[preIndex + 1] = array[preIndex];\n                preIndex--;\n            }\n            array[preIndex + 1] = current;\n        }\n    }\n```\nJavaScript代码实现\n```TS\n  method(arr: number[]): number[] {\n    let resArr = [arr[0]]\n    for (let i = 1; i < arr.length; i++) {\n      let insertIndex = 0\n      while (insertIndex < resArr.length) {\n        if (resArr[insertIndex] < arr[i]) {\n          insertIndex++\n        } else {\n          break\n        }\n      }\n      resArr.splice(insertIndex, 0, arr[i])\n    }\n    return resArr\n  }\n```\n\n### 6、归并排序\n\n#### （1）归并排序的介绍\n\n​\t\t归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。\n\n#### （2）归并排序的原理\n\n​\t\t1、将每对单个元素（默认情况下，已排序）归并为2个元素的有序数组，\n\n​\t\t2、将2个元素的每对有序数组归并成4个元素的有序数组，重复这个过程......，\n\n​\t\t3、最后一步：归并2个N / 2元素的排序数组（为了简化讨论，我们假设N是偶数）以获得完全排序的N个元素数组。\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181103_140.jpg?/)\n\n#### （4）代码演示\n\n```java\n\tpublic static int[] MergeSort(int[] array) {\n        if (array.length < 2) return array;\n        int mid = array.length / 2;\n        int[] left = Arrays.copyOfRange(array, 0, mid);\n        int[] right = Arrays.copyOfRange(array, mid, array.length);\n        return merge(MergeSort(left), MergeSort(right));\n    }\n\n    public static int[] merge(int[] left, int[] right) {\n        int[] result = new int[left.length + right.length];\n        for (int index = 0, i = 0, j = 0; index < result.length; index++) {\n            if (i >= left.length)\n                result[index] = right[j++];\n            else if (j >= right.length)\n                result[index] = left[i++];\n            else if (left[i] > right[j])\n                result[index] = right[j++];\n            else\n                result[index] = left[i++];\n        }\n        return result;\n    }\n```\n\n### 7、快速排序\n\n#### \t（1）快速排序的介绍\n\n​\t\t快速排序（Quicksort）是对冒泡排序的一种改进。\n\n​\t\t它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。\n\n#### \t（2）快速排序的原理\n\n​\t\t1、从数列中挑出一个元素，称为 “基准”（pivot）；\n​\t\t2、重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\n​\t\t3、递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。\n\n#### \t（3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181103_889.jpg?/)\n\n#### \t（4）代码演示\n**Java**  实现\n```java\n/**\n     * 快速排序方法\n     * @param array\n     * @param start\n     * @param end\n     * @return\n     */\n    public static int[] QuickSort(int[] array, int start, int end) {\n        if (array.length < 1 || start < 0 || end >= array.length || start > end) return null;\n        int smallIndex = partition(array, start, end);\n        if (smallIndex > start)\n            QuickSort(array, start, smallIndex - 1);\n        if (smallIndex < end)\n            QuickSort(array, smallIndex + 1, end);\n        return array;\n    }\n    /**\n     * 快速排序算法——partition\n     * @param array\n     * @param start\n     * @param end\n     * @return\n     */\n    public static int partition(int[] array, int start, int end) {\n        int pivot = (int) (start + Math.random() * (end - start + 1));\n        int smallIndex = start - 1;\n        swap(array, pivot, end);\n        for (int i = start; i <= end; i++)\n            if (array[i] <= array[end]) {\n                smallIndex++;\n                if (i > smallIndex)\n                    swap(array, i, smallIndex);\n            }\n        return smallIndex;\n    }\n\n    /**\n     * 交换数组内两个元素\n     * @param array\n     * @param i\n     * @param j\n     */\n    public static void swap(int[] array, int i, int j) {\n        int temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n```\n**JavaScript实现**\n```JavaScript\nfunction quickSort(arr: any[], left: number, right: number) {\n    let l = left // 左索引\n    let r = right // 右索引\n    let pivot = arr[Math.floor((l + r) / 2)]\n    while (l < r) {\n    //中线 在左边找 到一个比中间值大的值\n    while (arr[l] < pivot) {\n        l += 1\n    }\n    // 在中线右边找 比中间值小到值\n    while (arr[r] > pivot) {\n        r -= 1\n    }\n    if (l >= r) {\n        // 说明 左边都是比中值小的值 ，右边都是比中值大的值\n        break;\n    }\n    // l<r的时候交换 索引 l,r 对应的值\n    [arr[l], arr[r]] = [arr[r], arr[l]]\n    if (arr[l] == pivot || arr[r] == pivot) {\n        break;\n    }\n    }\n    if (l == r) {\n        l += 1\n        r -= 1\n    }\n    if (left < r) {\n        quickSort(arr, left, r)\n    }\n    if (right > l) {\n        quickSort(arr, l, right)\n    }\n    return arr\n}\n```\n\n### 8、希尔排序\n\n#### （1）希尔排序的介绍\n\n​\t\t希尔排序(Shell's Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因D.L.Shell于1959年提出而得名。\n\n​\t\t希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n#### （2）希尔排序的原理\n\n​\t\t1、选择一个增量序列t1，t2，…，tk，其中ti>tj，tk=1；\n​\t\t2、按增量序列个数k，对序列进行k 趟排序；\n​\t\t3、每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181103_203.jpg?/)\n\n#### （4）代码演示\n\n```java\n\t/**\n     * 希尔排序\n     *\n     * @param array\n     * @return\n     */\n    public static int[] ShellSort(int[] array) {\n        int len = array.length;\n        int temp, gap = len / 2;\n        while (gap > 0) {\n            for (int i = gap; i < len; i++) {\n                temp = array[i];\n                int preIndex = i - gap;\n                while (preIndex >= 0 && array[preIndex] > temp) {\n                    array[preIndex + gap] = array[preIndex];\n                    preIndex -= gap;\n                }\n                array[preIndex + gap] = temp;\n            }\n            gap /= 2;\n        }\n        return array;\n    }\n```\nJavaScript 实现希尔排序的交换模式,因为交换很耗时\n```TS\nmethod(arr: number[]): number[] {\n    let offSet = Math.floor(arr.length / 2)\n    while (offSet > 0) {\n      for (let i = 0; i <= arr.length - offSet; i++) {\n        for (let j = i; j < arr.length - offSet; j += offSet) {\n          if (arr[j] > arr[j + offSet]) {\n            [arr[j], arr[j + offSet]] = [arr[j + offSet], arr[j]]\n          }\n        }\n      }\n      offSet = Math.floor(offSet / 2)\n    }\n    return arr\n  }\n```\nJavaScript 实现希尔排序的移位模式\n```TS\n  method(arr: number[]): number[] {\n    let offSet = Math.floor(arr.length / 2)\n    while (offSet > 0) {\n      // console.log('此轮offset为', offSet)\n      for (let i = 0; i < arr.length - offSet; i++) {\n        let min = arr[i], minIndex: number = i\n        for (let j = i; j < arr.length; j += offSet) {\n          // 修改查找方法 为 类选择排序\n          //开始查找最小的index\n          if (arr[j] < min) {\n            min = arr[j]\n            minIndex = j\n          }\n        }\n        arr[minIndex] = arr[i]\n        arr[i] = min\n      }\n      offSet = Math.floor(offSet / 2)\n    }\n    return arr\n  }\n```\n### 9、计数排序\n\n#### （1）计数排序的介绍\n\n​\t\t计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\n​\t\t计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。\n\n#### （2）计数排序的原理\n\n​\t\t1、找出待排序的数组中最大和最小的元素；\n​\t\t2、统计数组中每个值为i的元素出现的次数，存入数组C的第i项；\n​\t\t3、对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；\n​\t\t4、反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181104_130.jpg?/)\n\n#### （4）代码演示\n\n```java\n\t/**\n     * 计数排序\n     *\n     * @param array\n     * @return\n     */\n    public static int[] CountingSort(int[] array) {\n        if (array.length == 0) return array;\n        int bias, min = array[0], max = array[0];\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] > max)\n                max = array[i];\n            if (array[i] < min)\n                min = array[i];\n        }\n        bias = 0 - min;\n        int[] bucket = new int[max - min + 1];\n        Arrays.fill(bucket, 0);\n        for (int i = 0; i < array.length; i++) {\n            bucket[array[i] + bias]++;\n        }\n        int index = 0, i = 0;\n        while (index < array.length) {\n            if (bucket[i] != 0) {\n                array[index] = i - bias;\n                bucket[i]--;\n                index++;\n            } else\n                i++;\n        }\n        return array;\n    }\n```\n**JavaScript实现**\n```TS\n  findMinMax(arr: number[]): number[] {\n    let minMax = [arr[0], arr[0]]\n    for (let i = 0; i < arr.length; i++) {\n      if (minMax[0] > arr[i]) minMax[0] = arr[i];\n      if (minMax[1] < arr[i]) minMax[1] = arr[i];\n    }\n    return minMax\n  }\n  method(arr: number[]): number[] {\n    let [min, max] = this.findMinMax(arr)\n    let countArr = new Array(max - min + 1)\n    arr.map(value => {\n      countArr[value - min] ? countArr[value - min] += 1 : countArr[value - min] = 1\n    })\n    arr = []\n    countArr.map((value, index) => {\n      while (value >= 1) {\n        arr.push(min + index)\n        value--\n      }\n    })\n    return arr\n  }\n```\n### 10、桶排序\n\n#### （1）桶排序的介绍\n\n​\t\t桶排序 (Bucket sort)或所谓的箱排序，是一个排序算法，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。\n\n#### （2）桶排序的原理\n\n​\t\t1、设置一个定量的数组当作空桶；\t\n​\t\t2、遍历输入数据，并且把数据一个一个放到对应的桶里去；\n​\t\t3、对每个不是空的桶进行排序；\n​\t\t4、从不是空的桶里把排好序的数据拼接起来。 \n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181104_316.jpg?/)\n\n#### （4）代码演示\n\n```java\n\t/**\n     * 桶排序\n     * \n     * @param array\n     * @param bucketSize\n     * @return\n     */\n    public static ArrayList<Integer> BucketSort(ArrayList<Integer> array, int bucketSize) {\n        if (array == null || array.size() < 2)\n            return array;\n        int max = array.get(0), min = array.get(0);\n        // 找到最大值最小值\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) > max)\n                max = array.get(i);\n            if (array.get(i) < min)\n                min = array.get(i);\n        }\n        int bucketCount = (max - min) / bucketSize + 1;\n        ArrayList<ArrayList<Integer>> bucketArr = new ArrayList<>(bucketCount);\n        ArrayList<Integer> resultArr = new ArrayList<>();\n        for (int i = 0; i < bucketCount; i++) {\n            bucketArr.add(new ArrayList<Integer>());\n        }\n        for (int i = 0; i < array.size(); i++) {\n            bucketArr.get((array.get(i) - min) / bucketSize).add(array.get(i));\n        }\n        for (int i = 0; i < bucketCount; i++) {\n            if (bucketSize == 1) { \n                for (int j = 0; j < bucketArr.get(i).size(); j++)\n                    resultArr.add(bucketArr.get(i).get(j));\n            } else {\n                if (bucketCount == 1)\n                    bucketSize--;\n                ArrayList<Integer> temp = BucketSort(bucketArr.get(i), bucketSize);\n                for (int j = 0; j < temp.size(); j++)\n                    resultArr.add(temp.get(j));\n            }\n        }\n        return resultArr;\n    }\n```\n\n### 11、基数排序\n\n#### （1）基数排序的介绍\n\n​\t\t基数排序也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为O(kn),为数组长度，k为数组中的数的最大的位数；\n​\t\t基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的\n\n#### （2）基数排序的原理\n\n​\t\t1、取得数组中的最大数，并取得位数；\n​\t\t2、arr为原始数组，从最低位开始取每个位组成radix数组；\n​\t\t3、对radix进行计数排序（利用计数排序适用于小范围数的特点）；\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181104_775.jpg?/)\n\n#### （4）代码演示\n\n```java\n\t/**\n     * 基数排序\n     * @param array\n     * @return\n     */\n    public static int[] RadixSort(int[] array) {\n        if (array == null || array.length < 2)\n            return array;\n        // 1.先算出最大数的位数；\n        int max = array[0];\n        for (int i = 1; i < array.length; i++) {\n            max = Math.max(max, array[i]);\n        }\n        int maxDigit = 0;\n        while (max != 0) {\n            max /= 10;\n            maxDigit++;\n        }\n        int mod = 10, div = 1;\n        ArrayList<ArrayList<Integer>> bucketList = new ArrayList<ArrayList<Integer>>();\n        for (int i = 0; i < 10; i++)\n            bucketList.add(new ArrayList<Integer>());\n        for (int i = 0; i < maxDigit; i++, mod *= 10, div *= 10) {\n            for (int j = 0; j < array.length; j++) {\n                int num = (array[j] % mod) / div;\n                bucketList.get(num).add(array[j]);\n            }\n            int index = 0;\n            for (int j = 0; j < bucketList.size(); j++) {\n                for (int k = 0; k < bucketList.get(j).size(); k++)\n                    array[index++] = bucketList.get(j).get(k);\n                bucketList.get(j).clear();\n            }\n        }\n        return array;\n    }\n```\n**JavaScript实现**\n```TS\n  method(arr: number[]): number[] {\n    //定义10个装数的桶\n    let bucket = new Array(10)\n    for (let i = 0; i < 10; i++) {\n      bucket[i] = []\n    }\n    // 取出个位数做 放入桶中\n    arr = arr.filter(value => { bucket[value % 10].push(value) })\n    bucket.map((value) => {\n      while (value.length > 0) {\n        arr.push(value.shift())\n      }\n    })\n    // 取出 10位数 放桶中\n    arr = arr.filter(value => { bucket[Math.floor((value / 10)) % 10].push(value) })\n    bucket.map((value) => {\n      while (value.length > 0) {\n        arr.push(value.shift())\n      }\n    })\n    // 取出百位数 放入桶中\n    arr = arr.filter(value => { bucket[Math.floor((value / 100)) % 10].push(value) })\n    bucket.map((value) => {\n      while (value.length > 0) {\n        arr.push(value.shift())\n      }\n    })\n    return arr\n  }\n```\n### 12、堆排序\n\n#### （1）堆排序的介绍\n\n​\t\t堆排序（英语：Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。\n\n#### （2）堆排序的原理\n\n​\t\t1、将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；\n​\t\t2、将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]<=R[n]；\n​\t\t3、由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。\n\n#### （3）动态图演示\n\n![](http://blogimage.lemonlife.top/201909181105_568.jpg?/)\n\n#### （4）代码演示\n\n```java\n//声明全局变量，用于记录数组array的长度；\nstatic int len;\n    /**\n     * 堆排序算法\n     *\n     * @param array\n     * @return\n     */\n    public static int[] HeapSort(int[] array) {\n        len = array.length;\n        if (len < 1) return array;\n        //1.构建一个最大堆\n        buildMaxHeap(array);\n        //2.循环将堆首位（最大值）与末位交换，然后在重新调整最大堆\n        while (len > 0) {\n            swap(array, 0, len - 1);\n            len--;\n            adjustHeap(array, 0);\n        }\n        return array;\n    }\n    /**\n     * 建立最大堆\n     *\n     * @param array\n     */\n    public static void buildMaxHeap(int[] array) {\n        //从最后一个非叶子节点开始向上构造最大堆\n        for (int i = (len/2 - 1); i >= 0; i--) { \n            adjustHeap(array, i);\n        }\n    }\n    /**\n     * 调整使之成为最大堆\n     *\n     * @param array\n     * @param i\n     */\n    public static void adjustHeap(int[] array, int i) {\n        int maxIndex = i;\n        //如果有左子树，且左子树大于父节点，则将最大指针指向左子树\n        if (i * 2 < len && array[i * 2] > array[maxIndex])\n            maxIndex = i * 2;\n        //如果有右子树，且右子树大于父节点，则将最大指针指向右子树\n        if (i * 2 + 1 < len && array[i * 2 + 1] > array[maxIndex])\n            maxIndex = i * 2 + 1;\n        //如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。\n        if (maxIndex != i) {\n            swap(array, maxIndex, i);\n            adjustHeap(array, maxIndex);\n        }\n    }\n```\n**JavaScript 实现基本堆排序**\n```JS\nclass TreeNode {\n  constructor(val) {\n    this.val = val\n    this.left = null\n    this.right = null\n  }\n}\nclass HeapSort {\n  constructor() {\n    // 定义一个变量存放二叉搜索树\n    this.tree = null\n  }\n  insert(val) {\n    if (this.tree == null) {\n      this.tree = new TreeNode(val)\n      return\n    }\n    let pTree = this.tree // 存一下指针\n    while (pTree != null) {\n      // 开始执行插入的流程\n      if (pTree.val >= val) {\n        if (pTree.left == null) {\n          pTree.left = new TreeNode(val)\n          return\n        }\n        pTree = pTree.left\n      } else {\n        if (pTree.right == null) {\n          pTree.right = new TreeNode(val)\n          return\n        }\n        pTree = pTree.right\n      }\n    }\n  }\n}\n// 中序遍历\nfunction inOrder(tree) {\n  if (tree == null) {\n    return\n  }\n  inOrder(tree.left)\n  console.log(tree.val)\n  inOrder(tree.right)\n}\n\nlet heapSort = new HeapSort()\nlet testArray = [7, 1, 9, 3, 8, 5, 6, 4]\ntestArray.map(value => heapSort.insert(value))\ninOrder(heapSort.tree) // 1 3 4 5 6 7 8 9\n```\n### 最后总结\n不同的排序算法有不同的应用场景,一般情况下如果数据都是正数，可以考虑采用基数排序，计数排序，桶排序之类的排序算法。其中计数排序算是最耗费空间的了，也是拿空间换时间最明显的那个😁\n\n>博客中中JavaScript部分是我自己写的,Java和文字引用于马老师,*马士兵教育公开课*。","slug":"rank-method","published":1,"updated":"2022-06-17T16:57:53.874Z","_id":"cl4ince6x0021cgufhcvsd0gz","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-基本介绍\"></a> 1、基本介绍</h3>\n<p>​\t\t排序算法比较基础，但是设计到很多计算机科学的想法，如下：</p>\n<p>​\t\t\t1、比较和非比较的策略</p>\n<p>​\t\t\t2、迭代和递归的实现</p>\n<p>​\t\t\t3、分而治之思想</p>\n<p>​\t\t\t4、最佳、最差、平均情况时间复杂度分析</p>\n<p>​\t\t\t5、随机算法</p>\n<h3 id=\"2-排序算法的分类\"><a class=\"markdownIt-Anchor\" href=\"#2-排序算法的分类\"></a> 2、排序算法的分类</h3>\n<h4 id=\"算法分类\"><a class=\"markdownIt-Anchor\" href=\"#算法分类\"></a> 算法分类</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181100_29.jpg?/\" alt=\"\" /></p>\n<h4 id=\"算法总结\"><a class=\"markdownIt-Anchor\" href=\"#算法总结\"></a> 算法总结</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181101_243.jpg?/\" alt=\"\" /></p>\n<h3 id=\"3-冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#3-冒泡排序\"></a> 3、冒泡排序</h3>\n<h4 id=\"1冒泡排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1冒泡排序的介绍\"></a> （1）冒泡排序的介绍</h4>\n<p>​\t\t冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<h4 id=\"2冒泡排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2冒泡排序的原理\"></a> （2）冒泡排序的原理：</h4>\n<p>​\t\t1、如果元素大小关系不正确，交换这两个数（在本例中为a&gt; b），</p>\n<p>​\t\t2、比较一对相邻元素（a，b），</p>\n<p>​\t\t3、重复步骤1和2，直到我们到达数组的末尾（最后一对是第（N-2）和（N-1）项，因为我们的数组从零开始）</p>\n<p>​\t\t4、到目前为止，最大的元素将在最后的位置。 然后我们将N减少1，并重复步骤1，直到N = 1。</p>\n<h4 id=\"3动图演示\"><a class=\"markdownIt-Anchor\" href=\"#3动图演示\"></a> （3）动图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181101_1.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span> array[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; array.length - <span class=\"number\">1</span> - i; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (array[j] &gt; array[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    t = array[j];</span><br><span class=\"line\">                    array[j] = array[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    array[j + <span class=\"number\">1</span>] = t;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript实现</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class=\"line\">        [arr[i], arr[j]] = [arr[j], arr[i]]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-选择排序\"><a class=\"markdownIt-Anchor\" href=\"#4-选择排序\"></a> 4、选择排序</h3>\n<h4 id=\"1选择排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1选择排序的介绍\"></a> （1）选择排序的介绍</h4>\n<p>​\t\t选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>\n<h4 id=\"2选择排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2选择排序的原理\"></a> （2）选择排序的原理</h4>\n<p>​\t\t1、在 <strong>[L … N-1]</strong> 范围内找出最小项目 <strong>X</strong> 的位置，</p>\n<p>​\t\t2、用第 <strong>L</strong> 项交换X，</p>\n<p>​\t\t3、将下限 <strong>L</strong> 增加1并重复步骤1直到 <strong>L = N-2</strong>。</p>\n<h4 id=\"3动态图演示\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181102_996.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-2\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-2\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; array.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (array[j] &lt; array[index]) </span><br><span class=\"line\">                    index = j; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[index];</span><br><span class=\"line\">            array[index] = array[i];</span><br><span class=\"line\">            array[i] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript实现</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> min = arr[i], minIndex = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (min &gt; arr[j]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每轮循环都获取到最小值</span></span><br><span class=\"line\">        min = arr[j]</span><br><span class=\"line\">        minIndex = j</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 确定最小值之后 再进行交换</span></span><br><span class=\"line\">    arr[minIndex] = arr[i]</span><br><span class=\"line\">    arr[i] = min</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-插入排序\"><a class=\"markdownIt-Anchor\" href=\"#5-插入排序\"></a> 5、插入排序</h3>\n<h4 id=\"1插入排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1插入排序的介绍\"></a> （1）插入排序的介绍</h4>\n<p>​\t\t插入排序（Insertion sort）是一种简单直观且稳定的排序算法。如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。</p>\n<h4 id=\"2插入排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2插入排序的原理\"></a> （2）插入排序的原理</h4>\n<p>​\t\t1、从第一个元素开始，该元素可以认为已经被排序；</p>\n<p>​\t\t2、取出下一个元素，在已经排序的元素序列中从后向前扫描；</p>\n<p>​\t\t3、如果该元素（已排序）大于新元素，将该元素移到下一位置；</p>\n<p>​\t\t4、重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</p>\n<p>​\t\t5、将新元素插入到该位置后；</p>\n<p>​\t\t6、重复步骤2~5。</p>\n<h4 id=\"3动态图演示-2\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-2\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181102_303.jpg?/\" alt=\"插入排序\" /></p>\n<h4 id=\"4代码演示-3\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-3\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> current;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            current = array[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">preIndex</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; current &lt; array[preIndex]) &#123;</span><br><span class=\"line\">                array[preIndex + <span class=\"number\">1</span>] = array[preIndex];</span><br><span class=\"line\">                preIndex--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            array[preIndex + <span class=\"number\">1</span>] = current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>JavaScript代码实现</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resArr = [arr[<span class=\"number\">0</span>]]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> insertIndex = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (insertIndex &lt; resArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (resArr[insertIndex] &lt; arr[i]) &#123;</span><br><span class=\"line\">        insertIndex++</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resArr.<span class=\"title function_\">splice</span>(insertIndex, <span class=\"number\">0</span>, arr[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-归并排序\"><a class=\"markdownIt-Anchor\" href=\"#6-归并排序\"></a> 6、归并排序</h3>\n<h4 id=\"1归并排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1归并排序的介绍\"></a> （1）归并排序的介绍</h4>\n<p>​\t\t归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>\n<h4 id=\"2归并排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2归并排序的原理\"></a> （2）归并排序的原理</h4>\n<p>​\t\t1、将每对单个元素（默认情况下，已排序）归并为2个元素的有序数组，</p>\n<p>​\t\t2、将2个元素的每对有序数组归并成4个元素的有序数组，重复这个过程…，</p>\n<p>​\t\t3、最后一步：归并2个N / 2元素的排序数组（为了简化讨论，我们假设N是偶数）以获得完全排序的N个元素数组。</p>\n<h4 id=\"3动态图演示-3\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-3\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181103_140.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-4\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-4\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] MergeSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (array.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> array.length / <span class=\"number\">2</span>;</span><br><span class=\"line\">       <span class=\"type\">int</span>[] left = Arrays.copyOfRange(array, <span class=\"number\">0</span>, mid);</span><br><span class=\"line\">       <span class=\"type\">int</span>[] right = Arrays.copyOfRange(array, mid, array.length);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> merge(MergeSort(left), MergeSort(right));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] merge(<span class=\"type\">int</span>[] left, <span class=\"type\">int</span>[] right) &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[left.length + right.length];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; index &lt; result.length; index++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (i &gt;= left.length)</span><br><span class=\"line\">               result[index] = right[j++];</span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt;= right.length)</span><br><span class=\"line\">               result[index] = left[i++];</span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left[i] &gt; right[j])</span><br><span class=\"line\">               result[index] = right[j++];</span><br><span class=\"line\">           <span class=\"keyword\">else</span></span><br><span class=\"line\">               result[index] = left[i++];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-快速排序\"><a class=\"markdownIt-Anchor\" href=\"#7-快速排序\"></a> 7、快速排序</h3>\n<h4 id=\"1快速排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1快速排序的介绍\"></a> （1）快速排序的介绍</h4>\n<p>​\t\t快速排序（Quicksort）是对冒泡排序的一种改进。</p>\n<p>​\t\t它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>\n<h4 id=\"2快速排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2快速排序的原理\"></a> （2）快速排序的原理</h4>\n<p>​\t\t1、从数列中挑出一个元素，称为 “基准”（pivot）；<br />\n​\t\t2、重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；<br />\n​\t\t3、递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>\n<h4 id=\"3动态图演示-4\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-4\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181103_889.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-5\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-5\"></a> （4）代码演示</h4>\n<p><strong>Java</strong>  实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 快速排序方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] QuickSort(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array.length &lt; <span class=\"number\">1</span> || start &lt; <span class=\"number\">0</span> || end &gt;= array.length || start &gt; end) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">smallIndex</span> <span class=\"operator\">=</span> partition(array, start, end);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (smallIndex &gt; start)</span><br><span class=\"line\">            QuickSort(array, start, smallIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (smallIndex &lt; end)</span><br><span class=\"line\">            QuickSort(array, smallIndex + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 快速排序算法——partition</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (start + Math.random() * (end - start + <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">smallIndex</span> <span class=\"operator\">=</span> start - <span class=\"number\">1</span>;</span><br><span class=\"line\">        swap(array, pivot, end);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start; i &lt;= end; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[i] &lt;= array[end]) &#123;</span><br><span class=\"line\">                smallIndex++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i &gt; smallIndex)</span><br><span class=\"line\">                    swap(array, i, smallIndex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> smallIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换数组内两个元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">        array[i] = array[j];</span><br><span class=\"line\">        array[j] = temp;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">quickSort</span>(<span class=\"params\">arr: any[], left: number, right: number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = left <span class=\"comment\">// 左索引</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> r = right <span class=\"comment\">// 右索引</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivot = arr[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((l + r) / <span class=\"number\">2</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//中线 在左边找 到一个比中间值大的值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arr[l] &lt; pivot) &#123;</span><br><span class=\"line\">        l += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在中线右边找 比中间值小到值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arr[r] &gt; pivot) &#123;</span><br><span class=\"line\">        r -= <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= r) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 说明 左边都是比中值小的值 ，右边都是比中值大的值</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// l&lt;r的时候交换 索引 l,r 对应的值</span></span><br><span class=\"line\">    [arr[l], arr[r]] = [arr[r], arr[l]]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[l] == pivot || arr[r] == pivot) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">        l += <span class=\"number\">1</span></span><br><span class=\"line\">        r -= <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">quickSort</span>(arr, left, r)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &gt; l) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">quickSort</span>(arr, l, right)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#8-希尔排序\"></a> 8、希尔排序</h3>\n<h4 id=\"1希尔排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1希尔排序的介绍\"></a> （1）希尔排序的介绍</h4>\n<p>​\t\t希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因D.L.Shell于1959年提出而得名。</p>\n<p>​\t\t希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>\n<h4 id=\"2希尔排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2希尔排序的原理\"></a> （2）希尔排序的原理</h4>\n<p>​\t\t1、选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；<br />\n​\t\t2、按增量序列个数k，对序列进行k 趟排序；<br />\n​\t\t3、每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p>\n<h4 id=\"3动态图演示-5\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-5\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181103_203.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-6\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-6\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 希尔排序</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] ShellSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">       <span class=\"type\">int</span> temp, gap = len / <span class=\"number\">2</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (gap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> gap; i &lt; len; i++) &#123;</span><br><span class=\"line\">               temp = array[i];</span><br><span class=\"line\">               <span class=\"type\">int</span> <span class=\"variable\">preIndex</span> <span class=\"operator\">=</span> i - gap;</span><br><span class=\"line\">               <span class=\"keyword\">while</span> (preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; array[preIndex] &gt; temp) &#123;</span><br><span class=\"line\">                   array[preIndex + gap] = array[preIndex];</span><br><span class=\"line\">                   preIndex -= gap;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               array[preIndex + gap] = temp;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           gap /= <span class=\"number\">2</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>JavaScript 实现希尔排序的交换模式,因为交换很耗时</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> offSet = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(arr.<span class=\"property\">length</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (offSet &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= arr.<span class=\"property\">length</span> - offSet; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt; arr.<span class=\"property\">length</span> - offSet; j += offSet) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + offSet]) &#123;</span><br><span class=\"line\">            [arr[j], arr[j + offSet]] = [arr[j + offSet], arr[j]]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      offSet = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(offSet / <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>JavaScript 实现希尔排序的移位模式</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> offSet = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(arr.<span class=\"property\">length</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (offSet &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(&#x27;此轮offset为&#x27;, offSet)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span> - offSet; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> min = arr[i], <span class=\"attr\">minIndex</span>: <span class=\"built_in\">number</span> = i</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt; arr.<span class=\"property\">length</span>; j += offSet) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 修改查找方法 为 类选择排序</span></span><br><span class=\"line\">        <span class=\"comment\">//开始查找最小的index</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[j] &lt; min) &#123;</span><br><span class=\"line\">          min = arr[j]</span><br><span class=\"line\">          minIndex = j</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      arr[minIndex] = arr[i]</span><br><span class=\"line\">      arr[i] = min</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    offSet = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(offSet / <span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-计数排序\"><a class=\"markdownIt-Anchor\" href=\"#9-计数排序\"></a> 9、计数排序</h3>\n<h4 id=\"1计数排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1计数排序的介绍\"></a> （1）计数排序的介绍</h4>\n<p>​\t\t计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。<br />\n​\t\t计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。</p>\n<h4 id=\"2计数排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2计数排序的原理\"></a> （2）计数排序的原理</h4>\n<p>​\t\t1、找出待排序的数组中最大和最小的元素；<br />\n​\t\t2、统计数组中每个值为i的元素出现的次数，存入数组C的第i项；<br />\n​\t\t3、对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；<br />\n​\t\t4、反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</p>\n<h4 id=\"3动态图演示-6\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-6\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181104_130.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-7\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-7\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 计数排序</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] CountingSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (array.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">       <span class=\"type\">int</span> bias, min = array[<span class=\"number\">0</span>], max = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (array[i] &gt; max)</span><br><span class=\"line\">               max = array[i];</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (array[i] &lt; min)</span><br><span class=\"line\">               min = array[i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       bias = <span class=\"number\">0</span> - min;</span><br><span class=\"line\">       <span class=\"type\">int</span>[] bucket = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max - min + <span class=\"number\">1</span>];</span><br><span class=\"line\">       Arrays.fill(bucket, <span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">           bucket[array[i] + bias]++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (index &lt; array.length) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (bucket[i] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               array[index] = i - bias;</span><br><span class=\"line\">               bucket[i]--;</span><br><span class=\"line\">               index++;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">               i++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript实现</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">findMinMax</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> minMax = [arr[<span class=\"number\">0</span>], arr[<span class=\"number\">0</span>]]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minMax[<span class=\"number\">0</span>] &gt; arr[i]) minMax[<span class=\"number\">0</span>] = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minMax[<span class=\"number\">1</span>] &lt; arr[i]) minMax[<span class=\"number\">1</span>] = arr[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> minMax</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [min, max] = <span class=\"variable language_\">this</span>.<span class=\"title function_\">findMinMax</span>(arr)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countArr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(max - min + <span class=\"number\">1</span>)</span><br><span class=\"line\">  arr.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    countArr[value - min] ? countArr[value - min] += <span class=\"number\">1</span> : countArr[value - min] = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  arr = []</span><br><span class=\"line\">  countArr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (value &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      arr.<span class=\"title function_\">push</span>(min + index)</span><br><span class=\"line\">      value--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-桶排序\"><a class=\"markdownIt-Anchor\" href=\"#10-桶排序\"></a> 10、桶排序</h3>\n<h4 id=\"1桶排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1桶排序的介绍\"></a> （1）桶排序的介绍</h4>\n<p>​\t\t桶排序 (Bucket sort)或所谓的箱排序，是一个排序算法，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。</p>\n<h4 id=\"2桶排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2桶排序的原理\"></a> （2）桶排序的原理</h4>\n<p>​\t\t1、设置一个定量的数组当作空桶；\t<br />\n​\t\t2、遍历输入数据，并且把数据一个一个放到对应的桶里去；<br />\n​\t\t3、对每个不是空的桶进行排序；<br />\n​\t\t4、从不是空的桶里把排好序的数据拼接起来。</p>\n<h4 id=\"3动态图演示-7\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-7\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181104_316.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-8\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-8\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 桶排序</span></span><br><span class=\"line\"><span class=\"comment\">    * </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bucketSize</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">BucketSort</span><span class=\"params\">(ArrayList&lt;Integer&gt; array, <span class=\"type\">int</span> bucketSize)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span> || array.size() &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> array.get(<span class=\"number\">0</span>), min = array.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"comment\">// 找到最大值最小值</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (array.get(i) &gt; max)</span><br><span class=\"line\">               max = array.get(i);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (array.get(i) &lt; min)</span><br><span class=\"line\">               min = array.get(i);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">bucketCount</span> <span class=\"operator\">=</span> (max - min) / bucketSize + <span class=\"number\">1</span>;</span><br><span class=\"line\">       ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(bucketCount);</span><br><span class=\"line\">       ArrayList&lt;Integer&gt; resultArr = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class=\"line\">           bucketArr.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class=\"line\">           bucketArr.get((array.get(i) - min) / bucketSize).add(array.get(i));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (bucketSize == <span class=\"number\">1</span>) &#123; </span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; bucketArr.get(i).size(); j++)</span><br><span class=\"line\">                   resultArr.add(bucketArr.get(i).get(j));</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (bucketCount == <span class=\"number\">1</span>)</span><br><span class=\"line\">                   bucketSize--;</span><br><span class=\"line\">               ArrayList&lt;Integer&gt; temp = BucketSort(bucketArr.get(i), bucketSize);</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; temp.size(); j++)</span><br><span class=\"line\">                   resultArr.add(temp.get(j));</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> resultArr;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-基数排序\"><a class=\"markdownIt-Anchor\" href=\"#11-基数排序\"></a> 11、基数排序</h3>\n<h4 id=\"1基数排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1基数排序的介绍\"></a> （1）基数排序的介绍</h4>\n<p>​\t\t基数排序也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为O(kn),为数组长度，k为数组中的数的最大的位数；<br />\n​\t\t基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的</p>\n<h4 id=\"2基数排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2基数排序的原理\"></a> （2）基数排序的原理</h4>\n<p>​\t\t1、取得数组中的最大数，并取得位数；<br />\n​\t\t2、arr为原始数组，从最低位开始取每个位组成radix数组；<br />\n​\t\t3、对radix进行计数排序（利用计数排序适用于小范围数的特点）；</p>\n<h4 id=\"3动态图演示-8\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-8\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181104_775.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-9\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-9\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 基数排序</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] RadixSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span> || array.length &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">       <span class=\"comment\">// 1.先算出最大数的位数；</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">           max = Math.max(max, array[i]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">maxDigit</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (max != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           max /= <span class=\"number\">10</span>;</span><br><span class=\"line\">           maxDigit++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">mod</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>, div = <span class=\"number\">1</span>;</span><br><span class=\"line\">       ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">           bucketList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;());</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; maxDigit; i++, mod *= <span class=\"number\">10</span>, div *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; array.length; j++) &#123;</span><br><span class=\"line\">               <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> (array[j] % mod) / div;</span><br><span class=\"line\">               bucketList.get(num).add(array[j]);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; bucketList.size(); j++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; bucketList.get(j).size(); k++)</span><br><span class=\"line\">                   array[index++] = bucketList.get(j).get(k);</span><br><span class=\"line\">               bucketList.get(j).clear();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript实现</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"comment\">//定义10个装数的桶</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> bucket = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    bucket[i] = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 取出个位数做 放入桶中</span></span><br><span class=\"line\">  arr = arr.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; bucket[value % <span class=\"number\">10</span>].<span class=\"title function_\">push</span>(value) &#125;)</span><br><span class=\"line\">  bucket.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (value.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      arr.<span class=\"title function_\">push</span>(value.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 取出 10位数 放桶中</span></span><br><span class=\"line\">  arr = arr.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; bucket[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((value / <span class=\"number\">10</span>)) % <span class=\"number\">10</span>].<span class=\"title function_\">push</span>(value) &#125;)</span><br><span class=\"line\">  bucket.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (value.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      arr.<span class=\"title function_\">push</span>(value.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 取出百位数 放入桶中</span></span><br><span class=\"line\">  arr = arr.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; bucket[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((value / <span class=\"number\">100</span>)) % <span class=\"number\">10</span>].<span class=\"title function_\">push</span>(value) &#125;)</span><br><span class=\"line\">  bucket.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (value.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      arr.<span class=\"title function_\">push</span>(value.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-堆排序\"><a class=\"markdownIt-Anchor\" href=\"#12-堆排序\"></a> 12、堆排序</h3>\n<h4 id=\"1堆排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1堆排序的介绍\"></a> （1）堆排序的介绍</h4>\n<p>​\t\t堆排序（英语：Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>\n<h4 id=\"2堆排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2堆排序的原理\"></a> （2）堆排序的原理</h4>\n<p>​\t\t1、将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；<br />\n​\t\t2、将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；<br />\n​\t\t3、由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</p>\n<h4 id=\"3动态图演示-9\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-9\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181105_568.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-10\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-10\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明全局变量，用于记录数组array的长度；</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> len;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 堆排序算法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] HeapSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">        len = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">        <span class=\"comment\">//1.构建一个最大堆</span></span><br><span class=\"line\">        buildMaxHeap(array);</span><br><span class=\"line\">        <span class=\"comment\">//2.循环将堆首位（最大值）与末位交换，然后在重新调整最大堆</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            swap(array, <span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</span><br><span class=\"line\">            len--;</span><br><span class=\"line\">            adjustHeap(array, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 建立最大堆</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildMaxHeap</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//从最后一个非叶子节点开始向上构造最大堆</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (len/<span class=\"number\">2</span> - <span class=\"number\">1</span>); i &gt;= <span class=\"number\">0</span>; i--) &#123; </span><br><span class=\"line\">            adjustHeap(array, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调整使之成为最大堆</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">adjustHeap</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxIndex</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">        <span class=\"comment\">//如果有左子树，且左子树大于父节点，则将最大指针指向左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i * <span class=\"number\">2</span> &lt; len &amp;&amp; array[i * <span class=\"number\">2</span>] &gt; array[maxIndex])</span><br><span class=\"line\">            maxIndex = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果有右子树，且右子树大于父节点，则将最大指针指向右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i * <span class=\"number\">2</span> + <span class=\"number\">1</span> &lt; len &amp;&amp; array[i * <span class=\"number\">2</span> + <span class=\"number\">1</span>] &gt; array[maxIndex])</span><br><span class=\"line\">            maxIndex = i * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxIndex != i) &#123;</span><br><span class=\"line\">            swap(array, maxIndex, i);</span><br><span class=\"line\">            adjustHeap(array, maxIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript 实现基本堆排序</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HeapSort</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个变量存放二叉搜索树</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pTree = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> <span class=\"comment\">// 存一下指针</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pTree != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 开始执行插入的流程</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pTree.<span class=\"property\">val</span> &gt;= val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pTree.<span class=\"property\">left</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          pTree.<span class=\"property\">left</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pTree = pTree.<span class=\"property\">left</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pTree.<span class=\"property\">right</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          pTree.<span class=\"property\">right</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pTree = pTree.<span class=\"property\">right</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inOrder</span>(<span class=\"params\">tree</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">inOrder</span>(tree.<span class=\"property\">left</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tree.<span class=\"property\">val</span>)</span><br><span class=\"line\">  <span class=\"title function_\">inOrder</span>(tree.<span class=\"property\">right</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> heapSort = <span class=\"keyword\">new</span> <span class=\"title class_\">HeapSort</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> testArray = [<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">testArray.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> heapSort.<span class=\"title function_\">insert</span>(value))</span><br><span class=\"line\"><span class=\"title function_\">inOrder</span>(heapSort.<span class=\"property\">tree</span>) <span class=\"comment\">// 1 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"最后总结\"><a class=\"markdownIt-Anchor\" href=\"#最后总结\"></a> 最后总结</h3>\n<p>不同的排序算法有不同的应用场景,一般情况下如果数据都是正数，可以考虑采用基数排序，计数排序，桶排序之类的排序算法。其中计数排序算是最耗费空间的了，也是拿空间换时间最明显的那个😁</p>\n<blockquote>\n<p>博客中中JavaScript部分是我自己写的,Java和文字引用于马老师,<em>马士兵教育公开课</em>。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-基本介绍\"></a> 1、基本介绍</h3>\n<p>​\t\t排序算法比较基础，但是设计到很多计算机科学的想法，如下：</p>\n<p>​\t\t\t1、比较和非比较的策略</p>\n<p>​\t\t\t2、迭代和递归的实现</p>\n<p>​\t\t\t3、分而治之思想</p>\n<p>​\t\t\t4、最佳、最差、平均情况时间复杂度分析</p>\n<p>​\t\t\t5、随机算法</p>\n<h3 id=\"2-排序算法的分类\"><a class=\"markdownIt-Anchor\" href=\"#2-排序算法的分类\"></a> 2、排序算法的分类</h3>\n<h4 id=\"算法分类\"><a class=\"markdownIt-Anchor\" href=\"#算法分类\"></a> 算法分类</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181100_29.jpg?/\" alt=\"\" /></p>\n<h4 id=\"算法总结\"><a class=\"markdownIt-Anchor\" href=\"#算法总结\"></a> 算法总结</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181101_243.jpg?/\" alt=\"\" /></p>\n<h3 id=\"3-冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#3-冒泡排序\"></a> 3、冒泡排序</h3>\n<h4 id=\"1冒泡排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1冒泡排序的介绍\"></a> （1）冒泡排序的介绍</h4>\n<p>​\t\t冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<h4 id=\"2冒泡排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2冒泡排序的原理\"></a> （2）冒泡排序的原理：</h4>\n<p>​\t\t1、如果元素大小关系不正确，交换这两个数（在本例中为a&gt; b），</p>\n<p>​\t\t2、比较一对相邻元素（a，b），</p>\n<p>​\t\t3、重复步骤1和2，直到我们到达数组的末尾（最后一对是第（N-2）和（N-1）项，因为我们的数组从零开始）</p>\n<p>​\t\t4、到目前为止，最大的元素将在最后的位置。 然后我们将N减少1，并重复步骤1，直到N = 1。</p>\n<h4 id=\"3动图演示\"><a class=\"markdownIt-Anchor\" href=\"#3动图演示\"></a> （3）动图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181101_1.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span> array[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length - <span class=\"number\">1</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; array.length - <span class=\"number\">1</span> - i; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (array[j] &gt; array[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    t = array[j];</span><br><span class=\"line\">                    array[j] = array[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    array[j + <span class=\"number\">1</span>] = t;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript实现</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class=\"line\">        [arr[i], arr[j]] = [arr[j], arr[i]]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-选择排序\"><a class=\"markdownIt-Anchor\" href=\"#4-选择排序\"></a> 4、选择排序</h3>\n<h4 id=\"1选择排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1选择排序的介绍\"></a> （1）选择排序的介绍</h4>\n<p>​\t\t选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>\n<h4 id=\"2选择排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2选择排序的原理\"></a> （2）选择排序的原理</h4>\n<p>​\t\t1、在 <strong>[L … N-1]</strong> 范围内找出最小项目 <strong>X</strong> 的位置，</p>\n<p>​\t\t2、用第 <strong>L</strong> 项交换X，</p>\n<p>​\t\t3、将下限 <strong>L</strong> 增加1并重复步骤1直到 <strong>L = N-2</strong>。</p>\n<h4 id=\"3动态图演示\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181102_996.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-2\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-2\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; array.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (array[j] &lt; array[index]) </span><br><span class=\"line\">                    index = j; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[index];</span><br><span class=\"line\">            array[index] = array[i];</span><br><span class=\"line\">            array[i] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript实现</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> min = arr[i], minIndex = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (min &gt; arr[j]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每轮循环都获取到最小值</span></span><br><span class=\"line\">        min = arr[j]</span><br><span class=\"line\">        minIndex = j</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 确定最小值之后 再进行交换</span></span><br><span class=\"line\">    arr[minIndex] = arr[i]</span><br><span class=\"line\">    arr[i] = min</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-插入排序\"><a class=\"markdownIt-Anchor\" href=\"#5-插入排序\"></a> 5、插入排序</h3>\n<h4 id=\"1插入排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1插入排序的介绍\"></a> （1）插入排序的介绍</h4>\n<p>​\t\t插入排序（Insertion sort）是一种简单直观且稳定的排序算法。如果有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法——插入排序法,插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。</p>\n<h4 id=\"2插入排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2插入排序的原理\"></a> （2）插入排序的原理</h4>\n<p>​\t\t1、从第一个元素开始，该元素可以认为已经被排序；</p>\n<p>​\t\t2、取出下一个元素，在已经排序的元素序列中从后向前扫描；</p>\n<p>​\t\t3、如果该元素（已排序）大于新元素，将该元素移到下一位置；</p>\n<p>​\t\t4、重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</p>\n<p>​\t\t5、将新元素插入到该位置后；</p>\n<p>​\t\t6、重复步骤2~5。</p>\n<h4 id=\"3动态图演示-2\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-2\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181102_303.jpg?/\" alt=\"插入排序\" /></p>\n<h4 id=\"4代码演示-3\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-3\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertionSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> current;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            current = array[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">preIndex</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; current &lt; array[preIndex]) &#123;</span><br><span class=\"line\">                array[preIndex + <span class=\"number\">1</span>] = array[preIndex];</span><br><span class=\"line\">                preIndex--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            array[preIndex + <span class=\"number\">1</span>] = current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>JavaScript代码实现</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> resArr = [arr[<span class=\"number\">0</span>]]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> insertIndex = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (insertIndex &lt; resArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (resArr[insertIndex] &lt; arr[i]) &#123;</span><br><span class=\"line\">        insertIndex++</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    resArr.<span class=\"title function_\">splice</span>(insertIndex, <span class=\"number\">0</span>, arr[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-归并排序\"><a class=\"markdownIt-Anchor\" href=\"#6-归并排序\"></a> 6、归并排序</h3>\n<h4 id=\"1归并排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1归并排序的介绍\"></a> （1）归并排序的介绍</h4>\n<p>​\t\t归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>\n<h4 id=\"2归并排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2归并排序的原理\"></a> （2）归并排序的原理</h4>\n<p>​\t\t1、将每对单个元素（默认情况下，已排序）归并为2个元素的有序数组，</p>\n<p>​\t\t2、将2个元素的每对有序数组归并成4个元素的有序数组，重复这个过程…，</p>\n<p>​\t\t3、最后一步：归并2个N / 2元素的排序数组（为了简化讨论，我们假设N是偶数）以获得完全排序的N个元素数组。</p>\n<h4 id=\"3动态图演示-3\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-3\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181103_140.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-4\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-4\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] MergeSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (array.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> array.length / <span class=\"number\">2</span>;</span><br><span class=\"line\">       <span class=\"type\">int</span>[] left = Arrays.copyOfRange(array, <span class=\"number\">0</span>, mid);</span><br><span class=\"line\">       <span class=\"type\">int</span>[] right = Arrays.copyOfRange(array, mid, array.length);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> merge(MergeSort(left), MergeSort(right));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] merge(<span class=\"type\">int</span>[] left, <span class=\"type\">int</span>[] right) &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[left.length + right.length];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; index &lt; result.length; index++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (i &gt;= left.length)</span><br><span class=\"line\">               result[index] = right[j++];</span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt;= right.length)</span><br><span class=\"line\">               result[index] = left[i++];</span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (left[i] &gt; right[j])</span><br><span class=\"line\">               result[index] = right[j++];</span><br><span class=\"line\">           <span class=\"keyword\">else</span></span><br><span class=\"line\">               result[index] = left[i++];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-快速排序\"><a class=\"markdownIt-Anchor\" href=\"#7-快速排序\"></a> 7、快速排序</h3>\n<h4 id=\"1快速排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1快速排序的介绍\"></a> （1）快速排序的介绍</h4>\n<p>​\t\t快速排序（Quicksort）是对冒泡排序的一种改进。</p>\n<p>​\t\t它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>\n<h4 id=\"2快速排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2快速排序的原理\"></a> （2）快速排序的原理</h4>\n<p>​\t\t1、从数列中挑出一个元素，称为 “基准”（pivot）；<br />\n​\t\t2、重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；<br />\n​\t\t3、递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>\n<h4 id=\"3动态图演示-4\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-4\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181103_889.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-5\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-5\"></a> （4）代码演示</h4>\n<p><strong>Java</strong>  实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 快速排序方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] QuickSort(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array.length &lt; <span class=\"number\">1</span> || start &lt; <span class=\"number\">0</span> || end &gt;= array.length || start &gt; end) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">smallIndex</span> <span class=\"operator\">=</span> partition(array, start, end);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (smallIndex &gt; start)</span><br><span class=\"line\">            QuickSort(array, start, smallIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (smallIndex &lt; end)</span><br><span class=\"line\">            QuickSort(array, smallIndex + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 快速排序算法——partition</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> start</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> end</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (start + Math.random() * (end - start + <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">smallIndex</span> <span class=\"operator\">=</span> start - <span class=\"number\">1</span>;</span><br><span class=\"line\">        swap(array, pivot, end);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start; i &lt;= end; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[i] &lt;= array[end]) &#123;</span><br><span class=\"line\">                smallIndex++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i &gt; smallIndex)</span><br><span class=\"line\">                    swap(array, i, smallIndex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> smallIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 交换数组内两个元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">        array[i] = array[j];</span><br><span class=\"line\">        array[j] = temp;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">quickSort</span>(<span class=\"params\">arr: any[], left: number, right: number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = left <span class=\"comment\">// 左索引</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> r = right <span class=\"comment\">// 右索引</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> pivot = arr[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((l + r) / <span class=\"number\">2</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//中线 在左边找 到一个比中间值大的值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arr[l] &lt; pivot) &#123;</span><br><span class=\"line\">        l += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在中线右边找 比中间值小到值</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arr[r] &gt; pivot) &#123;</span><br><span class=\"line\">        r -= <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= r) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 说明 左边都是比中值小的值 ，右边都是比中值大的值</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// l&lt;r的时候交换 索引 l,r 对应的值</span></span><br><span class=\"line\">    [arr[l], arr[r]] = [arr[r], arr[l]]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[l] == pivot || arr[r] == pivot) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">        l += <span class=\"number\">1</span></span><br><span class=\"line\">        r -= <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">quickSort</span>(arr, left, r)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &gt; l) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">quickSort</span>(arr, l, right)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#8-希尔排序\"></a> 8、希尔排序</h3>\n<h4 id=\"1希尔排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1希尔排序的介绍\"></a> （1）希尔排序的介绍</h4>\n<p>​\t\t希尔排序(Shell’s Sort)是插入排序的一种又称“缩小增量排序”（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因D.L.Shell于1959年提出而得名。</p>\n<p>​\t\t希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>\n<h4 id=\"2希尔排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2希尔排序的原理\"></a> （2）希尔排序的原理</h4>\n<p>​\t\t1、选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；<br />\n​\t\t2、按增量序列个数k，对序列进行k 趟排序；<br />\n​\t\t3、每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p>\n<h4 id=\"3动态图演示-5\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-5\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181103_203.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-6\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-6\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 希尔排序</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] ShellSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">       <span class=\"type\">int</span> temp, gap = len / <span class=\"number\">2</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (gap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> gap; i &lt; len; i++) &#123;</span><br><span class=\"line\">               temp = array[i];</span><br><span class=\"line\">               <span class=\"type\">int</span> <span class=\"variable\">preIndex</span> <span class=\"operator\">=</span> i - gap;</span><br><span class=\"line\">               <span class=\"keyword\">while</span> (preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; array[preIndex] &gt; temp) &#123;</span><br><span class=\"line\">                   array[preIndex + gap] = array[preIndex];</span><br><span class=\"line\">                   preIndex -= gap;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               array[preIndex + gap] = temp;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           gap /= <span class=\"number\">2</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>JavaScript 实现希尔排序的交换模式,因为交换很耗时</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> offSet = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(arr.<span class=\"property\">length</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (offSet &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= arr.<span class=\"property\">length</span> - offSet; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt; arr.<span class=\"property\">length</span> - offSet; j += offSet) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + offSet]) &#123;</span><br><span class=\"line\">            [arr[j], arr[j + offSet]] = [arr[j + offSet], arr[j]]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      offSet = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(offSet / <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>JavaScript 实现希尔排序的移位模式</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> offSet = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(arr.<span class=\"property\">length</span> / <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (offSet &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(&#x27;此轮offset为&#x27;, offSet)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span> - offSet; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> min = arr[i], <span class=\"attr\">minIndex</span>: <span class=\"built_in\">number</span> = i</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt; arr.<span class=\"property\">length</span>; j += offSet) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 修改查找方法 为 类选择排序</span></span><br><span class=\"line\">        <span class=\"comment\">//开始查找最小的index</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[j] &lt; min) &#123;</span><br><span class=\"line\">          min = arr[j]</span><br><span class=\"line\">          minIndex = j</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      arr[minIndex] = arr[i]</span><br><span class=\"line\">      arr[i] = min</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    offSet = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(offSet / <span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-计数排序\"><a class=\"markdownIt-Anchor\" href=\"#9-计数排序\"></a> 9、计数排序</h3>\n<h4 id=\"1计数排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1计数排序的介绍\"></a> （1）计数排序的介绍</h4>\n<p>​\t\t计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。<br />\n​\t\t计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。</p>\n<h4 id=\"2计数排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2计数排序的原理\"></a> （2）计数排序的原理</h4>\n<p>​\t\t1、找出待排序的数组中最大和最小的元素；<br />\n​\t\t2、统计数组中每个值为i的元素出现的次数，存入数组C的第i项；<br />\n​\t\t3、对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；<br />\n​\t\t4、反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</p>\n<h4 id=\"3动态图演示-6\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-6\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181104_130.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-7\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-7\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 计数排序</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] CountingSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (array.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">       <span class=\"type\">int</span> bias, min = array[<span class=\"number\">0</span>], max = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (array[i] &gt; max)</span><br><span class=\"line\">               max = array[i];</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (array[i] &lt; min)</span><br><span class=\"line\">               min = array[i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       bias = <span class=\"number\">0</span> - min;</span><br><span class=\"line\">       <span class=\"type\">int</span>[] bucket = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max - min + <span class=\"number\">1</span>];</span><br><span class=\"line\">       Arrays.fill(bucket, <span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">           bucket[array[i] + bias]++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (index &lt; array.length) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (bucket[i] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               array[index] = i - bias;</span><br><span class=\"line\">               bucket[i]--;</span><br><span class=\"line\">               index++;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">               i++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript实现</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">findMinMax</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> minMax = [arr[<span class=\"number\">0</span>], arr[<span class=\"number\">0</span>]]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minMax[<span class=\"number\">0</span>] &gt; arr[i]) minMax[<span class=\"number\">0</span>] = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minMax[<span class=\"number\">1</span>] &lt; arr[i]) minMax[<span class=\"number\">1</span>] = arr[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> minMax</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [min, max] = <span class=\"variable language_\">this</span>.<span class=\"title function_\">findMinMax</span>(arr)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countArr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(max - min + <span class=\"number\">1</span>)</span><br><span class=\"line\">  arr.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    countArr[value - min] ? countArr[value - min] += <span class=\"number\">1</span> : countArr[value - min] = <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  arr = []</span><br><span class=\"line\">  countArr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (value &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      arr.<span class=\"title function_\">push</span>(min + index)</span><br><span class=\"line\">      value--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-桶排序\"><a class=\"markdownIt-Anchor\" href=\"#10-桶排序\"></a> 10、桶排序</h3>\n<h4 id=\"1桶排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1桶排序的介绍\"></a> （1）桶排序的介绍</h4>\n<p>​\t\t桶排序 (Bucket sort)或所谓的箱排序，是一个排序算法，工作的原理是将数组分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）。桶排序是鸽巢排序的一种归纳结果。但桶排序并不是 比较排序，他不受到 O(n log n) 下限的影响。</p>\n<h4 id=\"2桶排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2桶排序的原理\"></a> （2）桶排序的原理</h4>\n<p>​\t\t1、设置一个定量的数组当作空桶；\t<br />\n​\t\t2、遍历输入数据，并且把数据一个一个放到对应的桶里去；<br />\n​\t\t3、对每个不是空的桶进行排序；<br />\n​\t\t4、从不是空的桶里把排好序的数据拼接起来。</p>\n<h4 id=\"3动态图演示-7\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-7\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181104_316.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-8\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-8\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 桶排序</span></span><br><span class=\"line\"><span class=\"comment\">    * </span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bucketSize</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">BucketSort</span><span class=\"params\">(ArrayList&lt;Integer&gt; array, <span class=\"type\">int</span> bucketSize)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span> || array.size() &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> array.get(<span class=\"number\">0</span>), min = array.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"comment\">// 找到最大值最小值</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (array.get(i) &gt; max)</span><br><span class=\"line\">               max = array.get(i);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (array.get(i) &lt; min)</span><br><span class=\"line\">               min = array.get(i);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">bucketCount</span> <span class=\"operator\">=</span> (max - min) / bucketSize + <span class=\"number\">1</span>;</span><br><span class=\"line\">       ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(bucketCount);</span><br><span class=\"line\">       ArrayList&lt;Integer&gt; resultArr = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class=\"line\">           bucketArr.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class=\"line\">           bucketArr.get((array.get(i) - min) / bucketSize).add(array.get(i));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (bucketSize == <span class=\"number\">1</span>) &#123; </span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; bucketArr.get(i).size(); j++)</span><br><span class=\"line\">                   resultArr.add(bucketArr.get(i).get(j));</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (bucketCount == <span class=\"number\">1</span>)</span><br><span class=\"line\">                   bucketSize--;</span><br><span class=\"line\">               ArrayList&lt;Integer&gt; temp = BucketSort(bucketArr.get(i), bucketSize);</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; temp.size(); j++)</span><br><span class=\"line\">                   resultArr.add(temp.get(j));</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> resultArr;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-基数排序\"><a class=\"markdownIt-Anchor\" href=\"#11-基数排序\"></a> 11、基数排序</h3>\n<h4 id=\"1基数排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1基数排序的介绍\"></a> （1）基数排序的介绍</h4>\n<p>​\t\t基数排序也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为O(kn),为数组长度，k为数组中的数的最大的位数；<br />\n​\t\t基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的</p>\n<h4 id=\"2基数排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2基数排序的原理\"></a> （2）基数排序的原理</h4>\n<p>​\t\t1、取得数组中的最大数，并取得位数；<br />\n​\t\t2、arr为原始数组，从最低位开始取每个位组成radix数组；<br />\n​\t\t3、对radix进行计数排序（利用计数排序适用于小范围数的特点）；</p>\n<h4 id=\"3动态图演示-8\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-8\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181104_775.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-9\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-9\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 基数排序</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] RadixSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (array == <span class=\"literal\">null</span> || array.length &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">       <span class=\"comment\">// 1.先算出最大数的位数；</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">           max = Math.max(max, array[i]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">maxDigit</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (max != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           max /= <span class=\"number\">10</span>;</span><br><span class=\"line\">           maxDigit++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">mod</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>, div = <span class=\"number\">1</span>;</span><br><span class=\"line\">       ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">           bucketList.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;());</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; maxDigit; i++, mod *= <span class=\"number\">10</span>, div *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; array.length; j++) &#123;</span><br><span class=\"line\">               <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> (array[j] % mod) / div;</span><br><span class=\"line\">               bucketList.get(num).add(array[j]);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; bucketList.size(); j++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; bucketList.get(j).size(); k++)</span><br><span class=\"line\">                   array[index++] = bucketList.get(j).get(k);</span><br><span class=\"line\">               bucketList.get(j).clear();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript实现</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">method</span>(<span class=\"attr\">arr</span>: <span class=\"built_in\">number</span>[]): <span class=\"built_in\">number</span>[] &#123;</span><br><span class=\"line\">  <span class=\"comment\">//定义10个装数的桶</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> bucket = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    bucket[i] = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 取出个位数做 放入桶中</span></span><br><span class=\"line\">  arr = arr.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; bucket[value % <span class=\"number\">10</span>].<span class=\"title function_\">push</span>(value) &#125;)</span><br><span class=\"line\">  bucket.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (value.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      arr.<span class=\"title function_\">push</span>(value.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 取出 10位数 放桶中</span></span><br><span class=\"line\">  arr = arr.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; bucket[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((value / <span class=\"number\">10</span>)) % <span class=\"number\">10</span>].<span class=\"title function_\">push</span>(value) &#125;)</span><br><span class=\"line\">  bucket.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (value.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      arr.<span class=\"title function_\">push</span>(value.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 取出百位数 放入桶中</span></span><br><span class=\"line\">  arr = arr.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123; bucket[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((value / <span class=\"number\">100</span>)) % <span class=\"number\">10</span>].<span class=\"title function_\">push</span>(value) &#125;)</span><br><span class=\"line\">  bucket.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (value.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      arr.<span class=\"title function_\">push</span>(value.<span class=\"title function_\">shift</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-堆排序\"><a class=\"markdownIt-Anchor\" href=\"#12-堆排序\"></a> 12、堆排序</h3>\n<h4 id=\"1堆排序的介绍\"><a class=\"markdownIt-Anchor\" href=\"#1堆排序的介绍\"></a> （1）堆排序的介绍</h4>\n<p>​\t\t堆排序（英语：Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>\n<h4 id=\"2堆排序的原理\"><a class=\"markdownIt-Anchor\" href=\"#2堆排序的原理\"></a> （2）堆排序的原理</h4>\n<p>​\t\t1、将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；<br />\n​\t\t2、将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；<br />\n​\t\t3、由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</p>\n<h4 id=\"3动态图演示-9\"><a class=\"markdownIt-Anchor\" href=\"#3动态图演示-9\"></a> （3）动态图演示</h4>\n<p><img src=\"http://blogimage.lemonlife.top/201909181105_568.jpg?/\" alt=\"\" /></p>\n<h4 id=\"4代码演示-10\"><a class=\"markdownIt-Anchor\" href=\"#4代码演示-10\"></a> （4）代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明全局变量，用于记录数组array的长度；</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> len;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 堆排序算法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] HeapSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">        len = array.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">        <span class=\"comment\">//1.构建一个最大堆</span></span><br><span class=\"line\">        buildMaxHeap(array);</span><br><span class=\"line\">        <span class=\"comment\">//2.循环将堆首位（最大值）与末位交换，然后在重新调整最大堆</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (len &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            swap(array, <span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</span><br><span class=\"line\">            len--;</span><br><span class=\"line\">            adjustHeap(array, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 建立最大堆</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildMaxHeap</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//从最后一个非叶子节点开始向上构造最大堆</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (len/<span class=\"number\">2</span> - <span class=\"number\">1</span>); i &gt;= <span class=\"number\">0</span>; i--) &#123; </span><br><span class=\"line\">            adjustHeap(array, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调整使之成为最大堆</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">adjustHeap</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxIndex</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">        <span class=\"comment\">//如果有左子树，且左子树大于父节点，则将最大指针指向左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i * <span class=\"number\">2</span> &lt; len &amp;&amp; array[i * <span class=\"number\">2</span>] &gt; array[maxIndex])</span><br><span class=\"line\">            maxIndex = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果有右子树，且右子树大于父节点，则将最大指针指向右子树</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i * <span class=\"number\">2</span> + <span class=\"number\">1</span> &lt; len &amp;&amp; array[i * <span class=\"number\">2</span> + <span class=\"number\">1</span>] &gt; array[maxIndex])</span><br><span class=\"line\">            maxIndex = i * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxIndex != i) &#123;</span><br><span class=\"line\">            swap(array, maxIndex, i);</span><br><span class=\"line\">            adjustHeap(array, maxIndex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaScript 实现基本堆排序</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HeapSort</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义一个变量存放二叉搜索树</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pTree = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> <span class=\"comment\">// 存一下指针</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pTree != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 开始执行插入的流程</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pTree.<span class=\"property\">val</span> &gt;= val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pTree.<span class=\"property\">left</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          pTree.<span class=\"property\">left</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pTree = pTree.<span class=\"property\">left</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pTree.<span class=\"property\">right</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          pTree.<span class=\"property\">right</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val)</span><br><span class=\"line\">          <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pTree = pTree.<span class=\"property\">right</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inOrder</span>(<span class=\"params\">tree</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">inOrder</span>(tree.<span class=\"property\">left</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tree.<span class=\"property\">val</span>)</span><br><span class=\"line\">  <span class=\"title function_\">inOrder</span>(tree.<span class=\"property\">right</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> heapSort = <span class=\"keyword\">new</span> <span class=\"title class_\">HeapSort</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> testArray = [<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">testArray.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> heapSort.<span class=\"title function_\">insert</span>(value))</span><br><span class=\"line\"><span class=\"title function_\">inOrder</span>(heapSort.<span class=\"property\">tree</span>) <span class=\"comment\">// 1 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"最后总结\"><a class=\"markdownIt-Anchor\" href=\"#最后总结\"></a> 最后总结</h3>\n<p>不同的排序算法有不同的应用场景,一般情况下如果数据都是正数，可以考虑采用基数排序，计数排序，桶排序之类的排序算法。其中计数排序算是最耗费空间的了，也是拿空间换时间最明显的那个😁</p>\n<blockquote>\n<p>博客中中JavaScript部分是我自己写的,Java和文字引用于马老师,<em>马士兵教育公开课</em>。</p>\n</blockquote>\n"},{"title":"树","date":"2020-02-02T04:14:38.000Z","_content":"## 树(Tree)\n### 基本概念\n- 介绍\n  > 树(Tree)是基础数据结构的一种, 树中的每一个元素称作节点,节点与节点之间有兄弟节点,父子节点这两种。兄弟节点之间不直接相连。我们把没有子节点的节点叫做叶子节点。\n- 节点的高度\n  > 节点到叶子节点最长的路径(边数)\n- 节点的深度\n  >节点到根节点所经历的边的个数\n- 节点的层数\n  > `节点的深度+1` 因为根节点的层数是1。\n- 树的高度\n  > 根节点的高度,或者其他节点的节点高度和节点深度之和。\n\n  ![来源：极客时间-数据结构之美专题](http://blogimage.lemonlife.top/202002021232_96.png?/)\n\n### 二叉树(Binary Tree)\n- 介绍\n  > 树的每个节点最多含有两个子节点。分别是左节点和右节点，并不要求每个节点都含有左右节点，有的节点只有左节点，有的节点只有右节\n\n  ![来源：极客时间-数据结构算法之美](http://blogimage.lemonlife.top/202002021248_678.png?/)\n- 满二叉树\n  > 叶子节点都在树的最底层;且除了叶子节点外,其他节点都有左右两个子节点。\n\n  ![来源：极客时间-数据结构算法之美](http://blogimage.lemonlife.top/202002021249_40.png?/)\n- 完全二叉树\n   > 叶子节点在最后两层，最后一层的叶子节点都靠左并且除了最后一层其他层构成满二叉树。\n   ![来源：极客时间-数据结构算法之美](http://blogimage.lemonlife.top/202002021252_81.png?/)\n#### 二叉树的储存\n    树作为一种基础的数据结构,存储方式有直观的 链式储存 和用 数组存储 两种。\n    1. 链式存储法,每个节点有三个字段,其中一个储存数据,另外两个分别指向左右两个节点。\n    2. 数组的顺序存储法,是把跟节点存在下标 i=1 的位置(i=0暂时为空)。把i节点左节点存在2*i的位置,右节点存在2*i+1的位置。这一存储方式比较适合满二叉树和完全二叉树。用于其他类型的容易造成空间的浪费。\n\n  ![链式存储法](http://blogimage.lemonlife.top/202002031112_287.png?/)\n  ![数组的顺序存储法](http://blogimage.lemonlife.top/202002031118_599.png?/)\n#### 二叉树遍历\n- 前序遍历\n  > 对于某个节点先遍历这个节点,再遍历左节点，最后遍历右节点。\n- 中序遍历\n  > 先遍历左节点再遍历这个节点本身，最后遍历有节点\n- 后序遍历\n  > 先遍历左节点再遍历右节点,最后遍历这个节点本身。\n\n  ![来源：极客时间-数据结构算法之美](http://blogimage.lemonlife.top/202002021348_774.png?/)\n \n **递归模式遍历**\n\n  前序遍历的递推公式：\n  ```Java\n  void preOrder(Node* root) { \n    if (root == null) return;\n     print root // 此处为伪代码，表示打印 root 节点 \n     preOrder(root->left); \n     preOrder(root->right);  \n  }\n  ```\n  中序遍历的递推公式：\n  ```Java\n  void inOrder(Node* root) { \n    if (root == null) return; \n    inOrder(root->left);\n    print root // 此处为伪代码，表示打印 root 节点 \n    inOrder(root->right);\n  }\n  ```\n  后序遍历的递推公式：\n  ```Java\n  void postOrder(Node* root) { \n    if (root == null) return; \n    postOrder(root->left); \n    postOrder(root->right); \n    print root // 此处为伪代码，表示打印 root 节点\n  }\n  ```\n\n  **迭代模式遍历**\n  ```\n  ```\n### 二叉查找树(Binary Search Tree)\n  >二叉查找树要求,在树的任意一个节点,在其左节点的值都要小于该节点的值,在其右节点的值都要大于该节点的值,因此二叉查找树实现快速查找,并且还支持数据的快速插入或删除。\n  - 查找过程\n     \n    先和根节点比较,如果要查找的值小于根节点则在左子树中查找,否则在右子树中查找依此类推。\n    ```Java\n    public class SearchTree {\n      public static class Node{\n          private int data;\n          private Node left;\n          private Node right;\n          public Node(int data){\n              this.data = data;\n          }\n      }\n      private Node tree;\n      public Node find(int data){\n          Node t = tree;\n          while (t!=null){\n              if(data<t.data){\n                  t=t.left;\n              } else if(data>t.data) {\n                  t=t.right;\n              } else {\n                return t;\n              }\n          }\n          return null;\n      }\n    }\n    ```\n    ![二叉查找树查找过程](http://blogimage.lemonlife.top/202002021921_337.png?/)\n  - 插入过程\n    > 二叉查找树新插入的数据一般在叶子节点上,从根节点开始,如果要插入的数比节点数据小并且节点左子树为空，则将新插入的数据放到该节点左子节点的位置。如果左子树不为空依次递归遍历左子树。同样如果要插入的数据大于节点数据。对节点的右子树同样操作即可。\n    ```Java\n    public void insert(int data,Node tree){\n    Node indexNode = tree;\n    while(indexNode != null){\n        if(data >= indexNode.data){\n            if(indexNode.right == null){\n                indexNode.right = new Node(data);\n                return;\n            }\n            indexNode = indexNode.right;\n        } else if(data<indexNode.data) {\n            if(indexNode.left == null){\n                indexNode.left == new Node(data);\n                return;\n            }\n            indexNode = indexNode.left;\n         }\n      }\n    }\n    ```\n      ![插入](http://blogimage.lemonlife.top/202002021953_674.png?/)\n\n  - 删除过程\n   > 二叉查找树删除过程相对于查找和插入来说比较麻烦。有三种情况\n     ![](http://blogimage.lemonlife.top/202002022219_211.png?/)\n     1. 如果要删除节点没有子节点我们只需要直接将父节点中指向该节点的指针指向`null`即可。比如删除图中节点55。<br/>\n     2. 如果要删除的节点有一个节点(一个左节点或者一个右节点)，只需要将父节点的指针指向要删除节点的子节点即可。比如删除图中节点13<br/>\n     3. 如果要删除的节点含有两个子节点。我们找到该节点的右子树中最小的节点。把他替换到要删除的节点上。比如删除图中节点18\n    \n  ```Java\n    ///这部分感觉教程上代码有问题 先欠着以后补上。\n  ```\n#### 二叉查找树时间复杂度分析\n  >二叉查找树执行查找的效率和数的高度成正比O(height),因此树的形状(树的左右平衡程度有关)会影响查询时间。<br/>\n    1. 最坏的程度一棵树可以退化成链表查,一个含有n个节点的树,树的高度就是n。找时间复杂度为 `O(n)` <br/>\n    2. 当二叉树的平衡情况最好时(满二叉树或者平衡二叉树)。一个含有n个节点的树高度为 $log_2n$<br/>\n    n=$2^0+2^1+2^2+\\cdots+2^{L-1}=2^L-1$ (L代表树的高度)</br>\n   查找的时间复杂度为O($log_2n$)\n   \n  ![二叉查找树的情况](http://blogimage.lemonlife.top/202002031131_882.png?/)  \n\n>文章中图片和部分文字代码片段来源 `极客时间-数据结构与算法之美`","source":"_posts/tree.md","raw":"---\ntitle: 树\ndate: 2020-02-02 12:14:38\ntags:\n  - 算法与数据结构\n  - 树\n---\n## 树(Tree)\n### 基本概念\n- 介绍\n  > 树(Tree)是基础数据结构的一种, 树中的每一个元素称作节点,节点与节点之间有兄弟节点,父子节点这两种。兄弟节点之间不直接相连。我们把没有子节点的节点叫做叶子节点。\n- 节点的高度\n  > 节点到叶子节点最长的路径(边数)\n- 节点的深度\n  >节点到根节点所经历的边的个数\n- 节点的层数\n  > `节点的深度+1` 因为根节点的层数是1。\n- 树的高度\n  > 根节点的高度,或者其他节点的节点高度和节点深度之和。\n\n  ![来源：极客时间-数据结构之美专题](http://blogimage.lemonlife.top/202002021232_96.png?/)\n\n### 二叉树(Binary Tree)\n- 介绍\n  > 树的每个节点最多含有两个子节点。分别是左节点和右节点，并不要求每个节点都含有左右节点，有的节点只有左节点，有的节点只有右节\n\n  ![来源：极客时间-数据结构算法之美](http://blogimage.lemonlife.top/202002021248_678.png?/)\n- 满二叉树\n  > 叶子节点都在树的最底层;且除了叶子节点外,其他节点都有左右两个子节点。\n\n  ![来源：极客时间-数据结构算法之美](http://blogimage.lemonlife.top/202002021249_40.png?/)\n- 完全二叉树\n   > 叶子节点在最后两层，最后一层的叶子节点都靠左并且除了最后一层其他层构成满二叉树。\n   ![来源：极客时间-数据结构算法之美](http://blogimage.lemonlife.top/202002021252_81.png?/)\n#### 二叉树的储存\n    树作为一种基础的数据结构,存储方式有直观的 链式储存 和用 数组存储 两种。\n    1. 链式存储法,每个节点有三个字段,其中一个储存数据,另外两个分别指向左右两个节点。\n    2. 数组的顺序存储法,是把跟节点存在下标 i=1 的位置(i=0暂时为空)。把i节点左节点存在2*i的位置,右节点存在2*i+1的位置。这一存储方式比较适合满二叉树和完全二叉树。用于其他类型的容易造成空间的浪费。\n\n  ![链式存储法](http://blogimage.lemonlife.top/202002031112_287.png?/)\n  ![数组的顺序存储法](http://blogimage.lemonlife.top/202002031118_599.png?/)\n#### 二叉树遍历\n- 前序遍历\n  > 对于某个节点先遍历这个节点,再遍历左节点，最后遍历右节点。\n- 中序遍历\n  > 先遍历左节点再遍历这个节点本身，最后遍历有节点\n- 后序遍历\n  > 先遍历左节点再遍历右节点,最后遍历这个节点本身。\n\n  ![来源：极客时间-数据结构算法之美](http://blogimage.lemonlife.top/202002021348_774.png?/)\n \n **递归模式遍历**\n\n  前序遍历的递推公式：\n  ```Java\n  void preOrder(Node* root) { \n    if (root == null) return;\n     print root // 此处为伪代码，表示打印 root 节点 \n     preOrder(root->left); \n     preOrder(root->right);  \n  }\n  ```\n  中序遍历的递推公式：\n  ```Java\n  void inOrder(Node* root) { \n    if (root == null) return; \n    inOrder(root->left);\n    print root // 此处为伪代码，表示打印 root 节点 \n    inOrder(root->right);\n  }\n  ```\n  后序遍历的递推公式：\n  ```Java\n  void postOrder(Node* root) { \n    if (root == null) return; \n    postOrder(root->left); \n    postOrder(root->right); \n    print root // 此处为伪代码，表示打印 root 节点\n  }\n  ```\n\n  **迭代模式遍历**\n  ```\n  ```\n### 二叉查找树(Binary Search Tree)\n  >二叉查找树要求,在树的任意一个节点,在其左节点的值都要小于该节点的值,在其右节点的值都要大于该节点的值,因此二叉查找树实现快速查找,并且还支持数据的快速插入或删除。\n  - 查找过程\n     \n    先和根节点比较,如果要查找的值小于根节点则在左子树中查找,否则在右子树中查找依此类推。\n    ```Java\n    public class SearchTree {\n      public static class Node{\n          private int data;\n          private Node left;\n          private Node right;\n          public Node(int data){\n              this.data = data;\n          }\n      }\n      private Node tree;\n      public Node find(int data){\n          Node t = tree;\n          while (t!=null){\n              if(data<t.data){\n                  t=t.left;\n              } else if(data>t.data) {\n                  t=t.right;\n              } else {\n                return t;\n              }\n          }\n          return null;\n      }\n    }\n    ```\n    ![二叉查找树查找过程](http://blogimage.lemonlife.top/202002021921_337.png?/)\n  - 插入过程\n    > 二叉查找树新插入的数据一般在叶子节点上,从根节点开始,如果要插入的数比节点数据小并且节点左子树为空，则将新插入的数据放到该节点左子节点的位置。如果左子树不为空依次递归遍历左子树。同样如果要插入的数据大于节点数据。对节点的右子树同样操作即可。\n    ```Java\n    public void insert(int data,Node tree){\n    Node indexNode = tree;\n    while(indexNode != null){\n        if(data >= indexNode.data){\n            if(indexNode.right == null){\n                indexNode.right = new Node(data);\n                return;\n            }\n            indexNode = indexNode.right;\n        } else if(data<indexNode.data) {\n            if(indexNode.left == null){\n                indexNode.left == new Node(data);\n                return;\n            }\n            indexNode = indexNode.left;\n         }\n      }\n    }\n    ```\n      ![插入](http://blogimage.lemonlife.top/202002021953_674.png?/)\n\n  - 删除过程\n   > 二叉查找树删除过程相对于查找和插入来说比较麻烦。有三种情况\n     ![](http://blogimage.lemonlife.top/202002022219_211.png?/)\n     1. 如果要删除节点没有子节点我们只需要直接将父节点中指向该节点的指针指向`null`即可。比如删除图中节点55。<br/>\n     2. 如果要删除的节点有一个节点(一个左节点或者一个右节点)，只需要将父节点的指针指向要删除节点的子节点即可。比如删除图中节点13<br/>\n     3. 如果要删除的节点含有两个子节点。我们找到该节点的右子树中最小的节点。把他替换到要删除的节点上。比如删除图中节点18\n    \n  ```Java\n    ///这部分感觉教程上代码有问题 先欠着以后补上。\n  ```\n#### 二叉查找树时间复杂度分析\n  >二叉查找树执行查找的效率和数的高度成正比O(height),因此树的形状(树的左右平衡程度有关)会影响查询时间。<br/>\n    1. 最坏的程度一棵树可以退化成链表查,一个含有n个节点的树,树的高度就是n。找时间复杂度为 `O(n)` <br/>\n    2. 当二叉树的平衡情况最好时(满二叉树或者平衡二叉树)。一个含有n个节点的树高度为 $log_2n$<br/>\n    n=$2^0+2^1+2^2+\\cdots+2^{L-1}=2^L-1$ (L代表树的高度)</br>\n   查找的时间复杂度为O($log_2n$)\n   \n  ![二叉查找树的情况](http://blogimage.lemonlife.top/202002031131_882.png?/)  \n\n>文章中图片和部分文字代码片段来源 `极客时间-数据结构与算法之美`","slug":"tree","published":1,"updated":"2021-08-07T01:59:03.348Z","_id":"cl4ince6y0023cguf5kzjcdbg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"树tree\"><a class=\"markdownIt-Anchor\" href=\"#树tree\"></a> 树(Tree)</h2>\n<h3 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\"></a> 基本概念</h3>\n<ul>\n<li>\n<p>介绍</p>\n<blockquote>\n<p>树(Tree)是基础数据结构的一种, 树中的每一个元素称作节点,节点与节点之间有兄弟节点,父子节点这两种。兄弟节点之间不直接相连。我们把没有子节点的节点叫做叶子节点。</p>\n</blockquote>\n</li>\n<li>\n<p>节点的高度</p>\n<blockquote>\n<p>节点到叶子节点最长的路径(边数)</p>\n</blockquote>\n</li>\n<li>\n<p>节点的深度</p>\n<blockquote>\n<p>节点到根节点所经历的边的个数</p>\n</blockquote>\n</li>\n<li>\n<p>节点的层数</p>\n<blockquote>\n<p><code>节点的深度+1</code> 因为根节点的层数是1。</p>\n</blockquote>\n</li>\n<li>\n<p>树的高度</p>\n<blockquote>\n<p>根节点的高度,或者其他节点的节点高度和节点深度之和。</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202002021232_96.png?/\" alt=\"来源：极客时间-数据结构之美专题\" /></p>\n</li>\n</ul>\n<h3 id=\"二叉树binary-tree\"><a class=\"markdownIt-Anchor\" href=\"#二叉树binary-tree\"></a> 二叉树(Binary Tree)</h3>\n<ul>\n<li>\n<p>介绍</p>\n<blockquote>\n<p>树的每个节点最多含有两个子节点。分别是左节点和右节点，并不要求每个节点都含有左右节点，有的节点只有左节点，有的节点只有右节</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202002021248_678.png?/\" alt=\"来源：极客时间-数据结构算法之美\" /></p>\n</li>\n<li>\n<p>满二叉树</p>\n<blockquote>\n<p>叶子节点都在树的最底层;且除了叶子节点外,其他节点都有左右两个子节点。</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202002021249_40.png?/\" alt=\"来源：极客时间-数据结构算法之美\" /></p>\n</li>\n<li>\n<p>完全二叉树</p>\n<blockquote>\n<p>叶子节点在最后两层，最后一层的叶子节点都靠左并且除了最后一层其他层构成满二叉树。<br />\n<img src=\"http://blogimage.lemonlife.top/202002021252_81.png?/\" alt=\"来源：极客时间-数据结构算法之美\" /></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"二叉树的储存\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的储存\"></a> 二叉树的储存</h4>\n<pre><code>树作为一种基础的数据结构,存储方式有直观的 链式储存 和用 数组存储 两种。\n1. 链式存储法,每个节点有三个字段,其中一个储存数据,另外两个分别指向左右两个节点。\n2. 数组的顺序存储法,是把跟节点存在下标 i=1 的位置(i=0暂时为空)。把i节点左节点存在2*i的位置,右节点存在2*i+1的位置。这一存储方式比较适合满二叉树和完全二叉树。用于其他类型的容易造成空间的浪费。\n</code></pre>\n<p><img src=\"http://blogimage.lemonlife.top/202002031112_287.png?/\" alt=\"链式存储法\" /><br />\n<img src=\"http://blogimage.lemonlife.top/202002031118_599.png?/\" alt=\"数组的顺序存储法\" /></p>\n<h4 id=\"二叉树遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树遍历\"></a> 二叉树遍历</h4>\n<ul>\n<li>\n<p>前序遍历</p>\n<blockquote>\n<p>对于某个节点先遍历这个节点,再遍历左节点，最后遍历右节点。</p>\n</blockquote>\n</li>\n<li>\n<p>中序遍历</p>\n<blockquote>\n<p>先遍历左节点再遍历这个节点本身，最后遍历有节点</p>\n</blockquote>\n</li>\n<li>\n<p>后序遍历</p>\n<blockquote>\n<p>先遍历左节点再遍历右节点,最后遍历这个节点本身。</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202002021348_774.png?/\" alt=\"来源：极客时间-数据结构算法之美\" /></p>\n</li>\n</ul>\n<p><strong>递归模式遍历</strong></p>\n<p>前序遍历的递推公式：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">preOrder</span><span class=\"params\">(Node* root)</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   print root <span class=\"comment\">// 此处为伪代码，表示打印 root 节点 </span></span><br><span class=\"line\">   preOrder(root-&gt;left); </span><br><span class=\"line\">   preOrder(root-&gt;right);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>中序遍历的递推公式：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(Node* root)</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  inOrder(root-&gt;left);</span><br><span class=\"line\">  print root <span class=\"comment\">// 此处为伪代码，表示打印 root 节点 </span></span><br><span class=\"line\">  inOrder(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后序遍历的递推公式：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">postOrder</span><span class=\"params\">(Node* root)</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  postOrder(root-&gt;left); </span><br><span class=\"line\">  postOrder(root-&gt;right); </span><br><span class=\"line\">  print root <span class=\"comment\">// 此处为伪代码，表示打印 root 节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>迭代模式遍历</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ```</span><br><span class=\"line\">### 二叉查找树(Binary Search Tree)</span><br><span class=\"line\">  &gt;二叉查找树要求,在树的任意一个节点,在其左节点的值都要小于该节点的值,在其右节点的值都要大于该节点的值,因此二叉查找树实现快速查找,并且还支持数据的快速插入或删除。</span><br><span class=\"line\">  - 查找过程</span><br><span class=\"line\">     </span><br><span class=\"line\">    先和根节点比较,如果要查找的值小于根节点则在左子树中查找,否则在右子树中查找依此类推。</span><br><span class=\"line\">    ```Java</span><br><span class=\"line\">    public class SearchTree &#123;</span><br><span class=\"line\">      public static class Node&#123;</span><br><span class=\"line\">          private int data;</span><br><span class=\"line\">          private Node left;</span><br><span class=\"line\">          private Node right;</span><br><span class=\"line\">          public Node(int data)&#123;</span><br><span class=\"line\">              this.data = data;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      private Node tree;</span><br><span class=\"line\">      public Node find(int data)&#123;</span><br><span class=\"line\">          Node t = tree;</span><br><span class=\"line\">          while (t!=null)&#123;</span><br><span class=\"line\">              if(data&lt;t.data)&#123;</span><br><span class=\"line\">                  t=t.left;</span><br><span class=\"line\">              &#125; else if(data&gt;t.data) &#123;</span><br><span class=\"line\">                  t=t.right;</span><br><span class=\"line\">              &#125; else &#123;</span><br><span class=\"line\">                return t;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return null;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<pre><code>![二叉查找树查找过程](http://blogimage.lemonlife.top/202002021921_337.png?/)\n</code></pre>\n<ul>\n<li>\n<p>插入过程</p>\n<blockquote>\n<p>二叉查找树新插入的数据一般在叶子节点上,从根节点开始,如果要插入的数比节点数据小并且节点左子树为空，则将新插入的数据放到该节点左子节点的位置。如果左子树不为空依次递归遍历左子树。同样如果要插入的数据大于节点数据。对节点的右子树同样操作即可。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> data,Node tree)</span>&#123;</span><br><span class=\"line\"><span class=\"type\">Node</span> <span class=\"variable\">indexNode</span> <span class=\"operator\">=</span> tree;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(indexNode != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(data &gt;= indexNode.data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(indexNode.right == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            indexNode.right = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        indexNode = indexNode.right;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(data&lt;indexNode.data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(indexNode.left == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            indexNode.left == <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        indexNode = indexNode.left;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/202002021953_674.png?/\" alt=\"插入\" /></p>\n</li>\n<li>\n<p>删除过程</p>\n</li>\n</ul>\n<blockquote>\n<p>二叉查找树删除过程相对于查找和插入来说比较麻烦。有三种情况<br />\n<img src=\"http://blogimage.lemonlife.top/202002022219_211.png?/\" alt=\"\" /><br />\n1. 如果要删除节点没有子节点我们只需要直接将父节点中指向该节点的指针指向<code>null</code>即可。比如删除图中节点55。<br/><br />\n2. 如果要删除的节点有一个节点(一个左节点或者一个右节点)，只需要将父节点的指针指向要删除节点的子节点即可。比如删除图中节点13<br/><br />\n3. 如果要删除的节点含有两个子节点。我们找到该节点的右子树中最小的节点。把他替换到要删除的节点上。比如删除图中节点18</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///这部分感觉教程上代码有问题 先欠着以后补上。</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"二叉查找树时间复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#二叉查找树时间复杂度分析\"></a> 二叉查找树时间复杂度分析</h4>\n<blockquote>\n<p>二叉查找树执行查找的效率和数的高度成正比O(height),因此树的形状(树的左右平衡程度有关)会影响查询时间。<br/><br />\n1. 最坏的程度一棵树可以退化成链表查,一个含有n个节点的树,树的高度就是n。找时间复杂度为 <code>O(n)</code> <br/><br />\n2. 当二叉树的平衡情况最好时(满二叉树或者平衡二叉树)。一个含有n个节点的树高度为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">log_2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span></span></span></span><br/><br />\nn=<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mn>2</mn><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mn>2</mn><mi>L</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^0+2^1+2^2+\\cdots+2^{L-1}=2^L-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">L</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.924661em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">L</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (L代表树的高度)</br><br />\n查找的时间复杂度为O(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">log_2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span></span></span></span>)</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202002031131_882.png?/\" alt=\"二叉查找树的情况\" /></p>\n<blockquote>\n<p>文章中图片和部分文字代码片段来源 <code>极客时间-数据结构与算法之美</code></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"树tree\"><a class=\"markdownIt-Anchor\" href=\"#树tree\"></a> 树(Tree)</h2>\n<h3 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\"></a> 基本概念</h3>\n<ul>\n<li>\n<p>介绍</p>\n<blockquote>\n<p>树(Tree)是基础数据结构的一种, 树中的每一个元素称作节点,节点与节点之间有兄弟节点,父子节点这两种。兄弟节点之间不直接相连。我们把没有子节点的节点叫做叶子节点。</p>\n</blockquote>\n</li>\n<li>\n<p>节点的高度</p>\n<blockquote>\n<p>节点到叶子节点最长的路径(边数)</p>\n</blockquote>\n</li>\n<li>\n<p>节点的深度</p>\n<blockquote>\n<p>节点到根节点所经历的边的个数</p>\n</blockquote>\n</li>\n<li>\n<p>节点的层数</p>\n<blockquote>\n<p><code>节点的深度+1</code> 因为根节点的层数是1。</p>\n</blockquote>\n</li>\n<li>\n<p>树的高度</p>\n<blockquote>\n<p>根节点的高度,或者其他节点的节点高度和节点深度之和。</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202002021232_96.png?/\" alt=\"来源：极客时间-数据结构之美专题\" /></p>\n</li>\n</ul>\n<h3 id=\"二叉树binary-tree\"><a class=\"markdownIt-Anchor\" href=\"#二叉树binary-tree\"></a> 二叉树(Binary Tree)</h3>\n<ul>\n<li>\n<p>介绍</p>\n<blockquote>\n<p>树的每个节点最多含有两个子节点。分别是左节点和右节点，并不要求每个节点都含有左右节点，有的节点只有左节点，有的节点只有右节</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202002021248_678.png?/\" alt=\"来源：极客时间-数据结构算法之美\" /></p>\n</li>\n<li>\n<p>满二叉树</p>\n<blockquote>\n<p>叶子节点都在树的最底层;且除了叶子节点外,其他节点都有左右两个子节点。</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202002021249_40.png?/\" alt=\"来源：极客时间-数据结构算法之美\" /></p>\n</li>\n<li>\n<p>完全二叉树</p>\n<blockquote>\n<p>叶子节点在最后两层，最后一层的叶子节点都靠左并且除了最后一层其他层构成满二叉树。<br />\n<img src=\"http://blogimage.lemonlife.top/202002021252_81.png?/\" alt=\"来源：极客时间-数据结构算法之美\" /></p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"二叉树的储存\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的储存\"></a> 二叉树的储存</h4>\n<pre><code>树作为一种基础的数据结构,存储方式有直观的 链式储存 和用 数组存储 两种。\n1. 链式存储法,每个节点有三个字段,其中一个储存数据,另外两个分别指向左右两个节点。\n2. 数组的顺序存储法,是把跟节点存在下标 i=1 的位置(i=0暂时为空)。把i节点左节点存在2*i的位置,右节点存在2*i+1的位置。这一存储方式比较适合满二叉树和完全二叉树。用于其他类型的容易造成空间的浪费。\n</code></pre>\n<p><img src=\"http://blogimage.lemonlife.top/202002031112_287.png?/\" alt=\"链式存储法\" /><br />\n<img src=\"http://blogimage.lemonlife.top/202002031118_599.png?/\" alt=\"数组的顺序存储法\" /></p>\n<h4 id=\"二叉树遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树遍历\"></a> 二叉树遍历</h4>\n<ul>\n<li>\n<p>前序遍历</p>\n<blockquote>\n<p>对于某个节点先遍历这个节点,再遍历左节点，最后遍历右节点。</p>\n</blockquote>\n</li>\n<li>\n<p>中序遍历</p>\n<blockquote>\n<p>先遍历左节点再遍历这个节点本身，最后遍历有节点</p>\n</blockquote>\n</li>\n<li>\n<p>后序遍历</p>\n<blockquote>\n<p>先遍历左节点再遍历右节点,最后遍历这个节点本身。</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202002021348_774.png?/\" alt=\"来源：极客时间-数据结构算法之美\" /></p>\n</li>\n</ul>\n<p><strong>递归模式遍历</strong></p>\n<p>前序遍历的递推公式：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">preOrder</span><span class=\"params\">(Node* root)</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   print root <span class=\"comment\">// 此处为伪代码，表示打印 root 节点 </span></span><br><span class=\"line\">   preOrder(root-&gt;left); </span><br><span class=\"line\">   preOrder(root-&gt;right);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>中序遍历的递推公式：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">inOrder</span><span class=\"params\">(Node* root)</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  inOrder(root-&gt;left);</span><br><span class=\"line\">  print root <span class=\"comment\">// 此处为伪代码，表示打印 root 节点 </span></span><br><span class=\"line\">  inOrder(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后序遍历的递推公式：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">postOrder</span><span class=\"params\">(Node* root)</span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  postOrder(root-&gt;left); </span><br><span class=\"line\">  postOrder(root-&gt;right); </span><br><span class=\"line\">  print root <span class=\"comment\">// 此处为伪代码，表示打印 root 节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>迭代模式遍历</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ```</span><br><span class=\"line\">### 二叉查找树(Binary Search Tree)</span><br><span class=\"line\">  &gt;二叉查找树要求,在树的任意一个节点,在其左节点的值都要小于该节点的值,在其右节点的值都要大于该节点的值,因此二叉查找树实现快速查找,并且还支持数据的快速插入或删除。</span><br><span class=\"line\">  - 查找过程</span><br><span class=\"line\">     </span><br><span class=\"line\">    先和根节点比较,如果要查找的值小于根节点则在左子树中查找,否则在右子树中查找依此类推。</span><br><span class=\"line\">    ```Java</span><br><span class=\"line\">    public class SearchTree &#123;</span><br><span class=\"line\">      public static class Node&#123;</span><br><span class=\"line\">          private int data;</span><br><span class=\"line\">          private Node left;</span><br><span class=\"line\">          private Node right;</span><br><span class=\"line\">          public Node(int data)&#123;</span><br><span class=\"line\">              this.data = data;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      private Node tree;</span><br><span class=\"line\">      public Node find(int data)&#123;</span><br><span class=\"line\">          Node t = tree;</span><br><span class=\"line\">          while (t!=null)&#123;</span><br><span class=\"line\">              if(data&lt;t.data)&#123;</span><br><span class=\"line\">                  t=t.left;</span><br><span class=\"line\">              &#125; else if(data&gt;t.data) &#123;</span><br><span class=\"line\">                  t=t.right;</span><br><span class=\"line\">              &#125; else &#123;</span><br><span class=\"line\">                return t;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return null;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<pre><code>![二叉查找树查找过程](http://blogimage.lemonlife.top/202002021921_337.png?/)\n</code></pre>\n<ul>\n<li>\n<p>插入过程</p>\n<blockquote>\n<p>二叉查找树新插入的数据一般在叶子节点上,从根节点开始,如果要插入的数比节点数据小并且节点左子树为空，则将新插入的数据放到该节点左子节点的位置。如果左子树不为空依次递归遍历左子树。同样如果要插入的数据大于节点数据。对节点的右子树同样操作即可。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> data,Node tree)</span>&#123;</span><br><span class=\"line\"><span class=\"type\">Node</span> <span class=\"variable\">indexNode</span> <span class=\"operator\">=</span> tree;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(indexNode != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(data &gt;= indexNode.data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(indexNode.right == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            indexNode.right = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        indexNode = indexNode.right;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(data&lt;indexNode.data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(indexNode.left == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            indexNode.left == <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        indexNode = indexNode.left;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/202002021953_674.png?/\" alt=\"插入\" /></p>\n</li>\n<li>\n<p>删除过程</p>\n</li>\n</ul>\n<blockquote>\n<p>二叉查找树删除过程相对于查找和插入来说比较麻烦。有三种情况<br />\n<img src=\"http://blogimage.lemonlife.top/202002022219_211.png?/\" alt=\"\" /><br />\n1. 如果要删除节点没有子节点我们只需要直接将父节点中指向该节点的指针指向<code>null</code>即可。比如删除图中节点55。<br/><br />\n2. 如果要删除的节点有一个节点(一个左节点或者一个右节点)，只需要将父节点的指针指向要删除节点的子节点即可。比如删除图中节点13<br/><br />\n3. 如果要删除的节点含有两个子节点。我们找到该节点的右子树中最小的节点。把他替换到要删除的节点上。比如删除图中节点18</p>\n</blockquote>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///这部分感觉教程上代码有问题 先欠着以后补上。</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"二叉查找树时间复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#二叉查找树时间复杂度分析\"></a> 二叉查找树时间复杂度分析</h4>\n<blockquote>\n<p>二叉查找树执行查找的效率和数的高度成正比O(height),因此树的形状(树的左右平衡程度有关)会影响查询时间。<br/><br />\n1. 最坏的程度一棵树可以退化成链表查,一个含有n个节点的树,树的高度就是n。找时间复杂度为 <code>O(n)</code> <br/><br />\n2. 当二叉树的平衡情况最好时(满二叉树或者平衡二叉树)。一个含有n个节点的树高度为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">log_2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span></span></span></span><br/><br />\nn=<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mn>2</mn><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mn>2</mn><mi>L</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^0+2^1+2^2+\\cdots+2^{L-1}=2^L-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">L</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.924661em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">L</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (L代表树的高度)</br><br />\n查找的时间复杂度为O(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">log_2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span></span></span></span>)</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202002031131_882.png?/\" alt=\"二叉查找树的情况\" /></p>\n<blockquote>\n<p>文章中图片和部分文字代码片段来源 <code>极客时间-数据结构与算法之美</code></p>\n</blockquote>\n"},{"title":"设计模式(一)","date":"2020-02-26T14:30:52.000Z","_content":"因为设计模式部分代码，可能需要用到接口等特性，因此需要使用TS,下面介绍一点TS基础的使用方法，对于可以用ES6实现的方式，我尽量采用ES6实现。23种设计模式,这一篇肯定写不完，前面都是基础准备，想节约时间的，可直接跳到**开始设计模式那块**,本篇只介绍了，单例模式和工厂模式\n\n## TypeScript简单介绍\n```Bash\n# 安装或者更新ts\nnpm install -g typescript\n# 检测是否安装成功\ntsc -version\n# 编写.ts文件， 运行以下命令将ts文件转换成js\n# 运行对应js文件即可\ntsc [fileName].ts\n```\n### 采用webpack的方式\n> 因为不想频繁的执行tsc命令自己搭建了，webpack的环境。[配置链接](https://github.com/ilovcoding/typescript-design-mode/blob/master/webpack.config.js),clone下来项目后,在项目`src` 目录下编写对应ts代码即可,webpack会自动编译ts代码,`app.ts`是程序主入口。因此函数调用要在`app.ts`中运行。\n### TypeScript 数据类型\n定义ts变量需要指定类型。或者会根据第一个赋值变量分配默认类型。未赋值变量默认类型为`any`\n#### 布尔类型(boolean)\n```TypeScript\n  let flag:boolean = false;\n  flag = true;\n  // error code 不同类型不能赋值\n  flag = 1\n```\n#### 数值类型(number)\n```TypeScript\nlet num:number = 123\n```\n#### 字符串类型(string)\n```TypeScript\nlet str:string = \"string\"\n```\n#### 数组类型(array)\n```TypeScript\nlet arr:number[] = [1,2,3,4]\nlet arr:Array<number> = [1,2,3,4]\n```\n#### 元组类型(tuple)\n元组类型是数组类型的子集,元组不允许越界，每一个元祖类型都指定了一个数据类型。\n```TypeScript\nlet arr:[number,string] = [1,'str']\n// error code 越界 左边类型长度为2 右边赋值长度为3\nlet arr:[number,string] = [1,'str',2]\n```\n#### 枚举类型(enum)\n枚举中变量默认值是 按顺序赋值0,1,2 $\\cdots$,也可以给枚举中变量直接赋值,覆盖掉默认值。\n```TypeScript\nenum Flag{\n  success,\n  fail,\n  unknow = 'unknow'\n}\nlet success:Flag = Flag.success \nconsole.log(success) // 0\nconsole.log(Flag.fail) // 1\nconsole.log(Flag.unknow) // unknow\n```\n\n#### never类型\nnull和undefined,是never 类型的子集。还有一种是不会出现的类型,例如没有返回值的函数。\n```TS\nlet num:null = null\nconsole.log(num)  // null\nlet unde:undefined\nconsole.log(unde) // undefined\n```\n### 函数的重载\n相同的函数名称，接收不同的参数，最后一个函数必须要给出函数的实现。\n```TS\n  function userInfo(name: string): string;\n  function userInfo(age: number): number;\n  function userInfo(info: any): any {\n    if (typeof info === 'string') {\n      return `my name is ${info}`\n    } else {\n      return `my age is ${info}`\n    }\n  }\n  console.log(userInfo('wmw'))  // my name is wmw\n  console.log(userInfo(18)) //  my age is 18\n```\n### 类的写法\nTS中类的写法大体上和ES6差不多,TS可以对类中变量，方法，指定私有还是公有的属性,在构造器中定义初始的变量时，要在构造器前声明一下变量,如果是继承类只需要声明自身独有的属性即可,继承自父类的属性可不必声明,下面对比一下两者的写法。\n- ES6的写法\n```js\nclass Point {\n\tconstructor(x, y) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t}\n}\nlet point = new Point(1, 2)\nclass ColorPoint extends Point {\n\tconstructor(x, y, color) {\n\t\tsuper(x, y)\n\t\tthis.color = color\n\t}\n\tstatic world = 'world'\n\thello = 'hello'\n\tsay() {\n\t\tconsole.log(this.hello)\n\t}\n\tstatic time() {\n\t\tconsole.log(this.world)\n\t\treturn Date.now()\n\t}\n}\n```\n- TS的写法\n```ts\nclass Point {\n  // 在构造器前声明了x,y\n  x: number\n  y: number\n\tconstructor(x:number, y:number) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t}\n}\nlet point = new Point(1, 2)\nclass ColorPoint extends Point {\n  // 只需声明color,继承来的x,y不必声明\n  color: string\n\tconstructor(x:number, y:number, color:string) {\n\t\tsuper(x, y)\n\t\tthis.color = color\n  }\n  // 可以指定变量为私有属性，(只是在写代码层面上报错)\n  private static world = 'world'\n  private hello = 'hello'\n  public say(){\n     console.log(this.hello)\n   }\n   public static time(){\n     console.log(this.world)\n     return Date.now()\n   }\n} \n\n```\n### 接口\nTS比ES6多提供了接口的功能,一个类要实现接口,必须要实现接口指定的属性和方法\n```ts\n// 定义人的接口，指定了名字，年龄，和爱好\ninterface Person {\n  name:string,\n  age:number,\n  hobby:Array<string>,\n  sayHobby():string\n}\n\n// 根据这个接口 定义一个类小明\nclass XiaoMing implements Person {\n  name: string  \n  age: number\n  hobby: string[]\n  constructor(name: string,age: number,hobby: string[]){\n      this.name = name\n      this.age = age\n      this.hobby = hobby\n  }\n  sayHobby(): string {\n    return `我喜欢,${this.hobby.join(',')}`\n  }\n}\nlet xiaoMing = new XiaoMing('xiaoming',18,['唱','跳','rap','*球'])\n```\n## 设计模式的基本原则\n之所以会有设计模式，很大程度上是为了代码的整洁性，重用性，可靠性，可扩展性，等等，总之你写的代码不仅仅是代码，更应该是一个工程，为了这个工程的未来，每个人都应该努力提高自己的代码质量。很多时候是和他人一起合作的工程。设计模式需要遵守的七大原则\n\n- 单一责任原则\n- 接口隔离原则\n- 依赖倒转(倒置)原则\n- 里氏替换原则\n- 开闭原则\n- 迪米特法则\n- 合成复用原则\n   \n### 单一责任原则\n> 字面意思，一个类只负责一件事，尽量降低类的复杂度，更不可以把丝毫不相关的代码放在一个类中。\n\n- 降低类或者方法的复杂度，\n- 提代码可读性可维护性。\n- 降低变更代码引起的风险。\n\n案例:指定一个交通工具类，类中，指定每种交通工具的运行途径，比如汽车陆地上，飞机空中等\n```ts\n// 方式一的 run方法 很明显 ，把 飞机汽车的运行方式，放一起\n// 不利于代码以后扩展\nclass Vehicle {\n  run(vehicle,type){\n    if(vehicle === 'car'){\n      return \"car在陆地上运行\"\n    }else if(vehicle === 'aircraft') {\n      return \"aircraft在空中运行\"\n    }\n  }\n}\n\n// 解决方法一 把各个功能不同的交通工具拆成不同类\nclass RoadVehicle {\n  run(vehicle){\n    return vehicle + '在陆地上运行'\n  }\n}\nclass AirVehicle {\n  run(vehicle){\n    return vehicle + '在空中运行'\n  }\n}\n// 解决方法2 在方法层面上实现 单一原则\nclass Vehicle{\n  run(vehicle){\n    retun vehicle + \"在陆地上运行\"\n  }\n  runAir(vehicle){\n    return vehicle + \"在空中运行\"\n  }\n}\n```\n\n### 接口隔离原则\n> 一个类 实现接口时，应该基于接口的最小接口，如果接口中含有大量他不需要的方法，应该拆分接口\n>\n- 减少不必要的代码。\n- 代码逻辑关系更清晰,程序稳定性更好\n\n设计一个情形，B,D类 都实现了接口1,A,C通过接口依赖于B,D。但是A只需要接口中`operation1`,`operation2` 但是 C需要`operation1`,`operation2` 。 因此,如果只定义一个接口1，B,D中 都有不必要的代码。\n\n```TS\ninterface Interface1 {\n  operation1(): void;\n  operation2(): void;\n  operation3(): void;\n}\nclass B implements Interface1 {\n  public operation1(): void {\n    log('B实现了接口1')\n  }\n  public operation2(): void {\n    log('B实现了接口2')\n  }\n  // 不必要的代码\n  public operation3(): void {\n    log('B实现了接口3')\n  }\n}\n\nclass D implements Interface1 {\n  // 不必要的代码\n  public operation1(): void {\n    log('D实现了接口1')\n  }\n  public operation2(): void {\n    log('D实现了接口2')\n  }\n  public operation3(): void {\n    log('D实现了接口3')\n  }\n}\n\nclass A {\n  public depend1(i: Interface1): void {\n    i.operation1()\n  }\n  public depend2(i: Interface1): void {\n    i.operation2()\n  }\n}\nclass C {\n  public depend2(i: Interface1): void {\n    i.operation2()\n  }\n  public depend3(i: Interface1): void {\n    i.operation3()\n  }\n}\n\nclass Segregation {\n  public static main(): void {\n    let a = new A()\n    a.depend1(new B()) //B实现了接口1\n    a.depend2(new B()) // B实现了接口2\n    let c = new C()\n    c.depend2(new D()) // D实现了接口2\n    c.depend3(new D()) // D实现了接口3\n  }\n}\n```\n**改进之后**\n```TS\ninterface Interface1 {\n  operation1(): void;\n}\ninterface Interface2 {\n  operation2(): void;\n}\ninterface Interface3 {\n  operation3(): void;\n}\n\nclass B implements Interface1, Interface2 {\n  public operation1(): void {\n    log('B实现了接口1')\n  }\n  public operation2(): void {\n    log('B实现了接口2')\n  }\n}\n\nclass D implements Interface2, Interface3 {\n  public operation2(): void {\n    log('D实现了接口2')\n  }\n  public operation3(): void {\n    log('D实现了接口3')\n  }\n}\n\nclass A {\n  public depend1(i: Interface1): void {\n    i.operation1()\n  }\n  public depend2(i: Interface2): void {\n    i.operation2()\n  }\n}\nclass C {\n  public depend2(i: Interface2): void {\n    i.operation2()\n  }\n  public depend3(i: Interface3): void {\n    i.operation3()\n  }\n}\nexport default class Segregation2 {\n  public static main(): void {\n    let a = new A()\n    a.depend1(new B()) //B实现了接口1\n    a.depend2(new B()) // B实现了接口2\n    let c = new C()\n    c.depend2(new D()) // D实现了接口2\n    c.depend3(new D()) // D实现了接口3\n  }\n}\n```\n设计接口的时候注意接口隔离，不要把，不同功能的接口放一起，以免实现代码的时候出现不必要的实现类代码。B,D实现类的代码,比之前减少了不必要的代码。\n\n### 依赖倒转(倒置)原则\n> 高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节，细节应该依赖抽象。依赖倒转原则中心思想是面向接口编程。遵循里氏替换原则\n  \n我们模拟一个人接收邮件，和接收消息的场景\n\n```TS\n  // 完成Persion 接收消息的功能\n  class Person {\n    public receive(email: Email): void {\n      console.log(email.getInfo())\n    }\n  }\n  class Email {\n    public getInfo(): string {\n      return \"电子邮件信息 Hello World\"\n    }\n  }\n\nclass DependecyInVersion {\n    public static main(): void {\n      let person = new Person();\n      person.receive(new Email())\n    }\n  }\n```\n上面的案例实现思路,简单,比较容易想到,但是如果我们还需要接收微信,QQ,短的消息显得不好扩展\n\n根据依赖倒转原则,我们应该引入一个IReceiver接口,表示接收者,这样Person类\n与接口IReceiver发生依赖,只要接口不变,Person无需改变,因为WeXin QQ等新都属接收业务范围,他们各自实现IReceiver接口就行。\n```TS\nclass DependecyInVersion2 {\n  public static main(): void {\n    let person = new Person();\n    person.receive(new Email())\n    person.receive(new QQ())\n  }\n}\n\n// 定义接收接口\ninterface IReceiver {\n  getInfo(): string;\n}\n// 定义Email消息\nclass Email implements IReceiver {\n  public getInfo(): string {\n    return '接收到 Email消息'\n  }\n}\n// 定义QQ消息\nclass QQ implements IReceiver {\n  public getInfo(): string {\n    return '接收到 QQ消息'\n  }\n}\n\n// 完成Persion 接收消息的功能,\n// 无论上层增加接收什么类型的消息,Persion类无需改变\nclass Person {\n  // 基于接口传递依赖关系\n  public receive(receiver: IReceiver): void {\n    console.log(receiver.getInfo())\n  }\n}\n```\n\n### 依赖关系的传递方式(这不是设计模式原则)\n为了实现接口分离，我们常常使用如下方式传递接口依赖关系。\n\n- 接口传递 (上面的案例就是基于接口传递依赖关系)\n- 构造方法传递\n- setter方法传递\n  \n```TS\n// 定义两个接口\n\ninterface Message {\n  info(): void\n}\ninterface IReceiver {\n  getInfo(): void;\n}\n\n```\n- 方式2 通过构造方法传递\n```TS\nclass MyMessage implements Message {\n  public receiver!: IReceiver\n  constructor(receiver: IReceiver) {\n    // 基于构造方法 传递 \n    this.receiver = receiver\n  }\n  public info() {\n    this.receiver.getInfo()\n  }\n}\nclass Receiver implements IReceiver {\n  getInfo(): void {\n    log(\"我接收到消息啦~~\")\n  }\n}\nclass DependecyInVersion3 {\n  public static main() {\n    let receiver = new Receiver()\n    let myMessage = new MyMessage(receiver)\n    myMessage.info()\n  }\n}\n```\n- 方式3 通过setter方法\n```TS\n\nclass MyMessage implements Message {\n  public receiver!: IReceiver; // TS要求添加 赋值断言\n  public setReceive(rec: IReceiver): void {\n    this.receiver = rec\n  }\n  public info() {\n    this.receiver.getInfo()\n  }\n}\nclass Receiver implements IReceiver {\n  getInfo(): void {\n    log(\"我接收到消息啦~~\")\n  }\n}\nclass DependecyInVersion3 {\n  public static main() {\n    let myMessage = new MyMessage()\n    myMessage.setReceive(new Receiver())\n    myMessage.info()\n  }\n}\n```\n\n### 里氏替换原则\n使用继承的时候，应尽量遵循里氏替换原则,在**子类中尽量不要重写父类方法**。里氏替换原则告诉我们，继承实际上让两个类耦合度增强了，在适当情况下，可以通过，**聚合，组合依赖来解决问题**。抱歉这个暂时没有找到很好的例子。\n\n### 开闭原则\n> 一个软件的类，模块和函数应该对扩展开发，对修改关闭。当软件需要变化时，尽量通过扩展软件实体行为来实现变化。而不是通过修改已有代码。\n\n我的定义一个画图的案例,在一个绘图的类中定义，绘制不同样子图形的情形，其实这边这个案例和第一种，单一责任原则有点类似了\n```TS\nimport { log } from 'util';\nexport default class OCP {\n// (使用方)\npublic static main(): void {\n    let graphiEditor = new GraphiEditor()\n    graphiEditor.drawShape(new Rectangle())\n    graphiEditor.drawShape(new Circle())\n  }\n}\n\n// 提供方\nclass GraphiEditor {\n  public drawShape(s: Shape): void {\n    if (s.mType == 1) {\n      log('绘制矩形')\n    } else if (s.mType == 2) {\n      log('绘制圆形')\n    }\n  }\n}\n// 提供方\nclass Shape {\n  public mType: number\n  constructor(mType: number) {\n    this.mType = mType\n  }\n}\n\n// 使用方\n// 画矩形的类\nclass Rectangle extends Shape {\n  constructor() {\n    super(1) // mType = 1\n  }\n}\n// 使用方\n// 画圆形的类\nclass Circle extends Shape {\n  constructor() {\n    super(2) // mType = 2\n  }\n}\n```\n\n上面的代码如果想要新增画三角形的类,发现扩展改变比较大,提供方，使用方代码都需要改变。现在经过如下修改，去掉if,else的判断，根据开闭原则，把具体的实现，放到使用方每个子类中自己实现，这样，想新增三角形的时候。只要使用方自己实现了三角形。不需要动提供方的代码\n\n```TS\nimport { log } from 'util';\n\n// 使用方\nexport default class OCP2 {\n  public static main(): void {\n    let graphiEditor = new GraphiEditor()\n    graphiEditor.drawShape(new Rectangle())\n    graphiEditor.drawShape(new Circle())\n    graphiEditor.drawShape(new Triangle())\n  }\n}\n\n// 提供 方\nclass GraphiEditor {\n  public drawShape(s: Shape): void {\n    s.draw()\n  }\n}\n\n// 提供方\nabstract class Shape {\n  abstract draw(): void;\n}\n\n//使用方\nclass Rectangle extends Shape {\n  public draw(): void {\n    log('绘制矩形')\n  }\n}\nclass Circle extends Shape {\n  public draw(): void {\n    log('绘制圆形')\n  }\n}\n// 现在扩展三角形\nclass Triangle extends Shape {\n  public draw(): void {\n    log('绘制三角形')\n  }\n}\n```\n### 迪米特法则\n\n>  高内聚，低耦合,尽量少对外暴露信息，一个类对自己依赖的类知道越少越好。类与类关系越密切，耦合度越大。越不利于代码更改。\n\n现在我们实现一个二叉搜索树并且二叉搜索树，提供了插入节点功能，和返回中序遍历（左节点->根节点->右节点）结果的功能\n\n- 不符合迪米特法则的实现\n```TS\nclass TreeNode {\n  val: number;\n  left: null | TreeNode;\n  right: null | TreeNode;\n  constructor(val:number){\n    this.val = val\n    this.left = null\n    this.right = null\n  }\n}\n//定义 二叉 搜索树\nclass BSTree{\n tree: null | TreeNode;\n constructor(){\n   this.tree = null\n }\n // 定义插入方法\n insert(node:TreeNode){\n   if(this.tree === null){\n     this.tree = node\n   } else {\n     let root = this.tree\n     while(true){\n         if(node.val>root.val){\n           if(root.right === null){\n             root.right = node\n             break\n           }\n           root = root.right\n         } else { \n           if(root.left === null){\n             root.left = node\n             break\n           }\n           root = root.left\n       }\n     }\n   }\n   return this.tree\n }\n inOrder(tree:TreeNode|null){\n  let res:number[] = []\n  function order(tree:TreeNode|null){\n    if(tree === null){\n      return res     \n    }\n    order(tree.left)\n    res.push(tree.val)\n    order(tree.right)\n    return res\n   }\n   order(tree)\n   return res\n }\n\n}\n// 实现一个二叉搜索树的功能\nclass Demeter{\n  public static main() {\n      let bsTree = new BSTree()\n      bsTree.insert(new TreeNode(8))\n      bsTree.insert(new TreeNode(7))\n      bsTree.insert(new TreeNode(11))\n      bsTree.insert(new TreeNode(9))\n      bsTree.insert(new TreeNode(3))\n      bsTree.insert(new TreeNode(2))\n      // 放入的顺序[8,7,11,9,3,2]\n      let res = bsTree.inOrder(bsTree.tree)\n      console.log(res) // [2, 3, 7, 8, 9, 11]\n  }\n}\n```\n从上述代码可以看出，用户在使用二叉搜索树的时候,insert方法暴露给用户的信息太多了。具体的插入流程其实不需要让用户实现。用户提供数据就行了。还有中序遍历的时候，其实没必要接收用户的参数(当然这个错是我故意这么写的，想个案例不容易啊/(ㄒoㄒ)/~~)\n\n- 修改之后\n  \n```TS\nclass TreeNode {\n  val: number;\n  left: null | TreeNode;\n  right: null | TreeNode;\n  constructor(val:number){\n    this.val = val\n    this.left = null\n    this.right = null\n  }\n}\n// 定义 二叉搜索树\nclass BSTree{\n tree: null | TreeNode;\n constructor(){\n   this.tree = null\n }\n // 改成接收 不定参数\n // 去掉返回值，让用户 只能有 new BSTree().tree 一种方式 获取的根节点\n insert(...args:Array<number>):void{\n   let handleInsert = (node:TreeNode) => {\n    if(this.tree === null){\n      this.tree = node\n    } else {\n      let root = this.tree\n      while(true){\n          if(node.val>root.val){\n            if(root.right === null){\n              root.right = node\n              break\n            }\n            root = root.right\n          } else { \n            if(root.left === null){\n              root.left = node\n              break\n            }\n          root = root.left\n        }\n      }\n    }\n   }\n  args.forEach(element =>handleInsert(new TreeNode(element)));\n }\n // 不需要接收参数\n inOrder():Array<number>{\n  let res:number[] = []\n  function order(tree:TreeNode|null){\n    if(tree === null){\n      return res     \n    }\n    order(tree.left)\n    res.push(tree.val)\n    order(tree.right)\n    return res\n   }\n   // 改成 this.tree 直接引用内部的\n   order(this.tree)\n   return res\n }\n\n}\n// 实现一个二叉搜索树的功能\nclass DemeterImprove{\n  public static main() {\n      let bsTree = new BSTree()\n      // 插入元素 8 7 11 9 3 2\n      bsTree.insert(8,7,11,9,3,2)\n      let res = bsTree.inOrder()\n      mlog.log(res) // [2, 3, 7, 8, 9, 11]\n  }\n}\n\n```\n\n\n## 开始设计模式\n对于设计模式，大家公认有23种基本的设计模式，由于学的比较慢,这边目前只介绍单利模式和工厂模式,剩下的设计模式会慢慢的在后面的文章中，用TS实现。\n\n### 单例模式\n就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例， 并且该类只提供一个取得其对象实例的方法(静态方法)。\n\n就是假如我们在一个系统中，需要频繁的使用某个对象，这时候如果反复的通过new，去实例化这个对象来使用，会造成不必要的内存损失。因此我们应该在对象内部提供静态属性等于实例化的这个类, 然后去通过类的静态属性获取实例化的类。案例如下\n\n现在假如 我们有一个Person类，要多处调用Person中的 `sayHello` 方法\n```js\nclass Person {\n  sayHello(){\n      console.log('Hello World JavaScript')\n  }\n}\nconsole.log(new Person() === new Person()) // false\n```\n通过上述console.log中的比较结果知道，假如我们需要使用多次，那么每次都要占用一个新内存。通过改变代码如下,可见我们通过类本身的静态属性访问该类不要每次都实例化这个类。\n```js\nclass Person {\n  static person = new Person()\n  sayHello(){\n      console.log('Hello World JavaScript')\n  }\n  // es6目前没有私有属性可不提供，get方法\n  // 在这里写了一个是模仿java，\n  static getPerson(){\n      return this.person\n  }\n}\nconsole.log(Person.getPerson() === Person.getPerson()) // true\n// 或者直接一点\nconsole.log(Person.person === Person.person) // true \n```\n上面这种单例模式，属性java中的饿汉式，还有懒汉式，静态内部类实现，利用枚举实现等。主要是因为java的类装载机制。和线程安全问题，js暂时不用考虑这些问题 O(∩_∩)O哈哈~。\n\n### 工厂模式\n工厂模式很多情形其实是为了解决，设计违反了前面提到的 **开闭原则的情景** 。这种类型的设计模式属于**创建型模式**，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。\n\n**优点：** 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。\n\n**缺点：** 每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。\n\n从如下代码中优缺点显而易见，调用的时候很方便，去工厂取东西，不用关系工厂后面是怎么实现的。但是每次修改，工厂和工厂后面的实现都要改。\n```js\n// 简单工厂模式\ninterface Shape{\n  // 定义一个表示形状的接口，里面有画的方法\n  draw()\n}\nclass Rectangle implements Shape{\n  draw(){\n    console.log('我画了一个矩形')\n  }\n}\nclass Squre implements Shape{\n  draw(){\n    console.log(\"我画了一个正方形\")\n  }\n}\n\nclass Circle implements Shape{\n  draw(){\n    console.log(\"我画了一个圆形\")\n  }\n}\n// 定义一个工厂\nclass ShapeFactory {\n  getShape(shapeType){\n    if(shapeType === null){\n      return null\n    }\n    if(shapeType === \"CIRCLE\"){\n      return new Circle()\n    }else if(shapeType === \"RECTANGLE\"){\n      return new Rectangle()\n    }else if(shapeType === \"SQUARE\"){\n      return new Squre()\n    }\n  }\n}\n\n//使用层\nfunction main(){\n  let shapeFactory = new ShapeFactory()\n  let circle = shapeFactory.getShape(\"CIRCLE\")\n  circle.draw() // 我画了一个圆形\n}\n```\n\n> 同样本篇是我看资料之后总结的。部分文字来源于网络","source":"_posts/typescript.md","raw":"---\ntitle: 设计模式(一)\ndate: 2020-02-26 22:30:52\ntags:\n  - 设计模式\n  - TypeScript\n---\n因为设计模式部分代码，可能需要用到接口等特性，因此需要使用TS,下面介绍一点TS基础的使用方法，对于可以用ES6实现的方式，我尽量采用ES6实现。23种设计模式,这一篇肯定写不完，前面都是基础准备，想节约时间的，可直接跳到**开始设计模式那块**,本篇只介绍了，单例模式和工厂模式\n\n## TypeScript简单介绍\n```Bash\n# 安装或者更新ts\nnpm install -g typescript\n# 检测是否安装成功\ntsc -version\n# 编写.ts文件， 运行以下命令将ts文件转换成js\n# 运行对应js文件即可\ntsc [fileName].ts\n```\n### 采用webpack的方式\n> 因为不想频繁的执行tsc命令自己搭建了，webpack的环境。[配置链接](https://github.com/ilovcoding/typescript-design-mode/blob/master/webpack.config.js),clone下来项目后,在项目`src` 目录下编写对应ts代码即可,webpack会自动编译ts代码,`app.ts`是程序主入口。因此函数调用要在`app.ts`中运行。\n### TypeScript 数据类型\n定义ts变量需要指定类型。或者会根据第一个赋值变量分配默认类型。未赋值变量默认类型为`any`\n#### 布尔类型(boolean)\n```TypeScript\n  let flag:boolean = false;\n  flag = true;\n  // error code 不同类型不能赋值\n  flag = 1\n```\n#### 数值类型(number)\n```TypeScript\nlet num:number = 123\n```\n#### 字符串类型(string)\n```TypeScript\nlet str:string = \"string\"\n```\n#### 数组类型(array)\n```TypeScript\nlet arr:number[] = [1,2,3,4]\nlet arr:Array<number> = [1,2,3,4]\n```\n#### 元组类型(tuple)\n元组类型是数组类型的子集,元组不允许越界，每一个元祖类型都指定了一个数据类型。\n```TypeScript\nlet arr:[number,string] = [1,'str']\n// error code 越界 左边类型长度为2 右边赋值长度为3\nlet arr:[number,string] = [1,'str',2]\n```\n#### 枚举类型(enum)\n枚举中变量默认值是 按顺序赋值0,1,2 $\\cdots$,也可以给枚举中变量直接赋值,覆盖掉默认值。\n```TypeScript\nenum Flag{\n  success,\n  fail,\n  unknow = 'unknow'\n}\nlet success:Flag = Flag.success \nconsole.log(success) // 0\nconsole.log(Flag.fail) // 1\nconsole.log(Flag.unknow) // unknow\n```\n\n#### never类型\nnull和undefined,是never 类型的子集。还有一种是不会出现的类型,例如没有返回值的函数。\n```TS\nlet num:null = null\nconsole.log(num)  // null\nlet unde:undefined\nconsole.log(unde) // undefined\n```\n### 函数的重载\n相同的函数名称，接收不同的参数，最后一个函数必须要给出函数的实现。\n```TS\n  function userInfo(name: string): string;\n  function userInfo(age: number): number;\n  function userInfo(info: any): any {\n    if (typeof info === 'string') {\n      return `my name is ${info}`\n    } else {\n      return `my age is ${info}`\n    }\n  }\n  console.log(userInfo('wmw'))  // my name is wmw\n  console.log(userInfo(18)) //  my age is 18\n```\n### 类的写法\nTS中类的写法大体上和ES6差不多,TS可以对类中变量，方法，指定私有还是公有的属性,在构造器中定义初始的变量时，要在构造器前声明一下变量,如果是继承类只需要声明自身独有的属性即可,继承自父类的属性可不必声明,下面对比一下两者的写法。\n- ES6的写法\n```js\nclass Point {\n\tconstructor(x, y) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t}\n}\nlet point = new Point(1, 2)\nclass ColorPoint extends Point {\n\tconstructor(x, y, color) {\n\t\tsuper(x, y)\n\t\tthis.color = color\n\t}\n\tstatic world = 'world'\n\thello = 'hello'\n\tsay() {\n\t\tconsole.log(this.hello)\n\t}\n\tstatic time() {\n\t\tconsole.log(this.world)\n\t\treturn Date.now()\n\t}\n}\n```\n- TS的写法\n```ts\nclass Point {\n  // 在构造器前声明了x,y\n  x: number\n  y: number\n\tconstructor(x:number, y:number) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t}\n}\nlet point = new Point(1, 2)\nclass ColorPoint extends Point {\n  // 只需声明color,继承来的x,y不必声明\n  color: string\n\tconstructor(x:number, y:number, color:string) {\n\t\tsuper(x, y)\n\t\tthis.color = color\n  }\n  // 可以指定变量为私有属性，(只是在写代码层面上报错)\n  private static world = 'world'\n  private hello = 'hello'\n  public say(){\n     console.log(this.hello)\n   }\n   public static time(){\n     console.log(this.world)\n     return Date.now()\n   }\n} \n\n```\n### 接口\nTS比ES6多提供了接口的功能,一个类要实现接口,必须要实现接口指定的属性和方法\n```ts\n// 定义人的接口，指定了名字，年龄，和爱好\ninterface Person {\n  name:string,\n  age:number,\n  hobby:Array<string>,\n  sayHobby():string\n}\n\n// 根据这个接口 定义一个类小明\nclass XiaoMing implements Person {\n  name: string  \n  age: number\n  hobby: string[]\n  constructor(name: string,age: number,hobby: string[]){\n      this.name = name\n      this.age = age\n      this.hobby = hobby\n  }\n  sayHobby(): string {\n    return `我喜欢,${this.hobby.join(',')}`\n  }\n}\nlet xiaoMing = new XiaoMing('xiaoming',18,['唱','跳','rap','*球'])\n```\n## 设计模式的基本原则\n之所以会有设计模式，很大程度上是为了代码的整洁性，重用性，可靠性，可扩展性，等等，总之你写的代码不仅仅是代码，更应该是一个工程，为了这个工程的未来，每个人都应该努力提高自己的代码质量。很多时候是和他人一起合作的工程。设计模式需要遵守的七大原则\n\n- 单一责任原则\n- 接口隔离原则\n- 依赖倒转(倒置)原则\n- 里氏替换原则\n- 开闭原则\n- 迪米特法则\n- 合成复用原则\n   \n### 单一责任原则\n> 字面意思，一个类只负责一件事，尽量降低类的复杂度，更不可以把丝毫不相关的代码放在一个类中。\n\n- 降低类或者方法的复杂度，\n- 提代码可读性可维护性。\n- 降低变更代码引起的风险。\n\n案例:指定一个交通工具类，类中，指定每种交通工具的运行途径，比如汽车陆地上，飞机空中等\n```ts\n// 方式一的 run方法 很明显 ，把 飞机汽车的运行方式，放一起\n// 不利于代码以后扩展\nclass Vehicle {\n  run(vehicle,type){\n    if(vehicle === 'car'){\n      return \"car在陆地上运行\"\n    }else if(vehicle === 'aircraft') {\n      return \"aircraft在空中运行\"\n    }\n  }\n}\n\n// 解决方法一 把各个功能不同的交通工具拆成不同类\nclass RoadVehicle {\n  run(vehicle){\n    return vehicle + '在陆地上运行'\n  }\n}\nclass AirVehicle {\n  run(vehicle){\n    return vehicle + '在空中运行'\n  }\n}\n// 解决方法2 在方法层面上实现 单一原则\nclass Vehicle{\n  run(vehicle){\n    retun vehicle + \"在陆地上运行\"\n  }\n  runAir(vehicle){\n    return vehicle + \"在空中运行\"\n  }\n}\n```\n\n### 接口隔离原则\n> 一个类 实现接口时，应该基于接口的最小接口，如果接口中含有大量他不需要的方法，应该拆分接口\n>\n- 减少不必要的代码。\n- 代码逻辑关系更清晰,程序稳定性更好\n\n设计一个情形，B,D类 都实现了接口1,A,C通过接口依赖于B,D。但是A只需要接口中`operation1`,`operation2` 但是 C需要`operation1`,`operation2` 。 因此,如果只定义一个接口1，B,D中 都有不必要的代码。\n\n```TS\ninterface Interface1 {\n  operation1(): void;\n  operation2(): void;\n  operation3(): void;\n}\nclass B implements Interface1 {\n  public operation1(): void {\n    log('B实现了接口1')\n  }\n  public operation2(): void {\n    log('B实现了接口2')\n  }\n  // 不必要的代码\n  public operation3(): void {\n    log('B实现了接口3')\n  }\n}\n\nclass D implements Interface1 {\n  // 不必要的代码\n  public operation1(): void {\n    log('D实现了接口1')\n  }\n  public operation2(): void {\n    log('D实现了接口2')\n  }\n  public operation3(): void {\n    log('D实现了接口3')\n  }\n}\n\nclass A {\n  public depend1(i: Interface1): void {\n    i.operation1()\n  }\n  public depend2(i: Interface1): void {\n    i.operation2()\n  }\n}\nclass C {\n  public depend2(i: Interface1): void {\n    i.operation2()\n  }\n  public depend3(i: Interface1): void {\n    i.operation3()\n  }\n}\n\nclass Segregation {\n  public static main(): void {\n    let a = new A()\n    a.depend1(new B()) //B实现了接口1\n    a.depend2(new B()) // B实现了接口2\n    let c = new C()\n    c.depend2(new D()) // D实现了接口2\n    c.depend3(new D()) // D实现了接口3\n  }\n}\n```\n**改进之后**\n```TS\ninterface Interface1 {\n  operation1(): void;\n}\ninterface Interface2 {\n  operation2(): void;\n}\ninterface Interface3 {\n  operation3(): void;\n}\n\nclass B implements Interface1, Interface2 {\n  public operation1(): void {\n    log('B实现了接口1')\n  }\n  public operation2(): void {\n    log('B实现了接口2')\n  }\n}\n\nclass D implements Interface2, Interface3 {\n  public operation2(): void {\n    log('D实现了接口2')\n  }\n  public operation3(): void {\n    log('D实现了接口3')\n  }\n}\n\nclass A {\n  public depend1(i: Interface1): void {\n    i.operation1()\n  }\n  public depend2(i: Interface2): void {\n    i.operation2()\n  }\n}\nclass C {\n  public depend2(i: Interface2): void {\n    i.operation2()\n  }\n  public depend3(i: Interface3): void {\n    i.operation3()\n  }\n}\nexport default class Segregation2 {\n  public static main(): void {\n    let a = new A()\n    a.depend1(new B()) //B实现了接口1\n    a.depend2(new B()) // B实现了接口2\n    let c = new C()\n    c.depend2(new D()) // D实现了接口2\n    c.depend3(new D()) // D实现了接口3\n  }\n}\n```\n设计接口的时候注意接口隔离，不要把，不同功能的接口放一起，以免实现代码的时候出现不必要的实现类代码。B,D实现类的代码,比之前减少了不必要的代码。\n\n### 依赖倒转(倒置)原则\n> 高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节，细节应该依赖抽象。依赖倒转原则中心思想是面向接口编程。遵循里氏替换原则\n  \n我们模拟一个人接收邮件，和接收消息的场景\n\n```TS\n  // 完成Persion 接收消息的功能\n  class Person {\n    public receive(email: Email): void {\n      console.log(email.getInfo())\n    }\n  }\n  class Email {\n    public getInfo(): string {\n      return \"电子邮件信息 Hello World\"\n    }\n  }\n\nclass DependecyInVersion {\n    public static main(): void {\n      let person = new Person();\n      person.receive(new Email())\n    }\n  }\n```\n上面的案例实现思路,简单,比较容易想到,但是如果我们还需要接收微信,QQ,短的消息显得不好扩展\n\n根据依赖倒转原则,我们应该引入一个IReceiver接口,表示接收者,这样Person类\n与接口IReceiver发生依赖,只要接口不变,Person无需改变,因为WeXin QQ等新都属接收业务范围,他们各自实现IReceiver接口就行。\n```TS\nclass DependecyInVersion2 {\n  public static main(): void {\n    let person = new Person();\n    person.receive(new Email())\n    person.receive(new QQ())\n  }\n}\n\n// 定义接收接口\ninterface IReceiver {\n  getInfo(): string;\n}\n// 定义Email消息\nclass Email implements IReceiver {\n  public getInfo(): string {\n    return '接收到 Email消息'\n  }\n}\n// 定义QQ消息\nclass QQ implements IReceiver {\n  public getInfo(): string {\n    return '接收到 QQ消息'\n  }\n}\n\n// 完成Persion 接收消息的功能,\n// 无论上层增加接收什么类型的消息,Persion类无需改变\nclass Person {\n  // 基于接口传递依赖关系\n  public receive(receiver: IReceiver): void {\n    console.log(receiver.getInfo())\n  }\n}\n```\n\n### 依赖关系的传递方式(这不是设计模式原则)\n为了实现接口分离，我们常常使用如下方式传递接口依赖关系。\n\n- 接口传递 (上面的案例就是基于接口传递依赖关系)\n- 构造方法传递\n- setter方法传递\n  \n```TS\n// 定义两个接口\n\ninterface Message {\n  info(): void\n}\ninterface IReceiver {\n  getInfo(): void;\n}\n\n```\n- 方式2 通过构造方法传递\n```TS\nclass MyMessage implements Message {\n  public receiver!: IReceiver\n  constructor(receiver: IReceiver) {\n    // 基于构造方法 传递 \n    this.receiver = receiver\n  }\n  public info() {\n    this.receiver.getInfo()\n  }\n}\nclass Receiver implements IReceiver {\n  getInfo(): void {\n    log(\"我接收到消息啦~~\")\n  }\n}\nclass DependecyInVersion3 {\n  public static main() {\n    let receiver = new Receiver()\n    let myMessage = new MyMessage(receiver)\n    myMessage.info()\n  }\n}\n```\n- 方式3 通过setter方法\n```TS\n\nclass MyMessage implements Message {\n  public receiver!: IReceiver; // TS要求添加 赋值断言\n  public setReceive(rec: IReceiver): void {\n    this.receiver = rec\n  }\n  public info() {\n    this.receiver.getInfo()\n  }\n}\nclass Receiver implements IReceiver {\n  getInfo(): void {\n    log(\"我接收到消息啦~~\")\n  }\n}\nclass DependecyInVersion3 {\n  public static main() {\n    let myMessage = new MyMessage()\n    myMessage.setReceive(new Receiver())\n    myMessage.info()\n  }\n}\n```\n\n### 里氏替换原则\n使用继承的时候，应尽量遵循里氏替换原则,在**子类中尽量不要重写父类方法**。里氏替换原则告诉我们，继承实际上让两个类耦合度增强了，在适当情况下，可以通过，**聚合，组合依赖来解决问题**。抱歉这个暂时没有找到很好的例子。\n\n### 开闭原则\n> 一个软件的类，模块和函数应该对扩展开发，对修改关闭。当软件需要变化时，尽量通过扩展软件实体行为来实现变化。而不是通过修改已有代码。\n\n我的定义一个画图的案例,在一个绘图的类中定义，绘制不同样子图形的情形，其实这边这个案例和第一种，单一责任原则有点类似了\n```TS\nimport { log } from 'util';\nexport default class OCP {\n// (使用方)\npublic static main(): void {\n    let graphiEditor = new GraphiEditor()\n    graphiEditor.drawShape(new Rectangle())\n    graphiEditor.drawShape(new Circle())\n  }\n}\n\n// 提供方\nclass GraphiEditor {\n  public drawShape(s: Shape): void {\n    if (s.mType == 1) {\n      log('绘制矩形')\n    } else if (s.mType == 2) {\n      log('绘制圆形')\n    }\n  }\n}\n// 提供方\nclass Shape {\n  public mType: number\n  constructor(mType: number) {\n    this.mType = mType\n  }\n}\n\n// 使用方\n// 画矩形的类\nclass Rectangle extends Shape {\n  constructor() {\n    super(1) // mType = 1\n  }\n}\n// 使用方\n// 画圆形的类\nclass Circle extends Shape {\n  constructor() {\n    super(2) // mType = 2\n  }\n}\n```\n\n上面的代码如果想要新增画三角形的类,发现扩展改变比较大,提供方，使用方代码都需要改变。现在经过如下修改，去掉if,else的判断，根据开闭原则，把具体的实现，放到使用方每个子类中自己实现，这样，想新增三角形的时候。只要使用方自己实现了三角形。不需要动提供方的代码\n\n```TS\nimport { log } from 'util';\n\n// 使用方\nexport default class OCP2 {\n  public static main(): void {\n    let graphiEditor = new GraphiEditor()\n    graphiEditor.drawShape(new Rectangle())\n    graphiEditor.drawShape(new Circle())\n    graphiEditor.drawShape(new Triangle())\n  }\n}\n\n// 提供 方\nclass GraphiEditor {\n  public drawShape(s: Shape): void {\n    s.draw()\n  }\n}\n\n// 提供方\nabstract class Shape {\n  abstract draw(): void;\n}\n\n//使用方\nclass Rectangle extends Shape {\n  public draw(): void {\n    log('绘制矩形')\n  }\n}\nclass Circle extends Shape {\n  public draw(): void {\n    log('绘制圆形')\n  }\n}\n// 现在扩展三角形\nclass Triangle extends Shape {\n  public draw(): void {\n    log('绘制三角形')\n  }\n}\n```\n### 迪米特法则\n\n>  高内聚，低耦合,尽量少对外暴露信息，一个类对自己依赖的类知道越少越好。类与类关系越密切，耦合度越大。越不利于代码更改。\n\n现在我们实现一个二叉搜索树并且二叉搜索树，提供了插入节点功能，和返回中序遍历（左节点->根节点->右节点）结果的功能\n\n- 不符合迪米特法则的实现\n```TS\nclass TreeNode {\n  val: number;\n  left: null | TreeNode;\n  right: null | TreeNode;\n  constructor(val:number){\n    this.val = val\n    this.left = null\n    this.right = null\n  }\n}\n//定义 二叉 搜索树\nclass BSTree{\n tree: null | TreeNode;\n constructor(){\n   this.tree = null\n }\n // 定义插入方法\n insert(node:TreeNode){\n   if(this.tree === null){\n     this.tree = node\n   } else {\n     let root = this.tree\n     while(true){\n         if(node.val>root.val){\n           if(root.right === null){\n             root.right = node\n             break\n           }\n           root = root.right\n         } else { \n           if(root.left === null){\n             root.left = node\n             break\n           }\n           root = root.left\n       }\n     }\n   }\n   return this.tree\n }\n inOrder(tree:TreeNode|null){\n  let res:number[] = []\n  function order(tree:TreeNode|null){\n    if(tree === null){\n      return res     \n    }\n    order(tree.left)\n    res.push(tree.val)\n    order(tree.right)\n    return res\n   }\n   order(tree)\n   return res\n }\n\n}\n// 实现一个二叉搜索树的功能\nclass Demeter{\n  public static main() {\n      let bsTree = new BSTree()\n      bsTree.insert(new TreeNode(8))\n      bsTree.insert(new TreeNode(7))\n      bsTree.insert(new TreeNode(11))\n      bsTree.insert(new TreeNode(9))\n      bsTree.insert(new TreeNode(3))\n      bsTree.insert(new TreeNode(2))\n      // 放入的顺序[8,7,11,9,3,2]\n      let res = bsTree.inOrder(bsTree.tree)\n      console.log(res) // [2, 3, 7, 8, 9, 11]\n  }\n}\n```\n从上述代码可以看出，用户在使用二叉搜索树的时候,insert方法暴露给用户的信息太多了。具体的插入流程其实不需要让用户实现。用户提供数据就行了。还有中序遍历的时候，其实没必要接收用户的参数(当然这个错是我故意这么写的，想个案例不容易啊/(ㄒoㄒ)/~~)\n\n- 修改之后\n  \n```TS\nclass TreeNode {\n  val: number;\n  left: null | TreeNode;\n  right: null | TreeNode;\n  constructor(val:number){\n    this.val = val\n    this.left = null\n    this.right = null\n  }\n}\n// 定义 二叉搜索树\nclass BSTree{\n tree: null | TreeNode;\n constructor(){\n   this.tree = null\n }\n // 改成接收 不定参数\n // 去掉返回值，让用户 只能有 new BSTree().tree 一种方式 获取的根节点\n insert(...args:Array<number>):void{\n   let handleInsert = (node:TreeNode) => {\n    if(this.tree === null){\n      this.tree = node\n    } else {\n      let root = this.tree\n      while(true){\n          if(node.val>root.val){\n            if(root.right === null){\n              root.right = node\n              break\n            }\n            root = root.right\n          } else { \n            if(root.left === null){\n              root.left = node\n              break\n            }\n          root = root.left\n        }\n      }\n    }\n   }\n  args.forEach(element =>handleInsert(new TreeNode(element)));\n }\n // 不需要接收参数\n inOrder():Array<number>{\n  let res:number[] = []\n  function order(tree:TreeNode|null){\n    if(tree === null){\n      return res     \n    }\n    order(tree.left)\n    res.push(tree.val)\n    order(tree.right)\n    return res\n   }\n   // 改成 this.tree 直接引用内部的\n   order(this.tree)\n   return res\n }\n\n}\n// 实现一个二叉搜索树的功能\nclass DemeterImprove{\n  public static main() {\n      let bsTree = new BSTree()\n      // 插入元素 8 7 11 9 3 2\n      bsTree.insert(8,7,11,9,3,2)\n      let res = bsTree.inOrder()\n      mlog.log(res) // [2, 3, 7, 8, 9, 11]\n  }\n}\n\n```\n\n\n## 开始设计模式\n对于设计模式，大家公认有23种基本的设计模式，由于学的比较慢,这边目前只介绍单利模式和工厂模式,剩下的设计模式会慢慢的在后面的文章中，用TS实现。\n\n### 单例模式\n就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例， 并且该类只提供一个取得其对象实例的方法(静态方法)。\n\n就是假如我们在一个系统中，需要频繁的使用某个对象，这时候如果反复的通过new，去实例化这个对象来使用，会造成不必要的内存损失。因此我们应该在对象内部提供静态属性等于实例化的这个类, 然后去通过类的静态属性获取实例化的类。案例如下\n\n现在假如 我们有一个Person类，要多处调用Person中的 `sayHello` 方法\n```js\nclass Person {\n  sayHello(){\n      console.log('Hello World JavaScript')\n  }\n}\nconsole.log(new Person() === new Person()) // false\n```\n通过上述console.log中的比较结果知道，假如我们需要使用多次，那么每次都要占用一个新内存。通过改变代码如下,可见我们通过类本身的静态属性访问该类不要每次都实例化这个类。\n```js\nclass Person {\n  static person = new Person()\n  sayHello(){\n      console.log('Hello World JavaScript')\n  }\n  // es6目前没有私有属性可不提供，get方法\n  // 在这里写了一个是模仿java，\n  static getPerson(){\n      return this.person\n  }\n}\nconsole.log(Person.getPerson() === Person.getPerson()) // true\n// 或者直接一点\nconsole.log(Person.person === Person.person) // true \n```\n上面这种单例模式，属性java中的饿汉式，还有懒汉式，静态内部类实现，利用枚举实现等。主要是因为java的类装载机制。和线程安全问题，js暂时不用考虑这些问题 O(∩_∩)O哈哈~。\n\n### 工厂模式\n工厂模式很多情形其实是为了解决，设计违反了前面提到的 **开闭原则的情景** 。这种类型的设计模式属于**创建型模式**，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。\n\n**优点：** 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。\n\n**缺点：** 每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。\n\n从如下代码中优缺点显而易见，调用的时候很方便，去工厂取东西，不用关系工厂后面是怎么实现的。但是每次修改，工厂和工厂后面的实现都要改。\n```js\n// 简单工厂模式\ninterface Shape{\n  // 定义一个表示形状的接口，里面有画的方法\n  draw()\n}\nclass Rectangle implements Shape{\n  draw(){\n    console.log('我画了一个矩形')\n  }\n}\nclass Squre implements Shape{\n  draw(){\n    console.log(\"我画了一个正方形\")\n  }\n}\n\nclass Circle implements Shape{\n  draw(){\n    console.log(\"我画了一个圆形\")\n  }\n}\n// 定义一个工厂\nclass ShapeFactory {\n  getShape(shapeType){\n    if(shapeType === null){\n      return null\n    }\n    if(shapeType === \"CIRCLE\"){\n      return new Circle()\n    }else if(shapeType === \"RECTANGLE\"){\n      return new Rectangle()\n    }else if(shapeType === \"SQUARE\"){\n      return new Squre()\n    }\n  }\n}\n\n//使用层\nfunction main(){\n  let shapeFactory = new ShapeFactory()\n  let circle = shapeFactory.getShape(\"CIRCLE\")\n  circle.draw() // 我画了一个圆形\n}\n```\n\n> 同样本篇是我看资料之后总结的。部分文字来源于网络","slug":"typescript","published":1,"updated":"2022-06-17T16:54:24.037Z","_id":"cl4ince6y0026cgufh7bq6kcl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>因为设计模式部分代码，可能需要用到接口等特性，因此需要使用TS,下面介绍一点TS基础的使用方法，对于可以用ES6实现的方式，我尽量采用ES6实现。23种设计模式,这一篇肯定写不完，前面都是基础准备，想节约时间的，可直接跳到<strong>开始设计模式那块</strong>,本篇只介绍了，单例模式和工厂模式</p>\n<h2 id=\"typescript简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#typescript简单介绍\"></a> TypeScript简单介绍</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装或者更新ts</span></span><br><span class=\"line\">npm install -g typescript</span><br><span class=\"line\"><span class=\"comment\"># 检测是否安装成功</span></span><br><span class=\"line\">tsc -version</span><br><span class=\"line\"><span class=\"comment\"># 编写.ts文件， 运行以下命令将ts文件转换成js</span></span><br><span class=\"line\"><span class=\"comment\"># 运行对应js文件即可</span></span><br><span class=\"line\">tsc [fileName].ts</span><br></pre></td></tr></table></figure>\n<h3 id=\"采用webpack的方式\"><a class=\"markdownIt-Anchor\" href=\"#采用webpack的方式\"></a> 采用webpack的方式</h3>\n<blockquote>\n<p>因为不想频繁的执行tsc命令自己搭建了，webpack的环境。<a href=\"https://github.com/ilovcoding/typescript-design-mode/blob/master/webpack.config.js\">配置链接</a>,clone下来项目后,在项目<code>src</code> 目录下编写对应ts代码即可,webpack会自动编译ts代码,<code>app.ts</code>是程序主入口。因此函数调用要在<code>app.ts</code>中运行。</p>\n</blockquote>\n<h3 id=\"typescript-数据类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-数据类型\"></a> TypeScript 数据类型</h3>\n<p>定义ts变量需要指定类型。或者会根据第一个赋值变量分配默认类型。未赋值变量默认类型为<code>any</code></p>\n<h4 id=\"布尔类型boolean\"><a class=\"markdownIt-Anchor\" href=\"#布尔类型boolean\"></a> 布尔类型(boolean)</h4>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">flag</span>:<span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// error code 不同类型不能赋值</span></span><br><span class=\"line\">flag = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数值类型number\"><a class=\"markdownIt-Anchor\" href=\"#数值类型number\"></a> 数值类型(number)</h4>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>:<span class=\"built_in\">number</span> = <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串类型string\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型string\"></a> 字符串类型(string)</h4>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&quot;string&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组类型array\"><a class=\"markdownIt-Anchor\" href=\"#数组类型array\"></a> 数组类型(array)</h4>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"元组类型tuple\"><a class=\"markdownIt-Anchor\" href=\"#元组类型tuple\"></a> 元组类型(tuple)</h4>\n<p>元组类型是数组类型的子集,元组不允许越界，每一个元祖类型都指定了一个数据类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:[<span class=\"built_in\">number</span>,<span class=\"built_in\">string</span>] = [<span class=\"number\">1</span>,<span class=\"string\">&#x27;str&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// error code 越界 左边类型长度为2 右边赋值长度为3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:[<span class=\"built_in\">number</span>,<span class=\"built_in\">string</span>] = [<span class=\"number\">1</span>,<span class=\"string\">&#x27;str&#x27;</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"枚举类型enum\"><a class=\"markdownIt-Anchor\" href=\"#枚举类型enum\"></a> 枚举类型(enum)</h4>\n<p>枚举中变量默认值是 按顺序赋值0,1,2 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span>,也可以给枚举中变量直接赋值,覆盖掉默认值。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Flag</span>&#123;</span><br><span class=\"line\">  success,</span><br><span class=\"line\">  fail,</span><br><span class=\"line\">  unknow = <span class=\"string\">&#x27;unknow&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">success</span>:<span class=\"title class_\">Flag</span> = <span class=\"title class_\">Flag</span>.<span class=\"property\">success</span> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(success) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Flag</span>.<span class=\"property\">fail</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Flag</span>.<span class=\"property\">unknow</span>) <span class=\"comment\">// unknow</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"never类型\"><a class=\"markdownIt-Anchor\" href=\"#never类型\"></a> never类型</h4>\n<p>null和undefined,是never 类型的子集。还有一种是不会出现的类型,例如没有返回值的函数。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>:<span class=\"literal\">null</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num)  <span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">unde</span>:<span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(unde) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数的重载\"><a class=\"markdownIt-Anchor\" href=\"#函数的重载\"></a> 函数的重载</h3>\n<p>相同的函数名称，接收不同的参数，最后一个函数必须要给出函数的实现。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">userInfo</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">userInfo</span>(<span class=\"params\">age: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">userInfo</span>(<span class=\"params\">info: <span class=\"built_in\">any</span></span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> info === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`my name is <span class=\"subst\">$&#123;info&#125;</span>`</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`my age is <span class=\"subst\">$&#123;info&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">userInfo</span>(<span class=\"string\">&#x27;wmw&#x27;</span>))  <span class=\"comment\">// my name is wmw</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">userInfo</span>(<span class=\"number\">18</span>)) <span class=\"comment\">//  my age is 18</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类的写法\"><a class=\"markdownIt-Anchor\" href=\"#类的写法\"></a> 类的写法</h3>\n<p>TS中类的写法大体上和ES6差不多,TS可以对类中变量，方法，指定私有还是公有的属性,在构造器中定义初始的变量时，要在构造器前声明一下变量,如果是继承类只需要声明自身独有的属性即可,继承自父类的属性可不必声明,下面对比一下两者的写法。</p>\n<ul>\n<li>ES6的写法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> point = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Point</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">x, y, color</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">super</span>(x, y)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = color</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> world = <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">\thello = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">\t<span class=\"title function_\">say</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hello</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"title function_\">time</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">world</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TS的写法</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在构造器前声明了x,y</span></span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">x:<span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> point = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只需声明color,继承来的x,y不必声明</span></span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">x:<span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span>, color:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">super</span>(x, y)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = color</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 可以指定变量为私有属性，(只是在写代码层面上报错)</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> world = <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> hello = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">say</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hello</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">time</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">world</span>)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"接口\"><a class=\"markdownIt-Anchor\" href=\"#接口\"></a> 接口</h3>\n<p>TS比ES6多提供了接口的功能,一个类要实现接口,必须要实现接口指定的属性和方法</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义人的接口，指定了名字，年龄，和爱好</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"attr\">hobby</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;,</span><br><span class=\"line\">  <span class=\"title function_\">sayHobby</span>():<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据这个接口 定义一个类小明</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XiaoMing</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>  </span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"attr\">hobby</span>: <span class=\"built_in\">string</span>[]</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>,age: <span class=\"built_in\">number</span>,hobby: <span class=\"built_in\">string</span>[]</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">hobby</span> = hobby</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">sayHobby</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`我喜欢,<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.hobby.join(<span class=\"string\">&#x27;,&#x27;</span>)&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaoMing = <span class=\"keyword\">new</span> <span class=\"title class_\">XiaoMing</span>(<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"number\">18</span>,[<span class=\"string\">&#x27;唱&#x27;</span>,<span class=\"string\">&#x27;跳&#x27;</span>,<span class=\"string\">&#x27;rap&#x27;</span>,<span class=\"string\">&#x27;*球&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"设计模式的基本原则\"><a class=\"markdownIt-Anchor\" href=\"#设计模式的基本原则\"></a> 设计模式的基本原则</h2>\n<p>之所以会有设计模式，很大程度上是为了代码的整洁性，重用性，可靠性，可扩展性，等等，总之你写的代码不仅仅是代码，更应该是一个工程，为了这个工程的未来，每个人都应该努力提高自己的代码质量。很多时候是和他人一起合作的工程。设计模式需要遵守的七大原则</p>\n<ul>\n<li>单一责任原则</li>\n<li>接口隔离原则</li>\n<li>依赖倒转(倒置)原则</li>\n<li>里氏替换原则</li>\n<li>开闭原则</li>\n<li>迪米特法则</li>\n<li>合成复用原则</li>\n</ul>\n<h3 id=\"单一责任原则\"><a class=\"markdownIt-Anchor\" href=\"#单一责任原则\"></a> 单一责任原则</h3>\n<blockquote>\n<p>字面意思，一个类只负责一件事，尽量降低类的复杂度，更不可以把丝毫不相关的代码放在一个类中。</p>\n</blockquote>\n<ul>\n<li>降低类或者方法的复杂度，</li>\n<li>提代码可读性可维护性。</li>\n<li>降低变更代码引起的风险。</li>\n</ul>\n<p>案例:指定一个交通工具类，类中，指定每种交通工具的运行途径，比如汽车陆地上，飞机空中等</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一的 run方法 很明显 ，把 飞机汽车的运行方式，放一起</span></span><br><span class=\"line\"><span class=\"comment\">// 不利于代码以后扩展</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\">vehicle,<span class=\"keyword\">type</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vehicle === <span class=\"string\">&#x27;car&#x27;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;car在陆地上运行&quot;</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(vehicle === <span class=\"string\">&#x27;aircraft&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;aircraft在空中运行&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决方法一 把各个功能不同的交通工具拆成不同类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RoadVehicle</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\">vehicle</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vehicle + <span class=\"string\">&#x27;在陆地上运行&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AirVehicle</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\">vehicle</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vehicle + <span class=\"string\">&#x27;在空中运行&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 解决方法2 在方法层面上实现 单一原则</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\">vehicle</span>)&#123;</span><br><span class=\"line\">    retun vehicle + <span class=\"string\">&quot;在陆地上运行&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">runAir</span>(<span class=\"params\">vehicle</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vehicle + <span class=\"string\">&quot;在空中运行&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"接口隔离原则\"><a class=\"markdownIt-Anchor\" href=\"#接口隔离原则\"></a> 接口隔离原则</h3>\n<blockquote>\n<p>一个类 实现接口时，应该基于接口的最小接口，如果接口中含有大量他不需要的方法，应该拆分接口</p>\n</blockquote>\n<ul>\n<li>减少不必要的代码。</li>\n<li>代码逻辑关系更清晰,程序稳定性更好</li>\n</ul>\n<p>设计一个情形，B,D类 都实现了接口1,A,C通过接口依赖于B,D。但是A只需要接口中<code>operation1</code>,<code>operation2</code> 但是 C需要<code>operation1</code>,<code>operation2</code> 。 因此,如果只定义一个接口1，B,D中 都有不必要的代码。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Interface1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">operation1</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">operation3</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interface1</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation1</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B实现了接口1&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B实现了接口2&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 不必要的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation3</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B实现了接口3&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interface1</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不必要的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation1</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D实现了接口1&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D实现了接口2&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation3</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D实现了接口3&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend1</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface1</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation1</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend2</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface1</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation2</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend2</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface1</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation2</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend3</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface1</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation3</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Segregation</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">    a.<span class=\"title function_\">depend1</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()) <span class=\"comment\">//B实现了接口1</span></span><br><span class=\"line\">    a.<span class=\"title function_\">depend2</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()) <span class=\"comment\">// B实现了接口2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> <span class=\"title function_\">C</span>()</span><br><span class=\"line\">    c.<span class=\"title function_\">depend2</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">D</span>()) <span class=\"comment\">// D实现了接口2</span></span><br><span class=\"line\">    c.<span class=\"title function_\">depend3</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">D</span>()) <span class=\"comment\">// D实现了接口3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>改进之后</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Interface1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">operation1</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Interface2</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Interface3</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">operation3</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interface1</span>, <span class=\"title class_\">Interface2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation1</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B实现了接口1&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B实现了接口2&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interface2</span>, <span class=\"title class_\">Interface3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D实现了接口2&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation3</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D实现了接口3&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend1</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface1</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation1</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend2</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface2</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation2</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend2</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface2</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation2</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend3</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface3</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation3</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Segregation2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">    a.<span class=\"title function_\">depend1</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()) <span class=\"comment\">//B实现了接口1</span></span><br><span class=\"line\">    a.<span class=\"title function_\">depend2</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()) <span class=\"comment\">// B实现了接口2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> <span class=\"title function_\">C</span>()</span><br><span class=\"line\">    c.<span class=\"title function_\">depend2</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">D</span>()) <span class=\"comment\">// D实现了接口2</span></span><br><span class=\"line\">    c.<span class=\"title function_\">depend3</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">D</span>()) <span class=\"comment\">// D实现了接口3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设计接口的时候注意接口隔离，不要把，不同功能的接口放一起，以免实现代码的时候出现不必要的实现类代码。B,D实现类的代码,比之前减少了不必要的代码。</p>\n<h3 id=\"依赖倒转倒置原则\"><a class=\"markdownIt-Anchor\" href=\"#依赖倒转倒置原则\"></a> 依赖倒转(倒置)原则</h3>\n<blockquote>\n<p>高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节，细节应该依赖抽象。依赖倒转原则中心思想是面向接口编程。遵循里氏替换原则</p>\n</blockquote>\n<p>我们模拟一个人接收邮件，和接收消息的场景</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 完成Persion 接收消息的功能</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">receive</span>(<span class=\"attr\">email</span>: <span class=\"title class_\">Email</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(email.<span class=\"title function_\">getInfo</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Email</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;电子邮件信息 Hello World&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DependecyInVersion</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">      person.<span class=\"title function_\">receive</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Email</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上面的案例实现思路,简单,比较容易想到,但是如果我们还需要接收微信,QQ,短的消息显得不好扩展</p>\n<p>根据依赖倒转原则,我们应该引入一个IReceiver接口,表示接收者,这样Person类<br />\n与接口IReceiver发生依赖,只要接口不变,Person无需改变,因为WeXin QQ等新都属接收业务范围,他们各自实现IReceiver接口就行。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DependecyInVersion2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">    person.<span class=\"title function_\">receive</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Email</span>())</span><br><span class=\"line\">    person.<span class=\"title function_\">receive</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">QQ</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义接收接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义Email消息</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Email</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;接收到 Email消息&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义QQ消息</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QQ</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;接收到 QQ消息&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 完成Persion 接收消息的功能,</span></span><br><span class=\"line\"><span class=\"comment\">// 无论上层增加接收什么类型的消息,Persion类无需改变</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 基于接口传递依赖关系</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">receive</span>(<span class=\"attr\">receiver</span>: <span class=\"title class_\">IReceiver</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(receiver.<span class=\"title function_\">getInfo</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"依赖关系的传递方式这不是设计模式原则\"><a class=\"markdownIt-Anchor\" href=\"#依赖关系的传递方式这不是设计模式原则\"></a> 依赖关系的传递方式(这不是设计模式原则)</h3>\n<p>为了实现接口分离，我们常常使用如下方式传递接口依赖关系。</p>\n<ul>\n<li>接口传递 (上面的案例就是基于接口传递依赖关系)</li>\n<li>构造方法传递</li>\n<li>setter方法传递</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义两个接口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Message</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">info</span>(): <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>方式2 通过构造方法传递</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyMessage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Message</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> receiver!: <span class=\"title class_\">IReceiver</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">receiver: IReceiver</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基于构造方法 传递 </span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">receiver</span> = receiver</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">info</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">receiver</span>.<span class=\"title function_\">getInfo</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Receiver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&quot;我接收到消息啦~~&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DependecyInVersion3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> receiver = <span class=\"keyword\">new</span> <span class=\"title class_\">Receiver</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myMessage = <span class=\"keyword\">new</span> <span class=\"title class_\">MyMessage</span>(receiver)</span><br><span class=\"line\">    myMessage.<span class=\"title function_\">info</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方式3 通过setter方法</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyMessage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Message</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> receiver!: <span class=\"title class_\">IReceiver</span>; <span class=\"comment\">// TS要求添加 赋值断言</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">setReceive</span>(<span class=\"attr\">rec</span>: <span class=\"title class_\">IReceiver</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">receiver</span> = rec</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">info</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">receiver</span>.<span class=\"title function_\">getInfo</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Receiver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&quot;我接收到消息啦~~&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DependecyInVersion3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myMessage = <span class=\"keyword\">new</span> <span class=\"title class_\">MyMessage</span>()</span><br><span class=\"line\">    myMessage.<span class=\"title function_\">setReceive</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Receiver</span>())</span><br><span class=\"line\">    myMessage.<span class=\"title function_\">info</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"里氏替换原则\"><a class=\"markdownIt-Anchor\" href=\"#里氏替换原则\"></a> 里氏替换原则</h3>\n<p>使用继承的时候，应尽量遵循里氏替换原则,在<strong>子类中尽量不要重写父类方法</strong>。里氏替换原则告诉我们，继承实际上让两个类耦合度增强了，在适当情况下，可以通过，<strong>聚合，组合依赖来解决问题</strong>。抱歉这个暂时没有找到很好的例子。</p>\n<h3 id=\"开闭原则\"><a class=\"markdownIt-Anchor\" href=\"#开闭原则\"></a> 开闭原则</h3>\n<blockquote>\n<p>一个软件的类，模块和函数应该对扩展开发，对修改关闭。当软件需要变化时，尽量通过扩展软件实体行为来实现变化。而不是通过修改已有代码。</p>\n</blockquote>\n<p>我的定义一个画图的案例,在一个绘图的类中定义，绘制不同样子图形的情形，其实这边这个案例和第一种，单一责任原则有点类似了</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; log &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;util&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OCP</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// (使用方)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> graphiEditor = <span class=\"keyword\">new</span> <span class=\"title class_\">GraphiEditor</span>()</span><br><span class=\"line\">    graphiEditor.<span class=\"title function_\">drawShape</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>())</span><br><span class=\"line\">    graphiEditor.<span class=\"title function_\">drawShape</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供方</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphiEditor</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">drawShape</span>(<span class=\"attr\">s</span>: <span class=\"title class_\">Shape</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.<span class=\"property\">mType</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;绘制矩形&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.<span class=\"property\">mType</span> == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;绘制圆形&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 提供方</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">mType</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">mType: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">mType</span> = mType</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用方</span></span><br><span class=\"line\"><span class=\"comment\">// 画矩形的类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(<span class=\"number\">1</span>) <span class=\"comment\">// mType = 1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用方</span></span><br><span class=\"line\"><span class=\"comment\">// 画圆形的类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(<span class=\"number\">2</span>) <span class=\"comment\">// mType = 2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码如果想要新增画三角形的类,发现扩展改变比较大,提供方，使用方代码都需要改变。现在经过如下修改，去掉if,else的判断，根据开闭原则，把具体的实现，放到使用方每个子类中自己实现，这样，想新增三角形的时候。只要使用方自己实现了三角形。不需要动提供方的代码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; log &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;util&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用方</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OCP2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> graphiEditor = <span class=\"keyword\">new</span> <span class=\"title class_\">GraphiEditor</span>()</span><br><span class=\"line\">    graphiEditor.<span class=\"title function_\">drawShape</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>())</span><br><span class=\"line\">    graphiEditor.<span class=\"title function_\">drawShape</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>())</span><br><span class=\"line\">    graphiEditor.<span class=\"title function_\">drawShape</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Triangle</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供 方</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphiEditor</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">drawShape</span>(<span class=\"attr\">s</span>: <span class=\"title class_\">Shape</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    s.<span class=\"title function_\">draw</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供方</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">draw</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用方</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">draw</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;绘制矩形&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">draw</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;绘制圆形&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 现在扩展三角形</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Triangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">draw</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;绘制三角形&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"迪米特法则\"><a class=\"markdownIt-Anchor\" href=\"#迪米特法则\"></a> 迪米特法则</h3>\n<blockquote>\n<p>高内聚，低耦合,尽量少对外暴露信息，一个类对自己依赖的类知道越少越好。类与类关系越密切，耦合度越大。越不利于代码更改。</p>\n</blockquote>\n<p>现在我们实现一个二叉搜索树并且二叉搜索树，提供了插入节点功能，和返回中序遍历（左节点-&gt;根节点-&gt;右节点）结果的功能</p>\n<ul>\n<li>不符合迪米特法则的实现</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">val</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">left</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\">  <span class=\"attr\">right</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val:<span class=\"built_in\">number</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义 二叉 搜索树</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BSTree</span>&#123;</span><br><span class=\"line\"> <span class=\"attr\">tree</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\"> <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 定义插入方法</span></span><br><span class=\"line\"> <span class=\"title function_\">insert</span>(<span class=\"params\">node:TreeNode</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = node</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> root = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span></span><br><span class=\"line\">     <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(node.<span class=\"property\">val</span>&gt;root.<span class=\"property\">val</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(root.<span class=\"property\">right</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">             root.<span class=\"property\">right</span> = node</span><br><span class=\"line\">             <span class=\"keyword\">break</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           root = root.<span class=\"property\">right</span></span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">           <span class=\"keyword\">if</span>(root.<span class=\"property\">left</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">             root.<span class=\"property\">left</span> = node</span><br><span class=\"line\">             <span class=\"keyword\">break</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           root = root.<span class=\"property\">left</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"title function_\">inOrder</span>(<span class=\"params\">tree:TreeNode|<span class=\"literal\">null</span></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">res</span>:<span class=\"built_in\">number</span>[] = []</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">order</span>(<span class=\"params\">tree:TreeNode|<span class=\"literal\">null</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">order</span>(tree.<span class=\"property\">left</span>)</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(tree.<span class=\"property\">val</span>)</span><br><span class=\"line\">    <span class=\"title function_\">order</span>(tree.<span class=\"property\">right</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">order</span>(tree)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> res</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实现一个二叉搜索树的功能</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Demeter</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> bsTree = <span class=\"keyword\">new</span> <span class=\"title class_\">BSTree</span>()</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">8</span>))</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">7</span>))</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">9</span>))</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">      <span class=\"comment\">// 放入的顺序[8,7,11,9,3,2]</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = bsTree.<span class=\"title function_\">inOrder</span>(bsTree.<span class=\"property\">tree</span>)</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// [2, 3, 7, 8, 9, 11]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上述代码可以看出，用户在使用二叉搜索树的时候,insert方法暴露给用户的信息太多了。具体的插入流程其实不需要让用户实现。用户提供数据就行了。还有中序遍历的时候，其实没必要接收用户的参数(当然这个错是我故意这么写的，想个案例不容易啊/(ㄒoㄒ)/~~)</p>\n<ul>\n<li>修改之后</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">val</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">left</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\">  <span class=\"attr\">right</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val:<span class=\"built_in\">number</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义 二叉搜索树</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BSTree</span>&#123;</span><br><span class=\"line\"> <span class=\"attr\">tree</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\"> <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 改成接收 不定参数</span></span><br><span class=\"line\"> <span class=\"comment\">// 去掉返回值，让用户 只能有 new BSTree().tree 一种方式 获取的根节点</span></span><br><span class=\"line\"> <span class=\"title function_\">insert</span>(...<span class=\"attr\">args</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;):<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"title function_\">handleInsert</span> = (<span class=\"params\">node:TreeNode</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = node</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> root = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(node.<span class=\"property\">val</span>&gt;root.<span class=\"property\">val</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.<span class=\"property\">right</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">              root.<span class=\"property\">right</span> = node</span><br><span class=\"line\">              <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            root = root.<span class=\"property\">right</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.<span class=\"property\">left</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">              root.<span class=\"property\">left</span> = node</span><br><span class=\"line\">              <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          root = root.<span class=\"property\">left</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  args.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span><span class=\"title function_\">handleInsert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(element)));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 不需要接收参数</span></span><br><span class=\"line\"> <span class=\"title function_\">inOrder</span>():<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">res</span>:<span class=\"built_in\">number</span>[] = []</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">order</span>(<span class=\"params\">tree:TreeNode|<span class=\"literal\">null</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">order</span>(tree.<span class=\"property\">left</span>)</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(tree.<span class=\"property\">val</span>)</span><br><span class=\"line\">    <span class=\"title function_\">order</span>(tree.<span class=\"property\">right</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 改成 this.tree 直接引用内部的</span></span><br><span class=\"line\">   <span class=\"title function_\">order</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">tree</span>)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> res</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实现一个二叉搜索树的功能</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DemeterImprove</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> bsTree = <span class=\"keyword\">new</span> <span class=\"title class_\">BSTree</span>()</span><br><span class=\"line\">      <span class=\"comment\">// 插入元素 8 7 11 9 3 2</span></span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = bsTree.<span class=\"title function_\">inOrder</span>()</span><br><span class=\"line\">      mlog.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// [2, 3, 7, 8, 9, 11]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始设计模式\"><a class=\"markdownIt-Anchor\" href=\"#开始设计模式\"></a> 开始设计模式</h2>\n<p>对于设计模式，大家公认有23种基本的设计模式，由于学的比较慢,这边目前只介绍单利模式和工厂模式,剩下的设计模式会慢慢的在后面的文章中，用TS实现。</p>\n<h3 id=\"单例模式\"><a class=\"markdownIt-Anchor\" href=\"#单例模式\"></a> 单例模式</h3>\n<p>就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例， 并且该类只提供一个取得其对象实例的方法(静态方法)。</p>\n<p>就是假如我们在一个系统中，需要频繁的使用某个对象，这时候如果反复的通过new，去实例化这个对象来使用，会造成不必要的内存损失。因此我们应该在对象内部提供静态属性等于实例化的这个类, 然后去通过类的静态属性获取实例化的类。案例如下</p>\n<p>现在假如 我们有一个Person类，要多处调用Person中的 <code>sayHello</code> 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello World JavaScript&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>() === <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>通过上述console.log中的比较结果知道，假如我们需要使用多次，那么每次都要占用一个新内存。通过改变代码如下,可见我们通过类本身的静态属性访问该类不要每次都实例化这个类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\">  <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello World JavaScript&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// es6目前没有私有属性可不提供，get方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 在这里写了一个是模仿java，</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">getPerson</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">person</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"title function_\">getPerson</span>() === <span class=\"title class_\">Person</span>.<span class=\"title function_\">getPerson</span>()) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 或者直接一点</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\">person</span> === <span class=\"title class_\">Person</span>.<span class=\"property\">person</span>) <span class=\"comment\">// true </span></span><br></pre></td></tr></table></figure>\n<p>上面这种单例模式，属性java中的饿汉式，还有懒汉式，静态内部类实现，利用枚举实现等。主要是因为java的类装载机制。和线程安全问题，js暂时不用考虑这些问题 O(∩_∩)O哈哈~。</p>\n<h3 id=\"工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#工厂模式\"></a> 工厂模式</h3>\n<p>工厂模式很多情形其实是为了解决，设计违反了前面提到的 <strong>开闭原则的情景</strong> 。这种类型的设计模式属于<strong>创建型模式</strong>，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n<p><strong>优点：</strong> 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>\n<p><strong>缺点：</strong> 每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</p>\n<p>从如下代码中优缺点显而易见，调用的时候很方便，去工厂取东西，不用关系工厂后面是怎么实现的。但是每次修改，工厂和工厂后面的实现都要改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单工厂模式</span></span><br><span class=\"line\">interface <span class=\"title class_\">Shape</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个表示形状的接口，里面有画的方法</span></span><br><span class=\"line\">  <span class=\"title function_\">draw</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> implements <span class=\"title class_\">Shape</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">draw</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我画了一个矩形&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Squre</span> implements <span class=\"title class_\">Shape</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">draw</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我画了一个正方形&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> implements <span class=\"title class_\">Shape</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">draw</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我画了一个圆形&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义一个工厂</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ShapeFactory</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getShape</span>(<span class=\"params\">shapeType</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(shapeType === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(shapeType === <span class=\"string\">&quot;CIRCLE&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shapeType === <span class=\"string\">&quot;RECTANGLE&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shapeType === <span class=\"string\">&quot;SQUARE&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Squre</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用层</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> shapeFactory = <span class=\"keyword\">new</span> <span class=\"title class_\">ShapeFactory</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> circle = shapeFactory.<span class=\"title function_\">getShape</span>(<span class=\"string\">&quot;CIRCLE&quot;</span>)</span><br><span class=\"line\">  circle.<span class=\"title function_\">draw</span>() <span class=\"comment\">// 我画了一个圆形</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>同样本篇是我看资料之后总结的。部分文字来源于网络</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>因为设计模式部分代码，可能需要用到接口等特性，因此需要使用TS,下面介绍一点TS基础的使用方法，对于可以用ES6实现的方式，我尽量采用ES6实现。23种设计模式,这一篇肯定写不完，前面都是基础准备，想节约时间的，可直接跳到<strong>开始设计模式那块</strong>,本篇只介绍了，单例模式和工厂模式</p>\n<h2 id=\"typescript简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#typescript简单介绍\"></a> TypeScript简单介绍</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装或者更新ts</span></span><br><span class=\"line\">npm install -g typescript</span><br><span class=\"line\"><span class=\"comment\"># 检测是否安装成功</span></span><br><span class=\"line\">tsc -version</span><br><span class=\"line\"><span class=\"comment\"># 编写.ts文件， 运行以下命令将ts文件转换成js</span></span><br><span class=\"line\"><span class=\"comment\"># 运行对应js文件即可</span></span><br><span class=\"line\">tsc [fileName].ts</span><br></pre></td></tr></table></figure>\n<h3 id=\"采用webpack的方式\"><a class=\"markdownIt-Anchor\" href=\"#采用webpack的方式\"></a> 采用webpack的方式</h3>\n<blockquote>\n<p>因为不想频繁的执行tsc命令自己搭建了，webpack的环境。<a href=\"https://github.com/ilovcoding/typescript-design-mode/blob/master/webpack.config.js\">配置链接</a>,clone下来项目后,在项目<code>src</code> 目录下编写对应ts代码即可,webpack会自动编译ts代码,<code>app.ts</code>是程序主入口。因此函数调用要在<code>app.ts</code>中运行。</p>\n</blockquote>\n<h3 id=\"typescript-数据类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-数据类型\"></a> TypeScript 数据类型</h3>\n<p>定义ts变量需要指定类型。或者会根据第一个赋值变量分配默认类型。未赋值变量默认类型为<code>any</code></p>\n<h4 id=\"布尔类型boolean\"><a class=\"markdownIt-Anchor\" href=\"#布尔类型boolean\"></a> 布尔类型(boolean)</h4>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">flag</span>:<span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// error code 不同类型不能赋值</span></span><br><span class=\"line\">flag = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数值类型number\"><a class=\"markdownIt-Anchor\" href=\"#数值类型number\"></a> 数值类型(number)</h4>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>:<span class=\"built_in\">number</span> = <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串类型string\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型string\"></a> 字符串类型(string)</h4>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&quot;string&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数组类型array\"><a class=\"markdownIt-Anchor\" href=\"#数组类型array\"></a> 数组类型(array)</h4>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"元组类型tuple\"><a class=\"markdownIt-Anchor\" href=\"#元组类型tuple\"></a> 元组类型(tuple)</h4>\n<p>元组类型是数组类型的子集,元组不允许越界，每一个元祖类型都指定了一个数据类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:[<span class=\"built_in\">number</span>,<span class=\"built_in\">string</span>] = [<span class=\"number\">1</span>,<span class=\"string\">&#x27;str&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// error code 越界 左边类型长度为2 右边赋值长度为3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr</span>:[<span class=\"built_in\">number</span>,<span class=\"built_in\">string</span>] = [<span class=\"number\">1</span>,<span class=\"string\">&#x27;str&#x27;</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"枚举类型enum\"><a class=\"markdownIt-Anchor\" href=\"#枚举类型enum\"></a> 枚举类型(enum)</h4>\n<p>枚举中变量默认值是 按顺序赋值0,1,2 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span>,也可以给枚举中变量直接赋值,覆盖掉默认值。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Flag</span>&#123;</span><br><span class=\"line\">  success,</span><br><span class=\"line\">  fail,</span><br><span class=\"line\">  unknow = <span class=\"string\">&#x27;unknow&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">success</span>:<span class=\"title class_\">Flag</span> = <span class=\"title class_\">Flag</span>.<span class=\"property\">success</span> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(success) <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Flag</span>.<span class=\"property\">fail</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Flag</span>.<span class=\"property\">unknow</span>) <span class=\"comment\">// unknow</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"never类型\"><a class=\"markdownIt-Anchor\" href=\"#never类型\"></a> never类型</h4>\n<p>null和undefined,是never 类型的子集。还有一种是不会出现的类型,例如没有返回值的函数。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>:<span class=\"literal\">null</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num)  <span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">unde</span>:<span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(unde) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数的重载\"><a class=\"markdownIt-Anchor\" href=\"#函数的重载\"></a> 函数的重载</h3>\n<p>相同的函数名称，接收不同的参数，最后一个函数必须要给出函数的实现。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">userInfo</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">userInfo</span>(<span class=\"params\">age: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">userInfo</span>(<span class=\"params\">info: <span class=\"built_in\">any</span></span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> info === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`my name is <span class=\"subst\">$&#123;info&#125;</span>`</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`my age is <span class=\"subst\">$&#123;info&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">userInfo</span>(<span class=\"string\">&#x27;wmw&#x27;</span>))  <span class=\"comment\">// my name is wmw</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">userInfo</span>(<span class=\"number\">18</span>)) <span class=\"comment\">//  my age is 18</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类的写法\"><a class=\"markdownIt-Anchor\" href=\"#类的写法\"></a> 类的写法</h3>\n<p>TS中类的写法大体上和ES6差不多,TS可以对类中变量，方法，指定私有还是公有的属性,在构造器中定义初始的变量时，要在构造器前声明一下变量,如果是继承类只需要声明自身独有的属性即可,继承自父类的属性可不必声明,下面对比一下两者的写法。</p>\n<ul>\n<li>ES6的写法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> point = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Point</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">x, y, color</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">super</span>(x, y)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = color</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> world = <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">\thello = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">\t<span class=\"title function_\">say</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hello</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"title function_\">time</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">world</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TS的写法</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在构造器前声明了x,y</span></span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">x:<span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> point = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只需声明color,继承来的x,y不必声明</span></span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">x:<span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span>, color:<span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">super</span>(x, y)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">color</span> = color</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 可以指定变量为私有属性，(只是在写代码层面上报错)</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> world = <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> hello = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">say</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hello</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">time</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">world</span>)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"接口\"><a class=\"markdownIt-Anchor\" href=\"#接口\"></a> 接口</h3>\n<p>TS比ES6多提供了接口的功能,一个类要实现接口,必须要实现接口指定的属性和方法</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义人的接口，指定了名字，年龄，和爱好</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>,</span><br><span class=\"line\">  <span class=\"attr\">hobby</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;,</span><br><span class=\"line\">  <span class=\"title function_\">sayHobby</span>():<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据这个接口 定义一个类小明</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XiaoMing</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>  </span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"attr\">hobby</span>: <span class=\"built_in\">string</span>[]</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>,age: <span class=\"built_in\">number</span>,hobby: <span class=\"built_in\">string</span>[]</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">hobby</span> = hobby</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">sayHobby</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`我喜欢,<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.hobby.join(<span class=\"string\">&#x27;,&#x27;</span>)&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaoMing = <span class=\"keyword\">new</span> <span class=\"title class_\">XiaoMing</span>(<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"number\">18</span>,[<span class=\"string\">&#x27;唱&#x27;</span>,<span class=\"string\">&#x27;跳&#x27;</span>,<span class=\"string\">&#x27;rap&#x27;</span>,<span class=\"string\">&#x27;*球&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"设计模式的基本原则\"><a class=\"markdownIt-Anchor\" href=\"#设计模式的基本原则\"></a> 设计模式的基本原则</h2>\n<p>之所以会有设计模式，很大程度上是为了代码的整洁性，重用性，可靠性，可扩展性，等等，总之你写的代码不仅仅是代码，更应该是一个工程，为了这个工程的未来，每个人都应该努力提高自己的代码质量。很多时候是和他人一起合作的工程。设计模式需要遵守的七大原则</p>\n<ul>\n<li>单一责任原则</li>\n<li>接口隔离原则</li>\n<li>依赖倒转(倒置)原则</li>\n<li>里氏替换原则</li>\n<li>开闭原则</li>\n<li>迪米特法则</li>\n<li>合成复用原则</li>\n</ul>\n<h3 id=\"单一责任原则\"><a class=\"markdownIt-Anchor\" href=\"#单一责任原则\"></a> 单一责任原则</h3>\n<blockquote>\n<p>字面意思，一个类只负责一件事，尽量降低类的复杂度，更不可以把丝毫不相关的代码放在一个类中。</p>\n</blockquote>\n<ul>\n<li>降低类或者方法的复杂度，</li>\n<li>提代码可读性可维护性。</li>\n<li>降低变更代码引起的风险。</li>\n</ul>\n<p>案例:指定一个交通工具类，类中，指定每种交通工具的运行途径，比如汽车陆地上，飞机空中等</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一的 run方法 很明显 ，把 飞机汽车的运行方式，放一起</span></span><br><span class=\"line\"><span class=\"comment\">// 不利于代码以后扩展</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\">vehicle,<span class=\"keyword\">type</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vehicle === <span class=\"string\">&#x27;car&#x27;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;car在陆地上运行&quot;</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(vehicle === <span class=\"string\">&#x27;aircraft&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;aircraft在空中运行&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决方法一 把各个功能不同的交通工具拆成不同类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RoadVehicle</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\">vehicle</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vehicle + <span class=\"string\">&#x27;在陆地上运行&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AirVehicle</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\">vehicle</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vehicle + <span class=\"string\">&#x27;在空中运行&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 解决方法2 在方法层面上实现 单一原则</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"params\">vehicle</span>)&#123;</span><br><span class=\"line\">    retun vehicle + <span class=\"string\">&quot;在陆地上运行&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">runAir</span>(<span class=\"params\">vehicle</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vehicle + <span class=\"string\">&quot;在空中运行&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"接口隔离原则\"><a class=\"markdownIt-Anchor\" href=\"#接口隔离原则\"></a> 接口隔离原则</h3>\n<blockquote>\n<p>一个类 实现接口时，应该基于接口的最小接口，如果接口中含有大量他不需要的方法，应该拆分接口</p>\n</blockquote>\n<ul>\n<li>减少不必要的代码。</li>\n<li>代码逻辑关系更清晰,程序稳定性更好</li>\n</ul>\n<p>设计一个情形，B,D类 都实现了接口1,A,C通过接口依赖于B,D。但是A只需要接口中<code>operation1</code>,<code>operation2</code> 但是 C需要<code>operation1</code>,<code>operation2</code> 。 因此,如果只定义一个接口1，B,D中 都有不必要的代码。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Interface1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">operation1</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"title function_\">operation3</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interface1</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation1</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B实现了接口1&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B实现了接口2&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 不必要的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation3</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B实现了接口3&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interface1</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不必要的代码</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation1</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D实现了接口1&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D实现了接口2&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation3</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D实现了接口3&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend1</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface1</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation1</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend2</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface1</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation2</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend2</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface1</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation2</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend3</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface1</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation3</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Segregation</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">    a.<span class=\"title function_\">depend1</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()) <span class=\"comment\">//B实现了接口1</span></span><br><span class=\"line\">    a.<span class=\"title function_\">depend2</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()) <span class=\"comment\">// B实现了接口2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> <span class=\"title function_\">C</span>()</span><br><span class=\"line\">    c.<span class=\"title function_\">depend2</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">D</span>()) <span class=\"comment\">// D实现了接口2</span></span><br><span class=\"line\">    c.<span class=\"title function_\">depend3</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">D</span>()) <span class=\"comment\">// D实现了接口3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>改进之后</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Interface1</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">operation1</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Interface2</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Interface3</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">operation3</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interface1</span>, <span class=\"title class_\">Interface2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation1</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B实现了接口1&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;B实现了接口2&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Interface2</span>, <span class=\"title class_\">Interface3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation2</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D实现了接口2&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">operation3</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;D实现了接口3&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend1</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface1</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation1</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend2</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface2</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation2</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend2</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface2</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation2</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">depend3</span>(<span class=\"attr\">i</span>: <span class=\"title class_\">Interface3</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    i.<span class=\"title function_\">operation3</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Segregation2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>()</span><br><span class=\"line\">    a.<span class=\"title function_\">depend1</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()) <span class=\"comment\">//B实现了接口1</span></span><br><span class=\"line\">    a.<span class=\"title function_\">depend2</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">B</span>()) <span class=\"comment\">// B实现了接口2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> <span class=\"title function_\">C</span>()</span><br><span class=\"line\">    c.<span class=\"title function_\">depend2</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">D</span>()) <span class=\"comment\">// D实现了接口2</span></span><br><span class=\"line\">    c.<span class=\"title function_\">depend3</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">D</span>()) <span class=\"comment\">// D实现了接口3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设计接口的时候注意接口隔离，不要把，不同功能的接口放一起，以免实现代码的时候出现不必要的实现类代码。B,D实现类的代码,比之前减少了不必要的代码。</p>\n<h3 id=\"依赖倒转倒置原则\"><a class=\"markdownIt-Anchor\" href=\"#依赖倒转倒置原则\"></a> 依赖倒转(倒置)原则</h3>\n<blockquote>\n<p>高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节，细节应该依赖抽象。依赖倒转原则中心思想是面向接口编程。遵循里氏替换原则</p>\n</blockquote>\n<p>我们模拟一个人接收邮件，和接收消息的场景</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 完成Persion 接收消息的功能</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">receive</span>(<span class=\"attr\">email</span>: <span class=\"title class_\">Email</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(email.<span class=\"title function_\">getInfo</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Email</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;电子邮件信息 Hello World&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DependecyInVersion</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">      person.<span class=\"title function_\">receive</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Email</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上面的案例实现思路,简单,比较容易想到,但是如果我们还需要接收微信,QQ,短的消息显得不好扩展</p>\n<p>根据依赖倒转原则,我们应该引入一个IReceiver接口,表示接收者,这样Person类<br />\n与接口IReceiver发生依赖,只要接口不变,Person无需改变,因为WeXin QQ等新都属接收业务范围,他们各自实现IReceiver接口就行。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DependecyInVersion2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">    person.<span class=\"title function_\">receive</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Email</span>())</span><br><span class=\"line\">    person.<span class=\"title function_\">receive</span>(<span class=\"keyword\">new</span> <span class=\"title function_\">QQ</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义接收接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义Email消息</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Email</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;接收到 Email消息&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义QQ消息</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QQ</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;接收到 QQ消息&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 完成Persion 接收消息的功能,</span></span><br><span class=\"line\"><span class=\"comment\">// 无论上层增加接收什么类型的消息,Persion类无需改变</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 基于接口传递依赖关系</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">receive</span>(<span class=\"attr\">receiver</span>: <span class=\"title class_\">IReceiver</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(receiver.<span class=\"title function_\">getInfo</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"依赖关系的传递方式这不是设计模式原则\"><a class=\"markdownIt-Anchor\" href=\"#依赖关系的传递方式这不是设计模式原则\"></a> 依赖关系的传递方式(这不是设计模式原则)</h3>\n<p>为了实现接口分离，我们常常使用如下方式传递接口依赖关系。</p>\n<ul>\n<li>接口传递 (上面的案例就是基于接口传递依赖关系)</li>\n<li>构造方法传递</li>\n<li>setter方法传递</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义两个接口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Message</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">info</span>(): <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>方式2 通过构造方法传递</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyMessage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Message</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> receiver!: <span class=\"title class_\">IReceiver</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">receiver: IReceiver</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基于构造方法 传递 </span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">receiver</span> = receiver</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">info</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">receiver</span>.<span class=\"title function_\">getInfo</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Receiver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&quot;我接收到消息啦~~&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DependecyInVersion3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> receiver = <span class=\"keyword\">new</span> <span class=\"title class_\">Receiver</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myMessage = <span class=\"keyword\">new</span> <span class=\"title class_\">MyMessage</span>(receiver)</span><br><span class=\"line\">    myMessage.<span class=\"title function_\">info</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>方式3 通过setter方法</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyMessage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Message</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> receiver!: <span class=\"title class_\">IReceiver</span>; <span class=\"comment\">// TS要求添加 赋值断言</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">setReceive</span>(<span class=\"attr\">rec</span>: <span class=\"title class_\">IReceiver</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">receiver</span> = rec</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">info</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">receiver</span>.<span class=\"title function_\">getInfo</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Receiver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IReceiver</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getInfo</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&quot;我接收到消息啦~~&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DependecyInVersion3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myMessage = <span class=\"keyword\">new</span> <span class=\"title class_\">MyMessage</span>()</span><br><span class=\"line\">    myMessage.<span class=\"title function_\">setReceive</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Receiver</span>())</span><br><span class=\"line\">    myMessage.<span class=\"title function_\">info</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"里氏替换原则\"><a class=\"markdownIt-Anchor\" href=\"#里氏替换原则\"></a> 里氏替换原则</h3>\n<p>使用继承的时候，应尽量遵循里氏替换原则,在<strong>子类中尽量不要重写父类方法</strong>。里氏替换原则告诉我们，继承实际上让两个类耦合度增强了，在适当情况下，可以通过，<strong>聚合，组合依赖来解决问题</strong>。抱歉这个暂时没有找到很好的例子。</p>\n<h3 id=\"开闭原则\"><a class=\"markdownIt-Anchor\" href=\"#开闭原则\"></a> 开闭原则</h3>\n<blockquote>\n<p>一个软件的类，模块和函数应该对扩展开发，对修改关闭。当软件需要变化时，尽量通过扩展软件实体行为来实现变化。而不是通过修改已有代码。</p>\n</blockquote>\n<p>我的定义一个画图的案例,在一个绘图的类中定义，绘制不同样子图形的情形，其实这边这个案例和第一种，单一责任原则有点类似了</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; log &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;util&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OCP</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// (使用方)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> graphiEditor = <span class=\"keyword\">new</span> <span class=\"title class_\">GraphiEditor</span>()</span><br><span class=\"line\">    graphiEditor.<span class=\"title function_\">drawShape</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>())</span><br><span class=\"line\">    graphiEditor.<span class=\"title function_\">drawShape</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供方</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphiEditor</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">drawShape</span>(<span class=\"attr\">s</span>: <span class=\"title class_\">Shape</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.<span class=\"property\">mType</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;绘制矩形&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.<span class=\"property\">mType</span> == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;绘制圆形&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 提供方</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"attr\">mType</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">mType: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">mType</span> = mType</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用方</span></span><br><span class=\"line\"><span class=\"comment\">// 画矩形的类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(<span class=\"number\">1</span>) <span class=\"comment\">// mType = 1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用方</span></span><br><span class=\"line\"><span class=\"comment\">// 画圆形的类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(<span class=\"number\">2</span>) <span class=\"comment\">// mType = 2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码如果想要新增画三角形的类,发现扩展改变比较大,提供方，使用方代码都需要改变。现在经过如下修改，去掉if,else的判断，根据开闭原则，把具体的实现，放到使用方每个子类中自己实现，这样，想新增三角形的时候。只要使用方自己实现了三角形。不需要动提供方的代码</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; log &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;util&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用方</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OCP2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> graphiEditor = <span class=\"keyword\">new</span> <span class=\"title class_\">GraphiEditor</span>()</span><br><span class=\"line\">    graphiEditor.<span class=\"title function_\">drawShape</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>())</span><br><span class=\"line\">    graphiEditor.<span class=\"title function_\">drawShape</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>())</span><br><span class=\"line\">    graphiEditor.<span class=\"title function_\">drawShape</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Triangle</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供 方</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GraphiEditor</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">drawShape</span>(<span class=\"attr\">s</span>: <span class=\"title class_\">Shape</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    s.<span class=\"title function_\">draw</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供方</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">draw</span>(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用方</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">draw</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;绘制矩形&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">draw</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;绘制圆形&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 现在扩展三角形</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Triangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">draw</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;绘制三角形&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"迪米特法则\"><a class=\"markdownIt-Anchor\" href=\"#迪米特法则\"></a> 迪米特法则</h3>\n<blockquote>\n<p>高内聚，低耦合,尽量少对外暴露信息，一个类对自己依赖的类知道越少越好。类与类关系越密切，耦合度越大。越不利于代码更改。</p>\n</blockquote>\n<p>现在我们实现一个二叉搜索树并且二叉搜索树，提供了插入节点功能，和返回中序遍历（左节点-&gt;根节点-&gt;右节点）结果的功能</p>\n<ul>\n<li>不符合迪米特法则的实现</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">val</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">left</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\">  <span class=\"attr\">right</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val:<span class=\"built_in\">number</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义 二叉 搜索树</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BSTree</span>&#123;</span><br><span class=\"line\"> <span class=\"attr\">tree</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\"> <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 定义插入方法</span></span><br><span class=\"line\"> <span class=\"title function_\">insert</span>(<span class=\"params\">node:TreeNode</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = node</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> root = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span></span><br><span class=\"line\">     <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(node.<span class=\"property\">val</span>&gt;root.<span class=\"property\">val</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(root.<span class=\"property\">right</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">             root.<span class=\"property\">right</span> = node</span><br><span class=\"line\">             <span class=\"keyword\">break</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           root = root.<span class=\"property\">right</span></span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">           <span class=\"keyword\">if</span>(root.<span class=\"property\">left</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">             root.<span class=\"property\">left</span> = node</span><br><span class=\"line\">             <span class=\"keyword\">break</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           root = root.<span class=\"property\">left</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"title function_\">inOrder</span>(<span class=\"params\">tree:TreeNode|<span class=\"literal\">null</span></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">res</span>:<span class=\"built_in\">number</span>[] = []</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">order</span>(<span class=\"params\">tree:TreeNode|<span class=\"literal\">null</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">order</span>(tree.<span class=\"property\">left</span>)</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(tree.<span class=\"property\">val</span>)</span><br><span class=\"line\">    <span class=\"title function_\">order</span>(tree.<span class=\"property\">right</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"title function_\">order</span>(tree)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> res</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实现一个二叉搜索树的功能</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Demeter</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> bsTree = <span class=\"keyword\">new</span> <span class=\"title class_\">BSTree</span>()</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">8</span>))</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">7</span>))</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">11</span>))</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">9</span>))</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">      <span class=\"comment\">// 放入的顺序[8,7,11,9,3,2]</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = bsTree.<span class=\"title function_\">inOrder</span>(bsTree.<span class=\"property\">tree</span>)</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// [2, 3, 7, 8, 9, 11]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上述代码可以看出，用户在使用二叉搜索树的时候,insert方法暴露给用户的信息太多了。具体的插入流程其实不需要让用户实现。用户提供数据就行了。还有中序遍历的时候，其实没必要接收用户的参数(当然这个错是我故意这么写的，想个案例不容易啊/(ㄒoㄒ)/~~)</p>\n<ul>\n<li>修改之后</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">val</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">left</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\">  <span class=\"attr\">right</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val:<span class=\"built_in\">number</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义 二叉搜索树</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BSTree</span>&#123;</span><br><span class=\"line\"> <span class=\"attr\">tree</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">TreeNode</span>;</span><br><span class=\"line\"> <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 改成接收 不定参数</span></span><br><span class=\"line\"> <span class=\"comment\">// 去掉返回值，让用户 只能有 new BSTree().tree 一种方式 获取的根节点</span></span><br><span class=\"line\"> <span class=\"title function_\">insert</span>(...<span class=\"attr\">args</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;):<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"title function_\">handleInsert</span> = (<span class=\"params\">node:TreeNode</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = node</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> root = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(node.<span class=\"property\">val</span>&gt;root.<span class=\"property\">val</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.<span class=\"property\">right</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">              root.<span class=\"property\">right</span> = node</span><br><span class=\"line\">              <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            root = root.<span class=\"property\">right</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.<span class=\"property\">left</span> === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">              root.<span class=\"property\">left</span> = node</span><br><span class=\"line\">              <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          root = root.<span class=\"property\">left</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  args.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span><span class=\"title function_\">handleInsert</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(element)));</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">// 不需要接收参数</span></span><br><span class=\"line\"> <span class=\"title function_\">inOrder</span>():<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">res</span>:<span class=\"built_in\">number</span>[] = []</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">order</span>(<span class=\"params\">tree:TreeNode|<span class=\"literal\">null</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tree === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">order</span>(tree.<span class=\"property\">left</span>)</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(tree.<span class=\"property\">val</span>)</span><br><span class=\"line\">    <span class=\"title function_\">order</span>(tree.<span class=\"property\">right</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 改成 this.tree 直接引用内部的</span></span><br><span class=\"line\">   <span class=\"title function_\">order</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">tree</span>)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> res</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实现一个二叉搜索树的功能</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DemeterImprove</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> bsTree = <span class=\"keyword\">new</span> <span class=\"title class_\">BSTree</span>()</span><br><span class=\"line\">      <span class=\"comment\">// 插入元素 8 7 11 9 3 2</span></span><br><span class=\"line\">      bsTree.<span class=\"title function_\">insert</span>(<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> res = bsTree.<span class=\"title function_\">inOrder</span>()</span><br><span class=\"line\">      mlog.<span class=\"title function_\">log</span>(res) <span class=\"comment\">// [2, 3, 7, 8, 9, 11]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始设计模式\"><a class=\"markdownIt-Anchor\" href=\"#开始设计模式\"></a> 开始设计模式</h2>\n<p>对于设计模式，大家公认有23种基本的设计模式，由于学的比较慢,这边目前只介绍单利模式和工厂模式,剩下的设计模式会慢慢的在后面的文章中，用TS实现。</p>\n<h3 id=\"单例模式\"><a class=\"markdownIt-Anchor\" href=\"#单例模式\"></a> 单例模式</h3>\n<p>就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例， 并且该类只提供一个取得其对象实例的方法(静态方法)。</p>\n<p>就是假如我们在一个系统中，需要频繁的使用某个对象，这时候如果反复的通过new，去实例化这个对象来使用，会造成不必要的内存损失。因此我们应该在对象内部提供静态属性等于实例化的这个类, 然后去通过类的静态属性获取实例化的类。案例如下</p>\n<p>现在假如 我们有一个Person类，要多处调用Person中的 <code>sayHello</code> 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello World JavaScript&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>() === <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>通过上述console.log中的比较结果知道，假如我们需要使用多次，那么每次都要占用一个新内存。通过改变代码如下,可见我们通过类本身的静态属性访问该类不要每次都实例化这个类。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\">  <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello World JavaScript&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// es6目前没有私有属性可不提供，get方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 在这里写了一个是模仿java，</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">getPerson</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">person</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"title function_\">getPerson</span>() === <span class=\"title class_\">Person</span>.<span class=\"title function_\">getPerson</span>()) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 或者直接一点</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\">person</span> === <span class=\"title class_\">Person</span>.<span class=\"property\">person</span>) <span class=\"comment\">// true </span></span><br></pre></td></tr></table></figure>\n<p>上面这种单例模式，属性java中的饿汉式，还有懒汉式，静态内部类实现，利用枚举实现等。主要是因为java的类装载机制。和线程安全问题，js暂时不用考虑这些问题 O(∩_∩)O哈哈~。</p>\n<h3 id=\"工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#工厂模式\"></a> 工厂模式</h3>\n<p>工厂模式很多情形其实是为了解决，设计违反了前面提到的 <strong>开闭原则的情景</strong> 。这种类型的设计模式属于<strong>创建型模式</strong>，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n<p><strong>优点：</strong> 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>\n<p><strong>缺点：</strong> 每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</p>\n<p>从如下代码中优缺点显而易见，调用的时候很方便，去工厂取东西，不用关系工厂后面是怎么实现的。但是每次修改，工厂和工厂后面的实现都要改。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单工厂模式</span></span><br><span class=\"line\">interface <span class=\"title class_\">Shape</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个表示形状的接口，里面有画的方法</span></span><br><span class=\"line\">  <span class=\"title function_\">draw</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> implements <span class=\"title class_\">Shape</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">draw</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我画了一个矩形&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Squre</span> implements <span class=\"title class_\">Shape</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">draw</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我画了一个正方形&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> implements <span class=\"title class_\">Shape</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">draw</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;我画了一个圆形&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义一个工厂</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ShapeFactory</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getShape</span>(<span class=\"params\">shapeType</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(shapeType === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(shapeType === <span class=\"string\">&quot;CIRCLE&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shapeType === <span class=\"string\">&quot;RECTANGLE&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>()</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(shapeType === <span class=\"string\">&quot;SQUARE&quot;</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Squre</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用层</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> shapeFactory = <span class=\"keyword\">new</span> <span class=\"title class_\">ShapeFactory</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> circle = shapeFactory.<span class=\"title function_\">getShape</span>(<span class=\"string\">&quot;CIRCLE&quot;</span>)</span><br><span class=\"line\">  circle.<span class=\"title function_\">draw</span>() <span class=\"comment\">// 我画了一个圆形</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>同样本篇是我看资料之后总结的。部分文字来源于网络</p>\n</blockquote>\n"},{"title":"栈的压入、弹出序列","date":"2020-02-22T03:29:48.000Z","_content":"### 題目描述\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。\n```\n输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n输出：true\n解释：我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -> 4,\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n\n```\n### 题目分析\n首先我们知道原始数的序列题目已知的，如 `[1,2,3,4,5]` ,从该序列的第一个数开始每次都要进行一次`必须操作`,压入该序列一个数到 `临时栈` ，然后执行`可选操作`弹出`临时栈`中的数(弹出的个数随意，可以不弹出，即不执行这个可选操作，也可以全部都弹出)，直到遍历到序列最后一个，压入临时栈后，依次弹出`临时栈`中剩下所有的数。弹出的数每次都会被记录下来。题目现在给出了弹出序列，意思就是确定了我们在哪一步要执行弹出栈这个`可选操作`，即我们压入的数，和弹出序列中的第一个数相等时候，开始执行可选操作，每弹出一个，弹出序列的指针向后一次，直到 `临时栈` 栈顶元素和弹出序列中指针，指的数不相等为止，继续执行下一次操作。\n\n### 题例分析\n`[1,2,3,4,5]`  `[4,5,3,2,1]`\n\n| 必须操作 | 临时栈    | 可选操作                    | 原因                              |\n| -------- | --------- | --------------------------- | --------------------------------- |\n| push(1)  | [1]       | 不执行                      | 4 != 1                            |\n| push(2)  | [1,2]     | 不执行                      | 4 != 2                            |\n| push(3)  | [1,2,3]   | 不执行                      | 4 != 3                            |\n| push(4)  | [1,2,3,4] | pop(4)                      | 4 == 4,5 != 3                     |\n| push(5)  | [1,2,3,5] | pop(5),pop(3),pop(2),pop(1) | 最后了,依次弹出临时栈中剩余的元素 |\n  \n  > 弹出序列记录为[4,5,3,2,1] 返回 true\n\n`[1,2,3,4,5]`  `[4,3,5,1,2]`\n\n| 必须操作 | 临时栈    | 可选操作             | 原因                              |\n| -------- | --------- | -------------------- | --------------------------------- |\n| push(1)  | [1]       | 不执行               | 4 != 1                            |\n| push(2)  | [1,2]     | 不执行               | 4 != 2                            |\n| push(3)  | [1,2,3]   | 不执行               | 4 != 3                            |\n| push(4)  | [1,2,3,4] | pop(4),pop(3)        | 4 == 4,3 == 3, 5 != 2             |\n| push(5)  | [1,2,5]   | pop(5),pop(2),pop(1) | 最后了,依次弹出临时栈中剩余的元素 |\n\n  > 弹出序列记录为[4,3,5,2,1] 返回 false\n\n### 代码\n```js\n/**\n * @param {number[]} pushed\n * @param {number[]} popped\n * @return {boolean}\n */\nvar validateStackSequences = function (pushed, popped) {\n  if (pushed.length == 0 && popped.length == 0) {\n    return true\n  }\n  if (pushed.length == 0 || popped.length == 0 || pushed.length != popped.length) {\n    return false\n  }\n  let stack = [] //辅助栈\n  let j = 0\n  for (let i = 0; i < pushed.length; i++) {\n    stack.push(pushed[i])\n    while(stack.length !== 0  && j<popped.length && stack[stack.length-1] === popped[j] ){\n      j++\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n};\n```","source":"_posts/validate-stack-sequences.md","raw":"---\ntitle: 栈的压入、弹出序列\ndate: 2020-02-22 11:29:48\ntags:\n  - 算法与数据结构\n  - 剑指Offer\n---\n### 題目描述\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。\n```\n输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n输出：true\n解释：我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -> 4,\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n\n```\n### 题目分析\n首先我们知道原始数的序列题目已知的，如 `[1,2,3,4,5]` ,从该序列的第一个数开始每次都要进行一次`必须操作`,压入该序列一个数到 `临时栈` ，然后执行`可选操作`弹出`临时栈`中的数(弹出的个数随意，可以不弹出，即不执行这个可选操作，也可以全部都弹出)，直到遍历到序列最后一个，压入临时栈后，依次弹出`临时栈`中剩下所有的数。弹出的数每次都会被记录下来。题目现在给出了弹出序列，意思就是确定了我们在哪一步要执行弹出栈这个`可选操作`，即我们压入的数，和弹出序列中的第一个数相等时候，开始执行可选操作，每弹出一个，弹出序列的指针向后一次，直到 `临时栈` 栈顶元素和弹出序列中指针，指的数不相等为止，继续执行下一次操作。\n\n### 题例分析\n`[1,2,3,4,5]`  `[4,5,3,2,1]`\n\n| 必须操作 | 临时栈    | 可选操作                    | 原因                              |\n| -------- | --------- | --------------------------- | --------------------------------- |\n| push(1)  | [1]       | 不执行                      | 4 != 1                            |\n| push(2)  | [1,2]     | 不执行                      | 4 != 2                            |\n| push(3)  | [1,2,3]   | 不执行                      | 4 != 3                            |\n| push(4)  | [1,2,3,4] | pop(4)                      | 4 == 4,5 != 3                     |\n| push(5)  | [1,2,3,5] | pop(5),pop(3),pop(2),pop(1) | 最后了,依次弹出临时栈中剩余的元素 |\n  \n  > 弹出序列记录为[4,5,3,2,1] 返回 true\n\n`[1,2,3,4,5]`  `[4,3,5,1,2]`\n\n| 必须操作 | 临时栈    | 可选操作             | 原因                              |\n| -------- | --------- | -------------------- | --------------------------------- |\n| push(1)  | [1]       | 不执行               | 4 != 1                            |\n| push(2)  | [1,2]     | 不执行               | 4 != 2                            |\n| push(3)  | [1,2,3]   | 不执行               | 4 != 3                            |\n| push(4)  | [1,2,3,4] | pop(4),pop(3)        | 4 == 4,3 == 3, 5 != 2             |\n| push(5)  | [1,2,5]   | pop(5),pop(2),pop(1) | 最后了,依次弹出临时栈中剩余的元素 |\n\n  > 弹出序列记录为[4,3,5,2,1] 返回 false\n\n### 代码\n```js\n/**\n * @param {number[]} pushed\n * @param {number[]} popped\n * @return {boolean}\n */\nvar validateStackSequences = function (pushed, popped) {\n  if (pushed.length == 0 && popped.length == 0) {\n    return true\n  }\n  if (pushed.length == 0 || popped.length == 0 || pushed.length != popped.length) {\n    return false\n  }\n  let stack = [] //辅助栈\n  let j = 0\n  for (let i = 0; i < pushed.length; i++) {\n    stack.push(pushed[i])\n    while(stack.length !== 0  && j<popped.length && stack[stack.length-1] === popped[j] ){\n      j++\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n};\n```","slug":"validate-stack-sequences","published":1,"updated":"2021-08-07T01:59:03.349Z","_id":"cl4ince6z0028cguf9hywhpdw","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"題目描述\"><a class=\"markdownIt-Anchor\" href=\"#題目描述\"></a> 題目描述</h3>\n<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：我们可以按以下顺序执行：</span><br><span class=\"line\">push(1), push(2), push(3), push(4), pop() -&gt; 4,</span><br><span class=\"line\">push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"题目分析\"><a class=\"markdownIt-Anchor\" href=\"#题目分析\"></a> 题目分析</h3>\n<p>首先我们知道原始数的序列题目已知的，如 <code>[1,2,3,4,5]</code> ,从该序列的第一个数开始每次都要进行一次<code>必须操作</code>,压入该序列一个数到 <code>临时栈</code> ，然后执行<code>可选操作</code>弹出<code>临时栈</code>中的数(弹出的个数随意，可以不弹出，即不执行这个可选操作，也可以全部都弹出)，直到遍历到序列最后一个，压入临时栈后，依次弹出<code>临时栈</code>中剩下所有的数。弹出的数每次都会被记录下来。题目现在给出了弹出序列，意思就是确定了我们在哪一步要执行弹出栈这个<code>可选操作</code>，即我们压入的数，和弹出序列中的第一个数相等时候，开始执行可选操作，每弹出一个，弹出序列的指针向后一次，直到 <code>临时栈</code> 栈顶元素和弹出序列中指针，指的数不相等为止，继续执行下一次操作。</p>\n<h3 id=\"题例分析\"><a class=\"markdownIt-Anchor\" href=\"#题例分析\"></a> 题例分析</h3>\n<p><code>[1,2,3,4,5]</code>  <code>[4,5,3,2,1]</code></p>\n<table>\n<thead>\n<tr>\n<th>必须操作</th>\n<th>临时栈</th>\n<th>可选操作</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>push(1)</td>\n<td>[1]</td>\n<td>不执行</td>\n<td>4 != 1</td>\n</tr>\n<tr>\n<td>push(2)</td>\n<td>[1,2]</td>\n<td>不执行</td>\n<td>4 != 2</td>\n</tr>\n<tr>\n<td>push(3)</td>\n<td>[1,2,3]</td>\n<td>不执行</td>\n<td>4 != 3</td>\n</tr>\n<tr>\n<td>push(4)</td>\n<td>[1,2,3,4]</td>\n<td>pop(4)</td>\n<td>4 == 4,5 != 3</td>\n</tr>\n<tr>\n<td>push(5)</td>\n<td>[1,2,3,5]</td>\n<td>pop(5),pop(3),pop(2),pop(1)</td>\n<td>最后了,依次弹出临时栈中剩余的元素</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>弹出序列记录为[4,5,3,2,1] 返回 true</p>\n</blockquote>\n<p><code>[1,2,3,4,5]</code>  <code>[4,3,5,1,2]</code></p>\n<table>\n<thead>\n<tr>\n<th>必须操作</th>\n<th>临时栈</th>\n<th>可选操作</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>push(1)</td>\n<td>[1]</td>\n<td>不执行</td>\n<td>4 != 1</td>\n</tr>\n<tr>\n<td>push(2)</td>\n<td>[1,2]</td>\n<td>不执行</td>\n<td>4 != 2</td>\n</tr>\n<tr>\n<td>push(3)</td>\n<td>[1,2,3]</td>\n<td>不执行</td>\n<td>4 != 3</td>\n</tr>\n<tr>\n<td>push(4)</td>\n<td>[1,2,3,4]</td>\n<td>pop(4),pop(3)</td>\n<td>4 == 4,3 == 3, 5 != 2</td>\n</tr>\n<tr>\n<td>push(5)</td>\n<td>[1,2,5]</td>\n<td>pop(5),pop(2),pop(1)</td>\n<td>最后了,依次弹出临时栈中剩余的元素</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>弹出序列记录为[4,3,5,2,1] 返回 false</p>\n</blockquote>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">pushed</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">popped</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> validateStackSequences = <span class=\"keyword\">function</span> (<span class=\"params\">pushed, popped</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pushed.<span class=\"property\">length</span> == <span class=\"number\">0</span> &amp;&amp; popped.<span class=\"property\">length</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pushed.<span class=\"property\">length</span> == <span class=\"number\">0</span> || popped.<span class=\"property\">length</span> == <span class=\"number\">0</span> || pushed.<span class=\"property\">length</span> != popped.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [] <span class=\"comment\">//辅助栈</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; pushed.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    stack.<span class=\"title function_\">push</span>(pushed[i])</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(stack.<span class=\"property\">length</span> !== <span class=\"number\">0</span>  &amp;&amp; j&lt;popped.<span class=\"property\">length</span> &amp;&amp; stack[stack.<span class=\"property\">length</span>-<span class=\"number\">1</span>] === popped[j] )&#123;</span><br><span class=\"line\">      j++</span><br><span class=\"line\">      stack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stack.<span class=\"property\">length</span> === <span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"題目描述\"><a class=\"markdownIt-Anchor\" href=\"#題目描述\"></a> 題目描述</h3>\n<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：我们可以按以下顺序执行：</span><br><span class=\"line\">push(1), push(2), push(3), push(4), pop() -&gt; 4,</span><br><span class=\"line\">push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"题目分析\"><a class=\"markdownIt-Anchor\" href=\"#题目分析\"></a> 题目分析</h3>\n<p>首先我们知道原始数的序列题目已知的，如 <code>[1,2,3,4,5]</code> ,从该序列的第一个数开始每次都要进行一次<code>必须操作</code>,压入该序列一个数到 <code>临时栈</code> ，然后执行<code>可选操作</code>弹出<code>临时栈</code>中的数(弹出的个数随意，可以不弹出，即不执行这个可选操作，也可以全部都弹出)，直到遍历到序列最后一个，压入临时栈后，依次弹出<code>临时栈</code>中剩下所有的数。弹出的数每次都会被记录下来。题目现在给出了弹出序列，意思就是确定了我们在哪一步要执行弹出栈这个<code>可选操作</code>，即我们压入的数，和弹出序列中的第一个数相等时候，开始执行可选操作，每弹出一个，弹出序列的指针向后一次，直到 <code>临时栈</code> 栈顶元素和弹出序列中指针，指的数不相等为止，继续执行下一次操作。</p>\n<h3 id=\"题例分析\"><a class=\"markdownIt-Anchor\" href=\"#题例分析\"></a> 题例分析</h3>\n<p><code>[1,2,3,4,5]</code>  <code>[4,5,3,2,1]</code></p>\n<table>\n<thead>\n<tr>\n<th>必须操作</th>\n<th>临时栈</th>\n<th>可选操作</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>push(1)</td>\n<td>[1]</td>\n<td>不执行</td>\n<td>4 != 1</td>\n</tr>\n<tr>\n<td>push(2)</td>\n<td>[1,2]</td>\n<td>不执行</td>\n<td>4 != 2</td>\n</tr>\n<tr>\n<td>push(3)</td>\n<td>[1,2,3]</td>\n<td>不执行</td>\n<td>4 != 3</td>\n</tr>\n<tr>\n<td>push(4)</td>\n<td>[1,2,3,4]</td>\n<td>pop(4)</td>\n<td>4 == 4,5 != 3</td>\n</tr>\n<tr>\n<td>push(5)</td>\n<td>[1,2,3,5]</td>\n<td>pop(5),pop(3),pop(2),pop(1)</td>\n<td>最后了,依次弹出临时栈中剩余的元素</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>弹出序列记录为[4,5,3,2,1] 返回 true</p>\n</blockquote>\n<p><code>[1,2,3,4,5]</code>  <code>[4,3,5,1,2]</code></p>\n<table>\n<thead>\n<tr>\n<th>必须操作</th>\n<th>临时栈</th>\n<th>可选操作</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>push(1)</td>\n<td>[1]</td>\n<td>不执行</td>\n<td>4 != 1</td>\n</tr>\n<tr>\n<td>push(2)</td>\n<td>[1,2]</td>\n<td>不执行</td>\n<td>4 != 2</td>\n</tr>\n<tr>\n<td>push(3)</td>\n<td>[1,2,3]</td>\n<td>不执行</td>\n<td>4 != 3</td>\n</tr>\n<tr>\n<td>push(4)</td>\n<td>[1,2,3,4]</td>\n<td>pop(4),pop(3)</td>\n<td>4 == 4,3 == 3, 5 != 2</td>\n</tr>\n<tr>\n<td>push(5)</td>\n<td>[1,2,5]</td>\n<td>pop(5),pop(2),pop(1)</td>\n<td>最后了,依次弹出临时栈中剩余的元素</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>弹出序列记录为[4,3,5,2,1] 返回 false</p>\n</blockquote>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">pushed</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">popped</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> validateStackSequences = <span class=\"keyword\">function</span> (<span class=\"params\">pushed, popped</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pushed.<span class=\"property\">length</span> == <span class=\"number\">0</span> &amp;&amp; popped.<span class=\"property\">length</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pushed.<span class=\"property\">length</span> == <span class=\"number\">0</span> || popped.<span class=\"property\">length</span> == <span class=\"number\">0</span> || pushed.<span class=\"property\">length</span> != popped.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [] <span class=\"comment\">//辅助栈</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; pushed.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    stack.<span class=\"title function_\">push</span>(pushed[i])</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(stack.<span class=\"property\">length</span> !== <span class=\"number\">0</span>  &amp;&amp; j&lt;popped.<span class=\"property\">length</span> &amp;&amp; stack[stack.<span class=\"property\">length</span>-<span class=\"number\">1</span>] === popped[j] )&#123;</span><br><span class=\"line\">      j++</span><br><span class=\"line\">      stack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stack.<span class=\"property\">length</span> === <span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"浏览器工作原理~JavaScript","date":"2020-03-26T05:23:10.000Z","_content":"### 消息队列和事件循环\n要知道浏览器中的JavaScript是如何运行的，首先需要了解的是浏览器的渲染进程到底是如何工作的。首先渲染进程的主线程肯定是运行了JavaScript代码。然后因为渲染进程要和其他的进程（如网络进程和浏览器进程等）进行一些通信，必定会有一条IO线程，来和外界发生数据交换。同样在渲染进程内部有IO线程和渲染主线程之间的通讯，必然是基于消息队列机制的。方便浏览器主线程读取，和IO线程存放事件。\n\n![渲染进程内部结构](http://blogimage.lemonlife.top/202003261644_747.png?/)\n\n除了图中的一些事件，消息队列中还包含了很多与页面相关的事件，如 JavaScript 执行、解析 DOM、样式计算、布局计算、CSS 动画等。\n\n当然如果消息队列仅仅是每个任务，都是按顺序执行的的设计，不难发现，会造成一个任务的堆积，以及必要任务的延迟。渲染进程内部除了这两条线程之外，也还有预解析DOM线程和垃圾回收的一些辅助线程。这里只是对JavaScript的事件机制一个简单的介绍，有一个最基本的概念上的了解。\n\n### 宏任务和微任务\n主线程采用一个 循环机制，不断地从这些任务队列中取出任务并执行任务。为了解决可能出现的任务延迟，阻塞等问题，在V8内部，引入了宏任务和微任务的概念。我们把这些消息队列中的任务称为宏任务。\n\n而对于微任务，在JS执行脚本的时候，会创建一个全局执行的上下文，在创建全局执行上下文的同时，V8引擎会创建一个微任务队列。(这个真的是队列)，然后在执行代码的时候，如果有遇到产生微任务的代码，比如Promise.resove 函数等，会将产生的微任务放置到任务队列中，在当前作用域中的代码执行完成之后，会先执行当前微任务队列中的代码，直到当前微任务代码执行完了再执行宏任务。\n```js\nasync function test() {\n  \n  setTimeout(() => {\n    console.log('0秒定时器')\n  }, 0)\n\n\n  new Promise((resolve) => {\n    resolve(() => {\n      console.log('执行Promise')\n    })\n  }).then((res) => {\n    res()\n  })\n\n\n  console.log('0000')\n}\ntest()\n\n//执行结果\n// 0000\n// 执行Promise\n// 0秒定时器\n```\n可见从上面的代码可以看出，在成函数上下文,然后创建了微任务队列之后，开始逐行执行代码，\n1. 执行了 `setTimeout` ,将此函数放入宏任务队列中。\n2. 遇到了, `new Promise()`  调用了resolve,将resolve,把resolve中要执行的代码放入微任务队列中\n3. 执行 `console.log('0000')` 输出 `0000`\n4. 执行微任务队列中的代码，输出 `执行Promise`\n5. 这时候浏览器出现了空闲期，开始执行宏任务，发现有定时器到时间了，执行定时器，`输出0秒定时器`\n\n![微任务的执行过程](http://blogimage.lemonlife.top/202003271955_472.png?/)\n\n### JavaScript宏任务的应用\n> setTimeout\n\n通过之前的介绍你大概对setTimeout有一定的认识，他属于一种浏览器宏任务，但是你是否设想过，浏览器是如何知道setTimeout是如何到时间了呢。除了上述介绍的消息队列之外，浏览器还有另外一个消息队列，这个队列中维护了需要延迟执行的任务列表，包括了定时器和 Chromium 内部一些需要延迟执行的任务。所以当通过 JavaScript 创建一个定时器时，渲染进程会将该定时器的回调任务添加到延迟队列中。(说成队列只是方便大家理解，其实实际上储存定时器的数据结构可能是hashmap之类的，毕竟浏览器的每个定时器都有一个id)\n\n```c++\n // A queue for holding delayed tasks before their delay has expired.\nstruct DelayedIncomingQueue {}\nDelayedIncomingQueue delayed_incoming_queue;\n```\n> 定时器需要注意的问题\n1.如果当前任务执行时间过久，会影延迟到期定时器任务的执行\n如果你主线程中的代码和微队列中的代码执行时效过久，定时器就算事件到了也要等，之前代码执行完了再执行，参看前面 `0秒定时器`的例子。\n\n2. 如果 setTimeout 存在嵌套调用，那么系统会设置最短时间间隔为 4 毫秒，因为在 Chrome 中，定时器被嵌套调用 5 次以上，系统会判断该函数方法被阻塞了，如果定时器的调用时间间隔小于 4 毫秒，那么浏览器会将每次调用的时间间隔设置为 4 毫秒。\n```c++\nstatic const int kMaxTimerNestingLevel = 5;\nstatic constexpr base::TimeDelta kMinimumInterval =\nbase::TimeDelta::FromMilliseconds(4)\n```\n\n3. 未激活的页面，setTimeout 执行最小间隔是 1000 毫秒，未被激活的页面中定时器最小值大于 1000 毫秒，也就是说，如果标签不是当前的激活标签，那么定时器最小的时间间隔是 1000 毫秒，目的是为了优化后台页面的加载损耗以及降低耗电量\n4. 延时执行时间有最大值， Chrome、Safari、Firefox 都是以 32 个 bit 来存储延时值的，32bit 最大只能存放的数字是 2147483647 毫秒，这就意味着，如果 setTimeout 设置的延迟值大于 2147483647 毫秒（大约 24.8 天）时就会溢出，这导致定时器会被立即执行。\n```js\nfunction showName(){\n  console.log(\" 极客时间 \")\n}\nvar timerID = setTimeout(showName,2147483648);// 会被理解调用执行\n\n```\n> WebAPI：XMLHttpRequest\n\n当执行到let xhr = new XMLHttpRequest()后，JavaScript 会创建一个 XMLHttpRequest对象xhr，用来执行实际的网络请求操作。\n\n浏览器调用xhr.send来发起网络请求了。你可以对照上面那张请求流程图，可以看到：渲染进程会将请求发送给网络进程，然后网络进程负责资源的下载，等网络进程接收到数据之后，就会利用 IPC 来通知渲染进程；渲染进程接收到消息之后，会将 xhr 的回调函数封装成任务并添加到消息队列中，等主线程循环系统执行到该任务的时候，就会根据相关的状态来调用对应的回调函数。\n- 如果网络请求出错了，就会执行 xhr.onerror；\n- 如果超时了，就会执行 xhr.ontimeout；\n- 如果是正常的数据接收，就会执行 onreadystatechange 来反馈相应的状态。\n  \n![XMLHttpRequest 工作流程图](http://blogimage.lemonlife.top/202003272119_592.png?/)\n\n### JavaScript微任务的应用\n> 监听 DOM , [MutationObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver) \n\n对于监听DOM这件事，容易想到的是使用定时器进行轮询监听，(假设没有requestAnimationFrame) 来监听DOM变化。当然这些都会产生一个高延迟或者，资源浪费的问题。其次就是采用基于观察者模式的`Mutation Event`，在每次资源发生改变的时候，触发对应的函数钩子。虽然这种方式能解决延迟高的问题，但是频繁的去触发函数钩子，带来的就是巨大的开销。从而也能造成页面卡顿。\n\n于是乎，后来推出 `Mutation Event`的改进版本.`MutationObserver`,采用了微任务队列，也就是当前上下文执行完成之后，才会执行`MutationObserver` 中的响应事件,有效的避免了，函数执行造成的页面上的动画卡顿。\n\n> Promise\n\n做为一个单线程的语言，JavaScript,要想充分的利用计算机资源，必须要采用异步编程模型，而对于JS来说就是，渲染进程上面的主线程的事件循环系统了。页面主线程发起了一个耗时的任务，并将任务交给另外一个进程去处理，这时页面主线程会继续执行消息队列中的任务。等该进程处理完这个任务后，会将该任务添加到渲染进程的消息队列中，并排队等待循环系统的处理。\n\n![异步编程模型图](http://blogimage.lemonlife.top/202003272037_430.png?/)\n\n于是乎，为了处理消息队列中返回的事件，就产生了所谓的回调函数的机制。确保我们能正确的处理异步信息。然后就有可能产生回调地狱问题。而Promise的诞生就是想解决这种回调地狱问题。Promise内部实现的机制就是使用了微任务队列，(可以上网搜一下Promise的实现，也可以参看 [我的博客手写Promise](https://lemonlife.top/2020/02/10/interview/#%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8Bpromise%E4%BB%A5%E5%8F%8A%E5%86%85%E9%83%A8%E7%9A%84%E5%AE%9E%E7%8E%B0)。可以看到里面采用了`setTimeout`，是js不提供微队列函数，只能采用setTimeout模拟一下微队列，底层的promise实现，正是把那些状态参数都放到了微队列中等待执行。\n\n### 使用同步的方式去写异步代码\n> Generator \n```js\nfunction* genDemo() {\n    console.log(\" 开始执行第一段 \")\n    yield 'generator 2'\n \n    console.log(\" 开始执行第二段 \")\n    yield 'generator 2'\n \n    console.log(\" 开始执行第三段 \")\n    yield 'generator 2'\n \n    console.log(\" 执行结束 \")\n    return 'generator 2'\n}\n \nconsole.log('main 0')\nlet gen = genDemo()\nconsole.log(gen.next().value)\nconsole.log('main 1')\nconsole.log(gen.next().value)\nconsole.log('main 2')\nconsole.log(gen.next().value)\nconsole.log('main 3')\nconsole.log(gen.next().value)\nconsole.log('main 4')\n```\n可以看到使用了 Generator 的之后，我们好像可以通过`gen.next()`随意执行`function* genDemo` 函数里面的代码，然后，如果在执行函数内部代码过程中，如果遇到 yield 关键字，那么 JavaScript 引擎将返回关键字后面的内容给外部，并暂停该函数的执行。然后在外部继续调用next,会接着上次暂停的地方继续执行，一直这样循环往复。对于这种可以随缘恢复和暂停函数的行为是基于 **协程** 机制。\n\n操作系统对于资源的管理进程是开销最大的，其次是线程，协程是一种比线程更加轻量级的存在。你可以把协程看成是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程，比如当前执行的是 A 协程，要启动 B 协程，那么 A 协程就需要将主线程的控制权交给 B 协程，这就体现在 A 协程暂停执行，B 协程恢复执行；同样，也可以从 B 协程中启动 A 协程。通常，如果从 A 协程启动 B 协程，我们就把 A 协程称为 B 协程的父协程。\n\n![协程执行流程图](http://blogimage.lemonlife.top/202003272133_917.png?/)\n\n**注意**\n\n1. gen 协程和父协程是在主线程上交互执行的，并不是并发执行的，它们之前的切换是通过 yield 和 gen.next 来配合完成的\n2. 对于父子协程，都有自己独立的调用栈，只不过，父协程中一直保留着子协程的调用栈信息，当在 gen 协程中调用了 yield 方法时，JavaScript 引擎会保存 gen 协程当前的调用栈信息，并恢复父协程的调用栈信息。同样，当在父协程中执行 gen.next 时，JavaScript 引擎会保存父协程的调用栈信息，并恢复 gen 协程的调用栈信息。\n   \n![协程之间的切换](http://blogimage.lemonlife.top/202003272139_187.png?/)\n\n> async/await\n\nasync/await,是Generator函数的语法糖，专门针对Promise的一种封装。\n```js\nasync function foo() {\n    console.log(1)\n    let a = await 100\n    console.log(a)\n    console.log(2)\n}\nconsole.log(0)\nfoo()\nconsole.log(3)\n\n// 0 1 3 100 2\n\n```\n![上述 async/await 执行流程图](http://blogimage.lemonlife.top/202003272144_714.png?/)\n\n\n> 本文是我看了[李兵老师极客时间浏览器工作原理的专栏](https://time.geekbang.org/column/intro/216?code=wLzkK4Ecmtj435LqyZ6ecONi5PnKUst4jvEoQKp1yUA%3D)写的总结,文字和图片资料来源与极客时间.","source":"_posts/web-fundamentals-geektime2.md","raw":"---\ntitle: 浏览器工作原理~JavaScript\ndate: 2020-03-26 13:23:10\ntags:\n  - 浏览器\n---\n### 消息队列和事件循环\n要知道浏览器中的JavaScript是如何运行的，首先需要了解的是浏览器的渲染进程到底是如何工作的。首先渲染进程的主线程肯定是运行了JavaScript代码。然后因为渲染进程要和其他的进程（如网络进程和浏览器进程等）进行一些通信，必定会有一条IO线程，来和外界发生数据交换。同样在渲染进程内部有IO线程和渲染主线程之间的通讯，必然是基于消息队列机制的。方便浏览器主线程读取，和IO线程存放事件。\n\n![渲染进程内部结构](http://blogimage.lemonlife.top/202003261644_747.png?/)\n\n除了图中的一些事件，消息队列中还包含了很多与页面相关的事件，如 JavaScript 执行、解析 DOM、样式计算、布局计算、CSS 动画等。\n\n当然如果消息队列仅仅是每个任务，都是按顺序执行的的设计，不难发现，会造成一个任务的堆积，以及必要任务的延迟。渲染进程内部除了这两条线程之外，也还有预解析DOM线程和垃圾回收的一些辅助线程。这里只是对JavaScript的事件机制一个简单的介绍，有一个最基本的概念上的了解。\n\n### 宏任务和微任务\n主线程采用一个 循环机制，不断地从这些任务队列中取出任务并执行任务。为了解决可能出现的任务延迟，阻塞等问题，在V8内部，引入了宏任务和微任务的概念。我们把这些消息队列中的任务称为宏任务。\n\n而对于微任务，在JS执行脚本的时候，会创建一个全局执行的上下文，在创建全局执行上下文的同时，V8引擎会创建一个微任务队列。(这个真的是队列)，然后在执行代码的时候，如果有遇到产生微任务的代码，比如Promise.resove 函数等，会将产生的微任务放置到任务队列中，在当前作用域中的代码执行完成之后，会先执行当前微任务队列中的代码，直到当前微任务代码执行完了再执行宏任务。\n```js\nasync function test() {\n  \n  setTimeout(() => {\n    console.log('0秒定时器')\n  }, 0)\n\n\n  new Promise((resolve) => {\n    resolve(() => {\n      console.log('执行Promise')\n    })\n  }).then((res) => {\n    res()\n  })\n\n\n  console.log('0000')\n}\ntest()\n\n//执行结果\n// 0000\n// 执行Promise\n// 0秒定时器\n```\n可见从上面的代码可以看出，在成函数上下文,然后创建了微任务队列之后，开始逐行执行代码，\n1. 执行了 `setTimeout` ,将此函数放入宏任务队列中。\n2. 遇到了, `new Promise()`  调用了resolve,将resolve,把resolve中要执行的代码放入微任务队列中\n3. 执行 `console.log('0000')` 输出 `0000`\n4. 执行微任务队列中的代码，输出 `执行Promise`\n5. 这时候浏览器出现了空闲期，开始执行宏任务，发现有定时器到时间了，执行定时器，`输出0秒定时器`\n\n![微任务的执行过程](http://blogimage.lemonlife.top/202003271955_472.png?/)\n\n### JavaScript宏任务的应用\n> setTimeout\n\n通过之前的介绍你大概对setTimeout有一定的认识，他属于一种浏览器宏任务，但是你是否设想过，浏览器是如何知道setTimeout是如何到时间了呢。除了上述介绍的消息队列之外，浏览器还有另外一个消息队列，这个队列中维护了需要延迟执行的任务列表，包括了定时器和 Chromium 内部一些需要延迟执行的任务。所以当通过 JavaScript 创建一个定时器时，渲染进程会将该定时器的回调任务添加到延迟队列中。(说成队列只是方便大家理解，其实实际上储存定时器的数据结构可能是hashmap之类的，毕竟浏览器的每个定时器都有一个id)\n\n```c++\n // A queue for holding delayed tasks before their delay has expired.\nstruct DelayedIncomingQueue {}\nDelayedIncomingQueue delayed_incoming_queue;\n```\n> 定时器需要注意的问题\n1.如果当前任务执行时间过久，会影延迟到期定时器任务的执行\n如果你主线程中的代码和微队列中的代码执行时效过久，定时器就算事件到了也要等，之前代码执行完了再执行，参看前面 `0秒定时器`的例子。\n\n2. 如果 setTimeout 存在嵌套调用，那么系统会设置最短时间间隔为 4 毫秒，因为在 Chrome 中，定时器被嵌套调用 5 次以上，系统会判断该函数方法被阻塞了，如果定时器的调用时间间隔小于 4 毫秒，那么浏览器会将每次调用的时间间隔设置为 4 毫秒。\n```c++\nstatic const int kMaxTimerNestingLevel = 5;\nstatic constexpr base::TimeDelta kMinimumInterval =\nbase::TimeDelta::FromMilliseconds(4)\n```\n\n3. 未激活的页面，setTimeout 执行最小间隔是 1000 毫秒，未被激活的页面中定时器最小值大于 1000 毫秒，也就是说，如果标签不是当前的激活标签，那么定时器最小的时间间隔是 1000 毫秒，目的是为了优化后台页面的加载损耗以及降低耗电量\n4. 延时执行时间有最大值， Chrome、Safari、Firefox 都是以 32 个 bit 来存储延时值的，32bit 最大只能存放的数字是 2147483647 毫秒，这就意味着，如果 setTimeout 设置的延迟值大于 2147483647 毫秒（大约 24.8 天）时就会溢出，这导致定时器会被立即执行。\n```js\nfunction showName(){\n  console.log(\" 极客时间 \")\n}\nvar timerID = setTimeout(showName,2147483648);// 会被理解调用执行\n\n```\n> WebAPI：XMLHttpRequest\n\n当执行到let xhr = new XMLHttpRequest()后，JavaScript 会创建一个 XMLHttpRequest对象xhr，用来执行实际的网络请求操作。\n\n浏览器调用xhr.send来发起网络请求了。你可以对照上面那张请求流程图，可以看到：渲染进程会将请求发送给网络进程，然后网络进程负责资源的下载，等网络进程接收到数据之后，就会利用 IPC 来通知渲染进程；渲染进程接收到消息之后，会将 xhr 的回调函数封装成任务并添加到消息队列中，等主线程循环系统执行到该任务的时候，就会根据相关的状态来调用对应的回调函数。\n- 如果网络请求出错了，就会执行 xhr.onerror；\n- 如果超时了，就会执行 xhr.ontimeout；\n- 如果是正常的数据接收，就会执行 onreadystatechange 来反馈相应的状态。\n  \n![XMLHttpRequest 工作流程图](http://blogimage.lemonlife.top/202003272119_592.png?/)\n\n### JavaScript微任务的应用\n> 监听 DOM , [MutationObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver) \n\n对于监听DOM这件事，容易想到的是使用定时器进行轮询监听，(假设没有requestAnimationFrame) 来监听DOM变化。当然这些都会产生一个高延迟或者，资源浪费的问题。其次就是采用基于观察者模式的`Mutation Event`，在每次资源发生改变的时候，触发对应的函数钩子。虽然这种方式能解决延迟高的问题，但是频繁的去触发函数钩子，带来的就是巨大的开销。从而也能造成页面卡顿。\n\n于是乎，后来推出 `Mutation Event`的改进版本.`MutationObserver`,采用了微任务队列，也就是当前上下文执行完成之后，才会执行`MutationObserver` 中的响应事件,有效的避免了，函数执行造成的页面上的动画卡顿。\n\n> Promise\n\n做为一个单线程的语言，JavaScript,要想充分的利用计算机资源，必须要采用异步编程模型，而对于JS来说就是，渲染进程上面的主线程的事件循环系统了。页面主线程发起了一个耗时的任务，并将任务交给另外一个进程去处理，这时页面主线程会继续执行消息队列中的任务。等该进程处理完这个任务后，会将该任务添加到渲染进程的消息队列中，并排队等待循环系统的处理。\n\n![异步编程模型图](http://blogimage.lemonlife.top/202003272037_430.png?/)\n\n于是乎，为了处理消息队列中返回的事件，就产生了所谓的回调函数的机制。确保我们能正确的处理异步信息。然后就有可能产生回调地狱问题。而Promise的诞生就是想解决这种回调地狱问题。Promise内部实现的机制就是使用了微任务队列，(可以上网搜一下Promise的实现，也可以参看 [我的博客手写Promise](https://lemonlife.top/2020/02/10/interview/#%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8Bpromise%E4%BB%A5%E5%8F%8A%E5%86%85%E9%83%A8%E7%9A%84%E5%AE%9E%E7%8E%B0)。可以看到里面采用了`setTimeout`，是js不提供微队列函数，只能采用setTimeout模拟一下微队列，底层的promise实现，正是把那些状态参数都放到了微队列中等待执行。\n\n### 使用同步的方式去写异步代码\n> Generator \n```js\nfunction* genDemo() {\n    console.log(\" 开始执行第一段 \")\n    yield 'generator 2'\n \n    console.log(\" 开始执行第二段 \")\n    yield 'generator 2'\n \n    console.log(\" 开始执行第三段 \")\n    yield 'generator 2'\n \n    console.log(\" 执行结束 \")\n    return 'generator 2'\n}\n \nconsole.log('main 0')\nlet gen = genDemo()\nconsole.log(gen.next().value)\nconsole.log('main 1')\nconsole.log(gen.next().value)\nconsole.log('main 2')\nconsole.log(gen.next().value)\nconsole.log('main 3')\nconsole.log(gen.next().value)\nconsole.log('main 4')\n```\n可以看到使用了 Generator 的之后，我们好像可以通过`gen.next()`随意执行`function* genDemo` 函数里面的代码，然后，如果在执行函数内部代码过程中，如果遇到 yield 关键字，那么 JavaScript 引擎将返回关键字后面的内容给外部，并暂停该函数的执行。然后在外部继续调用next,会接着上次暂停的地方继续执行，一直这样循环往复。对于这种可以随缘恢复和暂停函数的行为是基于 **协程** 机制。\n\n操作系统对于资源的管理进程是开销最大的，其次是线程，协程是一种比线程更加轻量级的存在。你可以把协程看成是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程，比如当前执行的是 A 协程，要启动 B 协程，那么 A 协程就需要将主线程的控制权交给 B 协程，这就体现在 A 协程暂停执行，B 协程恢复执行；同样，也可以从 B 协程中启动 A 协程。通常，如果从 A 协程启动 B 协程，我们就把 A 协程称为 B 协程的父协程。\n\n![协程执行流程图](http://blogimage.lemonlife.top/202003272133_917.png?/)\n\n**注意**\n\n1. gen 协程和父协程是在主线程上交互执行的，并不是并发执行的，它们之前的切换是通过 yield 和 gen.next 来配合完成的\n2. 对于父子协程，都有自己独立的调用栈，只不过，父协程中一直保留着子协程的调用栈信息，当在 gen 协程中调用了 yield 方法时，JavaScript 引擎会保存 gen 协程当前的调用栈信息，并恢复父协程的调用栈信息。同样，当在父协程中执行 gen.next 时，JavaScript 引擎会保存父协程的调用栈信息，并恢复 gen 协程的调用栈信息。\n   \n![协程之间的切换](http://blogimage.lemonlife.top/202003272139_187.png?/)\n\n> async/await\n\nasync/await,是Generator函数的语法糖，专门针对Promise的一种封装。\n```js\nasync function foo() {\n    console.log(1)\n    let a = await 100\n    console.log(a)\n    console.log(2)\n}\nconsole.log(0)\nfoo()\nconsole.log(3)\n\n// 0 1 3 100 2\n\n```\n![上述 async/await 执行流程图](http://blogimage.lemonlife.top/202003272144_714.png?/)\n\n\n> 本文是我看了[李兵老师极客时间浏览器工作原理的专栏](https://time.geekbang.org/column/intro/216?code=wLzkK4Ecmtj435LqyZ6ecONi5PnKUst4jvEoQKp1yUA%3D)写的总结,文字和图片资料来源与极客时间.","slug":"web-fundamentals-geektime2","published":1,"updated":"2021-08-07T01:59:03.349Z","_id":"cl4ince70002bcguf7ebj65an","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"消息队列和事件循环\"><a class=\"markdownIt-Anchor\" href=\"#消息队列和事件循环\"></a> 消息队列和事件循环</h3>\n<p>要知道浏览器中的JavaScript是如何运行的，首先需要了解的是浏览器的渲染进程到底是如何工作的。首先渲染进程的主线程肯定是运行了JavaScript代码。然后因为渲染进程要和其他的进程（如网络进程和浏览器进程等）进行一些通信，必定会有一条IO线程，来和外界发生数据交换。同样在渲染进程内部有IO线程和渲染主线程之间的通讯，必然是基于消息队列机制的。方便浏览器主线程读取，和IO线程存放事件。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003261644_747.png?/\" alt=\"渲染进程内部结构\" /></p>\n<p>除了图中的一些事件，消息队列中还包含了很多与页面相关的事件，如 JavaScript 执行、解析 DOM、样式计算、布局计算、CSS 动画等。</p>\n<p>当然如果消息队列仅仅是每个任务，都是按顺序执行的的设计，不难发现，会造成一个任务的堆积，以及必要任务的延迟。渲染进程内部除了这两条线程之外，也还有预解析DOM线程和垃圾回收的一些辅助线程。这里只是对JavaScript的事件机制一个简单的介绍，有一个最基本的概念上的了解。</p>\n<h3 id=\"宏任务和微任务\"><a class=\"markdownIt-Anchor\" href=\"#宏任务和微任务\"></a> 宏任务和微任务</h3>\n<p>主线程采用一个 循环机制，不断地从这些任务队列中取出任务并执行任务。为了解决可能出现的任务延迟，阻塞等问题，在V8内部，引入了宏任务和微任务的概念。我们把这些消息队列中的任务称为宏任务。</p>\n<p>而对于微任务，在JS执行脚本的时候，会创建一个全局执行的上下文，在创建全局执行上下文的同时，V8引擎会创建一个微任务队列。(这个真的是队列)，然后在执行代码的时候，如果有遇到产生微任务的代码，比如Promise.resove 函数等，会将产生的微任务放置到任务队列中，在当前作用域中的代码执行完成之后，会先执行当前微任务队列中的代码，直到当前微任务代码执行完了再执行宏任务。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;0秒定时器&#x27;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;执行Promise&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">res</span>()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;0000&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"comment\">// 0000</span></span><br><span class=\"line\"><span class=\"comment\">// 执行Promise</span></span><br><span class=\"line\"><span class=\"comment\">// 0秒定时器</span></span><br></pre></td></tr></table></figure>\n<p>可见从上面的代码可以看出，在成函数上下文,然后创建了微任务队列之后，开始逐行执行代码，</p>\n<ol>\n<li>执行了 <code>setTimeout</code> ,将此函数放入宏任务队列中。</li>\n<li>遇到了, <code>new Promise()</code>  调用了resolve,将resolve,把resolve中要执行的代码放入微任务队列中</li>\n<li>执行 <code>console.log('0000')</code> 输出 <code>0000</code></li>\n<li>执行微任务队列中的代码，输出 <code>执行Promise</code></li>\n<li>这时候浏览器出现了空闲期，开始执行宏任务，发现有定时器到时间了，执行定时器，<code>输出0秒定时器</code></li>\n</ol>\n<p><img src=\"http://blogimage.lemonlife.top/202003271955_472.png?/\" alt=\"微任务的执行过程\" /></p>\n<h3 id=\"javascript宏任务的应用\"><a class=\"markdownIt-Anchor\" href=\"#javascript宏任务的应用\"></a> JavaScript宏任务的应用</h3>\n<blockquote>\n<p>setTimeout</p>\n</blockquote>\n<p>通过之前的介绍你大概对setTimeout有一定的认识，他属于一种浏览器宏任务，但是你是否设想过，浏览器是如何知道setTimeout是如何到时间了呢。除了上述介绍的消息队列之外，浏览器还有另外一个消息队列，这个队列中维护了需要延迟执行的任务列表，包括了定时器和 Chromium 内部一些需要延迟执行的任务。所以当通过 JavaScript 创建一个定时器时，渲染进程会将该定时器的回调任务添加到延迟队列中。(说成队列只是方便大家理解，其实实际上储存定时器的数据结构可能是hashmap之类的，毕竟浏览器的每个定时器都有一个id)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// A queue for holding delayed tasks before their delay has expired.</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">DelayedIncomingQueue</span> &#123;&#125;</span><br><span class=\"line\">DelayedIncomingQueue delayed_incoming_queue;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>定时器需要注意的问题<br />\n1.如果当前任务执行时间过久，会影延迟到期定时器任务的执行<br />\n如果你主线程中的代码和微队列中的代码执行时效过久，定时器就算事件到了也要等，之前代码执行完了再执行，参看前面 <code>0秒定时器</code>的例子。</p>\n</blockquote>\n<ol start=\"2\">\n<li>如果 setTimeout 存在嵌套调用，那么系统会设置最短时间间隔为 4 毫秒，因为在 Chrome 中，定时器被嵌套调用 5 次以上，系统会判断该函数方法被阻塞了，如果定时器的调用时间间隔小于 4 毫秒，那么浏览器会将每次调用的时间间隔设置为 4 毫秒。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> kMaxTimerNestingLevel = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"keyword\">constexpr</span> base::TimeDelta kMinimumInterval =</span><br><span class=\"line\">base::TimeDelta::<span class=\"built_in\">FromMilliseconds</span>(<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>未激活的页面，setTimeout 执行最小间隔是 1000 毫秒，未被激活的页面中定时器最小值大于 1000 毫秒，也就是说，如果标签不是当前的激活标签，那么定时器最小的时间间隔是 1000 毫秒，目的是为了优化后台页面的加载损耗以及降低耗电量</li>\n<li>延时执行时间有最大值， Chrome、Safari、Firefox 都是以 32 个 bit 来存储延时值的，32bit 最大只能存放的数字是 2147483647 毫秒，这就意味着，如果 setTimeout 设置的延迟值大于 2147483647 毫秒（大约 24.8 天）时就会溢出，这导致定时器会被立即执行。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showName</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot; 极客时间 &quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> timerID = <span class=\"built_in\">setTimeout</span>(showName,<span class=\"number\">2147483648</span>);<span class=\"comment\">// 会被理解调用执行</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>WebAPI：XMLHttpRequest</p>\n</blockquote>\n<p>当执行到let xhr = new XMLHttpRequest()后，JavaScript 会创建一个 XMLHttpRequest对象xhr，用来执行实际的网络请求操作。</p>\n<p>浏览器调用xhr.send来发起网络请求了。你可以对照上面那张请求流程图，可以看到：渲染进程会将请求发送给网络进程，然后网络进程负责资源的下载，等网络进程接收到数据之后，就会利用 IPC 来通知渲染进程；渲染进程接收到消息之后，会将 xhr 的回调函数封装成任务并添加到消息队列中，等主线程循环系统执行到该任务的时候，就会根据相关的状态来调用对应的回调函数。</p>\n<ul>\n<li>如果网络请求出错了，就会执行 xhr.onerror；</li>\n<li>如果超时了，就会执行 xhr.ontimeout；</li>\n<li>如果是正常的数据接收，就会执行 onreadystatechange 来反馈相应的状态。</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202003272119_592.png?/\" alt=\"XMLHttpRequest 工作流程图\" /></p>\n<h3 id=\"javascript微任务的应用\"><a class=\"markdownIt-Anchor\" href=\"#javascript微任务的应用\"></a> JavaScript微任务的应用</h3>\n<blockquote>\n<p>监听 DOM , <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\">MutationObserver</a></p>\n</blockquote>\n<p>对于监听DOM这件事，容易想到的是使用定时器进行轮询监听，(假设没有requestAnimationFrame) 来监听DOM变化。当然这些都会产生一个高延迟或者，资源浪费的问题。其次就是采用基于观察者模式的<code>Mutation Event</code>，在每次资源发生改变的时候，触发对应的函数钩子。虽然这种方式能解决延迟高的问题，但是频繁的去触发函数钩子，带来的就是巨大的开销。从而也能造成页面卡顿。</p>\n<p>于是乎，后来推出 <code>Mutation Event</code>的改进版本.<code>MutationObserver</code>,采用了微任务队列，也就是当前上下文执行完成之后，才会执行<code>MutationObserver</code> 中的响应事件,有效的避免了，函数执行造成的页面上的动画卡顿。</p>\n<blockquote>\n<p>Promise</p>\n</blockquote>\n<p>做为一个单线程的语言，JavaScript,要想充分的利用计算机资源，必须要采用异步编程模型，而对于JS来说就是，渲染进程上面的主线程的事件循环系统了。页面主线程发起了一个耗时的任务，并将任务交给另外一个进程去处理，这时页面主线程会继续执行消息队列中的任务。等该进程处理完这个任务后，会将该任务添加到渲染进程的消息队列中，并排队等待循环系统的处理。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003272037_430.png?/\" alt=\"异步编程模型图\" /></p>\n<p>于是乎，为了处理消息队列中返回的事件，就产生了所谓的回调函数的机制。确保我们能正确的处理异步信息。然后就有可能产生回调地狱问题。而Promise的诞生就是想解决这种回调地狱问题。Promise内部实现的机制就是使用了微任务队列，(可以上网搜一下Promise的实现，也可以参看 <a href=\"https://lemonlife.top/2020/02/10/interview/#%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8Bpromise%E4%BB%A5%E5%8F%8A%E5%86%85%E9%83%A8%E7%9A%84%E5%AE%9E%E7%8E%B0\">我的博客手写Promise</a>。可以看到里面采用了<code>setTimeout</code>，是js不提供微队列函数，只能采用setTimeout模拟一下微队列，底层的promise实现，正是把那些状态参数都放到了微队列中等待执行。</p>\n<h3 id=\"使用同步的方式去写异步代码\"><a class=\"markdownIt-Anchor\" href=\"#使用同步的方式去写异步代码\"></a> 使用同步的方式去写异步代码</h3>\n<blockquote>\n<p>Generator</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">genDemo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot; 开始执行第一段 &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;generator 2&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot; 开始执行第二段 &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;generator 2&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot; 开始执行第三段 &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;generator 2&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot; 执行结束 &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;generator 2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main 0&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> gen = <span class=\"title function_\">genDemo</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main 1&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main 2&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main 3&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main 4&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>可以看到使用了 Generator 的之后，我们好像可以通过<code>gen.next()</code>随意执行<code>function* genDemo</code> 函数里面的代码，然后，如果在执行函数内部代码过程中，如果遇到 yield 关键字，那么 JavaScript 引擎将返回关键字后面的内容给外部，并暂停该函数的执行。然后在外部继续调用next,会接着上次暂停的地方继续执行，一直这样循环往复。对于这种可以随缘恢复和暂停函数的行为是基于 <strong>协程</strong> 机制。</p>\n<p>操作系统对于资源的管理进程是开销最大的，其次是线程，协程是一种比线程更加轻量级的存在。你可以把协程看成是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程，比如当前执行的是 A 协程，要启动 B 协程，那么 A 协程就需要将主线程的控制权交给 B 协程，这就体现在 A 协程暂停执行，B 协程恢复执行；同样，也可以从 B 协程中启动 A 协程。通常，如果从 A 协程启动 B 协程，我们就把 A 协程称为 B 协程的父协程。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003272133_917.png?/\" alt=\"协程执行流程图\" /></p>\n<p><strong>注意</strong></p>\n<ol>\n<li>gen 协程和父协程是在主线程上交互执行的，并不是并发执行的，它们之前的切换是通过 yield 和 gen.next 来配合完成的</li>\n<li>对于父子协程，都有自己独立的调用栈，只不过，父协程中一直保留着子协程的调用栈信息，当在 gen 协程中调用了 yield 方法时，JavaScript 引擎会保存 gen 协程当前的调用栈信息，并恢复父协程的调用栈信息。同样，当在父协程中执行 gen.next 时，JavaScript 引擎会保存父协程的调用栈信息，并恢复 gen 协程的调用栈信息。</li>\n</ol>\n<p><img src=\"http://blogimage.lemonlife.top/202003272139_187.png?/\" alt=\"协程之间的切换\" /></p>\n<blockquote>\n<p>async/await</p>\n</blockquote>\n<p>async/await,是Generator函数的语法糖，专门针对Promise的一种封装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">await</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"title function_\">foo</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0 1 3 100 2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/202003272144_714.png?/\" alt=\"上述 async/await 执行流程图\" /></p>\n<blockquote>\n<p>本文是我看了<a href=\"https://time.geekbang.org/column/intro/216?code=wLzkK4Ecmtj435LqyZ6ecONi5PnKUst4jvEoQKp1yUA%3D\">李兵老师极客时间浏览器工作原理的专栏</a>写的总结,文字和图片资料来源与极客时间.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"消息队列和事件循环\"><a class=\"markdownIt-Anchor\" href=\"#消息队列和事件循环\"></a> 消息队列和事件循环</h3>\n<p>要知道浏览器中的JavaScript是如何运行的，首先需要了解的是浏览器的渲染进程到底是如何工作的。首先渲染进程的主线程肯定是运行了JavaScript代码。然后因为渲染进程要和其他的进程（如网络进程和浏览器进程等）进行一些通信，必定会有一条IO线程，来和外界发生数据交换。同样在渲染进程内部有IO线程和渲染主线程之间的通讯，必然是基于消息队列机制的。方便浏览器主线程读取，和IO线程存放事件。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003261644_747.png?/\" alt=\"渲染进程内部结构\" /></p>\n<p>除了图中的一些事件，消息队列中还包含了很多与页面相关的事件，如 JavaScript 执行、解析 DOM、样式计算、布局计算、CSS 动画等。</p>\n<p>当然如果消息队列仅仅是每个任务，都是按顺序执行的的设计，不难发现，会造成一个任务的堆积，以及必要任务的延迟。渲染进程内部除了这两条线程之外，也还有预解析DOM线程和垃圾回收的一些辅助线程。这里只是对JavaScript的事件机制一个简单的介绍，有一个最基本的概念上的了解。</p>\n<h3 id=\"宏任务和微任务\"><a class=\"markdownIt-Anchor\" href=\"#宏任务和微任务\"></a> 宏任务和微任务</h3>\n<p>主线程采用一个 循环机制，不断地从这些任务队列中取出任务并执行任务。为了解决可能出现的任务延迟，阻塞等问题，在V8内部，引入了宏任务和微任务的概念。我们把这些消息队列中的任务称为宏任务。</p>\n<p>而对于微任务，在JS执行脚本的时候，会创建一个全局执行的上下文，在创建全局执行上下文的同时，V8引擎会创建一个微任务队列。(这个真的是队列)，然后在执行代码的时候，如果有遇到产生微任务的代码，比如Promise.resove 函数等，会将产生的微任务放置到任务队列中，在当前作用域中的代码执行完成之后，会先执行当前微任务队列中的代码，直到当前微任务代码执行完了再执行宏任务。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;0秒定时器&#x27;</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;执行Promise&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">res</span>()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;0000&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//执行结果</span></span><br><span class=\"line\"><span class=\"comment\">// 0000</span></span><br><span class=\"line\"><span class=\"comment\">// 执行Promise</span></span><br><span class=\"line\"><span class=\"comment\">// 0秒定时器</span></span><br></pre></td></tr></table></figure>\n<p>可见从上面的代码可以看出，在成函数上下文,然后创建了微任务队列之后，开始逐行执行代码，</p>\n<ol>\n<li>执行了 <code>setTimeout</code> ,将此函数放入宏任务队列中。</li>\n<li>遇到了, <code>new Promise()</code>  调用了resolve,将resolve,把resolve中要执行的代码放入微任务队列中</li>\n<li>执行 <code>console.log('0000')</code> 输出 <code>0000</code></li>\n<li>执行微任务队列中的代码，输出 <code>执行Promise</code></li>\n<li>这时候浏览器出现了空闲期，开始执行宏任务，发现有定时器到时间了，执行定时器，<code>输出0秒定时器</code></li>\n</ol>\n<p><img src=\"http://blogimage.lemonlife.top/202003271955_472.png?/\" alt=\"微任务的执行过程\" /></p>\n<h3 id=\"javascript宏任务的应用\"><a class=\"markdownIt-Anchor\" href=\"#javascript宏任务的应用\"></a> JavaScript宏任务的应用</h3>\n<blockquote>\n<p>setTimeout</p>\n</blockquote>\n<p>通过之前的介绍你大概对setTimeout有一定的认识，他属于一种浏览器宏任务，但是你是否设想过，浏览器是如何知道setTimeout是如何到时间了呢。除了上述介绍的消息队列之外，浏览器还有另外一个消息队列，这个队列中维护了需要延迟执行的任务列表，包括了定时器和 Chromium 内部一些需要延迟执行的任务。所以当通过 JavaScript 创建一个定时器时，渲染进程会将该定时器的回调任务添加到延迟队列中。(说成队列只是方便大家理解，其实实际上储存定时器的数据结构可能是hashmap之类的，毕竟浏览器的每个定时器都有一个id)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// A queue for holding delayed tasks before their delay has expired.</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">DelayedIncomingQueue</span> &#123;&#125;</span><br><span class=\"line\">DelayedIncomingQueue delayed_incoming_queue;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>定时器需要注意的问题<br />\n1.如果当前任务执行时间过久，会影延迟到期定时器任务的执行<br />\n如果你主线程中的代码和微队列中的代码执行时效过久，定时器就算事件到了也要等，之前代码执行完了再执行，参看前面 <code>0秒定时器</code>的例子。</p>\n</blockquote>\n<ol start=\"2\">\n<li>如果 setTimeout 存在嵌套调用，那么系统会设置最短时间间隔为 4 毫秒，因为在 Chrome 中，定时器被嵌套调用 5 次以上，系统会判断该函数方法被阻塞了，如果定时器的调用时间间隔小于 4 毫秒，那么浏览器会将每次调用的时间间隔设置为 4 毫秒。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> kMaxTimerNestingLevel = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"keyword\">constexpr</span> base::TimeDelta kMinimumInterval =</span><br><span class=\"line\">base::TimeDelta::<span class=\"built_in\">FromMilliseconds</span>(<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>未激活的页面，setTimeout 执行最小间隔是 1000 毫秒，未被激活的页面中定时器最小值大于 1000 毫秒，也就是说，如果标签不是当前的激活标签，那么定时器最小的时间间隔是 1000 毫秒，目的是为了优化后台页面的加载损耗以及降低耗电量</li>\n<li>延时执行时间有最大值， Chrome、Safari、Firefox 都是以 32 个 bit 来存储延时值的，32bit 最大只能存放的数字是 2147483647 毫秒，这就意味着，如果 setTimeout 设置的延迟值大于 2147483647 毫秒（大约 24.8 天）时就会溢出，这导致定时器会被立即执行。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showName</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot; 极客时间 &quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> timerID = <span class=\"built_in\">setTimeout</span>(showName,<span class=\"number\">2147483648</span>);<span class=\"comment\">// 会被理解调用执行</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>WebAPI：XMLHttpRequest</p>\n</blockquote>\n<p>当执行到let xhr = new XMLHttpRequest()后，JavaScript 会创建一个 XMLHttpRequest对象xhr，用来执行实际的网络请求操作。</p>\n<p>浏览器调用xhr.send来发起网络请求了。你可以对照上面那张请求流程图，可以看到：渲染进程会将请求发送给网络进程，然后网络进程负责资源的下载，等网络进程接收到数据之后，就会利用 IPC 来通知渲染进程；渲染进程接收到消息之后，会将 xhr 的回调函数封装成任务并添加到消息队列中，等主线程循环系统执行到该任务的时候，就会根据相关的状态来调用对应的回调函数。</p>\n<ul>\n<li>如果网络请求出错了，就会执行 xhr.onerror；</li>\n<li>如果超时了，就会执行 xhr.ontimeout；</li>\n<li>如果是正常的数据接收，就会执行 onreadystatechange 来反馈相应的状态。</li>\n</ul>\n<p><img src=\"http://blogimage.lemonlife.top/202003272119_592.png?/\" alt=\"XMLHttpRequest 工作流程图\" /></p>\n<h3 id=\"javascript微任务的应用\"><a class=\"markdownIt-Anchor\" href=\"#javascript微任务的应用\"></a> JavaScript微任务的应用</h3>\n<blockquote>\n<p>监听 DOM , <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\">MutationObserver</a></p>\n</blockquote>\n<p>对于监听DOM这件事，容易想到的是使用定时器进行轮询监听，(假设没有requestAnimationFrame) 来监听DOM变化。当然这些都会产生一个高延迟或者，资源浪费的问题。其次就是采用基于观察者模式的<code>Mutation Event</code>，在每次资源发生改变的时候，触发对应的函数钩子。虽然这种方式能解决延迟高的问题，但是频繁的去触发函数钩子，带来的就是巨大的开销。从而也能造成页面卡顿。</p>\n<p>于是乎，后来推出 <code>Mutation Event</code>的改进版本.<code>MutationObserver</code>,采用了微任务队列，也就是当前上下文执行完成之后，才会执行<code>MutationObserver</code> 中的响应事件,有效的避免了，函数执行造成的页面上的动画卡顿。</p>\n<blockquote>\n<p>Promise</p>\n</blockquote>\n<p>做为一个单线程的语言，JavaScript,要想充分的利用计算机资源，必须要采用异步编程模型，而对于JS来说就是，渲染进程上面的主线程的事件循环系统了。页面主线程发起了一个耗时的任务，并将任务交给另外一个进程去处理，这时页面主线程会继续执行消息队列中的任务。等该进程处理完这个任务后，会将该任务添加到渲染进程的消息队列中，并排队等待循环系统的处理。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003272037_430.png?/\" alt=\"异步编程模型图\" /></p>\n<p>于是乎，为了处理消息队列中返回的事件，就产生了所谓的回调函数的机制。确保我们能正确的处理异步信息。然后就有可能产生回调地狱问题。而Promise的诞生就是想解决这种回调地狱问题。Promise内部实现的机制就是使用了微任务队列，(可以上网搜一下Promise的实现，也可以参看 <a href=\"https://lemonlife.top/2020/02/10/interview/#%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8Bpromise%E4%BB%A5%E5%8F%8A%E5%86%85%E9%83%A8%E7%9A%84%E5%AE%9E%E7%8E%B0\">我的博客手写Promise</a>。可以看到里面采用了<code>setTimeout</code>，是js不提供微队列函数，只能采用setTimeout模拟一下微队列，底层的promise实现，正是把那些状态参数都放到了微队列中等待执行。</p>\n<h3 id=\"使用同步的方式去写异步代码\"><a class=\"markdownIt-Anchor\" href=\"#使用同步的方式去写异步代码\"></a> 使用同步的方式去写异步代码</h3>\n<blockquote>\n<p>Generator</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">genDemo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot; 开始执行第一段 &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;generator 2&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot; 开始执行第二段 &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;generator 2&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot; 开始执行第三段 &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;generator 2&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot; 执行结束 &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;generator 2&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main 0&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> gen = <span class=\"title function_\">genDemo</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main 1&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main 2&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main 3&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(gen.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;main 4&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>可以看到使用了 Generator 的之后，我们好像可以通过<code>gen.next()</code>随意执行<code>function* genDemo</code> 函数里面的代码，然后，如果在执行函数内部代码过程中，如果遇到 yield 关键字，那么 JavaScript 引擎将返回关键字后面的内容给外部，并暂停该函数的执行。然后在外部继续调用next,会接着上次暂停的地方继续执行，一直这样循环往复。对于这种可以随缘恢复和暂停函数的行为是基于 <strong>协程</strong> 机制。</p>\n<p>操作系统对于资源的管理进程是开销最大的，其次是线程，协程是一种比线程更加轻量级的存在。你可以把协程看成是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程，比如当前执行的是 A 协程，要启动 B 协程，那么 A 协程就需要将主线程的控制权交给 B 协程，这就体现在 A 协程暂停执行，B 协程恢复执行；同样，也可以从 B 协程中启动 A 协程。通常，如果从 A 协程启动 B 协程，我们就把 A 协程称为 B 协程的父协程。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003272133_917.png?/\" alt=\"协程执行流程图\" /></p>\n<p><strong>注意</strong></p>\n<ol>\n<li>gen 协程和父协程是在主线程上交互执行的，并不是并发执行的，它们之前的切换是通过 yield 和 gen.next 来配合完成的</li>\n<li>对于父子协程，都有自己独立的调用栈，只不过，父协程中一直保留着子协程的调用栈信息，当在 gen 协程中调用了 yield 方法时，JavaScript 引擎会保存 gen 协程当前的调用栈信息，并恢复父协程的调用栈信息。同样，当在父协程中执行 gen.next 时，JavaScript 引擎会保存父协程的调用栈信息，并恢复 gen 协程的调用栈信息。</li>\n</ol>\n<p><img src=\"http://blogimage.lemonlife.top/202003272139_187.png?/\" alt=\"协程之间的切换\" /></p>\n<blockquote>\n<p>async/await</p>\n</blockquote>\n<p>async/await,是Generator函数的语法糖，专门针对Promise的一种封装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">await</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"title function_\">foo</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 0 1 3 100 2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/202003272144_714.png?/\" alt=\"上述 async/await 执行流程图\" /></p>\n<blockquote>\n<p>本文是我看了<a href=\"https://time.geekbang.org/column/intro/216?code=wLzkK4Ecmtj435LqyZ6ecONi5PnKUst4jvEoQKp1yUA%3D\">李兵老师极客时间浏览器工作原理的专栏</a>写的总结,文字和图片资料来源与极客时间.</p>\n</blockquote>\n"},{"title":"浏览器工作原理~优化篇","date":"2020-02-22T17:22:22.000Z","_content":"### 优化CSS\n由之前的原理篇，我们知道浏览器必须要先加载生成DOM和CSSOM才能进行页面渲染，而前端为了适配不同设备可能需要很多css,例如打印设备中显示的css，移动端，网页端不同的css，此时常用的应该是 `@media` 属性，但是解析越多css，就会越耗时，因此可以把属于某一特性的css单独提取出来,`link` 引入即可，做到一开始，只下载不解析。如下：浏览器会下载两个样式表 ，但 暂时不会解析 `media=\"print\"` 中的样式表\n\n```css\n/* 浏览器默认加载和解析的css样式表 */\n<link rel=\"stylesheet\" href=\"xxxx.css\" >\n/* 浏览器只在要传向打印设备的时候，才启用的样式表 */\n<link rel=\"stylesheet\" href=\"xxxx.css\" media=\"print\">\n```\n### 优化JavaScript\n首先压缩文件减少网络传输时间，这一点基本都是大家都适用的，(建议webpack开启生成环境模式，会自动启动js压缩)。\n\n默认情况下，JavaScript 执行会\"阻止DOM解析器\"(总之感觉形成RenderTree和运行JS是一个相互阻止的过程，毕竟两者可能对一个产生影响),当浏览器遇到文档中的脚本时，它必须暂停 DOM 构建，将控制权移交给 JavaScript 运行时，让脚本执行完毕，然后再继续构建 DOM。我们在前面的示例中已经见过内联脚本的实用情况。实际上，内联脚本始终会阻止解析器，除非您编写额外代码来推迟它们的执行。\n\n因此一般都采用 `<script src=\"xxx.js\"></script>` 引入的方式。\n采用这种方式，虽然JS不影响DOM解析的过程，但是DOM会阻断JS的运行。\n而且如果脚本放在,被执行的元素前，是获取不到该元素的，因此以下代码浏览器会报错。`TypeError: Cannot read property 'style' of null`\n```html\n<head>\n\t<style>\n\t\t#root {\n\t\t\tcolor: blue;\n\t\t}\n\t</style>\n\t<script src=\"./index.js\"></script>\n</head>\n<body>\n\t<div id=\"root\"> 我是什么颜色</div>\n</body>\n<!-- index.js脚本内容  -->\n<!-- document.getElementById('root').style.color = 'red' -->\n```\n所以我们想采用异步加载的方式来处理这些问题。\n- 使用window.onload实现js函数异步运行\n  ```js\n  window.onload = function () {\n    document.getElementById('root').style.color = 'red'\n  }\n  ```\n- 采用 `<script src=\"./index.js\" async></script>` 引入脚本\n\n  浏览器遇到async引入的js脚本时候，不会阻止DOM和CSSOM形成过程，同时脚本也不会因为CSS对象而停止执行.\n- 采用 `<script src=\"./index.js\" defer></script>`\n\n  脚本标记也可以采用 defer 属性，方法与采用 async 属性相同。差别在于对于 defer，脚本需要等到文档解析后执行，而 async 允许脚本在文档解析时位于后台运行,对于文档中声明的多个defer脚本，会按照下载顺序执行，但是对于async，基本无执行顺序的概念，依次async中存放的代码，一定是互相没有直接引用关系的。\n  \n### 预加载扫描(Preload)\n可以指定一些必须的资源，加上 preload 标识,浏览器会优先从服务器获取这些资源\n\n[知乎关于预加载链接](https://zhuanlan.zhihu.com/p/32561606)\n\n### 最后\n优化方法总结如下\n- 资源最小化,采用Gzip进行文本压缩\n- 优化CSS\n- 采用异步js的方式\n- 预加载扫描\n- 减小关键路径的长度(critical path),即减少影响页面展示的请求次数\n  \n  - 正确使用HTTP缓存机制\n  - 使用HTTP2.0(一次可获得更多资源，可以减少请求次数，降低握手耗时)\n  - 服务端渲染的方式可以理解成关键路径为1，我得到了html就可以展示页面了，提高了SEO,一定程度上加速了首页显示\n\n> 教程中大多数图片和文字资源来源于Google官网","source":"_posts/web-fundamentals-optimize.md","raw":"---\ntitle: 浏览器工作原理~优化篇\ndate: 2020-02-23 01:22:22\ntags:\n  - 浏览器 \n---\n### 优化CSS\n由之前的原理篇，我们知道浏览器必须要先加载生成DOM和CSSOM才能进行页面渲染，而前端为了适配不同设备可能需要很多css,例如打印设备中显示的css，移动端，网页端不同的css，此时常用的应该是 `@media` 属性，但是解析越多css，就会越耗时，因此可以把属于某一特性的css单独提取出来,`link` 引入即可，做到一开始，只下载不解析。如下：浏览器会下载两个样式表 ，但 暂时不会解析 `media=\"print\"` 中的样式表\n\n```css\n/* 浏览器默认加载和解析的css样式表 */\n<link rel=\"stylesheet\" href=\"xxxx.css\" >\n/* 浏览器只在要传向打印设备的时候，才启用的样式表 */\n<link rel=\"stylesheet\" href=\"xxxx.css\" media=\"print\">\n```\n### 优化JavaScript\n首先压缩文件减少网络传输时间，这一点基本都是大家都适用的，(建议webpack开启生成环境模式，会自动启动js压缩)。\n\n默认情况下，JavaScript 执行会\"阻止DOM解析器\"(总之感觉形成RenderTree和运行JS是一个相互阻止的过程，毕竟两者可能对一个产生影响),当浏览器遇到文档中的脚本时，它必须暂停 DOM 构建，将控制权移交给 JavaScript 运行时，让脚本执行完毕，然后再继续构建 DOM。我们在前面的示例中已经见过内联脚本的实用情况。实际上，内联脚本始终会阻止解析器，除非您编写额外代码来推迟它们的执行。\n\n因此一般都采用 `<script src=\"xxx.js\"></script>` 引入的方式。\n采用这种方式，虽然JS不影响DOM解析的过程，但是DOM会阻断JS的运行。\n而且如果脚本放在,被执行的元素前，是获取不到该元素的，因此以下代码浏览器会报错。`TypeError: Cannot read property 'style' of null`\n```html\n<head>\n\t<style>\n\t\t#root {\n\t\t\tcolor: blue;\n\t\t}\n\t</style>\n\t<script src=\"./index.js\"></script>\n</head>\n<body>\n\t<div id=\"root\"> 我是什么颜色</div>\n</body>\n<!-- index.js脚本内容  -->\n<!-- document.getElementById('root').style.color = 'red' -->\n```\n所以我们想采用异步加载的方式来处理这些问题。\n- 使用window.onload实现js函数异步运行\n  ```js\n  window.onload = function () {\n    document.getElementById('root').style.color = 'red'\n  }\n  ```\n- 采用 `<script src=\"./index.js\" async></script>` 引入脚本\n\n  浏览器遇到async引入的js脚本时候，不会阻止DOM和CSSOM形成过程，同时脚本也不会因为CSS对象而停止执行.\n- 采用 `<script src=\"./index.js\" defer></script>`\n\n  脚本标记也可以采用 defer 属性，方法与采用 async 属性相同。差别在于对于 defer，脚本需要等到文档解析后执行，而 async 允许脚本在文档解析时位于后台运行,对于文档中声明的多个defer脚本，会按照下载顺序执行，但是对于async，基本无执行顺序的概念，依次async中存放的代码，一定是互相没有直接引用关系的。\n  \n### 预加载扫描(Preload)\n可以指定一些必须的资源，加上 preload 标识,浏览器会优先从服务器获取这些资源\n\n[知乎关于预加载链接](https://zhuanlan.zhihu.com/p/32561606)\n\n### 最后\n优化方法总结如下\n- 资源最小化,采用Gzip进行文本压缩\n- 优化CSS\n- 采用异步js的方式\n- 预加载扫描\n- 减小关键路径的长度(critical path),即减少影响页面展示的请求次数\n  \n  - 正确使用HTTP缓存机制\n  - 使用HTTP2.0(一次可获得更多资源，可以减少请求次数，降低握手耗时)\n  - 服务端渲染的方式可以理解成关键路径为1，我得到了html就可以展示页面了，提高了SEO,一定程度上加速了首页显示\n\n> 教程中大多数图片和文字资源来源于Google官网","slug":"web-fundamentals-optimize","published":1,"updated":"2021-08-07T01:59:03.350Z","_id":"cl4ince71002dcguf3tew6x61","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"优化css\"><a class=\"markdownIt-Anchor\" href=\"#优化css\"></a> 优化CSS</h3>\n<p>由之前的原理篇，我们知道浏览器必须要先加载生成DOM和CSSOM才能进行页面渲染，而前端为了适配不同设备可能需要很多css,例如打印设备中显示的css，移动端，网页端不同的css，此时常用的应该是 <code>@media</code> 属性，但是解析越多css，就会越耗时，因此可以把属于某一特性的css单独提取出来,<code>link</code> 引入即可，做到一开始，只下载不解析。如下：浏览器会下载两个样式表 ，但 暂时不会解析 <code>media=&quot;print&quot;</code> 中的样式表</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 浏览器默认加载和解析的css样式表 */</span></span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;xxxx<span class=\"selector-class\">.css</span>&quot; &gt;</span><br><span class=\"line\"><span class=\"comment\">/* 浏览器只在要传向打印设备的时候，才启用的样式表 */</span></span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;xxxx<span class=\"selector-class\">.css</span>&quot; media=&quot;print&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"优化javascript\"><a class=\"markdownIt-Anchor\" href=\"#优化javascript\"></a> 优化JavaScript</h3>\n<p>首先压缩文件减少网络传输时间，这一点基本都是大家都适用的，(建议webpack开启生成环境模式，会自动启动js压缩)。</p>\n<p>默认情况下，JavaScript 执行会&quot;阻止DOM解析器&quot;(总之感觉形成RenderTree和运行JS是一个相互阻止的过程，毕竟两者可能对一个产生影响),当浏览器遇到文档中的脚本时，它必须暂停 DOM 构建，将控制权移交给 JavaScript 运行时，让脚本执行完毕，然后再继续构建 DOM。我们在前面的示例中已经见过内联脚本的实用情况。实际上，内联脚本始终会阻止解析器，除非您编写额外代码来推迟它们的执行。</p>\n<p>因此一般都采用 <code>&lt;script src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</code> 引入的方式。<br />\n采用这种方式，虽然JS不影响DOM解析的过程，但是DOM会阻断JS的运行。<br />\n而且如果脚本放在,被执行的元素前，是获取不到该元素的，因此以下代码浏览器会报错。<code>TypeError: Cannot read property 'style' of null</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t\t<span class=\"selector-id\">#root</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t\t\t<span class=\"attribute\">color</span>: blue;</span></span><br><span class=\"line\"><span class=\"language-css\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./index.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span> 我是什么颜色<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- index.js脚本内容  --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- document.getElementById(&#x27;root&#x27;).style.color = &#x27;red&#x27; --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>所以我们想采用异步加载的方式来处理这些问题。</p>\n<ul>\n<li>\n<p>使用window.onload实现js函数异步运行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>采用 <code>&lt;script src=&quot;./index.js&quot; async&gt;&lt;/script&gt;</code> 引入脚本</p>\n<p>浏览器遇到async引入的js脚本时候，不会阻止DOM和CSSOM形成过程，同时脚本也不会因为CSS对象而停止执行.</p>\n</li>\n<li>\n<p>采用 <code>&lt;script src=&quot;./index.js&quot; defer&gt;&lt;/script&gt;</code></p>\n<p>脚本标记也可以采用 defer 属性，方法与采用 async 属性相同。差别在于对于 defer，脚本需要等到文档解析后执行，而 async 允许脚本在文档解析时位于后台运行,对于文档中声明的多个defer脚本，会按照下载顺序执行，但是对于async，基本无执行顺序的概念，依次async中存放的代码，一定是互相没有直接引用关系的。</p>\n</li>\n</ul>\n<h3 id=\"预加载扫描preload\"><a class=\"markdownIt-Anchor\" href=\"#预加载扫描preload\"></a> 预加载扫描(Preload)</h3>\n<p>可以指定一些必须的资源，加上 preload 标识,浏览器会优先从服务器获取这些资源</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/32561606\">知乎关于预加载链接</a></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\"></a> 最后</h3>\n<p>优化方法总结如下</p>\n<ul>\n<li>\n<p>资源最小化,采用Gzip进行文本压缩</p>\n</li>\n<li>\n<p>优化CSS</p>\n</li>\n<li>\n<p>采用异步js的方式</p>\n</li>\n<li>\n<p>预加载扫描</p>\n</li>\n<li>\n<p>减小关键路径的长度(critical path),即减少影响页面展示的请求次数</p>\n<ul>\n<li>正确使用HTTP缓存机制</li>\n<li>使用HTTP2.0(一次可获得更多资源，可以减少请求次数，降低握手耗时)</li>\n<li>服务端渲染的方式可以理解成关键路径为1，我得到了html就可以展示页面了，提高了SEO,一定程度上加速了首页显示</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>教程中大多数图片和文字资源来源于Google官网</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"优化css\"><a class=\"markdownIt-Anchor\" href=\"#优化css\"></a> 优化CSS</h3>\n<p>由之前的原理篇，我们知道浏览器必须要先加载生成DOM和CSSOM才能进行页面渲染，而前端为了适配不同设备可能需要很多css,例如打印设备中显示的css，移动端，网页端不同的css，此时常用的应该是 <code>@media</code> 属性，但是解析越多css，就会越耗时，因此可以把属于某一特性的css单独提取出来,<code>link</code> 引入即可，做到一开始，只下载不解析。如下：浏览器会下载两个样式表 ，但 暂时不会解析 <code>media=&quot;print&quot;</code> 中的样式表</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 浏览器默认加载和解析的css样式表 */</span></span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;xxxx<span class=\"selector-class\">.css</span>&quot; &gt;</span><br><span class=\"line\"><span class=\"comment\">/* 浏览器只在要传向打印设备的时候，才启用的样式表 */</span></span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;xxxx<span class=\"selector-class\">.css</span>&quot; media=&quot;print&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"优化javascript\"><a class=\"markdownIt-Anchor\" href=\"#优化javascript\"></a> 优化JavaScript</h3>\n<p>首先压缩文件减少网络传输时间，这一点基本都是大家都适用的，(建议webpack开启生成环境模式，会自动启动js压缩)。</p>\n<p>默认情况下，JavaScript 执行会&quot;阻止DOM解析器&quot;(总之感觉形成RenderTree和运行JS是一个相互阻止的过程，毕竟两者可能对一个产生影响),当浏览器遇到文档中的脚本时，它必须暂停 DOM 构建，将控制权移交给 JavaScript 运行时，让脚本执行完毕，然后再继续构建 DOM。我们在前面的示例中已经见过内联脚本的实用情况。实际上，内联脚本始终会阻止解析器，除非您编写额外代码来推迟它们的执行。</p>\n<p>因此一般都采用 <code>&lt;script src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</code> 引入的方式。<br />\n采用这种方式，虽然JS不影响DOM解析的过程，但是DOM会阻断JS的运行。<br />\n而且如果脚本放在,被执行的元素前，是获取不到该元素的，因此以下代码浏览器会报错。<code>TypeError: Cannot read property 'style' of null</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">\t\t<span class=\"selector-id\">#root</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">\t\t\t<span class=\"attribute\">color</span>: blue;</span></span><br><span class=\"line\"><span class=\"language-css\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./index.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span> 我是什么颜色<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- index.js脚本内容  --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- document.getElementById(&#x27;root&#x27;).style.color = &#x27;red&#x27; --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>所以我们想采用异步加载的方式来处理这些问题。</p>\n<ul>\n<li>\n<p>使用window.onload实现js函数异步运行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>).<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;red&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>采用 <code>&lt;script src=&quot;./index.js&quot; async&gt;&lt;/script&gt;</code> 引入脚本</p>\n<p>浏览器遇到async引入的js脚本时候，不会阻止DOM和CSSOM形成过程，同时脚本也不会因为CSS对象而停止执行.</p>\n</li>\n<li>\n<p>采用 <code>&lt;script src=&quot;./index.js&quot; defer&gt;&lt;/script&gt;</code></p>\n<p>脚本标记也可以采用 defer 属性，方法与采用 async 属性相同。差别在于对于 defer，脚本需要等到文档解析后执行，而 async 允许脚本在文档解析时位于后台运行,对于文档中声明的多个defer脚本，会按照下载顺序执行，但是对于async，基本无执行顺序的概念，依次async中存放的代码，一定是互相没有直接引用关系的。</p>\n</li>\n</ul>\n<h3 id=\"预加载扫描preload\"><a class=\"markdownIt-Anchor\" href=\"#预加载扫描preload\"></a> 预加载扫描(Preload)</h3>\n<p>可以指定一些必须的资源，加上 preload 标识,浏览器会优先从服务器获取这些资源</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/32561606\">知乎关于预加载链接</a></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\"></a> 最后</h3>\n<p>优化方法总结如下</p>\n<ul>\n<li>\n<p>资源最小化,采用Gzip进行文本压缩</p>\n</li>\n<li>\n<p>优化CSS</p>\n</li>\n<li>\n<p>采用异步js的方式</p>\n</li>\n<li>\n<p>预加载扫描</p>\n</li>\n<li>\n<p>减小关键路径的长度(critical path),即减少影响页面展示的请求次数</p>\n<ul>\n<li>正确使用HTTP缓存机制</li>\n<li>使用HTTP2.0(一次可获得更多资源，可以减少请求次数，降低握手耗时)</li>\n<li>服务端渲染的方式可以理解成关键路径为1，我得到了html就可以展示页面了，提高了SEO,一定程度上加速了首页显示</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>教程中大多数图片和文字资源来源于Google官网</p>\n</blockquote>\n"},{"title":"浏览器工作原理-chrome篇","date":"2020-03-21T12:43:41.000Z","_content":"\n### chrome架构\n**问题1**  只是打开了 1 个页，chrome启动了4个进程(在浏览器打开第一个页面的时候，且没有其他插件，音频的时候)\n\n![Chrome 的任务管理器窗口](http://blogimage.lemonlife.top/202003192140_995.png?/)\n**进程与线程的特点**\n\n1.  线程是不能单独存在的，它是由进程来启动和管理的\n2.  一个进程就是一个程序的运行实例,是操作系统分配资源的最小单元，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程\n3. 进程中的任意一线程执行出错，都会导致整个进程的崩溃。\n4. 线程之间可以共享进程中的数据，线程之间可以对自身进程中的公共数据进行读写操作\n5. 当一个进程关闭之后，操作系统会回收进程所占用的内存\n6. 进程之间的内容相互隔离，进程隔离是为保护操作系统中进程互不干扰的技术，每一个进程只能访问自己占有的数据，也就避免出现进程 A 写入数据到进程 B 的情况。正是因为进程之间的数据是严格隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于进程间通信（IPC）的机制了。(前端框架Electron)\n\n**现代化的浏览器进程架构**\n\n![最新的 Chrome 进程架构图](http://blogimage.lemonlife.top/202003192202_530.png?/)\n\n**浏览器进程。** 主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。\n\n**渲染进程。** 核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。\n\n**GPU 进程。**其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。\n\n**网络进程。**主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。\n\n**插件进程。**主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。\n\n> 因此打开 1 个页面至少需要 1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程，共 4 个；如果打开的页面有运行插件的话，还需要再加上 1 个插件进程。\n\n**process-per-site-instance策略**\n\n通常情况下是一个页面使用一个进程，但是，有一种情况，叫\"同一站点(same-site)\"，具体地讲，我们将“同一站点”定义为根域名（例如，geekbang.org）加上协议（例如，https:// 或者http://），还包含了该根域名下的所有子域名和不同的端口，比如下面这三个：\n```\nhttps://time.geekbang.org\nhttps://www.geekbang.org\nhttps://www.geekbang.org:8080\n```\n都是属于同一站点，因为它们的协议都是https，而根域名也都是geekbang.org。你也许了解同源策略，但是同一站点和同源策略还是存在一些不同地方，在这里你需要了解它们不是同一件事就行了。\nChrome的默认策略是，每个标签对应一个渲染进程。但是如果从一个页面打开了新页面，而新页面和当前页面属于同一站点时，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫process-per-site-instance。\n\n直白的讲，就是如果几个页面符合同一站点，那么他们将被分配到一个渲染进程里面去。\n所以，这种情况下，一个页面崩溃了，会导致同一站点的页面同时崩溃，因为他们使用了同一个渲染进程。\n\n在一个渲染进程里面，他们就会共享JS的执行环境，也就是说A页面可以直接在B页面中执行脚本。因为是同一家的站点，所以是有这个需求的。\n\n**iframe**\n\n如果页面里有iframe的话，iframe也会运行在单独的进程中，下图是我浏览器任务管理器的一个截图，图中的辅助框架应该就是指页面中的 `iframe` 标签对应的地址\n\n![贴上我自己电脑里面的一张图](http://blogimage.lemonlife.top/202003192230_498.png?/)\n\n**未来面向服务的架构**\n\n为了解决这些问题，在 2016 年，Chrome 官方团队使用“面向服务的架构”（Services Oriented Architecture，简称SOA）的思想设计了新的 Chrome 架构。也就是说 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过 IPC 来通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统，更好实现 Chrome 简单、稳定、高速、安全的目标。Chrome 最终要把 UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务，下面是 Chrome“面向服务的架构”的进程模型图。\n\n![](http://blogimage.lemonlife.top/202003192317_372.png?/)\n\n### 浏览器中的HTTP协议\nTCP和HTTP的关系，以及TCP三次握手四次挥手等，可以见我博客有关网络的文章。\n#### 浏览器的缓存机制\n\nHTTP/1.1定义的 `Cache-Control` 头用来区分对缓存机制的支持情况， 请求头和响应头都支持这个属性。通过它提供的不同的值来定义缓存策略。\n\n**禁止进行缓存** `Cache-Control: no-store` \n\n缓存中不得存储任何关于客户端请求和服务端响应的内容。每次由客户端发起的请求都会下载完整的响应内容。\n\n**强制确认缓存** `Cache-Control: no-store`\n\n如下头部定义，此方式下，每次有请求发出时，缓存会将此请求发到服务器（该请求应该会带有与本地缓存相关的验证字段），服务器端会验证请求中所描述的缓存是否过期，若未过期（实际就是返回304），则缓存才使用本地缓存副本。\n\n**私有缓存和公共缓存** `Cache-Control: private/public`\n\n\"public\" 指令表示该响应可以被任何中间人（译者注：比如中间代理、CDN等）缓存。若指定了\"public\"，则一些通常不被中间人缓存的页面（译者注：因为默认是private）（比如 带有HTTP验证信息（帐号密码）的页面 或 某些特定状态码的页面），将会被其缓存。\n\n**缓存过期机制** `Cache-Control: max-age=资源有效时间(s)`\n\nmax-age是距离请求发起的时间的秒数。针对应用中那些不会改变的文件，通常可以手动设置一定的时长以保证缓存有效，例如图片、css、js等静态资源。\n\n**协商缓存**\n协商缓存主要涉及请求头设置中的，Etag和 Last-Modified。可以在响应头中设置\n```\netag: 'xxxxxx'\nlast-modified: Mon, 20 Dec 2019 09:49:49 GMT\n```\netag：每个文件有一个，改动文件了就变了，就是个文件hash，每个文件唯一，就像用webpack打包的时候，每个资源都会有这个东西，如： app.js打包后变为 app.xxxx.js，加个唯一hash，也是为了解决缓存问题。\n`发请求-->本地判断资源是否过期-->过期-->请求服务器-->服务器对比资源是否真的过期-->没过期-->返回304状态码-->客户端使用缓存资源` (如果服务器资源已经过期,服务器会返回200)\n\n![缓存查找流程示意图](http://blogimage.lemonlife.top/202003200041_288.png?/)\n\n#### 浏览器端发起 HTTP 请求流程\n##### 构建请求\n首先，浏览器构建请求行信息（如下所示），构建好后，浏览器准备发起网络请求。\n```\nGET /index.html HTTP1.1\n```\n##### 查找缓存\n在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件,具体缓存的操作，上文已经说过了,如果缓存失效或者没缓存，就会进入网络请求过程了。\n\n\n##### 准备 IP 地址和端口\n浏览器会请求 DNS 返回域名对应的 IP。当然浏览器还提供了DNS 数据缓存服务，如果某个域名已经解析过了，那么浏览器会缓存解析的结果，以供下次查询时直接使用，这样也会减少一次网络请求\n##### 等待 TCP 队列\nChrome 有个机制，同一个域名同时最多只能建立 6 个 TCP 连接，如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。\n##### 建立 TCP 连接\n三次握手\n\n##### 发送 HTTP 请求\n一旦建立了 TCP 连接，浏览器就可以和服务器进行通信了。而 HTTP 中的数据正是在这个通信过程中传输的。首先浏览器会向服务器发送请求行，它包括了请求方法、请求 URI（Uniform Resource Identifier）和 HTTP 版本协议。\n\n![HTTP 请求数据格式](http://blogimage.lemonlife.top/202003200034_510.png?/)\n\n#### 服务器端处理 HTTP 请求流程\n\n![](http://blogimage.lemonlife.top/202003200038_19.png?/)\n\n#### 断开连接\n四次挥手，通常情况下，一旦服务器向客户端返回了请求数据，它就要关闭 TCP 连接。不过如果浏览器或者服务器在其头信息中加入了`Connection:Keep-Alive \n`。那么 TCP 连接在发送后将仍然保持打开状态，这样浏览器就可以继续通过同一个 TCP 连接发送请求。保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。比如，一个 Web 页面中内嵌的图片就都来自同一个 Web 站点，如果初始化了一个持久连接，你就可以复用该连接，以请求其他资源，而不需要重新再建立新的 TCP 连接。\n\n![HTTP 请求流程示意图](http://blogimage.lemonlife.top/202003192344_989.png?/)\n\n### 浏览器渲染流程\n可以参看我的博客 [浏览器工作原理~渲染篇](http://lemonlife.top/2020/02/21/web-fundamentals/) 和 [浏览器工作原理~优化篇](http://lemonlife.top/2020/02/23/web-fundamentals-optimize/)\n\n\n> 看完上面的部分，你对浏览器应该已经有了一个大概的了解了，应该也知道从一个网址变成一个网页这些大概是经历了哪些流程。后面我们将介绍，浏览器具体每一块是如何工作的，以及怎么优化页面的显示\n\n\n### 浏览器中的JS\n> 这一块我应该只会大概的写一下，想要；了解具体的可以去看看，这个极客时间的专题，或者 [GitHub上这个大佬的博客](https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/yi-3001-nei-cun-kong-jian-xiang-jie.html) 的一到六节，感觉都是非常好的资料。\n\n#### V8与JavaScript\n> 前端的小伙伴应该都知道，JS在chrome中是通过V8引擎进行编译的。\n\n**JS内模型**\n\n对于JS语言本身来说,是一种动态的弱类型语言，意味着我们在定义一个变量时候，不需要告诉解析引擎这个变量的类型是什么，JS引擎在运行代码的时候，引擎自己计算出数据的类型。而且可以使用一个变量来保存不同类型的数据。\nJavaScript的数据类型有8种,(基础数据类型是7种)。\n\n对于 `Boolean` `Null` `Undefined` `Number` `BigInt`  `String`  `Symbol` 这七种数据基础类型是储存在内存的栈空间中的，而`Object` 这种引用数据类型是储存在堆空间中的。(此处的栈，和堆，指的是内存空间。注意和方法调用的时候的堆栈区分)。\n\n![JS内存模型](http://blogimage.lemonlife.top/202003211302_206.png?/)\n\n在函数执行期间，对于储存在栈空间中的基础数据类型变量，是直接被直接赋值到函数的调用栈中，对于堆空间中的引用类型变量，把变量的地址赋值到函数的调用栈中。\n\n![函数调用模型](http://blogimage.lemonlife.top/202003211305_429.png?/)\n> 所以我觉得 js 本身其实没有，堆内存和栈内存的区别，只有基础数据类型和引用数据类型的区别。\n\n**代码的两个阶段**\n\n对于JavaScript代码运行，分为`代码的创建阶段` 和 `代码的执行阶段`,最常见的就是变量提升问题。对于一个JS函数。在代码创建阶段会提前把，函数中声明的变量都创建成`undefined`值。再在代码的执行阶段，对`undefined` 进行赋值。\n- 代码中的函数变量除外，函数变量都是直接在创建阶段赋值的\n- S6没有变量提升的问题,不是因为没有代码的创建阶段，而是因为ES6 引入了一个暂时性死区的机制。\n\n可以看下面那个例子函数 `foo` ，当代码运行到 `var bar = foo()` 时候。代码会先创建 `myName` `test` `innerBar` 三个变量。\n\n![代码创建过程](http://blogimage.lemonlife.top/202003211711_280.png?/)\n\n在代码的执行阶段，会依次对这三个变量进行赋值。当代码执行到 `return innerBar` 的时候，此时三个变量已经赋值完成。\n\n![代码的执行阶段](http://blogimage.lemonlife.top/202003211719_506.png?/)\n\n**闭包机制**\n\n闭包就不介绍了，直接看下面这个函数吧。\n\n```js\nfunction foo() {\n    var myName = \" 极客时间 \"\n    var test = 'test'\n    var innerBar = { \n     setName:(newName)=>{\n         myName = newName\n         console.log(test) //test       \n     },\n     getName:function(){\n         return myName\n     }\n    }\n    return innerBar\n}\nvar bar = foo()\nbar.setName(\" 极客\")\nconsole.log(bar.getName()) //极客\n```\n\n正常逻辑我们再执行完`bar = foo()`之后 代码应该执行完毕了。此时,应该无法访问到变量test,和myName了，因为在一个函数执行完了他内部的变量也应该被释放掉。但是根据函数的执行结果可以判断，变量依旧可以被正常的能被访问，这就是典型的**闭包**机制。\n\n首先产生闭包是在函数的执行阶段，发现了某个子函数对自身变量有引用，就会在堆内存再创建一个闭包对象 `Clourse(自身函数名)`，对于这个闭包对象的值，我认为储存的是本身函数调用的变量的指针,对于基础数据类型肯定都是直接复制。\n\n(此处，有文档认为是把内存中的变量都复制了一遍到这个闭包对象中，然后函数运行结束的时候,函数里面的变量都被回收了,但是闭包堆内存没有被回收，因此产生了闭包现象。我没有读过V8源码，但是我觉得代码底层应该不会有这种没有意义的复制)\n\n对于上面的例子也就是，当 `foo` 函数执行完 `var innerBar = ` 之后。会生成 `Closure (foo)` 对象,然后在`setName` 和 `getName` 这两个对象上都绑定上生成的  `Closure (foo)` 。\n\n![foo函数执行情况](http://blogimage.lemonlife.top/202003211910_165.png?/)\n\n最后在我们执行 `bar.setName(\" 极客\")` 和 `bar.getName()` 的时候 在setName函数的创建过程中，可以看到函数里面已经有了对象 ，`Closure (foo)`，然后再在函数的执行阶段重复之前分析的函数执行阶段的赋值操作。\n\n![setName 函数的创建阶段](http://blogimage.lemonlife.top/202003211917_421.png?/)\n\n#### v8的垃圾回收(GC)\n> 首先值得庆幸的是，V8是自动管理垃圾回收的。某个函数执行完成之后，指向该函数的函数指针(ESP)就会指向下一个函数，该函数的执行上下文会从堆内存销毁掉。\n\nV8会把堆分层新生代和老生代 (代际假说)，新生代收集器也称副垃圾收集器，老生代也称主垃圾收集器。新生代存放的都是生存时间短的对象，老生代中存放的都是生存时间久的对象。新生代区通常只支持1~8M的容量，老生区支持的容量会大很多。\n\n**垃圾收集器工作流程**\n-  标记空间中的活动对象和非活动对象,根据当前这个对象是否还被引用，也就是是否还在使用进行判断。\n-  回收非活动对象所占据的内存。其实就是清理上一步中被标记的可回收对象。\n-  内存整理，因为清除完可回收的之后，就好像一整块拼图中，你随机抠掉了几块后，会出现很多不连续的片段，因此为了方便后续程序，使用我们要进行内存整理。\n\n**新生代回收过程**\n\n![新生区被划分为对象区域和空闲区域](http://blogimage.lemonlife.top/202003212142_450.png?/)\n\n新增的对象都会被放在新生代的对象区，然后经历，一标记，二回收，之后整理的时候是将对象区剩下的变量复制到空闲区，这样就得到了,空内存的对象区和有对象且内存连续的空闲区，再把此时的对象区，空闲区身份交换。继续写入新变量进行下一轮GC。（不得不说这里真的很佩服这个垃圾收集器的设计思路，身份交换的想法，能让新生代中的这两块区域无限重复使用下去）\n\n如果有个对象经历了两轮垃圾回收，还在新生区，就会将此对象移入老生区（对象晋升策略）\n\n**老生区回收过程**\n\n主垃圾收集器，主要采用 <b>标记-清除（Mark-Sweep)</b> 的方式进行垃圾回收。标记清除的过程和之前差不多，但是不同的是，老生区不是通过复制对象来整理内存的，因为老生区内存大，对象多，复制整理会很耗时。老生区是在多次标记之后，将老生区的存活对象，朝着老生区的一段移动。然后直接一次性清除掉其他地方的对象。这一过程被称为 <b>标记-整理</b> ,下面我画了一个大致流程。(假设按图中可以直接清除左边两列之外的列)\n\n![标记和清除的过程](http://blogimage.lemonlife.top/202003212305_912.png?/)\n\n**全停顿**\n\n因为JavaScript运行在V8的主线程之上，所以一旦执行了垃圾回收算法。都需要将正在执行的JavaScript代码暂停。等待垃圾回收完再执行，这种行为被称作 **全停顿(Stop-The-World)**\n\n因为新生代本来内存小,变量少GC不会有太大影响。所以为了降低老生代GC造成的卡顿，V8把标记过程分成一个个子标记过程。同时让垃圾回收标记和JavaScript应用逻辑交替进行，直到标记移动完成,感觉这种整块舍弃的思路，清理起来应该挺快。主要耗时应该就是标记和移动(**增量标记算法**)。\n\n### V8的编译期和解释器\n因为我们写的是高级语言，而机器只能识别二进制机器码，所以我们需要用解释器和编译器把我们写的代码翻译成机器码。按语言的执行流程，可以把编程语言分为编译期语言和解释型语言。\n\n**编译型语言** 在程序执行之前，需要经过编译期的编译过程，并且编译之后会直接保留机器能读懂二进制文件，每次运行程序时，都可以直接运行二进制文件，不需要再次重新编译了.(C/C++、GO)\n\n![编译型语言的过程](http://blogimage.lemonlife.top/202003220954_620.png?/)\n\n**解释型语言** 在每次运行时都需要通过解释器对程序进行动态的解释和执行。(Python,JavaScript)\n\n![解释型语言的过程](http://blogimage.lemonlife.top/202003221009_316.png?/)\n\n#### V8是如何执行一段JavaScript代码\nV8在执行过程中既有 解释器(lgnition) ,又有 解释器(TurboFan)\n\n![V8执行一段代码流程图](http://blogimage.lemonlife.top/202003221022_904.png?/)\n\n#### 生成抽象语法树(AST)和执行上下文\n   \n源代码经过词法分析和与分析之后会生成抽象语法树(AST)，推荐一个可以生成[AST网站](https://resources.jointjs.com/demos/javascript-ast)\n```js\nfunction log(){\n\treturn console.log\n}\nlog(\"hello world\")\n```\nAST的结构和代码结构非常相似，编译期或者解释器后续的工作依赖于AST，而不是源代码。在JavaScript中最典型的是Babel和ESLint。\n\nBabel将ES6转成ES5代码的过程，就是先将ES6代码转成AST,然后再将ES6语法生成的AST转换成ES5的AST (Babel的代码库里有函数，能把ES6的代码复写成ES5的代码)\n\n![上述代码生成的AST](http://blogimage.lemonlife.top/202003221034_422.png?/)\n\nESLint第一阶段是词法分析(tokenize),将一行行的源码拆解成一个个token。(语法上不可以再分的最小字符和字符串),图中 `var` `myName` `= `\" `极客时间` 这四个都是四个token。\n\n![生成Token](http://blogimage.lemonlife.top/202003221123_690.png?/)\n\n第二个阶段是语法分析(parse),作用是将上一步生成的token数据，根据语法规则转为AST。如果源码符合语法规则，会顺利生成Token，如果源码存在语法错误，这一步就会终止，并抛出一个\"语法错误\"。成功生成了AST后，V8就会生成该段代码的执行上下文。\n\n#### 生成字节码\n解释器lgnition，可以转换成AST生成字节码，并解释执行字节码。字节码是介于AST和机器码之间的一种代码。比机器码占用的内存要少很多，字节码需要通过解释器将其转成机器码才能执行。\n\n![字节码机器码内存占用对比](http://blogimage.lemonlife.top/202003221240_926.png?/)\n\n(这一段我猜测一下，之前的V8模型可能是，AST转换生成机器码，然后再执行机器码，就会出现机器码被储存在内存中的现象；但是现在是AST转换从字节码，在运行到某个字节码片段时，直接把字节码转成机器码然后执行,这个过程堆积在内存中的只是字节码，机器码一生成就会被消费掉，所以节约了内存)\n\n#### 执行代码\n\n生成代码之后，到了代码的执行阶段。解释器会逐条消费字节码。在执行字节码的过程中，如果有经常被执行的字节码（热点代码 HotSpot）。也会被后台编译器（TurboFan）转换成更高效的机器码，以后再遇到这段代码时，直接运生成的行机器码即可。这种将解释器和编译器结合使用的技术称作**即时编译（JIT）** \n\n![即时编译 JIT 技术](http://blogimage.lemonlife.top/202003221313_799.png?/)\n\n> 本文是我看了[李兵老师极客时间浏览器工作原理的专栏](https://time.geekbang.org/column/intro/216?code=wLzkK4Ecmtj435LqyZ6ecONi5PnKUst4jvEoQKp1yUA%3D)写的总结,文字和图片资料来源与极客时间，不得不说这个专题，作者的工作经历真的丰富。这篇博客大概概括的写了专栏的一至四节，this的指向性没有涉及(因为我觉得在es6的诞生后this的指向已经比较明确了)。","source":"_posts/web-fundamentals-geektime.md","raw":"---\ntitle: 浏览器工作原理-chrome篇\ndate: 2020-03-21 20:43:41\ntags:\n  - 浏览器  \n---\n\n### chrome架构\n**问题1**  只是打开了 1 个页，chrome启动了4个进程(在浏览器打开第一个页面的时候，且没有其他插件，音频的时候)\n\n![Chrome 的任务管理器窗口](http://blogimage.lemonlife.top/202003192140_995.png?/)\n**进程与线程的特点**\n\n1.  线程是不能单独存在的，它是由进程来启动和管理的\n2.  一个进程就是一个程序的运行实例,是操作系统分配资源的最小单元，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程\n3. 进程中的任意一线程执行出错，都会导致整个进程的崩溃。\n4. 线程之间可以共享进程中的数据，线程之间可以对自身进程中的公共数据进行读写操作\n5. 当一个进程关闭之后，操作系统会回收进程所占用的内存\n6. 进程之间的内容相互隔离，进程隔离是为保护操作系统中进程互不干扰的技术，每一个进程只能访问自己占有的数据，也就避免出现进程 A 写入数据到进程 B 的情况。正是因为进程之间的数据是严格隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于进程间通信（IPC）的机制了。(前端框架Electron)\n\n**现代化的浏览器进程架构**\n\n![最新的 Chrome 进程架构图](http://blogimage.lemonlife.top/202003192202_530.png?/)\n\n**浏览器进程。** 主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。\n\n**渲染进程。** 核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。\n\n**GPU 进程。**其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。\n\n**网络进程。**主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。\n\n**插件进程。**主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。\n\n> 因此打开 1 个页面至少需要 1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程，共 4 个；如果打开的页面有运行插件的话，还需要再加上 1 个插件进程。\n\n**process-per-site-instance策略**\n\n通常情况下是一个页面使用一个进程，但是，有一种情况，叫\"同一站点(same-site)\"，具体地讲，我们将“同一站点”定义为根域名（例如，geekbang.org）加上协议（例如，https:// 或者http://），还包含了该根域名下的所有子域名和不同的端口，比如下面这三个：\n```\nhttps://time.geekbang.org\nhttps://www.geekbang.org\nhttps://www.geekbang.org:8080\n```\n都是属于同一站点，因为它们的协议都是https，而根域名也都是geekbang.org。你也许了解同源策略，但是同一站点和同源策略还是存在一些不同地方，在这里你需要了解它们不是同一件事就行了。\nChrome的默认策略是，每个标签对应一个渲染进程。但是如果从一个页面打开了新页面，而新页面和当前页面属于同一站点时，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫process-per-site-instance。\n\n直白的讲，就是如果几个页面符合同一站点，那么他们将被分配到一个渲染进程里面去。\n所以，这种情况下，一个页面崩溃了，会导致同一站点的页面同时崩溃，因为他们使用了同一个渲染进程。\n\n在一个渲染进程里面，他们就会共享JS的执行环境，也就是说A页面可以直接在B页面中执行脚本。因为是同一家的站点，所以是有这个需求的。\n\n**iframe**\n\n如果页面里有iframe的话，iframe也会运行在单独的进程中，下图是我浏览器任务管理器的一个截图，图中的辅助框架应该就是指页面中的 `iframe` 标签对应的地址\n\n![贴上我自己电脑里面的一张图](http://blogimage.lemonlife.top/202003192230_498.png?/)\n\n**未来面向服务的架构**\n\n为了解决这些问题，在 2016 年，Chrome 官方团队使用“面向服务的架构”（Services Oriented Architecture，简称SOA）的思想设计了新的 Chrome 架构。也就是说 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过 IPC 来通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统，更好实现 Chrome 简单、稳定、高速、安全的目标。Chrome 最终要把 UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务，下面是 Chrome“面向服务的架构”的进程模型图。\n\n![](http://blogimage.lemonlife.top/202003192317_372.png?/)\n\n### 浏览器中的HTTP协议\nTCP和HTTP的关系，以及TCP三次握手四次挥手等，可以见我博客有关网络的文章。\n#### 浏览器的缓存机制\n\nHTTP/1.1定义的 `Cache-Control` 头用来区分对缓存机制的支持情况， 请求头和响应头都支持这个属性。通过它提供的不同的值来定义缓存策略。\n\n**禁止进行缓存** `Cache-Control: no-store` \n\n缓存中不得存储任何关于客户端请求和服务端响应的内容。每次由客户端发起的请求都会下载完整的响应内容。\n\n**强制确认缓存** `Cache-Control: no-store`\n\n如下头部定义，此方式下，每次有请求发出时，缓存会将此请求发到服务器（该请求应该会带有与本地缓存相关的验证字段），服务器端会验证请求中所描述的缓存是否过期，若未过期（实际就是返回304），则缓存才使用本地缓存副本。\n\n**私有缓存和公共缓存** `Cache-Control: private/public`\n\n\"public\" 指令表示该响应可以被任何中间人（译者注：比如中间代理、CDN等）缓存。若指定了\"public\"，则一些通常不被中间人缓存的页面（译者注：因为默认是private）（比如 带有HTTP验证信息（帐号密码）的页面 或 某些特定状态码的页面），将会被其缓存。\n\n**缓存过期机制** `Cache-Control: max-age=资源有效时间(s)`\n\nmax-age是距离请求发起的时间的秒数。针对应用中那些不会改变的文件，通常可以手动设置一定的时长以保证缓存有效，例如图片、css、js等静态资源。\n\n**协商缓存**\n协商缓存主要涉及请求头设置中的，Etag和 Last-Modified。可以在响应头中设置\n```\netag: 'xxxxxx'\nlast-modified: Mon, 20 Dec 2019 09:49:49 GMT\n```\netag：每个文件有一个，改动文件了就变了，就是个文件hash，每个文件唯一，就像用webpack打包的时候，每个资源都会有这个东西，如： app.js打包后变为 app.xxxx.js，加个唯一hash，也是为了解决缓存问题。\n`发请求-->本地判断资源是否过期-->过期-->请求服务器-->服务器对比资源是否真的过期-->没过期-->返回304状态码-->客户端使用缓存资源` (如果服务器资源已经过期,服务器会返回200)\n\n![缓存查找流程示意图](http://blogimage.lemonlife.top/202003200041_288.png?/)\n\n#### 浏览器端发起 HTTP 请求流程\n##### 构建请求\n首先，浏览器构建请求行信息（如下所示），构建好后，浏览器准备发起网络请求。\n```\nGET /index.html HTTP1.1\n```\n##### 查找缓存\n在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件,具体缓存的操作，上文已经说过了,如果缓存失效或者没缓存，就会进入网络请求过程了。\n\n\n##### 准备 IP 地址和端口\n浏览器会请求 DNS 返回域名对应的 IP。当然浏览器还提供了DNS 数据缓存服务，如果某个域名已经解析过了，那么浏览器会缓存解析的结果，以供下次查询时直接使用，这样也会减少一次网络请求\n##### 等待 TCP 队列\nChrome 有个机制，同一个域名同时最多只能建立 6 个 TCP 连接，如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。\n##### 建立 TCP 连接\n三次握手\n\n##### 发送 HTTP 请求\n一旦建立了 TCP 连接，浏览器就可以和服务器进行通信了。而 HTTP 中的数据正是在这个通信过程中传输的。首先浏览器会向服务器发送请求行，它包括了请求方法、请求 URI（Uniform Resource Identifier）和 HTTP 版本协议。\n\n![HTTP 请求数据格式](http://blogimage.lemonlife.top/202003200034_510.png?/)\n\n#### 服务器端处理 HTTP 请求流程\n\n![](http://blogimage.lemonlife.top/202003200038_19.png?/)\n\n#### 断开连接\n四次挥手，通常情况下，一旦服务器向客户端返回了请求数据，它就要关闭 TCP 连接。不过如果浏览器或者服务器在其头信息中加入了`Connection:Keep-Alive \n`。那么 TCP 连接在发送后将仍然保持打开状态，这样浏览器就可以继续通过同一个 TCP 连接发送请求。保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。比如，一个 Web 页面中内嵌的图片就都来自同一个 Web 站点，如果初始化了一个持久连接，你就可以复用该连接，以请求其他资源，而不需要重新再建立新的 TCP 连接。\n\n![HTTP 请求流程示意图](http://blogimage.lemonlife.top/202003192344_989.png?/)\n\n### 浏览器渲染流程\n可以参看我的博客 [浏览器工作原理~渲染篇](http://lemonlife.top/2020/02/21/web-fundamentals/) 和 [浏览器工作原理~优化篇](http://lemonlife.top/2020/02/23/web-fundamentals-optimize/)\n\n\n> 看完上面的部分，你对浏览器应该已经有了一个大概的了解了，应该也知道从一个网址变成一个网页这些大概是经历了哪些流程。后面我们将介绍，浏览器具体每一块是如何工作的，以及怎么优化页面的显示\n\n\n### 浏览器中的JS\n> 这一块我应该只会大概的写一下，想要；了解具体的可以去看看，这个极客时间的专题，或者 [GitHub上这个大佬的博客](https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/yi-3001-nei-cun-kong-jian-xiang-jie.html) 的一到六节，感觉都是非常好的资料。\n\n#### V8与JavaScript\n> 前端的小伙伴应该都知道，JS在chrome中是通过V8引擎进行编译的。\n\n**JS内模型**\n\n对于JS语言本身来说,是一种动态的弱类型语言，意味着我们在定义一个变量时候，不需要告诉解析引擎这个变量的类型是什么，JS引擎在运行代码的时候，引擎自己计算出数据的类型。而且可以使用一个变量来保存不同类型的数据。\nJavaScript的数据类型有8种,(基础数据类型是7种)。\n\n对于 `Boolean` `Null` `Undefined` `Number` `BigInt`  `String`  `Symbol` 这七种数据基础类型是储存在内存的栈空间中的，而`Object` 这种引用数据类型是储存在堆空间中的。(此处的栈，和堆，指的是内存空间。注意和方法调用的时候的堆栈区分)。\n\n![JS内存模型](http://blogimage.lemonlife.top/202003211302_206.png?/)\n\n在函数执行期间，对于储存在栈空间中的基础数据类型变量，是直接被直接赋值到函数的调用栈中，对于堆空间中的引用类型变量，把变量的地址赋值到函数的调用栈中。\n\n![函数调用模型](http://blogimage.lemonlife.top/202003211305_429.png?/)\n> 所以我觉得 js 本身其实没有，堆内存和栈内存的区别，只有基础数据类型和引用数据类型的区别。\n\n**代码的两个阶段**\n\n对于JavaScript代码运行，分为`代码的创建阶段` 和 `代码的执行阶段`,最常见的就是变量提升问题。对于一个JS函数。在代码创建阶段会提前把，函数中声明的变量都创建成`undefined`值。再在代码的执行阶段，对`undefined` 进行赋值。\n- 代码中的函数变量除外，函数变量都是直接在创建阶段赋值的\n- S6没有变量提升的问题,不是因为没有代码的创建阶段，而是因为ES6 引入了一个暂时性死区的机制。\n\n可以看下面那个例子函数 `foo` ，当代码运行到 `var bar = foo()` 时候。代码会先创建 `myName` `test` `innerBar` 三个变量。\n\n![代码创建过程](http://blogimage.lemonlife.top/202003211711_280.png?/)\n\n在代码的执行阶段，会依次对这三个变量进行赋值。当代码执行到 `return innerBar` 的时候，此时三个变量已经赋值完成。\n\n![代码的执行阶段](http://blogimage.lemonlife.top/202003211719_506.png?/)\n\n**闭包机制**\n\n闭包就不介绍了，直接看下面这个函数吧。\n\n```js\nfunction foo() {\n    var myName = \" 极客时间 \"\n    var test = 'test'\n    var innerBar = { \n     setName:(newName)=>{\n         myName = newName\n         console.log(test) //test       \n     },\n     getName:function(){\n         return myName\n     }\n    }\n    return innerBar\n}\nvar bar = foo()\nbar.setName(\" 极客\")\nconsole.log(bar.getName()) //极客\n```\n\n正常逻辑我们再执行完`bar = foo()`之后 代码应该执行完毕了。此时,应该无法访问到变量test,和myName了，因为在一个函数执行完了他内部的变量也应该被释放掉。但是根据函数的执行结果可以判断，变量依旧可以被正常的能被访问，这就是典型的**闭包**机制。\n\n首先产生闭包是在函数的执行阶段，发现了某个子函数对自身变量有引用，就会在堆内存再创建一个闭包对象 `Clourse(自身函数名)`，对于这个闭包对象的值，我认为储存的是本身函数调用的变量的指针,对于基础数据类型肯定都是直接复制。\n\n(此处，有文档认为是把内存中的变量都复制了一遍到这个闭包对象中，然后函数运行结束的时候,函数里面的变量都被回收了,但是闭包堆内存没有被回收，因此产生了闭包现象。我没有读过V8源码，但是我觉得代码底层应该不会有这种没有意义的复制)\n\n对于上面的例子也就是，当 `foo` 函数执行完 `var innerBar = ` 之后。会生成 `Closure (foo)` 对象,然后在`setName` 和 `getName` 这两个对象上都绑定上生成的  `Closure (foo)` 。\n\n![foo函数执行情况](http://blogimage.lemonlife.top/202003211910_165.png?/)\n\n最后在我们执行 `bar.setName(\" 极客\")` 和 `bar.getName()` 的时候 在setName函数的创建过程中，可以看到函数里面已经有了对象 ，`Closure (foo)`，然后再在函数的执行阶段重复之前分析的函数执行阶段的赋值操作。\n\n![setName 函数的创建阶段](http://blogimage.lemonlife.top/202003211917_421.png?/)\n\n#### v8的垃圾回收(GC)\n> 首先值得庆幸的是，V8是自动管理垃圾回收的。某个函数执行完成之后，指向该函数的函数指针(ESP)就会指向下一个函数，该函数的执行上下文会从堆内存销毁掉。\n\nV8会把堆分层新生代和老生代 (代际假说)，新生代收集器也称副垃圾收集器，老生代也称主垃圾收集器。新生代存放的都是生存时间短的对象，老生代中存放的都是生存时间久的对象。新生代区通常只支持1~8M的容量，老生区支持的容量会大很多。\n\n**垃圾收集器工作流程**\n-  标记空间中的活动对象和非活动对象,根据当前这个对象是否还被引用，也就是是否还在使用进行判断。\n-  回收非活动对象所占据的内存。其实就是清理上一步中被标记的可回收对象。\n-  内存整理，因为清除完可回收的之后，就好像一整块拼图中，你随机抠掉了几块后，会出现很多不连续的片段，因此为了方便后续程序，使用我们要进行内存整理。\n\n**新生代回收过程**\n\n![新生区被划分为对象区域和空闲区域](http://blogimage.lemonlife.top/202003212142_450.png?/)\n\n新增的对象都会被放在新生代的对象区，然后经历，一标记，二回收，之后整理的时候是将对象区剩下的变量复制到空闲区，这样就得到了,空内存的对象区和有对象且内存连续的空闲区，再把此时的对象区，空闲区身份交换。继续写入新变量进行下一轮GC。（不得不说这里真的很佩服这个垃圾收集器的设计思路，身份交换的想法，能让新生代中的这两块区域无限重复使用下去）\n\n如果有个对象经历了两轮垃圾回收，还在新生区，就会将此对象移入老生区（对象晋升策略）\n\n**老生区回收过程**\n\n主垃圾收集器，主要采用 <b>标记-清除（Mark-Sweep)</b> 的方式进行垃圾回收。标记清除的过程和之前差不多，但是不同的是，老生区不是通过复制对象来整理内存的，因为老生区内存大，对象多，复制整理会很耗时。老生区是在多次标记之后，将老生区的存活对象，朝着老生区的一段移动。然后直接一次性清除掉其他地方的对象。这一过程被称为 <b>标记-整理</b> ,下面我画了一个大致流程。(假设按图中可以直接清除左边两列之外的列)\n\n![标记和清除的过程](http://blogimage.lemonlife.top/202003212305_912.png?/)\n\n**全停顿**\n\n因为JavaScript运行在V8的主线程之上，所以一旦执行了垃圾回收算法。都需要将正在执行的JavaScript代码暂停。等待垃圾回收完再执行，这种行为被称作 **全停顿(Stop-The-World)**\n\n因为新生代本来内存小,变量少GC不会有太大影响。所以为了降低老生代GC造成的卡顿，V8把标记过程分成一个个子标记过程。同时让垃圾回收标记和JavaScript应用逻辑交替进行，直到标记移动完成,感觉这种整块舍弃的思路，清理起来应该挺快。主要耗时应该就是标记和移动(**增量标记算法**)。\n\n### V8的编译期和解释器\n因为我们写的是高级语言，而机器只能识别二进制机器码，所以我们需要用解释器和编译器把我们写的代码翻译成机器码。按语言的执行流程，可以把编程语言分为编译期语言和解释型语言。\n\n**编译型语言** 在程序执行之前，需要经过编译期的编译过程，并且编译之后会直接保留机器能读懂二进制文件，每次运行程序时，都可以直接运行二进制文件，不需要再次重新编译了.(C/C++、GO)\n\n![编译型语言的过程](http://blogimage.lemonlife.top/202003220954_620.png?/)\n\n**解释型语言** 在每次运行时都需要通过解释器对程序进行动态的解释和执行。(Python,JavaScript)\n\n![解释型语言的过程](http://blogimage.lemonlife.top/202003221009_316.png?/)\n\n#### V8是如何执行一段JavaScript代码\nV8在执行过程中既有 解释器(lgnition) ,又有 解释器(TurboFan)\n\n![V8执行一段代码流程图](http://blogimage.lemonlife.top/202003221022_904.png?/)\n\n#### 生成抽象语法树(AST)和执行上下文\n   \n源代码经过词法分析和与分析之后会生成抽象语法树(AST)，推荐一个可以生成[AST网站](https://resources.jointjs.com/demos/javascript-ast)\n```js\nfunction log(){\n\treturn console.log\n}\nlog(\"hello world\")\n```\nAST的结构和代码结构非常相似，编译期或者解释器后续的工作依赖于AST，而不是源代码。在JavaScript中最典型的是Babel和ESLint。\n\nBabel将ES6转成ES5代码的过程，就是先将ES6代码转成AST,然后再将ES6语法生成的AST转换成ES5的AST (Babel的代码库里有函数，能把ES6的代码复写成ES5的代码)\n\n![上述代码生成的AST](http://blogimage.lemonlife.top/202003221034_422.png?/)\n\nESLint第一阶段是词法分析(tokenize),将一行行的源码拆解成一个个token。(语法上不可以再分的最小字符和字符串),图中 `var` `myName` `= `\" `极客时间` 这四个都是四个token。\n\n![生成Token](http://blogimage.lemonlife.top/202003221123_690.png?/)\n\n第二个阶段是语法分析(parse),作用是将上一步生成的token数据，根据语法规则转为AST。如果源码符合语法规则，会顺利生成Token，如果源码存在语法错误，这一步就会终止，并抛出一个\"语法错误\"。成功生成了AST后，V8就会生成该段代码的执行上下文。\n\n#### 生成字节码\n解释器lgnition，可以转换成AST生成字节码，并解释执行字节码。字节码是介于AST和机器码之间的一种代码。比机器码占用的内存要少很多，字节码需要通过解释器将其转成机器码才能执行。\n\n![字节码机器码内存占用对比](http://blogimage.lemonlife.top/202003221240_926.png?/)\n\n(这一段我猜测一下，之前的V8模型可能是，AST转换生成机器码，然后再执行机器码，就会出现机器码被储存在内存中的现象；但是现在是AST转换从字节码，在运行到某个字节码片段时，直接把字节码转成机器码然后执行,这个过程堆积在内存中的只是字节码，机器码一生成就会被消费掉，所以节约了内存)\n\n#### 执行代码\n\n生成代码之后，到了代码的执行阶段。解释器会逐条消费字节码。在执行字节码的过程中，如果有经常被执行的字节码（热点代码 HotSpot）。也会被后台编译器（TurboFan）转换成更高效的机器码，以后再遇到这段代码时，直接运生成的行机器码即可。这种将解释器和编译器结合使用的技术称作**即时编译（JIT）** \n\n![即时编译 JIT 技术](http://blogimage.lemonlife.top/202003221313_799.png?/)\n\n> 本文是我看了[李兵老师极客时间浏览器工作原理的专栏](https://time.geekbang.org/column/intro/216?code=wLzkK4Ecmtj435LqyZ6ecONi5PnKUst4jvEoQKp1yUA%3D)写的总结,文字和图片资料来源与极客时间，不得不说这个专题，作者的工作经历真的丰富。这篇博客大概概括的写了专栏的一至四节，this的指向性没有涉及(因为我觉得在es6的诞生后this的指向已经比较明确了)。","slug":"web-fundamentals-geektime","published":1,"updated":"2021-08-07T01:59:03.349Z","_id":"cl4ince71002gcgufbs0464ya","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"chrome架构\"><a class=\"markdownIt-Anchor\" href=\"#chrome架构\"></a> chrome架构</h3>\n<p><strong>问题1</strong>  只是打开了 1 个页，chrome启动了4个进程(在浏览器打开第一个页面的时候，且没有其他插件，音频的时候)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003192140_995.png?/\" alt=\"Chrome 的任务管理器窗口\" /><br />\n<strong>进程与线程的特点</strong></p>\n<ol>\n<li>线程是不能单独存在的，它是由进程来启动和管理的</li>\n<li>一个进程就是一个程序的运行实例,是操作系统分配资源的最小单元，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程</li>\n<li>进程中的任意一线程执行出错，都会导致整个进程的崩溃。</li>\n<li>线程之间可以共享进程中的数据，线程之间可以对自身进程中的公共数据进行读写操作</li>\n<li>当一个进程关闭之后，操作系统会回收进程所占用的内存</li>\n<li>进程之间的内容相互隔离，进程隔离是为保护操作系统中进程互不干扰的技术，每一个进程只能访问自己占有的数据，也就避免出现进程 A 写入数据到进程 B 的情况。正是因为进程之间的数据是严格隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于进程间通信（IPC）的机制了。(前端框架Electron)</li>\n</ol>\n<p><strong>现代化的浏览器进程架构</strong></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003192202_530.png?/\" alt=\"最新的 Chrome 进程架构图\" /></p>\n<p><strong>浏览器进程。</strong> 主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</p>\n<p><strong>渲染进程。</strong> 核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</p>\n<p>**GPU 进程。**其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</p>\n<p>**网络进程。**主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</p>\n<p>**插件进程。**主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</p>\n<blockquote>\n<p>因此打开 1 个页面至少需要 1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程，共 4 个；如果打开的页面有运行插件的话，还需要再加上 1 个插件进程。</p>\n</blockquote>\n<p><strong>process-per-site-instance策略</strong></p>\n<p>通常情况下是一个页面使用一个进程，但是，有一种情况，叫&quot;同一站点(same-site)&quot;，具体地讲，我们将“同一站点”定义为根域名（例如，<a href=\"http://geekbang.org\">geekbang.org</a>）加上协议（例如，https:// 或者http://），还包含了该根域名下的所有子域名和不同的端口，比如下面这三个：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://time.geekbang.org</span><br><span class=\"line\">https://www.geekbang.org</span><br><span class=\"line\">https://www.geekbang.org:8080</span><br></pre></td></tr></table></figure>\n<p>都是属于同一站点，因为它们的协议都是https，<a href=\"http://xn--geekbang-fq0m528bmhkkj7b1sfuv7g3dtc.org\">而根域名也都是geekbang.org</a>。你也许了解同源策略，但是同一站点和同源策略还是存在一些不同地方，在这里你需要了解它们不是同一件事就行了。<br />\nChrome的默认策略是，每个标签对应一个渲染进程。但是如果从一个页面打开了新页面，而新页面和当前页面属于同一站点时，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫process-per-site-instance。</p>\n<p>直白的讲，就是如果几个页面符合同一站点，那么他们将被分配到一个渲染进程里面去。<br />\n所以，这种情况下，一个页面崩溃了，会导致同一站点的页面同时崩溃，因为他们使用了同一个渲染进程。</p>\n<p>在一个渲染进程里面，他们就会共享JS的执行环境，也就是说A页面可以直接在B页面中执行脚本。因为是同一家的站点，所以是有这个需求的。</p>\n<p><strong>iframe</strong></p>\n<p>如果页面里有iframe的话，iframe也会运行在单独的进程中，下图是我浏览器任务管理器的一个截图，图中的辅助框架应该就是指页面中的 <code>iframe</code> 标签对应的地址</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003192230_498.png?/\" alt=\"贴上我自己电脑里面的一张图\" /></p>\n<p><strong>未来面向服务的架构</strong></p>\n<p>为了解决这些问题，在 2016 年，Chrome 官方团队使用“面向服务的架构”（Services Oriented Architecture，简称SOA）的思想设计了新的 Chrome 架构。也就是说 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过 IPC 来通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统，更好实现 Chrome 简单、稳定、高速、安全的目标。Chrome 最终要把 UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务，下面是 Chrome“面向服务的架构”的进程模型图。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003192317_372.png?/\" alt=\"\" /></p>\n<h3 id=\"浏览器中的http协议\"><a class=\"markdownIt-Anchor\" href=\"#浏览器中的http协议\"></a> 浏览器中的HTTP协议</h3>\n<p>TCP和HTTP的关系，以及TCP三次握手四次挥手等，可以见我博客有关网络的文章。</p>\n<h4 id=\"浏览器的缓存机制\"><a class=\"markdownIt-Anchor\" href=\"#浏览器的缓存机制\"></a> 浏览器的缓存机制</h4>\n<p>HTTP/1.1定义的 <code>Cache-Control</code> 头用来区分对缓存机制的支持情况， 请求头和响应头都支持这个属性。通过它提供的不同的值来定义缓存策略。</p>\n<p><strong>禁止进行缓存</strong> <code>Cache-Control: no-store</code></p>\n<p>缓存中不得存储任何关于客户端请求和服务端响应的内容。每次由客户端发起的请求都会下载完整的响应内容。</p>\n<p><strong>强制确认缓存</strong> <code>Cache-Control: no-store</code></p>\n<p>如下头部定义，此方式下，每次有请求发出时，缓存会将此请求发到服务器（该请求应该会带有与本地缓存相关的验证字段），服务器端会验证请求中所描述的缓存是否过期，若未过期（实际就是返回304），则缓存才使用本地缓存副本。</p>\n<p><strong>私有缓存和公共缓存</strong> <code>Cache-Control: private/public</code></p>\n<p>“public” 指令表示该响应可以被任何中间人（译者注：比如中间代理、CDN等）缓存。若指定了&quot;public&quot;，则一些通常不被中间人缓存的页面（译者注：因为默认是private）（比如 带有HTTP验证信息（帐号密码）的页面 或 某些特定状态码的页面），将会被其缓存。</p>\n<p><strong>缓存过期机制</strong> <code>Cache-Control: max-age=资源有效时间(s)</code></p>\n<p>max-age是距离请求发起的时间的秒数。针对应用中那些不会改变的文件，通常可以手动设置一定的时长以保证缓存有效，例如图片、css、js等静态资源。</p>\n<p><strong>协商缓存</strong><br />\n协商缓存主要涉及请求头设置中的，Etag和 Last-Modified。可以在响应头中设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etag: &#x27;xxxxxx&#x27;</span><br><span class=\"line\">last-modified: Mon, 20 Dec 2019 09:49:49 GMT</span><br></pre></td></tr></table></figure>\n<p>etag：每个文件有一个，改动文件了就变了，就是个文件hash，每个文件唯一，就像用webpack打包的时候，每个资源都会有这个东西，如： app.js打包后变为 app.xxxx.js，加个唯一hash，也是为了解决缓存问题。<br />\n<code>发请求--&gt;本地判断资源是否过期--&gt;过期--&gt;请求服务器--&gt;服务器对比资源是否真的过期--&gt;没过期--&gt;返回304状态码--&gt;客户端使用缓存资源</code> (如果服务器资源已经过期,服务器会返回200)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003200041_288.png?/\" alt=\"缓存查找流程示意图\" /></p>\n<h4 id=\"浏览器端发起-http-请求流程\"><a class=\"markdownIt-Anchor\" href=\"#浏览器端发起-http-请求流程\"></a> 浏览器端发起 HTTP 请求流程</h4>\n<h5 id=\"构建请求\"><a class=\"markdownIt-Anchor\" href=\"#构建请求\"></a> 构建请求</h5>\n<p>首先，浏览器构建请求行信息（如下所示），构建好后，浏览器准备发起网络请求。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /index.html HTTP1.1</span><br></pre></td></tr></table></figure>\n<h5 id=\"查找缓存\"><a class=\"markdownIt-Anchor\" href=\"#查找缓存\"></a> 查找缓存</h5>\n<p>在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件,具体缓存的操作，上文已经说过了,如果缓存失效或者没缓存，就会进入网络请求过程了。</p>\n<h5 id=\"准备-ip-地址和端口\"><a class=\"markdownIt-Anchor\" href=\"#准备-ip-地址和端口\"></a> 准备 IP 地址和端口</h5>\n<p>浏览器会请求 DNS 返回域名对应的 IP。当然浏览器还提供了DNS 数据缓存服务，如果某个域名已经解析过了，那么浏览器会缓存解析的结果，以供下次查询时直接使用，这样也会减少一次网络请求</p>\n<h5 id=\"等待-tcp-队列\"><a class=\"markdownIt-Anchor\" href=\"#等待-tcp-队列\"></a> 等待 TCP 队列</h5>\n<p>Chrome 有个机制，同一个域名同时最多只能建立 6 个 TCP 连接，如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。</p>\n<h5 id=\"建立-tcp-连接\"><a class=\"markdownIt-Anchor\" href=\"#建立-tcp-连接\"></a> 建立 TCP 连接</h5>\n<p>三次握手</p>\n<h5 id=\"发送-http-请求\"><a class=\"markdownIt-Anchor\" href=\"#发送-http-请求\"></a> 发送 HTTP 请求</h5>\n<p>一旦建立了 TCP 连接，浏览器就可以和服务器进行通信了。而 HTTP 中的数据正是在这个通信过程中传输的。首先浏览器会向服务器发送请求行，它包括了请求方法、请求 URI（Uniform Resource Identifier）和 HTTP 版本协议。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003200034_510.png?/\" alt=\"HTTP 请求数据格式\" /></p>\n<h4 id=\"服务器端处理-http-请求流程\"><a class=\"markdownIt-Anchor\" href=\"#服务器端处理-http-请求流程\"></a> 服务器端处理 HTTP 请求流程</h4>\n<p><img src=\"http://blogimage.lemonlife.top/202003200038_19.png?/\" alt=\"\" /></p>\n<h4 id=\"断开连接\"><a class=\"markdownIt-Anchor\" href=\"#断开连接\"></a> 断开连接</h4>\n<p>四次挥手，通常情况下，一旦服务器向客户端返回了请求数据，它就要关闭 TCP 连接。不过如果浏览器或者服务器在其头信息中加入了<code>Connection:Keep-Alive</code>。那么 TCP 连接在发送后将仍然保持打开状态，这样浏览器就可以继续通过同一个 TCP 连接发送请求。保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。比如，一个 Web 页面中内嵌的图片就都来自同一个 Web 站点，如果初始化了一个持久连接，你就可以复用该连接，以请求其他资源，而不需要重新再建立新的 TCP 连接。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003192344_989.png?/\" alt=\"HTTP 请求流程示意图\" /></p>\n<h3 id=\"浏览器渲染流程\"><a class=\"markdownIt-Anchor\" href=\"#浏览器渲染流程\"></a> 浏览器渲染流程</h3>\n<p>可以参看我的博客 <a href=\"http://lemonlife.top/2020/02/21/web-fundamentals/\">浏览器工作原理~渲染篇</a> 和 <a href=\"http://lemonlife.top/2020/02/23/web-fundamentals-optimize/\">浏览器工作原理~优化篇</a></p>\n<blockquote>\n<p>看完上面的部分，你对浏览器应该已经有了一个大概的了解了，应该也知道从一个网址变成一个网页这些大概是经历了哪些流程。后面我们将介绍，浏览器具体每一块是如何工作的，以及怎么优化页面的显示</p>\n</blockquote>\n<h3 id=\"浏览器中的js\"><a class=\"markdownIt-Anchor\" href=\"#浏览器中的js\"></a> 浏览器中的JS</h3>\n<blockquote>\n<p>这一块我应该只会大概的写一下，想要；了解具体的可以去看看，这个极客时间的专题，或者 <a href=\"https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/yi-3001-nei-cun-kong-jian-xiang-jie.html\">GitHub上这个大佬的博客</a> 的一到六节，感觉都是非常好的资料。</p>\n</blockquote>\n<h4 id=\"v8与javascript\"><a class=\"markdownIt-Anchor\" href=\"#v8与javascript\"></a> V8与JavaScript</h4>\n<blockquote>\n<p>前端的小伙伴应该都知道，JS在chrome中是通过V8引擎进行编译的。</p>\n</blockquote>\n<p><strong>JS内模型</strong></p>\n<p>对于JS语言本身来说,是一种动态的弱类型语言，意味着我们在定义一个变量时候，不需要告诉解析引擎这个变量的类型是什么，JS引擎在运行代码的时候，引擎自己计算出数据的类型。而且可以使用一个变量来保存不同类型的数据。<br />\nJavaScript的数据类型有8种,(基础数据类型是7种)。</p>\n<p>对于 <code>Boolean</code> <code>Null</code> <code>Undefined</code> <code>Number</code> <code>BigInt</code>  <code>String</code>  <code>Symbol</code> 这七种数据基础类型是储存在内存的栈空间中的，而<code>Object</code> 这种引用数据类型是储存在堆空间中的。(此处的栈，和堆，指的是内存空间。注意和方法调用的时候的堆栈区分)。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211302_206.png?/\" alt=\"JS内存模型\" /></p>\n<p>在函数执行期间，对于储存在栈空间中的基础数据类型变量，是直接被直接赋值到函数的调用栈中，对于堆空间中的引用类型变量，把变量的地址赋值到函数的调用栈中。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211305_429.png?/\" alt=\"函数调用模型\" /></p>\n<blockquote>\n<p>所以我觉得 js 本身其实没有，堆内存和栈内存的区别，只有基础数据类型和引用数据类型的区别。</p>\n</blockquote>\n<p><strong>代码的两个阶段</strong></p>\n<p>对于JavaScript代码运行，分为<code>代码的创建阶段</code> 和 <code>代码的执行阶段</code>,最常见的就是变量提升问题。对于一个JS函数。在代码创建阶段会提前把，函数中声明的变量都创建成<code>undefined</code>值。再在代码的执行阶段，对<code>undefined</code> 进行赋值。</p>\n<ul>\n<li>代码中的函数变量除外，函数变量都是直接在创建阶段赋值的</li>\n<li>S6没有变量提升的问题,不是因为没有代码的创建阶段，而是因为ES6 引入了一个暂时性死区的机制。</li>\n</ul>\n<p>可以看下面那个例子函数 <code>foo</code> ，当代码运行到 <code>var bar = foo()</code> 时候。代码会先创建 <code>myName</code> <code>test</code> <code>innerBar</code> 三个变量。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211711_280.png?/\" alt=\"代码创建过程\" /></p>\n<p>在代码的执行阶段，会依次对这三个变量进行赋值。当代码执行到 <code>return innerBar</code> 的时候，此时三个变量已经赋值完成。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211719_506.png?/\" alt=\"代码的执行阶段\" /></p>\n<p><strong>闭包机制</strong></p>\n<p>闭包就不介绍了，直接看下面这个函数吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myName = <span class=\"string\">&quot; 极客时间 &quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> innerBar = &#123; </span><br><span class=\"line\">     <span class=\"attr\">setName</span>:<span class=\"function\">(<span class=\"params\">newName</span>)=&gt;</span>&#123;</span><br><span class=\"line\">         myName = newName</span><br><span class=\"line\">         <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test) <span class=\"comment\">//test       </span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     <span class=\"attr\">getName</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> myName</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> innerBar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"title function_\">foo</span>()</span><br><span class=\"line\">bar.<span class=\"title function_\">setName</span>(<span class=\"string\">&quot; 极客&quot;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bar.<span class=\"title function_\">getName</span>()) <span class=\"comment\">//极客</span></span><br></pre></td></tr></table></figure>\n<p>正常逻辑我们再执行完<code>bar = foo()</code>之后 代码应该执行完毕了。此时,应该无法访问到变量test,和myName了，因为在一个函数执行完了他内部的变量也应该被释放掉。但是根据函数的执行结果可以判断，变量依旧可以被正常的能被访问，这就是典型的<strong>闭包</strong>机制。</p>\n<p>首先产生闭包是在函数的执行阶段，发现了某个子函数对自身变量有引用，就会在堆内存再创建一个闭包对象 <code>Clourse(自身函数名)</code>，对于这个闭包对象的值，我认为储存的是本身函数调用的变量的指针,对于基础数据类型肯定都是直接复制。</p>\n<p>(此处，有文档认为是把内存中的变量都复制了一遍到这个闭包对象中，然后函数运行结束的时候,函数里面的变量都被回收了,但是闭包堆内存没有被回收，因此产生了闭包现象。我没有读过V8源码，但是我觉得代码底层应该不会有这种没有意义的复制)</p>\n<p>对于上面的例子也就是，当 <code>foo</code> 函数执行完 <code>var innerBar =</code> 之后。会生成 <code>Closure (foo)</code> 对象,然后在<code>setName</code> 和 <code>getName</code> 这两个对象上都绑定上生成的  <code>Closure (foo)</code> 。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211910_165.png?/\" alt=\"foo函数执行情况\" /></p>\n<p>最后在我们执行 <code>bar.setName(&quot; 极客&quot;)</code> 和 <code>bar.getName()</code> 的时候 在setName函数的创建过程中，可以看到函数里面已经有了对象 ，<code>Closure (foo)</code>，然后再在函数的执行阶段重复之前分析的函数执行阶段的赋值操作。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211917_421.png?/\" alt=\"setName 函数的创建阶段\" /></p>\n<h4 id=\"v8的垃圾回收gc\"><a class=\"markdownIt-Anchor\" href=\"#v8的垃圾回收gc\"></a> v8的垃圾回收(GC)</h4>\n<blockquote>\n<p>首先值得庆幸的是，V8是自动管理垃圾回收的。某个函数执行完成之后，指向该函数的函数指针(ESP)就会指向下一个函数，该函数的执行上下文会从堆内存销毁掉。</p>\n</blockquote>\n<p>V8会把堆分层新生代和老生代 (代际假说)，新生代收集器也称副垃圾收集器，老生代也称主垃圾收集器。新生代存放的都是生存时间短的对象，老生代中存放的都是生存时间久的对象。新生代区通常只支持1~8M的容量，老生区支持的容量会大很多。</p>\n<p><strong>垃圾收集器工作流程</strong></p>\n<ul>\n<li>标记空间中的活动对象和非活动对象,根据当前这个对象是否还被引用，也就是是否还在使用进行判断。</li>\n<li>回收非活动对象所占据的内存。其实就是清理上一步中被标记的可回收对象。</li>\n<li>内存整理，因为清除完可回收的之后，就好像一整块拼图中，你随机抠掉了几块后，会出现很多不连续的片段，因此为了方便后续程序，使用我们要进行内存整理。</li>\n</ul>\n<p><strong>新生代回收过程</strong></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003212142_450.png?/\" alt=\"新生区被划分为对象区域和空闲区域\" /></p>\n<p>新增的对象都会被放在新生代的对象区，然后经历，一标记，二回收，之后整理的时候是将对象区剩下的变量复制到空闲区，这样就得到了,空内存的对象区和有对象且内存连续的空闲区，再把此时的对象区，空闲区身份交换。继续写入新变量进行下一轮GC。（不得不说这里真的很佩服这个垃圾收集器的设计思路，身份交换的想法，能让新生代中的这两块区域无限重复使用下去）</p>\n<p>如果有个对象经历了两轮垃圾回收，还在新生区，就会将此对象移入老生区（对象晋升策略）</p>\n<p><strong>老生区回收过程</strong></p>\n<p>主垃圾收集器，主要采用 <b>标记-清除（Mark-Sweep)</b> 的方式进行垃圾回收。标记清除的过程和之前差不多，但是不同的是，老生区不是通过复制对象来整理内存的，因为老生区内存大，对象多，复制整理会很耗时。老生区是在多次标记之后，将老生区的存活对象，朝着老生区的一段移动。然后直接一次性清除掉其他地方的对象。这一过程被称为 <b>标记-整理</b> ,下面我画了一个大致流程。(假设按图中可以直接清除左边两列之外的列)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003212305_912.png?/\" alt=\"标记和清除的过程\" /></p>\n<p><strong>全停顿</strong></p>\n<p>因为JavaScript运行在V8的主线程之上，所以一旦执行了垃圾回收算法。都需要将正在执行的JavaScript代码暂停。等待垃圾回收完再执行，这种行为被称作 <strong>全停顿(Stop-The-World)</strong></p>\n<p>因为新生代本来内存小,变量少GC不会有太大影响。所以为了降低老生代GC造成的卡顿，V8把标记过程分成一个个子标记过程。同时让垃圾回收标记和JavaScript应用逻辑交替进行，直到标记移动完成,感觉这种整块舍弃的思路，清理起来应该挺快。主要耗时应该就是标记和移动(<strong>增量标记算法</strong>)。</p>\n<h3 id=\"v8的编译期和解释器\"><a class=\"markdownIt-Anchor\" href=\"#v8的编译期和解释器\"></a> V8的编译期和解释器</h3>\n<p>因为我们写的是高级语言，而机器只能识别二进制机器码，所以我们需要用解释器和编译器把我们写的代码翻译成机器码。按语言的执行流程，可以把编程语言分为编译期语言和解释型语言。</p>\n<p><strong>编译型语言</strong> 在程序执行之前，需要经过编译期的编译过程，并且编译之后会直接保留机器能读懂二进制文件，每次运行程序时，都可以直接运行二进制文件，不需要再次重新编译了.(C/C++、GO)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003220954_620.png?/\" alt=\"编译型语言的过程\" /></p>\n<p><strong>解释型语言</strong> 在每次运行时都需要通过解释器对程序进行动态的解释和执行。(Python,JavaScript)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221009_316.png?/\" alt=\"解释型语言的过程\" /></p>\n<h4 id=\"v8是如何执行一段javascript代码\"><a class=\"markdownIt-Anchor\" href=\"#v8是如何执行一段javascript代码\"></a> V8是如何执行一段JavaScript代码</h4>\n<p>V8在执行过程中既有 解释器(lgnition) ,又有 解释器(TurboFan)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221022_904.png?/\" alt=\"V8执行一段代码流程图\" /></p>\n<h4 id=\"生成抽象语法树ast和执行上下文\"><a class=\"markdownIt-Anchor\" href=\"#生成抽象语法树ast和执行上下文\"></a> 生成抽象语法树(AST)和执行上下文</h4>\n<p>源代码经过词法分析和与分析之后会生成抽象语法树(AST)，推荐一个可以生成<a href=\"https://resources.jointjs.com/demos/javascript-ast\">AST网站</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>AST的结构和代码结构非常相似，编译期或者解释器后续的工作依赖于AST，而不是源代码。在JavaScript中最典型的是Babel和ESLint。</p>\n<p>Babel将ES6转成ES5代码的过程，就是先将ES6代码转成AST,然后再将ES6语法生成的AST转换成ES5的AST (Babel的代码库里有函数，能把ES6的代码复写成ES5的代码)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221034_422.png?/\" alt=\"上述代码生成的AST\" /></p>\n<p>ESLint第一阶段是词法分析(tokenize),将一行行的源码拆解成一个个token。(语法上不可以再分的最小字符和字符串),图中 <code>var</code> <code>myName</code> <code>=</code>&quot; <code>极客时间</code> 这四个都是四个token。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221123_690.png?/\" alt=\"生成Token\" /></p>\n<p>第二个阶段是语法分析(parse),作用是将上一步生成的token数据，根据语法规则转为AST。如果源码符合语法规则，会顺利生成Token，如果源码存在语法错误，这一步就会终止，并抛出一个&quot;语法错误&quot;。成功生成了AST后，V8就会生成该段代码的执行上下文。</p>\n<h4 id=\"生成字节码\"><a class=\"markdownIt-Anchor\" href=\"#生成字节码\"></a> 生成字节码</h4>\n<p>解释器lgnition，可以转换成AST生成字节码，并解释执行字节码。字节码是介于AST和机器码之间的一种代码。比机器码占用的内存要少很多，字节码需要通过解释器将其转成机器码才能执行。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221240_926.png?/\" alt=\"字节码机器码内存占用对比\" /></p>\n<p>(这一段我猜测一下，之前的V8模型可能是，AST转换生成机器码，然后再执行机器码，就会出现机器码被储存在内存中的现象；但是现在是AST转换从字节码，在运行到某个字节码片段时，直接把字节码转成机器码然后执行,这个过程堆积在内存中的只是字节码，机器码一生成就会被消费掉，所以节约了内存)</p>\n<h4 id=\"执行代码\"><a class=\"markdownIt-Anchor\" href=\"#执行代码\"></a> 执行代码</h4>\n<p>生成代码之后，到了代码的执行阶段。解释器会逐条消费字节码。在执行字节码的过程中，如果有经常被执行的字节码（热点代码 HotSpot）。也会被后台编译器（TurboFan）转换成更高效的机器码，以后再遇到这段代码时，直接运生成的行机器码即可。这种将解释器和编译器结合使用的技术称作<strong>即时编译（JIT）</strong></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221313_799.png?/\" alt=\"即时编译 JIT 技术\" /></p>\n<blockquote>\n<p>本文是我看了<a href=\"https://time.geekbang.org/column/intro/216?code=wLzkK4Ecmtj435LqyZ6ecONi5PnKUst4jvEoQKp1yUA%3D\">李兵老师极客时间浏览器工作原理的专栏</a>写的总结,文字和图片资料来源与极客时间，不得不说这个专题，作者的工作经历真的丰富。这篇博客大概概括的写了专栏的一至四节，this的指向性没有涉及(因为我觉得在es6的诞生后this的指向已经比较明确了)。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"chrome架构\"><a class=\"markdownIt-Anchor\" href=\"#chrome架构\"></a> chrome架构</h3>\n<p><strong>问题1</strong>  只是打开了 1 个页，chrome启动了4个进程(在浏览器打开第一个页面的时候，且没有其他插件，音频的时候)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003192140_995.png?/\" alt=\"Chrome 的任务管理器窗口\" /><br />\n<strong>进程与线程的特点</strong></p>\n<ol>\n<li>线程是不能单独存在的，它是由进程来启动和管理的</li>\n<li>一个进程就是一个程序的运行实例,是操作系统分配资源的最小单元，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程</li>\n<li>进程中的任意一线程执行出错，都会导致整个进程的崩溃。</li>\n<li>线程之间可以共享进程中的数据，线程之间可以对自身进程中的公共数据进行读写操作</li>\n<li>当一个进程关闭之后，操作系统会回收进程所占用的内存</li>\n<li>进程之间的内容相互隔离，进程隔离是为保护操作系统中进程互不干扰的技术，每一个进程只能访问自己占有的数据，也就避免出现进程 A 写入数据到进程 B 的情况。正是因为进程之间的数据是严格隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于进程间通信（IPC）的机制了。(前端框架Electron)</li>\n</ol>\n<p><strong>现代化的浏览器进程架构</strong></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003192202_530.png?/\" alt=\"最新的 Chrome 进程架构图\" /></p>\n<p><strong>浏览器进程。</strong> 主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</p>\n<p><strong>渲染进程。</strong> 核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</p>\n<p>**GPU 进程。**其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</p>\n<p>**网络进程。**主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</p>\n<p>**插件进程。**主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</p>\n<blockquote>\n<p>因此打开 1 个页面至少需要 1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程，共 4 个；如果打开的页面有运行插件的话，还需要再加上 1 个插件进程。</p>\n</blockquote>\n<p><strong>process-per-site-instance策略</strong></p>\n<p>通常情况下是一个页面使用一个进程，但是，有一种情况，叫&quot;同一站点(same-site)&quot;，具体地讲，我们将“同一站点”定义为根域名（例如，<a href=\"http://geekbang.org\">geekbang.org</a>）加上协议（例如，https:// 或者http://），还包含了该根域名下的所有子域名和不同的端口，比如下面这三个：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://time.geekbang.org</span><br><span class=\"line\">https://www.geekbang.org</span><br><span class=\"line\">https://www.geekbang.org:8080</span><br></pre></td></tr></table></figure>\n<p>都是属于同一站点，因为它们的协议都是https，<a href=\"http://xn--geekbang-fq0m528bmhkkj7b1sfuv7g3dtc.org\">而根域名也都是geekbang.org</a>。你也许了解同源策略，但是同一站点和同源策略还是存在一些不同地方，在这里你需要了解它们不是同一件事就行了。<br />\nChrome的默认策略是，每个标签对应一个渲染进程。但是如果从一个页面打开了新页面，而新页面和当前页面属于同一站点时，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫process-per-site-instance。</p>\n<p>直白的讲，就是如果几个页面符合同一站点，那么他们将被分配到一个渲染进程里面去。<br />\n所以，这种情况下，一个页面崩溃了，会导致同一站点的页面同时崩溃，因为他们使用了同一个渲染进程。</p>\n<p>在一个渲染进程里面，他们就会共享JS的执行环境，也就是说A页面可以直接在B页面中执行脚本。因为是同一家的站点，所以是有这个需求的。</p>\n<p><strong>iframe</strong></p>\n<p>如果页面里有iframe的话，iframe也会运行在单独的进程中，下图是我浏览器任务管理器的一个截图，图中的辅助框架应该就是指页面中的 <code>iframe</code> 标签对应的地址</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003192230_498.png?/\" alt=\"贴上我自己电脑里面的一张图\" /></p>\n<p><strong>未来面向服务的架构</strong></p>\n<p>为了解决这些问题，在 2016 年，Chrome 官方团队使用“面向服务的架构”（Services Oriented Architecture，简称SOA）的思想设计了新的 Chrome 架构。也就是说 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过 IPC 来通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统，更好实现 Chrome 简单、稳定、高速、安全的目标。Chrome 最终要把 UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务，下面是 Chrome“面向服务的架构”的进程模型图。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003192317_372.png?/\" alt=\"\" /></p>\n<h3 id=\"浏览器中的http协议\"><a class=\"markdownIt-Anchor\" href=\"#浏览器中的http协议\"></a> 浏览器中的HTTP协议</h3>\n<p>TCP和HTTP的关系，以及TCP三次握手四次挥手等，可以见我博客有关网络的文章。</p>\n<h4 id=\"浏览器的缓存机制\"><a class=\"markdownIt-Anchor\" href=\"#浏览器的缓存机制\"></a> 浏览器的缓存机制</h4>\n<p>HTTP/1.1定义的 <code>Cache-Control</code> 头用来区分对缓存机制的支持情况， 请求头和响应头都支持这个属性。通过它提供的不同的值来定义缓存策略。</p>\n<p><strong>禁止进行缓存</strong> <code>Cache-Control: no-store</code></p>\n<p>缓存中不得存储任何关于客户端请求和服务端响应的内容。每次由客户端发起的请求都会下载完整的响应内容。</p>\n<p><strong>强制确认缓存</strong> <code>Cache-Control: no-store</code></p>\n<p>如下头部定义，此方式下，每次有请求发出时，缓存会将此请求发到服务器（该请求应该会带有与本地缓存相关的验证字段），服务器端会验证请求中所描述的缓存是否过期，若未过期（实际就是返回304），则缓存才使用本地缓存副本。</p>\n<p><strong>私有缓存和公共缓存</strong> <code>Cache-Control: private/public</code></p>\n<p>“public” 指令表示该响应可以被任何中间人（译者注：比如中间代理、CDN等）缓存。若指定了&quot;public&quot;，则一些通常不被中间人缓存的页面（译者注：因为默认是private）（比如 带有HTTP验证信息（帐号密码）的页面 或 某些特定状态码的页面），将会被其缓存。</p>\n<p><strong>缓存过期机制</strong> <code>Cache-Control: max-age=资源有效时间(s)</code></p>\n<p>max-age是距离请求发起的时间的秒数。针对应用中那些不会改变的文件，通常可以手动设置一定的时长以保证缓存有效，例如图片、css、js等静态资源。</p>\n<p><strong>协商缓存</strong><br />\n协商缓存主要涉及请求头设置中的，Etag和 Last-Modified。可以在响应头中设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etag: &#x27;xxxxxx&#x27;</span><br><span class=\"line\">last-modified: Mon, 20 Dec 2019 09:49:49 GMT</span><br></pre></td></tr></table></figure>\n<p>etag：每个文件有一个，改动文件了就变了，就是个文件hash，每个文件唯一，就像用webpack打包的时候，每个资源都会有这个东西，如： app.js打包后变为 app.xxxx.js，加个唯一hash，也是为了解决缓存问题。<br />\n<code>发请求--&gt;本地判断资源是否过期--&gt;过期--&gt;请求服务器--&gt;服务器对比资源是否真的过期--&gt;没过期--&gt;返回304状态码--&gt;客户端使用缓存资源</code> (如果服务器资源已经过期,服务器会返回200)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003200041_288.png?/\" alt=\"缓存查找流程示意图\" /></p>\n<h4 id=\"浏览器端发起-http-请求流程\"><a class=\"markdownIt-Anchor\" href=\"#浏览器端发起-http-请求流程\"></a> 浏览器端发起 HTTP 请求流程</h4>\n<h5 id=\"构建请求\"><a class=\"markdownIt-Anchor\" href=\"#构建请求\"></a> 构建请求</h5>\n<p>首先，浏览器构建请求行信息（如下所示），构建好后，浏览器准备发起网络请求。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /index.html HTTP1.1</span><br></pre></td></tr></table></figure>\n<h5 id=\"查找缓存\"><a class=\"markdownIt-Anchor\" href=\"#查找缓存\"></a> 查找缓存</h5>\n<p>在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件,具体缓存的操作，上文已经说过了,如果缓存失效或者没缓存，就会进入网络请求过程了。</p>\n<h5 id=\"准备-ip-地址和端口\"><a class=\"markdownIt-Anchor\" href=\"#准备-ip-地址和端口\"></a> 准备 IP 地址和端口</h5>\n<p>浏览器会请求 DNS 返回域名对应的 IP。当然浏览器还提供了DNS 数据缓存服务，如果某个域名已经解析过了，那么浏览器会缓存解析的结果，以供下次查询时直接使用，这样也会减少一次网络请求</p>\n<h5 id=\"等待-tcp-队列\"><a class=\"markdownIt-Anchor\" href=\"#等待-tcp-队列\"></a> 等待 TCP 队列</h5>\n<p>Chrome 有个机制，同一个域名同时最多只能建立 6 个 TCP 连接，如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。</p>\n<h5 id=\"建立-tcp-连接\"><a class=\"markdownIt-Anchor\" href=\"#建立-tcp-连接\"></a> 建立 TCP 连接</h5>\n<p>三次握手</p>\n<h5 id=\"发送-http-请求\"><a class=\"markdownIt-Anchor\" href=\"#发送-http-请求\"></a> 发送 HTTP 请求</h5>\n<p>一旦建立了 TCP 连接，浏览器就可以和服务器进行通信了。而 HTTP 中的数据正是在这个通信过程中传输的。首先浏览器会向服务器发送请求行，它包括了请求方法、请求 URI（Uniform Resource Identifier）和 HTTP 版本协议。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003200034_510.png?/\" alt=\"HTTP 请求数据格式\" /></p>\n<h4 id=\"服务器端处理-http-请求流程\"><a class=\"markdownIt-Anchor\" href=\"#服务器端处理-http-请求流程\"></a> 服务器端处理 HTTP 请求流程</h4>\n<p><img src=\"http://blogimage.lemonlife.top/202003200038_19.png?/\" alt=\"\" /></p>\n<h4 id=\"断开连接\"><a class=\"markdownIt-Anchor\" href=\"#断开连接\"></a> 断开连接</h4>\n<p>四次挥手，通常情况下，一旦服务器向客户端返回了请求数据，它就要关闭 TCP 连接。不过如果浏览器或者服务器在其头信息中加入了<code>Connection:Keep-Alive</code>。那么 TCP 连接在发送后将仍然保持打开状态，这样浏览器就可以继续通过同一个 TCP 连接发送请求。保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。比如，一个 Web 页面中内嵌的图片就都来自同一个 Web 站点，如果初始化了一个持久连接，你就可以复用该连接，以请求其他资源，而不需要重新再建立新的 TCP 连接。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003192344_989.png?/\" alt=\"HTTP 请求流程示意图\" /></p>\n<h3 id=\"浏览器渲染流程\"><a class=\"markdownIt-Anchor\" href=\"#浏览器渲染流程\"></a> 浏览器渲染流程</h3>\n<p>可以参看我的博客 <a href=\"http://lemonlife.top/2020/02/21/web-fundamentals/\">浏览器工作原理~渲染篇</a> 和 <a href=\"http://lemonlife.top/2020/02/23/web-fundamentals-optimize/\">浏览器工作原理~优化篇</a></p>\n<blockquote>\n<p>看完上面的部分，你对浏览器应该已经有了一个大概的了解了，应该也知道从一个网址变成一个网页这些大概是经历了哪些流程。后面我们将介绍，浏览器具体每一块是如何工作的，以及怎么优化页面的显示</p>\n</blockquote>\n<h3 id=\"浏览器中的js\"><a class=\"markdownIt-Anchor\" href=\"#浏览器中的js\"></a> 浏览器中的JS</h3>\n<blockquote>\n<p>这一块我应该只会大概的写一下，想要；了解具体的可以去看看，这个极客时间的专题，或者 <a href=\"https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/yi-3001-nei-cun-kong-jian-xiang-jie.html\">GitHub上这个大佬的博客</a> 的一到六节，感觉都是非常好的资料。</p>\n</blockquote>\n<h4 id=\"v8与javascript\"><a class=\"markdownIt-Anchor\" href=\"#v8与javascript\"></a> V8与JavaScript</h4>\n<blockquote>\n<p>前端的小伙伴应该都知道，JS在chrome中是通过V8引擎进行编译的。</p>\n</blockquote>\n<p><strong>JS内模型</strong></p>\n<p>对于JS语言本身来说,是一种动态的弱类型语言，意味着我们在定义一个变量时候，不需要告诉解析引擎这个变量的类型是什么，JS引擎在运行代码的时候，引擎自己计算出数据的类型。而且可以使用一个变量来保存不同类型的数据。<br />\nJavaScript的数据类型有8种,(基础数据类型是7种)。</p>\n<p>对于 <code>Boolean</code> <code>Null</code> <code>Undefined</code> <code>Number</code> <code>BigInt</code>  <code>String</code>  <code>Symbol</code> 这七种数据基础类型是储存在内存的栈空间中的，而<code>Object</code> 这种引用数据类型是储存在堆空间中的。(此处的栈，和堆，指的是内存空间。注意和方法调用的时候的堆栈区分)。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211302_206.png?/\" alt=\"JS内存模型\" /></p>\n<p>在函数执行期间，对于储存在栈空间中的基础数据类型变量，是直接被直接赋值到函数的调用栈中，对于堆空间中的引用类型变量，把变量的地址赋值到函数的调用栈中。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211305_429.png?/\" alt=\"函数调用模型\" /></p>\n<blockquote>\n<p>所以我觉得 js 本身其实没有，堆内存和栈内存的区别，只有基础数据类型和引用数据类型的区别。</p>\n</blockquote>\n<p><strong>代码的两个阶段</strong></p>\n<p>对于JavaScript代码运行，分为<code>代码的创建阶段</code> 和 <code>代码的执行阶段</code>,最常见的就是变量提升问题。对于一个JS函数。在代码创建阶段会提前把，函数中声明的变量都创建成<code>undefined</code>值。再在代码的执行阶段，对<code>undefined</code> 进行赋值。</p>\n<ul>\n<li>代码中的函数变量除外，函数变量都是直接在创建阶段赋值的</li>\n<li>S6没有变量提升的问题,不是因为没有代码的创建阶段，而是因为ES6 引入了一个暂时性死区的机制。</li>\n</ul>\n<p>可以看下面那个例子函数 <code>foo</code> ，当代码运行到 <code>var bar = foo()</code> 时候。代码会先创建 <code>myName</code> <code>test</code> <code>innerBar</code> 三个变量。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211711_280.png?/\" alt=\"代码创建过程\" /></p>\n<p>在代码的执行阶段，会依次对这三个变量进行赋值。当代码执行到 <code>return innerBar</code> 的时候，此时三个变量已经赋值完成。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211719_506.png?/\" alt=\"代码的执行阶段\" /></p>\n<p><strong>闭包机制</strong></p>\n<p>闭包就不介绍了，直接看下面这个函数吧。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myName = <span class=\"string\">&quot; 极客时间 &quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> innerBar = &#123; </span><br><span class=\"line\">     <span class=\"attr\">setName</span>:<span class=\"function\">(<span class=\"params\">newName</span>)=&gt;</span>&#123;</span><br><span class=\"line\">         myName = newName</span><br><span class=\"line\">         <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test) <span class=\"comment\">//test       </span></span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     <span class=\"attr\">getName</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> myName</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> innerBar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"title function_\">foo</span>()</span><br><span class=\"line\">bar.<span class=\"title function_\">setName</span>(<span class=\"string\">&quot; 极客&quot;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bar.<span class=\"title function_\">getName</span>()) <span class=\"comment\">//极客</span></span><br></pre></td></tr></table></figure>\n<p>正常逻辑我们再执行完<code>bar = foo()</code>之后 代码应该执行完毕了。此时,应该无法访问到变量test,和myName了，因为在一个函数执行完了他内部的变量也应该被释放掉。但是根据函数的执行结果可以判断，变量依旧可以被正常的能被访问，这就是典型的<strong>闭包</strong>机制。</p>\n<p>首先产生闭包是在函数的执行阶段，发现了某个子函数对自身变量有引用，就会在堆内存再创建一个闭包对象 <code>Clourse(自身函数名)</code>，对于这个闭包对象的值，我认为储存的是本身函数调用的变量的指针,对于基础数据类型肯定都是直接复制。</p>\n<p>(此处，有文档认为是把内存中的变量都复制了一遍到这个闭包对象中，然后函数运行结束的时候,函数里面的变量都被回收了,但是闭包堆内存没有被回收，因此产生了闭包现象。我没有读过V8源码，但是我觉得代码底层应该不会有这种没有意义的复制)</p>\n<p>对于上面的例子也就是，当 <code>foo</code> 函数执行完 <code>var innerBar =</code> 之后。会生成 <code>Closure (foo)</code> 对象,然后在<code>setName</code> 和 <code>getName</code> 这两个对象上都绑定上生成的  <code>Closure (foo)</code> 。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211910_165.png?/\" alt=\"foo函数执行情况\" /></p>\n<p>最后在我们执行 <code>bar.setName(&quot; 极客&quot;)</code> 和 <code>bar.getName()</code> 的时候 在setName函数的创建过程中，可以看到函数里面已经有了对象 ，<code>Closure (foo)</code>，然后再在函数的执行阶段重复之前分析的函数执行阶段的赋值操作。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003211917_421.png?/\" alt=\"setName 函数的创建阶段\" /></p>\n<h4 id=\"v8的垃圾回收gc\"><a class=\"markdownIt-Anchor\" href=\"#v8的垃圾回收gc\"></a> v8的垃圾回收(GC)</h4>\n<blockquote>\n<p>首先值得庆幸的是，V8是自动管理垃圾回收的。某个函数执行完成之后，指向该函数的函数指针(ESP)就会指向下一个函数，该函数的执行上下文会从堆内存销毁掉。</p>\n</blockquote>\n<p>V8会把堆分层新生代和老生代 (代际假说)，新生代收集器也称副垃圾收集器，老生代也称主垃圾收集器。新生代存放的都是生存时间短的对象，老生代中存放的都是生存时间久的对象。新生代区通常只支持1~8M的容量，老生区支持的容量会大很多。</p>\n<p><strong>垃圾收集器工作流程</strong></p>\n<ul>\n<li>标记空间中的活动对象和非活动对象,根据当前这个对象是否还被引用，也就是是否还在使用进行判断。</li>\n<li>回收非活动对象所占据的内存。其实就是清理上一步中被标记的可回收对象。</li>\n<li>内存整理，因为清除完可回收的之后，就好像一整块拼图中，你随机抠掉了几块后，会出现很多不连续的片段，因此为了方便后续程序，使用我们要进行内存整理。</li>\n</ul>\n<p><strong>新生代回收过程</strong></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003212142_450.png?/\" alt=\"新生区被划分为对象区域和空闲区域\" /></p>\n<p>新增的对象都会被放在新生代的对象区，然后经历，一标记，二回收，之后整理的时候是将对象区剩下的变量复制到空闲区，这样就得到了,空内存的对象区和有对象且内存连续的空闲区，再把此时的对象区，空闲区身份交换。继续写入新变量进行下一轮GC。（不得不说这里真的很佩服这个垃圾收集器的设计思路，身份交换的想法，能让新生代中的这两块区域无限重复使用下去）</p>\n<p>如果有个对象经历了两轮垃圾回收，还在新生区，就会将此对象移入老生区（对象晋升策略）</p>\n<p><strong>老生区回收过程</strong></p>\n<p>主垃圾收集器，主要采用 <b>标记-清除（Mark-Sweep)</b> 的方式进行垃圾回收。标记清除的过程和之前差不多，但是不同的是，老生区不是通过复制对象来整理内存的，因为老生区内存大，对象多，复制整理会很耗时。老生区是在多次标记之后，将老生区的存活对象，朝着老生区的一段移动。然后直接一次性清除掉其他地方的对象。这一过程被称为 <b>标记-整理</b> ,下面我画了一个大致流程。(假设按图中可以直接清除左边两列之外的列)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003212305_912.png?/\" alt=\"标记和清除的过程\" /></p>\n<p><strong>全停顿</strong></p>\n<p>因为JavaScript运行在V8的主线程之上，所以一旦执行了垃圾回收算法。都需要将正在执行的JavaScript代码暂停。等待垃圾回收完再执行，这种行为被称作 <strong>全停顿(Stop-The-World)</strong></p>\n<p>因为新生代本来内存小,变量少GC不会有太大影响。所以为了降低老生代GC造成的卡顿，V8把标记过程分成一个个子标记过程。同时让垃圾回收标记和JavaScript应用逻辑交替进行，直到标记移动完成,感觉这种整块舍弃的思路，清理起来应该挺快。主要耗时应该就是标记和移动(<strong>增量标记算法</strong>)。</p>\n<h3 id=\"v8的编译期和解释器\"><a class=\"markdownIt-Anchor\" href=\"#v8的编译期和解释器\"></a> V8的编译期和解释器</h3>\n<p>因为我们写的是高级语言，而机器只能识别二进制机器码，所以我们需要用解释器和编译器把我们写的代码翻译成机器码。按语言的执行流程，可以把编程语言分为编译期语言和解释型语言。</p>\n<p><strong>编译型语言</strong> 在程序执行之前，需要经过编译期的编译过程，并且编译之后会直接保留机器能读懂二进制文件，每次运行程序时，都可以直接运行二进制文件，不需要再次重新编译了.(C/C++、GO)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003220954_620.png?/\" alt=\"编译型语言的过程\" /></p>\n<p><strong>解释型语言</strong> 在每次运行时都需要通过解释器对程序进行动态的解释和执行。(Python,JavaScript)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221009_316.png?/\" alt=\"解释型语言的过程\" /></p>\n<h4 id=\"v8是如何执行一段javascript代码\"><a class=\"markdownIt-Anchor\" href=\"#v8是如何执行一段javascript代码\"></a> V8是如何执行一段JavaScript代码</h4>\n<p>V8在执行过程中既有 解释器(lgnition) ,又有 解释器(TurboFan)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221022_904.png?/\" alt=\"V8执行一段代码流程图\" /></p>\n<h4 id=\"生成抽象语法树ast和执行上下文\"><a class=\"markdownIt-Anchor\" href=\"#生成抽象语法树ast和执行上下文\"></a> 生成抽象语法树(AST)和执行上下文</h4>\n<p>源代码经过词法分析和与分析之后会生成抽象语法树(AST)，推荐一个可以生成<a href=\"https://resources.jointjs.com/demos/javascript-ast\">AST网站</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"property\">log</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>AST的结构和代码结构非常相似，编译期或者解释器后续的工作依赖于AST，而不是源代码。在JavaScript中最典型的是Babel和ESLint。</p>\n<p>Babel将ES6转成ES5代码的过程，就是先将ES6代码转成AST,然后再将ES6语法生成的AST转换成ES5的AST (Babel的代码库里有函数，能把ES6的代码复写成ES5的代码)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221034_422.png?/\" alt=\"上述代码生成的AST\" /></p>\n<p>ESLint第一阶段是词法分析(tokenize),将一行行的源码拆解成一个个token。(语法上不可以再分的最小字符和字符串),图中 <code>var</code> <code>myName</code> <code>=</code>&quot; <code>极客时间</code> 这四个都是四个token。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221123_690.png?/\" alt=\"生成Token\" /></p>\n<p>第二个阶段是语法分析(parse),作用是将上一步生成的token数据，根据语法规则转为AST。如果源码符合语法规则，会顺利生成Token，如果源码存在语法错误，这一步就会终止，并抛出一个&quot;语法错误&quot;。成功生成了AST后，V8就会生成该段代码的执行上下文。</p>\n<h4 id=\"生成字节码\"><a class=\"markdownIt-Anchor\" href=\"#生成字节码\"></a> 生成字节码</h4>\n<p>解释器lgnition，可以转换成AST生成字节码，并解释执行字节码。字节码是介于AST和机器码之间的一种代码。比机器码占用的内存要少很多，字节码需要通过解释器将其转成机器码才能执行。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221240_926.png?/\" alt=\"字节码机器码内存占用对比\" /></p>\n<p>(这一段我猜测一下，之前的V8模型可能是，AST转换生成机器码，然后再执行机器码，就会出现机器码被储存在内存中的现象；但是现在是AST转换从字节码，在运行到某个字节码片段时，直接把字节码转成机器码然后执行,这个过程堆积在内存中的只是字节码，机器码一生成就会被消费掉，所以节约了内存)</p>\n<h4 id=\"执行代码\"><a class=\"markdownIt-Anchor\" href=\"#执行代码\"></a> 执行代码</h4>\n<p>生成代码之后，到了代码的执行阶段。解释器会逐条消费字节码。在执行字节码的过程中，如果有经常被执行的字节码（热点代码 HotSpot）。也会被后台编译器（TurboFan）转换成更高效的机器码，以后再遇到这段代码时，直接运生成的行机器码即可。这种将解释器和编译器结合使用的技术称作<strong>即时编译（JIT）</strong></p>\n<p><img src=\"http://blogimage.lemonlife.top/202003221313_799.png?/\" alt=\"即时编译 JIT 技术\" /></p>\n<blockquote>\n<p>本文是我看了<a href=\"https://time.geekbang.org/column/intro/216?code=wLzkK4Ecmtj435LqyZ6ecONi5PnKUst4jvEoQKp1yUA%3D\">李兵老师极客时间浏览器工作原理的专栏</a>写的总结,文字和图片资料来源与极客时间，不得不说这个专题，作者的工作经历真的丰富。这篇博客大概概括的写了专栏的一至四节，this的指向性没有涉及(因为我觉得在es6的诞生后this的指向已经比较明确了)。</p>\n</blockquote>\n"},{"title":"浏览器工作原理~渲染篇","date":"2020-02-21T03:22:22.000Z","_content":"### 关键渲染路径\n关键渲染路径是指浏览器所经历的一系列步骤。从而将HTML,CSS和JavaScript，转换成屏幕上呈现的像素内容，首先获取HTML并且开始构建文档对象模型(DOM),然后获取CSS构建CSS对象模型(CSSOM),然后将两者结合形成渲染树(Render Tree),然后浏览器根据渲染树知道了每个元素的内容和位置(Layout)。最后渲染引擎将元素绘制在屏幕上(Paint).\n\n![](http://blogimage.lemonlife.top/202002211149_876.png?/)\n### 构建对象模型(HTML转成DOM)\n浏览器渲染页面要先构建DOM和CSSOM,因此，要尽快将HTML,CSS提供给浏览器。<br>\n当我们在浏览器输入 `URL` 的时候,浏览器会向服务器请求资源拿到HTML等资源，然后拿到的HTML文档头部规定了浏览器按照什么样的规范来处理HTML文``件。\n```html\n<!-- 按照Java thymeleaf 模板引擎的规则解析 -->\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<!-- 按照xhtml 规则解析 -->\n<html xmlns=\"http://www.w3.org/1999/xhtml\"></html>\n```\n每当解析遇到标签,浏览器会生成一个令牌(Token),一开始是标签HTML的令牌 `StartTag:HTML` ,然后是 `StartTag:head` ,这一整个流程由Token生成器来完成，当Token生成器在执行这一过程的时候，另一个进程正在消耗这些Token，并将他们转化成节点对象,我们创建了html节点之后消耗下一个令牌创建了head节点，由于head的结束令牌`EndTag:head`标签,在`endTag:html`，之前说明 head是html子节点,所以最后所有的Token都消费完的时候，就生成了文档对象模型(DOM,document object model),生成的DOM树表示了HTML的内容和属性，以及各个节点之间的关系。\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <link href=\"style.css\" rel=\"stylesheet\">\n    <title>Critical Path</title>\n  </head>\n  <body>\n    <p>Hello <span>web performance</span> students!</p>\n    <div><img src=\"awesome-photo.jpg\"></div>\n  </body>\n</html>\n```\n![图片来源Google](http://blogimage.lemonlife.top/202002222033_585.png?/)\n\n1. 转换： 浏览器从磁盘或网络读取 HTML 的原始字节，并根据文件的指定编码（例如 UTF-8）将它们转换成各个字符。\n2. 令牌化： 浏览器将字符串转换成 W3C HTML5 标准规定的各种令牌，例如，`<html>`、`<body>` 以及其他尖括号内的字符串。每个令牌都具有特殊含义和一组规则。\n3. 词法分析： 发出的令牌转换成定义其属性和规则的“对象”。\n4. DOM 构建： 最后，由于 HTML 标记定义不同标记之间的关系（一些标记包含在其他标记内），创建的对象链接在一个树数据结构内，此结构也会捕获原始标记中定义的父项-子项关系：HTML 对象是 body 对象的父项，body 是 paragraph 对象的父项，依此类推。\n\n![图片来源Google](http://blogimage.lemonlife.top/202002222035_775.png?/)\n\n### 生成CSSOM\n浏览器也会根据css规范来解析css,与DOM不同的是css会向下层叠，因此也叫层叠样式表或者层叠样式规则，即子节点可能会继承父节点的一些属性，比如body中定义了字体大小16px。其他的子属性会继承这一大小。而且浏览器解析css过程是阻塞的，浏览器需要解析完所有的css才会使用css样式(和浏览器的回流重绘一样)。\n\n```css\nbody { font-size: 16px }\np { font-weight: bold }\nspan { color: red }\np span { display: none }\nimg { float: right }\n```\n与处理 HTML 时一样，我们需要将收到的 CSS 规则转换成某种浏览器能够理解和处理的东西。因此，我们会重复 HTML 过程，不过是为 CSS 而不是 HTML.\n\n![CSS处理过程](http://blogimage.lemonlife.top/202002222037_642.png?/)\n\nCSS 字节转换成字符，接着转换成令牌和节点，最后链接到一个称为“CSS 对象模型”(CSSOM) 的树结构内：\n\n![CSSOM](http://blogimage.lemonlife.top/202002222038_142.png?/)\n\nCSSOM 为何具有树结构？为页面上的任何对象计算最后一组样式时，浏览器都会先从适用于该节点的最通用规则开始（例如，如果该节点是 body 元素的子项，则应用所有 body 样式），然后通过应用更具体的规则（即规则“向下级联”）以递归方式优化计算的样式。\n\n以上面的 CSSOM 树为例进行更具体的阐述。span 标记内包含的任何置于 body 元素内的文本都将具有 16 像素字号，并且颜色为红色 — font-size 指令从 body 向下级联至 span。不过，如果某个 span 标记是某个段落 (p) 标记的子项，则其内容将不会显示。\n\n还请注意，以上树并非完整的 CSSOM 树，它只显示了我们决定在样式表中替换的样式。每个浏览器都提供一组默认样式（也称为“User Agent 样式”），即我们不提供任何自定义样式时所看到的样式，我们的样式只是替换这些默认样式（[例如默认 IE 样式](https://www.iecss.com/)）。\n\n### 形成RenderTree \n从DOM树的根节点开始，去匹配对应的CSS样式，然后把CSS样式复制到对应DM节点中，作为DOM节点的属性,如果该节点是DOM根节点,就会形成RenderTree 根节点,渲染过程中遇到`display:none`的节点,会先不处理他和他的子节点。即不把`display:none`的节点，加载到RenderTree中\n### 布局(Layout)\n\n`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">`\n布局的宽度应该等于设备的宽度，如果没有可能会采用默认的宽度例如`width:100%` 会变成`980px`。\n\n通过浏览器控制台分析布局事件，如下图是某网页加载过程，可找出事件耗时比较大的过程，分页原因给予优化，优化布局和代码，尽量做到批量布局，避免出现多个布局事件。\n![RenderTree加载过程](http://blogimage.lemonlife.top/202002222114_253.png?/)\n\n### 绘制页面(Paint)\n同上我们可以获取到，网页Paint的过程，可见下图网页主要耗时是渲染层合并的过程(Composite Layers,[了解更多](https://blog.csdn.net/weixin_40581980/article/details/81453283))\n\n![Paint过程图](http://blogimage.lemonlife.top/202002222137_360.png?/)\n### 最后\n首先我们接收到HTML(本地或者浏览器)，然后开始解析它，DOM会逐步构建，并非一次性响应。在head中如果发现css和js链接，就会发请求，为了形成RenderTree,所以会先解析CSS形成CSSOM,解析CSS文件的过程会屏蔽JS引擎，相当于给DOM上锁，防止CSS,JS同时修改的现象发生。完成CSSOM会取消屏蔽 JS引擎，然后接收JS,然后执行JS,JavaScript解析完成后，我们就可以继续构建DOM的构建。获取DOM和CSSOM后,  我们将合并二者并构建RenderTree,然后运行布局绘制网页。\n\n![Google习题](http://blogimage.lemonlife.top/202002222158_212.png?/)\n\n- 浏览器优化应当讲究，先权衡再优化的发展，因此就需要用Google Devtools 具体分析。\n- 默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。请务必精简您的 CSS，尽快提供它，并利用媒体类型和查询来解除对渲染的阻塞。在渲染树构建中，我们看到关键渲染路径要求我们同时具有 DOM 和 CSSOM 才能构建渲染树。这会给性能造成严重影响：**HTML 和 CSS 都是阻塞渲染的资源**\n\n> 教程中大多数图片和文字资源来源于Google官网，有条件的同学可以去看看。[克服GFW地址](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn)","source":"_posts/web-fundamentals.md","raw":"---\ntitle: 浏览器工作原理~渲染篇\ndate: 2020-02-21 11:22:22\ntags:\n  - 浏览器 \n---\n### 关键渲染路径\n关键渲染路径是指浏览器所经历的一系列步骤。从而将HTML,CSS和JavaScript，转换成屏幕上呈现的像素内容，首先获取HTML并且开始构建文档对象模型(DOM),然后获取CSS构建CSS对象模型(CSSOM),然后将两者结合形成渲染树(Render Tree),然后浏览器根据渲染树知道了每个元素的内容和位置(Layout)。最后渲染引擎将元素绘制在屏幕上(Paint).\n\n![](http://blogimage.lemonlife.top/202002211149_876.png?/)\n### 构建对象模型(HTML转成DOM)\n浏览器渲染页面要先构建DOM和CSSOM,因此，要尽快将HTML,CSS提供给浏览器。<br>\n当我们在浏览器输入 `URL` 的时候,浏览器会向服务器请求资源拿到HTML等资源，然后拿到的HTML文档头部规定了浏览器按照什么样的规范来处理HTML文``件。\n```html\n<!-- 按照Java thymeleaf 模板引擎的规则解析 -->\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<!-- 按照xhtml 规则解析 -->\n<html xmlns=\"http://www.w3.org/1999/xhtml\"></html>\n```\n每当解析遇到标签,浏览器会生成一个令牌(Token),一开始是标签HTML的令牌 `StartTag:HTML` ,然后是 `StartTag:head` ,这一整个流程由Token生成器来完成，当Token生成器在执行这一过程的时候，另一个进程正在消耗这些Token，并将他们转化成节点对象,我们创建了html节点之后消耗下一个令牌创建了head节点，由于head的结束令牌`EndTag:head`标签,在`endTag:html`，之前说明 head是html子节点,所以最后所有的Token都消费完的时候，就生成了文档对象模型(DOM,document object model),生成的DOM树表示了HTML的内容和属性，以及各个节点之间的关系。\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <link href=\"style.css\" rel=\"stylesheet\">\n    <title>Critical Path</title>\n  </head>\n  <body>\n    <p>Hello <span>web performance</span> students!</p>\n    <div><img src=\"awesome-photo.jpg\"></div>\n  </body>\n</html>\n```\n![图片来源Google](http://blogimage.lemonlife.top/202002222033_585.png?/)\n\n1. 转换： 浏览器从磁盘或网络读取 HTML 的原始字节，并根据文件的指定编码（例如 UTF-8）将它们转换成各个字符。\n2. 令牌化： 浏览器将字符串转换成 W3C HTML5 标准规定的各种令牌，例如，`<html>`、`<body>` 以及其他尖括号内的字符串。每个令牌都具有特殊含义和一组规则。\n3. 词法分析： 发出的令牌转换成定义其属性和规则的“对象”。\n4. DOM 构建： 最后，由于 HTML 标记定义不同标记之间的关系（一些标记包含在其他标记内），创建的对象链接在一个树数据结构内，此结构也会捕获原始标记中定义的父项-子项关系：HTML 对象是 body 对象的父项，body 是 paragraph 对象的父项，依此类推。\n\n![图片来源Google](http://blogimage.lemonlife.top/202002222035_775.png?/)\n\n### 生成CSSOM\n浏览器也会根据css规范来解析css,与DOM不同的是css会向下层叠，因此也叫层叠样式表或者层叠样式规则，即子节点可能会继承父节点的一些属性，比如body中定义了字体大小16px。其他的子属性会继承这一大小。而且浏览器解析css过程是阻塞的，浏览器需要解析完所有的css才会使用css样式(和浏览器的回流重绘一样)。\n\n```css\nbody { font-size: 16px }\np { font-weight: bold }\nspan { color: red }\np span { display: none }\nimg { float: right }\n```\n与处理 HTML 时一样，我们需要将收到的 CSS 规则转换成某种浏览器能够理解和处理的东西。因此，我们会重复 HTML 过程，不过是为 CSS 而不是 HTML.\n\n![CSS处理过程](http://blogimage.lemonlife.top/202002222037_642.png?/)\n\nCSS 字节转换成字符，接着转换成令牌和节点，最后链接到一个称为“CSS 对象模型”(CSSOM) 的树结构内：\n\n![CSSOM](http://blogimage.lemonlife.top/202002222038_142.png?/)\n\nCSSOM 为何具有树结构？为页面上的任何对象计算最后一组样式时，浏览器都会先从适用于该节点的最通用规则开始（例如，如果该节点是 body 元素的子项，则应用所有 body 样式），然后通过应用更具体的规则（即规则“向下级联”）以递归方式优化计算的样式。\n\n以上面的 CSSOM 树为例进行更具体的阐述。span 标记内包含的任何置于 body 元素内的文本都将具有 16 像素字号，并且颜色为红色 — font-size 指令从 body 向下级联至 span。不过，如果某个 span 标记是某个段落 (p) 标记的子项，则其内容将不会显示。\n\n还请注意，以上树并非完整的 CSSOM 树，它只显示了我们决定在样式表中替换的样式。每个浏览器都提供一组默认样式（也称为“User Agent 样式”），即我们不提供任何自定义样式时所看到的样式，我们的样式只是替换这些默认样式（[例如默认 IE 样式](https://www.iecss.com/)）。\n\n### 形成RenderTree \n从DOM树的根节点开始，去匹配对应的CSS样式，然后把CSS样式复制到对应DM节点中，作为DOM节点的属性,如果该节点是DOM根节点,就会形成RenderTree 根节点,渲染过程中遇到`display:none`的节点,会先不处理他和他的子节点。即不把`display:none`的节点，加载到RenderTree中\n### 布局(Layout)\n\n`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">`\n布局的宽度应该等于设备的宽度，如果没有可能会采用默认的宽度例如`width:100%` 会变成`980px`。\n\n通过浏览器控制台分析布局事件，如下图是某网页加载过程，可找出事件耗时比较大的过程，分页原因给予优化，优化布局和代码，尽量做到批量布局，避免出现多个布局事件。\n![RenderTree加载过程](http://blogimage.lemonlife.top/202002222114_253.png?/)\n\n### 绘制页面(Paint)\n同上我们可以获取到，网页Paint的过程，可见下图网页主要耗时是渲染层合并的过程(Composite Layers,[了解更多](https://blog.csdn.net/weixin_40581980/article/details/81453283))\n\n![Paint过程图](http://blogimage.lemonlife.top/202002222137_360.png?/)\n### 最后\n首先我们接收到HTML(本地或者浏览器)，然后开始解析它，DOM会逐步构建，并非一次性响应。在head中如果发现css和js链接，就会发请求，为了形成RenderTree,所以会先解析CSS形成CSSOM,解析CSS文件的过程会屏蔽JS引擎，相当于给DOM上锁，防止CSS,JS同时修改的现象发生。完成CSSOM会取消屏蔽 JS引擎，然后接收JS,然后执行JS,JavaScript解析完成后，我们就可以继续构建DOM的构建。获取DOM和CSSOM后,  我们将合并二者并构建RenderTree,然后运行布局绘制网页。\n\n![Google习题](http://blogimage.lemonlife.top/202002222158_212.png?/)\n\n- 浏览器优化应当讲究，先权衡再优化的发展，因此就需要用Google Devtools 具体分析。\n- 默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。请务必精简您的 CSS，尽快提供它，并利用媒体类型和查询来解除对渲染的阻塞。在渲染树构建中，我们看到关键渲染路径要求我们同时具有 DOM 和 CSSOM 才能构建渲染树。这会给性能造成严重影响：**HTML 和 CSS 都是阻塞渲染的资源**\n\n> 教程中大多数图片和文字资源来源于Google官网，有条件的同学可以去看看。[克服GFW地址](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn)","slug":"web-fundamentals","published":1,"updated":"2021-08-07T01:59:03.350Z","_id":"cl4ince72002icguf76oxhj7f","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"关键渲染路径\"><a class=\"markdownIt-Anchor\" href=\"#关键渲染路径\"></a> 关键渲染路径</h3>\n<p>关键渲染路径是指浏览器所经历的一系列步骤。从而将HTML,CSS和JavaScript，转换成屏幕上呈现的像素内容，首先获取HTML并且开始构建文档对象模型(DOM),然后获取CSS构建CSS对象模型(CSSOM),然后将两者结合形成渲染树(Render Tree),然后浏览器根据渲染树知道了每个元素的内容和位置(Layout)。最后渲染引擎将元素绘制在屏幕上(Paint).</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002211149_876.png?/\" alt=\"\" /></p>\n<h3 id=\"构建对象模型html转成dom\"><a class=\"markdownIt-Anchor\" href=\"#构建对象模型html转成dom\"></a> 构建对象模型(HTML转成DOM)</h3>\n<p>浏览器渲染页面要先构建DOM和CSSOM,因此，要尽快将HTML,CSS提供给浏览器。<br><br />\n当我们在浏览器输入 <code>URL</code> 的时候,浏览器会向服务器请求资源拿到HTML等资源，然后拿到的HTML文档头部规定了浏览器按照什么样的规范来处理HTML文``件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 按照Java thymeleaf 模板引擎的规则解析 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 按照xhtml 规则解析 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>每当解析遇到标签,浏览器会生成一个令牌(Token),一开始是标签HTML的令牌 <code>StartTag:HTML</code> ,然后是 <code>StartTag:head</code> ,这一整个流程由Token生成器来完成，当Token生成器在执行这一过程的时候，另一个进程正在消耗这些Token，并将他们转化成节点对象,我们创建了html节点之后消耗下一个令牌创建了head节点，由于head的结束令牌<code>EndTag:head</code>标签,在<code>endTag:html</code>，之前说明 head是html子节点,所以最后所有的Token都消费完的时候，就生成了文档对象模型(DOM,document object model),生成的DOM树表示了HTML的内容和属性，以及各个节点之间的关系。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;style.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Critical Path<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>web performance<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> students!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;awesome-photo.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/202002222033_585.png?/\" alt=\"图片来源Google\" /></p>\n<ol>\n<li>转换： 浏览器从磁盘或网络读取 HTML 的原始字节，并根据文件的指定编码（例如 UTF-8）将它们转换成各个字符。</li>\n<li>令牌化： 浏览器将字符串转换成 W3C HTML5 标准规定的各种令牌，例如，<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code> 以及其他尖括号内的字符串。每个令牌都具有特殊含义和一组规则。</li>\n<li>词法分析： 发出的令牌转换成定义其属性和规则的“对象”。</li>\n<li>DOM 构建： 最后，由于 HTML 标记定义不同标记之间的关系（一些标记包含在其他标记内），创建的对象链接在一个树数据结构内，此结构也会捕获原始标记中定义的父项-子项关系：HTML 对象是 body 对象的父项，body 是 paragraph 对象的父项，依此类推。</li>\n</ol>\n<p><img src=\"http://blogimage.lemonlife.top/202002222035_775.png?/\" alt=\"图片来源Google\" /></p>\n<h3 id=\"生成cssom\"><a class=\"markdownIt-Anchor\" href=\"#生成cssom\"></a> 生成CSSOM</h3>\n<p>浏览器也会根据css规范来解析css,与DOM不同的是css会向下层叠，因此也叫层叠样式表或者层叠样式规则，即子节点可能会继承父节点的一些属性，比如body中定义了字体大小16px。其他的子属性会继承这一大小。而且浏览器解析css过程是阻塞的，浏览器需要解析完所有的css才会使用css样式(和浏览器的回流重绘一样)。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-weight</span>: bold &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">color</span>: red &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> <span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">display</span>: none &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">float</span>: right &#125;</span><br></pre></td></tr></table></figure>\n<p>与处理 HTML 时一样，我们需要将收到的 CSS 规则转换成某种浏览器能够理解和处理的东西。因此，我们会重复 HTML 过程，不过是为 CSS 而不是 HTML.</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002222037_642.png?/\" alt=\"CSS处理过程\" /></p>\n<p>CSS 字节转换成字符，接着转换成令牌和节点，最后链接到一个称为“CSS 对象模型”(CSSOM) 的树结构内：</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002222038_142.png?/\" alt=\"CSSOM\" /></p>\n<p>CSSOM 为何具有树结构？为页面上的任何对象计算最后一组样式时，浏览器都会先从适用于该节点的最通用规则开始（例如，如果该节点是 body 元素的子项，则应用所有 body 样式），然后通过应用更具体的规则（即规则“向下级联”）以递归方式优化计算的样式。</p>\n<p>以上面的 CSSOM 树为例进行更具体的阐述。span 标记内包含的任何置于 body 元素内的文本都将具有 16 像素字号，并且颜色为红色 — font-size 指令从 body 向下级联至 span。不过，如果某个 span 标记是某个段落 § 标记的子项，则其内容将不会显示。</p>\n<p>还请注意，以上树并非完整的 CSSOM 树，它只显示了我们决定在样式表中替换的样式。每个浏览器都提供一组默认样式（也称为“User Agent 样式”），即我们不提供任何自定义样式时所看到的样式，我们的样式只是替换这些默认样式（<a href=\"https://www.iecss.com/\">例如默认 IE 样式</a>）。</p>\n<h3 id=\"形成rendertree\"><a class=\"markdownIt-Anchor\" href=\"#形成rendertree\"></a> 形成RenderTree</h3>\n<p>从DOM树的根节点开始，去匹配对应的CSS样式，然后把CSS样式复制到对应DM节点中，作为DOM节点的属性,如果该节点是DOM根节点,就会形成RenderTree 根节点,渲染过程中遇到<code>display:none</code>的节点,会先不处理他和他的子节点。即不把<code>display:none</code>的节点，加载到RenderTree中</p>\n<h3 id=\"布局layout\"><a class=\"markdownIt-Anchor\" href=\"#布局layout\"></a> 布局(Layout)</h3>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;</code><br />\n布局的宽度应该等于设备的宽度，如果没有可能会采用默认的宽度例如<code>width:100%</code> 会变成<code>980px</code>。</p>\n<p>通过浏览器控制台分析布局事件，如下图是某网页加载过程，可找出事件耗时比较大的过程，分页原因给予优化，优化布局和代码，尽量做到批量布局，避免出现多个布局事件。<br />\n<img src=\"http://blogimage.lemonlife.top/202002222114_253.png?/\" alt=\"RenderTree加载过程\" /></p>\n<h3 id=\"绘制页面paint\"><a class=\"markdownIt-Anchor\" href=\"#绘制页面paint\"></a> 绘制页面(Paint)</h3>\n<p>同上我们可以获取到，网页Paint的过程，可见下图网页主要耗时是渲染层合并的过程(Composite Layers,<a href=\"https://blog.csdn.net/weixin_40581980/article/details/81453283\">了解更多</a>)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002222137_360.png?/\" alt=\"Paint过程图\" /></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\"></a> 最后</h3>\n<p>首先我们接收到HTML(本地或者浏览器)，然后开始解析它，DOM会逐步构建，并非一次性响应。在head中如果发现css和js链接，就会发请求，为了形成RenderTree,所以会先解析CSS形成CSSOM,解析CSS文件的过程会屏蔽JS引擎，相当于给DOM上锁，防止CSS,JS同时修改的现象发生。完成CSSOM会取消屏蔽 JS引擎，然后接收JS,然后执行JS,JavaScript解析完成后，我们就可以继续构建DOM的构建。获取DOM和CSSOM后,  我们将合并二者并构建RenderTree,然后运行布局绘制网页。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002222158_212.png?/\" alt=\"Google习题\" /></p>\n<ul>\n<li>浏览器优化应当讲究，先权衡再优化的发展，因此就需要用Google Devtools 具体分析。</li>\n<li>默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。请务必精简您的 CSS，尽快提供它，并利用媒体类型和查询来解除对渲染的阻塞。在渲染树构建中，我们看到关键渲染路径要求我们同时具有 DOM 和 CSSOM 才能构建渲染树。这会给性能造成严重影响：<strong>HTML 和 CSS 都是阻塞渲染的资源</strong></li>\n</ul>\n<blockquote>\n<p>教程中大多数图片和文字资源来源于Google官网，有条件的同学可以去看看。<a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn\">克服GFW地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关键渲染路径\"><a class=\"markdownIt-Anchor\" href=\"#关键渲染路径\"></a> 关键渲染路径</h3>\n<p>关键渲染路径是指浏览器所经历的一系列步骤。从而将HTML,CSS和JavaScript，转换成屏幕上呈现的像素内容，首先获取HTML并且开始构建文档对象模型(DOM),然后获取CSS构建CSS对象模型(CSSOM),然后将两者结合形成渲染树(Render Tree),然后浏览器根据渲染树知道了每个元素的内容和位置(Layout)。最后渲染引擎将元素绘制在屏幕上(Paint).</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002211149_876.png?/\" alt=\"\" /></p>\n<h3 id=\"构建对象模型html转成dom\"><a class=\"markdownIt-Anchor\" href=\"#构建对象模型html转成dom\"></a> 构建对象模型(HTML转成DOM)</h3>\n<p>浏览器渲染页面要先构建DOM和CSSOM,因此，要尽快将HTML,CSS提供给浏览器。<br><br />\n当我们在浏览器输入 <code>URL</code> 的时候,浏览器会向服务器请求资源拿到HTML等资源，然后拿到的HTML文档头部规定了浏览器按照什么样的规范来处理HTML文``件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 按照Java thymeleaf 模板引擎的规则解析 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 按照xhtml 规则解析 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>每当解析遇到标签,浏览器会生成一个令牌(Token),一开始是标签HTML的令牌 <code>StartTag:HTML</code> ,然后是 <code>StartTag:head</code> ,这一整个流程由Token生成器来完成，当Token生成器在执行这一过程的时候，另一个进程正在消耗这些Token，并将他们转化成节点对象,我们创建了html节点之后消耗下一个令牌创建了head节点，由于head的结束令牌<code>EndTag:head</code>标签,在<code>endTag:html</code>，之前说明 head是html子节点,所以最后所有的Token都消费完的时候，就生成了文档对象模型(DOM,document object model),生成的DOM树表示了HTML的内容和属性，以及各个节点之间的关系。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;style.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Critical Path<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>web performance<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> students!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;awesome-photo.jpg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"http://blogimage.lemonlife.top/202002222033_585.png?/\" alt=\"图片来源Google\" /></p>\n<ol>\n<li>转换： 浏览器从磁盘或网络读取 HTML 的原始字节，并根据文件的指定编码（例如 UTF-8）将它们转换成各个字符。</li>\n<li>令牌化： 浏览器将字符串转换成 W3C HTML5 标准规定的各种令牌，例如，<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code> 以及其他尖括号内的字符串。每个令牌都具有特殊含义和一组规则。</li>\n<li>词法分析： 发出的令牌转换成定义其属性和规则的“对象”。</li>\n<li>DOM 构建： 最后，由于 HTML 标记定义不同标记之间的关系（一些标记包含在其他标记内），创建的对象链接在一个树数据结构内，此结构也会捕获原始标记中定义的父项-子项关系：HTML 对象是 body 对象的父项，body 是 paragraph 对象的父项，依此类推。</li>\n</ol>\n<p><img src=\"http://blogimage.lemonlife.top/202002222035_775.png?/\" alt=\"图片来源Google\" /></p>\n<h3 id=\"生成cssom\"><a class=\"markdownIt-Anchor\" href=\"#生成cssom\"></a> 生成CSSOM</h3>\n<p>浏览器也会根据css规范来解析css,与DOM不同的是css会向下层叠，因此也叫层叠样式表或者层叠样式规则，即子节点可能会继承父节点的一些属性，比如body中定义了字体大小16px。其他的子属性会继承这一大小。而且浏览器解析css过程是阻塞的，浏览器需要解析完所有的css才会使用css样式(和浏览器的回流重绘一样)。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span> &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">font-weight</span>: bold &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">color</span>: red &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> <span class=\"selector-tag\">span</span> &#123; <span class=\"attribute\">display</span>: none &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">float</span>: right &#125;</span><br></pre></td></tr></table></figure>\n<p>与处理 HTML 时一样，我们需要将收到的 CSS 规则转换成某种浏览器能够理解和处理的东西。因此，我们会重复 HTML 过程，不过是为 CSS 而不是 HTML.</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002222037_642.png?/\" alt=\"CSS处理过程\" /></p>\n<p>CSS 字节转换成字符，接着转换成令牌和节点，最后链接到一个称为“CSS 对象模型”(CSSOM) 的树结构内：</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002222038_142.png?/\" alt=\"CSSOM\" /></p>\n<p>CSSOM 为何具有树结构？为页面上的任何对象计算最后一组样式时，浏览器都会先从适用于该节点的最通用规则开始（例如，如果该节点是 body 元素的子项，则应用所有 body 样式），然后通过应用更具体的规则（即规则“向下级联”）以递归方式优化计算的样式。</p>\n<p>以上面的 CSSOM 树为例进行更具体的阐述。span 标记内包含的任何置于 body 元素内的文本都将具有 16 像素字号，并且颜色为红色 — font-size 指令从 body 向下级联至 span。不过，如果某个 span 标记是某个段落 § 标记的子项，则其内容将不会显示。</p>\n<p>还请注意，以上树并非完整的 CSSOM 树，它只显示了我们决定在样式表中替换的样式。每个浏览器都提供一组默认样式（也称为“User Agent 样式”），即我们不提供任何自定义样式时所看到的样式，我们的样式只是替换这些默认样式（<a href=\"https://www.iecss.com/\">例如默认 IE 样式</a>）。</p>\n<h3 id=\"形成rendertree\"><a class=\"markdownIt-Anchor\" href=\"#形成rendertree\"></a> 形成RenderTree</h3>\n<p>从DOM树的根节点开始，去匹配对应的CSS样式，然后把CSS样式复制到对应DM节点中，作为DOM节点的属性,如果该节点是DOM根节点,就会形成RenderTree 根节点,渲染过程中遇到<code>display:none</code>的节点,会先不处理他和他的子节点。即不把<code>display:none</code>的节点，加载到RenderTree中</p>\n<h3 id=\"布局layout\"><a class=\"markdownIt-Anchor\" href=\"#布局layout\"></a> 布局(Layout)</h3>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;</code><br />\n布局的宽度应该等于设备的宽度，如果没有可能会采用默认的宽度例如<code>width:100%</code> 会变成<code>980px</code>。</p>\n<p>通过浏览器控制台分析布局事件，如下图是某网页加载过程，可找出事件耗时比较大的过程，分页原因给予优化，优化布局和代码，尽量做到批量布局，避免出现多个布局事件。<br />\n<img src=\"http://blogimage.lemonlife.top/202002222114_253.png?/\" alt=\"RenderTree加载过程\" /></p>\n<h3 id=\"绘制页面paint\"><a class=\"markdownIt-Anchor\" href=\"#绘制页面paint\"></a> 绘制页面(Paint)</h3>\n<p>同上我们可以获取到，网页Paint的过程，可见下图网页主要耗时是渲染层合并的过程(Composite Layers,<a href=\"https://blog.csdn.net/weixin_40581980/article/details/81453283\">了解更多</a>)</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002222137_360.png?/\" alt=\"Paint过程图\" /></p>\n<h3 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\"></a> 最后</h3>\n<p>首先我们接收到HTML(本地或者浏览器)，然后开始解析它，DOM会逐步构建，并非一次性响应。在head中如果发现css和js链接，就会发请求，为了形成RenderTree,所以会先解析CSS形成CSSOM,解析CSS文件的过程会屏蔽JS引擎，相当于给DOM上锁，防止CSS,JS同时修改的现象发生。完成CSSOM会取消屏蔽 JS引擎，然后接收JS,然后执行JS,JavaScript解析完成后，我们就可以继续构建DOM的构建。获取DOM和CSSOM后,  我们将合并二者并构建RenderTree,然后运行布局绘制网页。</p>\n<p><img src=\"http://blogimage.lemonlife.top/202002222158_212.png?/\" alt=\"Google习题\" /></p>\n<ul>\n<li>浏览器优化应当讲究，先权衡再优化的发展，因此就需要用Google Devtools 具体分析。</li>\n<li>默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。请务必精简您的 CSS，尽快提供它，并利用媒体类型和查询来解除对渲染的阻塞。在渲染树构建中，我们看到关键渲染路径要求我们同时具有 DOM 和 CSSOM 才能构建渲染树。这会给性能造成严重影响：<strong>HTML 和 CSS 都是阻塞渲染的资源</strong></li>\n</ul>\n<blockquote>\n<p>教程中大多数图片和文字资源来源于Google官网，有条件的同学可以去看看。<a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn\">克服GFW地址</a></p>\n</blockquote>\n"},{"title":"二维数组中的查找","date":"2020-01-30T11:09:12.000Z","_content":"\n## 二维数组中的查找\n> 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n## 分析题目\n> 题目属于二维数组,采用两层for循环遍历每一个元素可以判断出是否含有该整数，时间复杂度 O($n^2$)\n\n\n> 根据题目的特点数据每行每列递增;因此可以采用二分法，先确定数据在哪一行，然后再采用二分法确定数据在哪一列，从而确定具体有没有这个数。时间复杂度`O(n+nlog(n))`\n\n## 解决办法\n\n1. 暴力法\n```Java\n    public boolean Find(int target, int [][] array) {\n        boolean result = false;\n        int width = array[0].length; //数组宽度 （列数）\n        int height = array.length;  // 数组高度 （行数）\n        for(int i=0;i<height;i++){\n            for(int j =0;j<width;j++){\n                if(target == array[i][j]){\n                    result = true;\n                        break;\n                }\n            }\n        }\n    return result;\n    }\n```\n2. 二分法\n\n```Java\npublic class Solution {\n    public boolean Find(int target, int [][] array) {\n          \n        boolean result = false;\n        int width = array[0].length; //数组宽度 （列数）\n        if(width == 0){\n            // 空二维数组\n            return false;\n        }\n        for (int[] ints : array) {\n            if (ints[0] <= target && ints[width - 1] >= target) {\n                //数据在第i行\n                /// 2.再确定再哪一列(在这一行内二分查找)\n                int minIndex = 0;\n                int maxIndex = width-1;\n                while (maxIndex - minIndex > 1) {\n                    int middle = (int) Math.floor((minIndex + maxIndex) / 2.0);\n                    if (target > ints[middle]) {\n                        minIndex = middle;\n                    } else {\n                        maxIndex = middle;\n                    }\n                    if (target == ints[middle] || target == ints[minIndex]||target==ints[maxIndex]) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n```\n","source":"_posts/二维数组中的查找.md","raw":"---\ntitle: 二维数组中的查找\ndate: 2020-01-30 19:09:12\ntags:  \n   - 算法与数据结构\n   - 剑指Offer\n---\n\n## 二维数组中的查找\n> 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n## 分析题目\n> 题目属于二维数组,采用两层for循环遍历每一个元素可以判断出是否含有该整数，时间复杂度 O($n^2$)\n\n\n> 根据题目的特点数据每行每列递增;因此可以采用二分法，先确定数据在哪一行，然后再采用二分法确定数据在哪一列，从而确定具体有没有这个数。时间复杂度`O(n+nlog(n))`\n\n## 解决办法\n\n1. 暴力法\n```Java\n    public boolean Find(int target, int [][] array) {\n        boolean result = false;\n        int width = array[0].length; //数组宽度 （列数）\n        int height = array.length;  // 数组高度 （行数）\n        for(int i=0;i<height;i++){\n            for(int j =0;j<width;j++){\n                if(target == array[i][j]){\n                    result = true;\n                        break;\n                }\n            }\n        }\n    return result;\n    }\n```\n2. 二分法\n\n```Java\npublic class Solution {\n    public boolean Find(int target, int [][] array) {\n          \n        boolean result = false;\n        int width = array[0].length; //数组宽度 （列数）\n        if(width == 0){\n            // 空二维数组\n            return false;\n        }\n        for (int[] ints : array) {\n            if (ints[0] <= target && ints[width - 1] >= target) {\n                //数据在第i行\n                /// 2.再确定再哪一列(在这一行内二分查找)\n                int minIndex = 0;\n                int maxIndex = width-1;\n                while (maxIndex - minIndex > 1) {\n                    int middle = (int) Math.floor((minIndex + maxIndex) / 2.0);\n                    if (target > ints[middle]) {\n                        minIndex = middle;\n                    } else {\n                        maxIndex = middle;\n                    }\n                    if (target == ints[middle] || target == ints[minIndex]||target==ints[maxIndex]) {\n                        result = true;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n```\n","slug":"二维数组中的查找","published":1,"updated":"2021-08-07T01:59:03.351Z","_id":"cl4ince73002kcguf8ozw32h2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"二维数组中的查找\"><a class=\"markdownIt-Anchor\" href=\"#二维数组中的查找\"></a> 二维数组中的查找</h2>\n<blockquote>\n<p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n</blockquote>\n<h2 id=\"分析题目\"><a class=\"markdownIt-Anchor\" href=\"#分析题目\"></a> 分析题目</h2>\n<blockquote>\n<p>题目属于二维数组,采用两层for循环遍历每一个元素可以判断出是否含有该整数，时间复杂度 O(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>)</p>\n</blockquote>\n<blockquote>\n<p>根据题目的特点数据每行每列递增;因此可以采用二分法，先确定数据在哪一行，然后再采用二分法确定数据在哪一列，从而确定具体有没有这个数。时间复杂度<code>O(n+nlog(n))</code></p>\n</blockquote>\n<h2 id=\"解决办法\"><a class=\"markdownIt-Anchor\" href=\"#解决办法\"></a> 解决办法</h2>\n<ol>\n<li>暴力法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Find</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span> [][] array)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>].length; <span class=\"comment\">//数组宽度 （列数）</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> array.length;  <span class=\"comment\">// 数组高度 （行数）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;height;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;j&lt;width;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target == array[i][j])&#123;</span><br><span class=\"line\">                result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>二分法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Find</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span> [][] array)</span> &#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>].length; <span class=\"comment\">//数组宽度 （列数）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(width == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空二维数组</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] ints : array) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ints[<span class=\"number\">0</span>] &lt;= target &amp;&amp; ints[width - <span class=\"number\">1</span>] &gt;= target) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//数据在第i行</span></span><br><span class=\"line\">                <span class=\"comment\">/// 2.再确定再哪一列(在这一行内二分查找)</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">minIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">maxIndex</span> <span class=\"operator\">=</span> width-<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (maxIndex - minIndex &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">middle</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) Math.floor((minIndex + maxIndex) / <span class=\"number\">2.0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (target &gt; ints[middle]) &#123;</span><br><span class=\"line\">                        minIndex = middle;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        maxIndex = middle;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (target == ints[middle] || target == ints[minIndex]||target==ints[maxIndex]) &#123;</span><br><span class=\"line\">                        result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"二维数组中的查找\"><a class=\"markdownIt-Anchor\" href=\"#二维数组中的查找\"></a> 二维数组中的查找</h2>\n<blockquote>\n<p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n</blockquote>\n<h2 id=\"分析题目\"><a class=\"markdownIt-Anchor\" href=\"#分析题目\"></a> 分析题目</h2>\n<blockquote>\n<p>题目属于二维数组,采用两层for循环遍历每一个元素可以判断出是否含有该整数，时间复杂度 O(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>)</p>\n</blockquote>\n<blockquote>\n<p>根据题目的特点数据每行每列递增;因此可以采用二分法，先确定数据在哪一行，然后再采用二分法确定数据在哪一列，从而确定具体有没有这个数。时间复杂度<code>O(n+nlog(n))</code></p>\n</blockquote>\n<h2 id=\"解决办法\"><a class=\"markdownIt-Anchor\" href=\"#解决办法\"></a> 解决办法</h2>\n<ol>\n<li>暴力法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Find</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span> [][] array)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>].length; <span class=\"comment\">//数组宽度 （列数）</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">height</span> <span class=\"operator\">=</span> array.length;  <span class=\"comment\">// 数组高度 （行数）</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;height;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;j&lt;width;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target == array[i][j])&#123;</span><br><span class=\"line\">                result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>二分法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Find</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span> [][] array)</span> &#123;</span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>].length; <span class=\"comment\">//数组宽度 （列数）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(width == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空二维数组</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] ints : array) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ints[<span class=\"number\">0</span>] &lt;= target &amp;&amp; ints[width - <span class=\"number\">1</span>] &gt;= target) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//数据在第i行</span></span><br><span class=\"line\">                <span class=\"comment\">/// 2.再确定再哪一列(在这一行内二分查找)</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">minIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">maxIndex</span> <span class=\"operator\">=</span> width-<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (maxIndex - minIndex &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">middle</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) Math.floor((minIndex + maxIndex) / <span class=\"number\">2.0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (target &gt; ints[middle]) &#123;</span><br><span class=\"line\">                        minIndex = middle;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        maxIndex = middle;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (target == ints[middle] || target == ints[minIndex]||target==ints[maxIndex]) &#123;</span><br><span class=\"line\">                        result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"从尾到头打印链表","date":"2020-01-31T16:52:15.000Z","_content":"## 从尾到头打印链表\n> 输入一个链表，按链表从尾到头的顺序返回一个ArrayList。\n```Java\n/** 链表节点\n*    public class ListNode {\n*        int val;\n*        ListNode next = null;\n*\n*        ListNode(int val) {\n*            this.val = val;\n*        }\n*    }\n*/\n```\n## 分析题目\n![链表结构示意图](http://blogimage.lemonlife.top/202002010106_129.png?/)\n\n> 链表一种基础的数据结构,从尾到头就是反向遍历链表,通过链表头依次可访问到后继节点，即可得到链表的顺序结构的值。把结果依次存入栈中，再弹出即可得到反向链表值。\n\n## 解决办法\n- Java 代码\n  \n```Java\nimport java.util.ArrayList;\nimport java.util.Stack;\n\npublic class Solution {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        if(listNode == null){\n            return arrayList;\n       }\n        Stack<Integer> stack = new Stack<>();\n        while (listNode.next != null){\n            stack.push(listNode.val);\n            listNode = listNode.next;\n        }\n        stack.push(listNode.val);\n        while (!stack.isEmpty()){\n           arrayList.add(stack.pop());\n        }\n        return arrayList;\n    }\n}\n```\n\n- JavaScript 代码\n\n> JS下面代码`array2`的作用，也可以采用 `unshift` 方法代替。多用一个数组变量，空间复杂度高一点。但是比采用`unshift`函数时间复杂度略低。\n\n```JavaScript\nfunction printListFromTailToHead(head)\n{    \n    let list = head\n    if(list == null){\n        return [];\n    }\n    let array1 = []\n    let array2 = []\n    while(list.next != null){\n        array1.push(list.val)\n        list = list.next\n    }\n    array1.push(list.val)\n    while(array1.length != 0){\n        array2.push(array1.pop())\n    }\n    return array2\n}\n```","source":"_posts/从尾到头打印链表.md","raw":"---\ntitle: 从尾到头打印链表\ndate: 2020-02-01 00:52:15\ntags:  \n   - 算法与数据结构\n   - 剑指Offer\n---\n## 从尾到头打印链表\n> 输入一个链表，按链表从尾到头的顺序返回一个ArrayList。\n```Java\n/** 链表节点\n*    public class ListNode {\n*        int val;\n*        ListNode next = null;\n*\n*        ListNode(int val) {\n*            this.val = val;\n*        }\n*    }\n*/\n```\n## 分析题目\n![链表结构示意图](http://blogimage.lemonlife.top/202002010106_129.png?/)\n\n> 链表一种基础的数据结构,从尾到头就是反向遍历链表,通过链表头依次可访问到后继节点，即可得到链表的顺序结构的值。把结果依次存入栈中，再弹出即可得到反向链表值。\n\n## 解决办法\n- Java 代码\n  \n```Java\nimport java.util.ArrayList;\nimport java.util.Stack;\n\npublic class Solution {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        if(listNode == null){\n            return arrayList;\n       }\n        Stack<Integer> stack = new Stack<>();\n        while (listNode.next != null){\n            stack.push(listNode.val);\n            listNode = listNode.next;\n        }\n        stack.push(listNode.val);\n        while (!stack.isEmpty()){\n           arrayList.add(stack.pop());\n        }\n        return arrayList;\n    }\n}\n```\n\n- JavaScript 代码\n\n> JS下面代码`array2`的作用，也可以采用 `unshift` 方法代替。多用一个数组变量，空间复杂度高一点。但是比采用`unshift`函数时间复杂度略低。\n\n```JavaScript\nfunction printListFromTailToHead(head)\n{    \n    let list = head\n    if(list == null){\n        return [];\n    }\n    let array1 = []\n    let array2 = []\n    while(list.next != null){\n        array1.push(list.val)\n        list = list.next\n    }\n    array1.push(list.val)\n    while(array1.length != 0){\n        array2.push(array1.pop())\n    }\n    return array2\n}\n```","slug":"从尾到头打印链表","published":1,"updated":"2021-08-07T01:59:03.351Z","_id":"cl4ince73002ncgufcxpp8rfr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"从尾到头打印链表\"><a class=\"markdownIt-Anchor\" href=\"#从尾到头打印链表\"></a> 从尾到头打印链表</h2>\n<blockquote>\n<p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 链表节点</span></span><br><span class=\"line\"><span class=\"comment\">*    public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*        int val;</span></span><br><span class=\"line\"><span class=\"comment\">*        ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*        ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*            this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">*        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分析题目\"><a class=\"markdownIt-Anchor\" href=\"#分析题目\"></a> 分析题目</h2>\n<p><img src=\"http://blogimage.lemonlife.top/202002010106_129.png?/\" alt=\"链表结构示意图\" /></p>\n<blockquote>\n<p>链表一种基础的数据结构,从尾到头就是反向遍历链表,通过链表头依次可访问到后继节点，即可得到链表的顺序结构的值。把结果依次存入栈中，再弹出即可得到反向链表值。</p>\n</blockquote>\n<h2 id=\"解决办法\"><a class=\"markdownIt-Anchor\" href=\"#解决办法\"></a> 解决办法</h2>\n<ul>\n<li>Java 代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">printListFromTailToHead</span><span class=\"params\">(ListNode listNode)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; arrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(listNode == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arrayList;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (listNode.next != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(listNode.val);</span><br><span class=\"line\">            listNode = listNode.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stack.push(listNode.val);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty())&#123;</span><br><span class=\"line\">           arrayList.add(stack.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JavaScript 代码</li>\n</ul>\n<blockquote>\n<p>JS下面代码<code>array2</code>的作用，也可以采用 <code>unshift</code> 方法代替。多用一个数组变量，空间复杂度高一点。但是比采用<code>unshift</code>函数时间复杂度略低。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printListFromTailToHead</span>(<span class=\"params\">head</span>)</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = head</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> array1 = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> array2 = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(list.<span class=\"property\">next</span> != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        array1.<span class=\"title function_\">push</span>(list.<span class=\"property\">val</span>)</span><br><span class=\"line\">        list = list.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    array1.<span class=\"title function_\">push</span>(list.<span class=\"property\">val</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(array1.<span class=\"property\">length</span> != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        array2.<span class=\"title function_\">push</span>(array1.<span class=\"title function_\">pop</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"从尾到头打印链表\"><a class=\"markdownIt-Anchor\" href=\"#从尾到头打印链表\"></a> 从尾到头打印链表</h2>\n<blockquote>\n<p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 链表节点</span></span><br><span class=\"line\"><span class=\"comment\">*    public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*        int val;</span></span><br><span class=\"line\"><span class=\"comment\">*        ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*        ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*            this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">*        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"分析题目\"><a class=\"markdownIt-Anchor\" href=\"#分析题目\"></a> 分析题目</h2>\n<p><img src=\"http://blogimage.lemonlife.top/202002010106_129.png?/\" alt=\"链表结构示意图\" /></p>\n<blockquote>\n<p>链表一种基础的数据结构,从尾到头就是反向遍历链表,通过链表头依次可访问到后继节点，即可得到链表的顺序结构的值。把结果依次存入栈中，再弹出即可得到反向链表值。</p>\n</blockquote>\n<h2 id=\"解决办法\"><a class=\"markdownIt-Anchor\" href=\"#解决办法\"></a> 解决办法</h2>\n<ul>\n<li>Java 代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">printListFromTailToHead</span><span class=\"params\">(ListNode listNode)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; arrayList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(listNode == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arrayList;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (listNode.next != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(listNode.val);</span><br><span class=\"line\">            listNode = listNode.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stack.push(listNode.val);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty())&#123;</span><br><span class=\"line\">           arrayList.add(stack.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arrayList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JavaScript 代码</li>\n</ul>\n<blockquote>\n<p>JS下面代码<code>array2</code>的作用，也可以采用 <code>unshift</code> 方法代替。多用一个数组变量，空间复杂度高一点。但是比采用<code>unshift</code>函数时间复杂度略低。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printListFromTailToHead</span>(<span class=\"params\">head</span>)</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = head</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(list == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> array1 = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> array2 = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(list.<span class=\"property\">next</span> != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        array1.<span class=\"title function_\">push</span>(list.<span class=\"property\">val</span>)</span><br><span class=\"line\">        list = list.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    array1.<span class=\"title function_\">push</span>(list.<span class=\"property\">val</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(array1.<span class=\"property\">length</span> != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        array2.<span class=\"title function_\">push</span>(array1.<span class=\"title function_\">pop</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Webpack教程~基础篇","date":"2020-02-23T06:30:31.000Z","_content":"### 基础概念\n[官网安装方式](https://webpack.docschina.org/guides/installation/)\n\n通过官网的指引安装好webpack,在项目根目录添加 `webpack.config.js` 的文件.\n`webpack.config.js` 遵循的是 `commonJS` 规范,依次文件采用 `module.exports={[key]:[value]}` 的方式,来暴露具体的配置。\n\n一个基本的webpack配置如下\n```js\nmodule.exports = {\n  entry: \"[xxx].js\",\n  output: {\n    filename: 'xxxx.js',\n    path: resolve(__dirname, 'xxx')\n  },\n  module: {\n    rules: [\n      {[key]:[value]}\n    ]\n  },\n  plugins: [\n    new PluginsName()\n  ],\n  mode: 'production | development'\n}\n```\n\n[官网基础概念](https://webpack.docschina.org/concepts/)\n#### Entry\n指定webpack,打包的起始文件，根据此文件分析构建依赖关系图。\n\n入口文件，可配置一个，也可以 `{[key]:[value]}` 的形式配置多个\n\n#### Output\n指示webpack打包后的资源，输出到哪里去，以及如何命名。\n\noutput的值是一个对象，指定了输出文件名，和文件路径，输出文件建议使用 path模块中的resolve即 `resolve(__dirname,xxx)`\n\n在webpack中输出的文件名，如果你不想指定，可以取使用`[hash].扩展名`的形式，webpack在输出的时候，会自动指定hash值。\n\n#### Loader\n\nWebpack去处理那些非`Javascript`文件。(webpack本身只处理js和json数据)\n\n对应webpack的字段是 `module`,里面指定了webpack各种的loader配置。形如\n```json\n  module: {\n    rules: [\n      {[key]:[value]}\n    ]\n  },\n```\nrules中的每一个对象，对应着一个处理某个文件的模块，为了处理某种文件，我们需要配置，匹配这个文件的正则表达式,形如 `test:/具体正则表达式/` ，和通过 `use:[loader-name]` 的形式指定 多个loader,如：处理css 文件，我们需要 `style-loader` 和 `css-loader` 。甚至有时候use数组里面，不只是 各个loader的名称，可能还需要修改一些loader的配置，就会采取对象的形式指定loader，如给css添加兼容性处理的情景\n\n同一文件各种loader的处理顺序是自下而上的,css文件配置如下,文件会先经过 `css-loader` 处理,再经过`style-loader`处理。\n\n```json\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          'css-loader',\n        ]\n      }\n    ]\n  },\n```\n上面引入的两种loader都是直接通过loader名称的形式引入的，按照对象的方式引入postcss-loader，对css做兼容性处理。\n\n```json\n  {\n    test: /\\.css$/,\n    use: [\n      'style-loader'\n      'css-loader',\n      {\n        loader: 'postcss-loader',\n        options: {\n          ident: 'postcss',\n          plugins: () => {\n            require('postcss-preset-env')\n          }\n        }\n      }\n    ]\n  },\n```\n当然最后要注意的是，这些loader都不是webpack，内置的，而是需要 通过npm 安装。具体的插件安装可看官网。建议大家和webpack有关的都安装在  `devDependencies` 下 。\n\n#### Plugins\n各种功能强大的工具，包括打包优化和压缩，甚至可以重新定义环境中的变量。插件相比于Loader可以做很多比Loader功能更强大的事。\n\n插件和loader相同的是都需要先npm安装，不同的是，loader不需要引入，但是要在use里面写一些配置。而插件则是通过，先require 引入某个插件，然后再在plugins,实例化引入的插件对象即可。如果需要修改插件的默认配置，在实例化的时候，以对象的形式传入即可。\n\nhtml 模板插件使用如下\n```js\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  entry: '......',\n  output:'......',\n  module:'......',\n  plugins: [\n    // 实例化require引入的插件 html-webpack-plugin\n    //指定传入的HTML模板是src目录下的index.html文件\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: '.....'\n}\n```\n\n#### Mode\n模式分为 `development`开发环境，`production` 生产环境。\n这大概是webpack最简洁的配置了，在`production` 模式下，会自动开启压缩js代码和 `tree shaking` 。\n\n在未来的 webpack5中,只有在 `webpack.config.js` 文件中指定一个mode,就可以使用，上面的 `entry,output` 等配置,都变成了默认配置。\n\n### webpack打包过程\n1. 指定入口文件 entry\n2. webpack会根据入口文件里面所有的依赖,形成依赖树，然后会根据依赖树中把所以需要的依赖引入，形成代码块(chunk),然后再根据不同的资源对应的loader,对代码块进行处理输出为 `bundles`.\n   \n\n### 处理css、less\n```bash\nnpm install style-loader css-loader  -D\n```\n其中 css-loader 是为了把 css 文件变成commonJS模块，加载到JS中，style-loader是为了在JS解析的时候能创建style标签,把样式整合到style标签中，插入浏览器的head。\n\n默认是有多少css，less 文件就会插入多少style标签，每个标签就是对应的css代码。\n\n```bash\nnpm install less-loader -D \n```\n安装less-loader处理less文件，注意loader在代码里面配置顺序是固定的，less文件必须要经过less-loader处理，才能被css-loader识别，同理最后才能被style-loader处理。\n\n```\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          // 从下到上运行loader\n          // 创建style标签，将js资源插入，添加到head生效\n          'style-loader',\n          // 将css 文件变成commonjs 模块加载到js中，里面内容 是样式字符串。\n          'css-loader',\n        ]\n      },\n      {\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          'less-loader'\n        ]\n      }\n    ]\n```\n\n把css,less文件提取合并，并且压缩一下形成单独的css,再通过link标签引入。目的是为了把css尽快的提供给浏览器，而不是放在js中，导致浏览器需要先解析js才能获取css,[具体原因见博客~浏览器](http://lemonlife.top/2020/02/23/web-fundamentals-optimize/),需要使用插件 mini-css-extract-plugin \n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\n```\n把css文件和less文件配置中的,style-loader都替换成 `MiniCssExtractPlugin.loader`,在plugins中实例化插件并且制定输出文件路径,完整配置如下\n\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    filename: 'js/build.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n        ]\n      },\n      {\n        test: /\\.less$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n          'less-loader'\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/public/index.html'\n    }),\n    // [hash:10]制定文件名称取哈希值的前10位\n    new MiniCssExtractPlugin({\n      filename:\"css/[hash:10].css\"\n    })\n  ],\n  mode: 'development'\n}\n```\n压缩css,感觉就是去掉了css文件中的，空格注释，也可能去掉了一些写重复的样式吧，反正就是为了减少文件体积加快网络传输速度。需要用到插件`optimize-css-assets-webpack-plugin`\n\n```bash\nnpm install optimize-css-assets-webpack-plugin -D\n```\n这个插件使用比较简单了,一样需要引入\n\n`const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')`\n\n```\n....\n  plugins: [\n    ....,\n    new OptimizeCssAssetsWebpackPlugin()\n  ]\n.... \n```\n### 处理HTML、图片、其他静态资源\n```bash\nnpm install html-webpack-plugin -D\n```\n处理HTML文件需要使用 `html-webpack-plugin`,在plugins中实例化的时候，指定一下使用的模板，webpack会把输出的js通过script标签自动引入HTML中。\n\n```js\n// webpack处理 HTML\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    filename: '/js/build.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      //指定 src下的index.html 为HTML基础模板。\n      template: './src/index.html'\n    })\n  ],\n  mode: 'development'\n}\n```\n处理图片资源的时候使用的是loader名称是`url-loader`,没有photo-loader😁😁😁,当然还要下载file-loader,因为url-loader依赖于file-loader\n\n```bash\nnpm install file-loader url-loader -D\n```\n具体配置如下，可以解决commonJS import 图片资源，和css,less文件中url里面引用图片资源的问题。\n```json\n{\n  test: /\\.(jpg|png|gif|jpeg)$/,\n  loader: 'url-loader',\n  options: {\n    // 图片小于8kb时候会被base64处理\n    limit: 8 * 1024,\n    // 给图片重新命名\n    // ext 图片原来扩展名称\n    name:'[hash:10].[ext]'\n  }\n},\n```\n如果还要处理HTML模板中引入图片的问题还需要使用 `html-loader`，\n此时要注意修改一下之前url-loader的配置,因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs,解析时会出问题：[object Module],需要在url-loader配置文件中，关闭url-loader的es6模块化，使用commonjs解析\n```\nnpm install html-loader -D\n```\n\n```json\n{\n  test: /\\.(jpg|png|gif|jpeg)$/,\n  loader: 'url-loader',\n  options: {\n    limit: 8 * 1024,\n    // 解决：关闭url-loader的es6模块化，使用commonjs解析\n    esModule: false,\n    name:'[hash:10].[ext]'\n  },\n\n},\n{\n  test: /\\.html$/,\n  loader: 'html-loader'\n}\n```\n处理其他静态资源，比如字体图标文件等,需要安装file-loader,在之前安装url-loader的时候已经安装过file-loader了\n\n```json\n{\n   // exclude 排除 前面被处理过的 css/js/html资源\n   // 其他文件一律交给file-loader处理。\n  exclude: /\\.(css|js|html|less)$/,\n  loader: 'file-loader',\n  options: {\n    name: '[hash:10].[ext]',\n    // 指定其他资源都输出到static目录下\n    outputPath: 'static'\n  }\n}\n```\n### css兼容性处理\n面试的时候经常会被问到，浏览器兼容性问题，作为一个学生，目前我开发都是使用Chrome和Firefox，处理浏览器兼容性问题，也就是webpack配置一下。\n兼容css需要用插件postcss-loader,和插件的的配置postcss-preset-env(当然也可采用,autoprefixer规则取代postcss-preset-env规则)\n```bash\nnpm install postcss-loader postcss-preset-env -D\n```\n安装好插件，如果业务场景浏览器确定，可采用中 `package.json` 增加`browserslist`,来确定具体浏览器,至于browserslist的配置文件可看[github](https://github.com/browserslist/browserslist)\n\n其中`development`,`production` 是指NodeJS环境(`process.env.NODE_ENV `),默认是production,而非webpack指定的mode。\n```json\n{\n  \"xxx\":\"xxx\",\n  \"devDependencies\": \"xxxx\",\n  \"browserslist\": {\n    \"development\": [\n      \"last 1 version\",\n      \"> 1%\",\n      \"IE 10\"\n    ],\n    \"production\": [\n      \"> 0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ]\n  }\n}\n```\n具体配置如下\n```js\nconst miniCssExtractPlugin = require('mini-css-extract-plugin')\n//指定node环境为 development\nprocess.env.NODE_ENV = 'development'\nmodule.exports = {\n  entry: \"...\",\n  output: \"....\",\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          miniCssExtractPlugin.loader,\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: (loader) => [\n                //也可以采用\n                // require('postcss-preset-env')()\n                require('autoprefixer')()\n              ]\n            }\n          }\n        ]\n      },\n    ]\n  },\n  plugins:\".....\",\n  mode: '.....'\n}\n```\n### devServer\n配置devServer,相当于本地运行了一个NodeJS后来服务,需要安装插件`webpack-dev-server`,此时webpack编译的结果不会输出在我们指定的目录下，因为dev-server不输出文件，可以想象成文件放内存中，node服务可以访问到，因此我们手动刷新浏览器可以看到正确结果。\n```\nnpm install webpack-dev-server -D\n```\n```js\nmodule.exports = {\n  ....,\n  mode: '.....',\n  devServer: {\n    // 项目构建后路径\n    contentBase: resolve(__dirname, 'build'),\n    // 启动gzip压缩\n    compress: true,\n    // 端口号\n    port: 3000,\n    // 自动打开浏览器\n    open: true\n  }\n};\n```\n\n此时我建议在 `package.json` 的 `script` 脚本中写入两条脚本，分别用于之前的打包模式和开启devServer 模式\n\n```json\n{\n  ....,\n  \"scripts\": {\n    ....,\n    \"build\": \"webpack\",\n    \"build:prod\": \"webpack --mode=production\",\n    \"dev\": \"webpack-dev-server --open\",\n  },\n  ....\n}\n```\n通过运行 `npm run build` 或者`npm run build:prod` 获取之前类似的输出，`npm run dev` 开启webpack服务,此时还不支持热更新和自动刷新浏览器，需要手动刷新，才能看到结果。\n\n> 更多devServer看 [官网配置](https://www.webpackjs.com/configuration/dev-server/)\n\n###  Javascript代码兼容性\n前面配置了css代码的兼容性处理，但是JS代码其实更需要兼容，JS不兼容可能就是无法运行。处理JS兼容当然就是`babel`家族。[babel官网](https://www.babeljs.cn/)\n\n```\nnpm install @babel/cli @babel/core @babel/preset-env babel-loader -D\n\nnpm install @babel/plugin-transform-runtime  -D \n\nnpm install @babel/plugin-proposal-class-properties -D\n\nnpm install @babel/runtime @babel/runtime-corejs2 --save\n```\n在项目根目录编写 `babel.config.js` 文件,写入如下配置\n```js\nmodule.exports = {\n  \"presets\": [\n       [\n         \"@babel/preset-env\",\n         //指定要兼容的浏览器，以及版本\n         \"targets\": {\n          \"esmodules\": true,\n          \"chrome\": '60',\n          \"firefox\": '60',\n          \"ie\": '9',\n          \"safari\": '10',\n           \"edge\": '17'\n          }\n        ]\n    ],\n  \"plugins\": [\n    [\"@babel/plugin-transform-runtime\", {\n      \"corejs\": 2,\n    }],\n    \"@babel/transform-arrow-functions\",\n    \"@babel/plugin-proposal-class-properties\"\n  ]\n}\n```\n在webpack.config.js中用babel处理js\n\n```js\nmodule.exports={\n  entry:\"....\",\n  output:\"....\",\n  module:{\n    rules:[\n      { \n        // 匹配js和jsx文件\n        test: /\\.tsx?$/,\n        use: [\"babel-loader\"],\n        //排除node_modules里面的文件\n        // 防止babel编译了，node_modules里面代码包。\n        exclude: [join(__dirname, \"node_modules\")]\n      }\n    ]\n  },\n}\n\n```\n上面的babel配置 (我用的是[babel7](https://babeljs.io/docs/en/v7-migration)的配置) 是我上次配置ts的，不知道会不会出错，应该没有问题， `presets` 里面指定了`target`, `core-js` 部分没问题，应该就可以兼容ie。\n\n> 我认为 webpack最好的教程是来源与官网，这是我看了官网和网上找的一些视频教程之后总结的一些基础操作，详细的配置可看 [webpack官网~中文](https://webpack.docschina.org/)，本文中部分文字来源于尚硅谷的视频，感谢尚硅谷老师的分享。【这不是广告只是为了声明版权😂】\n\n>以上差不多就是 webpack的一些基本操作了,后面打算把webpack配置优化部分也补上，然后自己封装一个脚手架，再加上一些ESLint的配置,欢迎大家持续关注 [**http://lemonlife.top**](http://lemonlife.top/) 最近有点忙/(ㄒoㄒ)/~~","source":"_posts/webpack.md","raw":"---\ntitle: Webpack教程~基础篇\ndate: 2020-02-23 14:30:31\ntags:\n  - 前端\n  - webpack\n---\n### 基础概念\n[官网安装方式](https://webpack.docschina.org/guides/installation/)\n\n通过官网的指引安装好webpack,在项目根目录添加 `webpack.config.js` 的文件.\n`webpack.config.js` 遵循的是 `commonJS` 规范,依次文件采用 `module.exports={[key]:[value]}` 的方式,来暴露具体的配置。\n\n一个基本的webpack配置如下\n```js\nmodule.exports = {\n  entry: \"[xxx].js\",\n  output: {\n    filename: 'xxxx.js',\n    path: resolve(__dirname, 'xxx')\n  },\n  module: {\n    rules: [\n      {[key]:[value]}\n    ]\n  },\n  plugins: [\n    new PluginsName()\n  ],\n  mode: 'production | development'\n}\n```\n\n[官网基础概念](https://webpack.docschina.org/concepts/)\n#### Entry\n指定webpack,打包的起始文件，根据此文件分析构建依赖关系图。\n\n入口文件，可配置一个，也可以 `{[key]:[value]}` 的形式配置多个\n\n#### Output\n指示webpack打包后的资源，输出到哪里去，以及如何命名。\n\noutput的值是一个对象，指定了输出文件名，和文件路径，输出文件建议使用 path模块中的resolve即 `resolve(__dirname,xxx)`\n\n在webpack中输出的文件名，如果你不想指定，可以取使用`[hash].扩展名`的形式，webpack在输出的时候，会自动指定hash值。\n\n#### Loader\n\nWebpack去处理那些非`Javascript`文件。(webpack本身只处理js和json数据)\n\n对应webpack的字段是 `module`,里面指定了webpack各种的loader配置。形如\n```json\n  module: {\n    rules: [\n      {[key]:[value]}\n    ]\n  },\n```\nrules中的每一个对象，对应着一个处理某个文件的模块，为了处理某种文件，我们需要配置，匹配这个文件的正则表达式,形如 `test:/具体正则表达式/` ，和通过 `use:[loader-name]` 的形式指定 多个loader,如：处理css 文件，我们需要 `style-loader` 和 `css-loader` 。甚至有时候use数组里面，不只是 各个loader的名称，可能还需要修改一些loader的配置，就会采取对象的形式指定loader，如给css添加兼容性处理的情景\n\n同一文件各种loader的处理顺序是自下而上的,css文件配置如下,文件会先经过 `css-loader` 处理,再经过`style-loader`处理。\n\n```json\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          'css-loader',\n        ]\n      }\n    ]\n  },\n```\n上面引入的两种loader都是直接通过loader名称的形式引入的，按照对象的方式引入postcss-loader，对css做兼容性处理。\n\n```json\n  {\n    test: /\\.css$/,\n    use: [\n      'style-loader'\n      'css-loader',\n      {\n        loader: 'postcss-loader',\n        options: {\n          ident: 'postcss',\n          plugins: () => {\n            require('postcss-preset-env')\n          }\n        }\n      }\n    ]\n  },\n```\n当然最后要注意的是，这些loader都不是webpack，内置的，而是需要 通过npm 安装。具体的插件安装可看官网。建议大家和webpack有关的都安装在  `devDependencies` 下 。\n\n#### Plugins\n各种功能强大的工具，包括打包优化和压缩，甚至可以重新定义环境中的变量。插件相比于Loader可以做很多比Loader功能更强大的事。\n\n插件和loader相同的是都需要先npm安装，不同的是，loader不需要引入，但是要在use里面写一些配置。而插件则是通过，先require 引入某个插件，然后再在plugins,实例化引入的插件对象即可。如果需要修改插件的默认配置，在实例化的时候，以对象的形式传入即可。\n\nhtml 模板插件使用如下\n```js\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  entry: '......',\n  output:'......',\n  module:'......',\n  plugins: [\n    // 实例化require引入的插件 html-webpack-plugin\n    //指定传入的HTML模板是src目录下的index.html文件\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  mode: '.....'\n}\n```\n\n#### Mode\n模式分为 `development`开发环境，`production` 生产环境。\n这大概是webpack最简洁的配置了，在`production` 模式下，会自动开启压缩js代码和 `tree shaking` 。\n\n在未来的 webpack5中,只有在 `webpack.config.js` 文件中指定一个mode,就可以使用，上面的 `entry,output` 等配置,都变成了默认配置。\n\n### webpack打包过程\n1. 指定入口文件 entry\n2. webpack会根据入口文件里面所有的依赖,形成依赖树，然后会根据依赖树中把所以需要的依赖引入，形成代码块(chunk),然后再根据不同的资源对应的loader,对代码块进行处理输出为 `bundles`.\n   \n\n### 处理css、less\n```bash\nnpm install style-loader css-loader  -D\n```\n其中 css-loader 是为了把 css 文件变成commonJS模块，加载到JS中，style-loader是为了在JS解析的时候能创建style标签,把样式整合到style标签中，插入浏览器的head。\n\n默认是有多少css，less 文件就会插入多少style标签，每个标签就是对应的css代码。\n\n```bash\nnpm install less-loader -D \n```\n安装less-loader处理less文件，注意loader在代码里面配置顺序是固定的，less文件必须要经过less-loader处理，才能被css-loader识别，同理最后才能被style-loader处理。\n\n```\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          // 从下到上运行loader\n          // 创建style标签，将js资源插入，添加到head生效\n          'style-loader',\n          // 将css 文件变成commonjs 模块加载到js中，里面内容 是样式字符串。\n          'css-loader',\n        ]\n      },\n      {\n        test: /\\.less$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          'less-loader'\n        ]\n      }\n    ]\n```\n\n把css,less文件提取合并，并且压缩一下形成单独的css,再通过link标签引入。目的是为了把css尽快的提供给浏览器，而不是放在js中，导致浏览器需要先解析js才能获取css,[具体原因见博客~浏览器](http://lemonlife.top/2020/02/23/web-fundamentals-optimize/),需要使用插件 mini-css-extract-plugin \n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\n```\n把css文件和less文件配置中的,style-loader都替换成 `MiniCssExtractPlugin.loader`,在plugins中实例化插件并且制定输出文件路径,完整配置如下\n\n```js\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    filename: 'js/build.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n        ]\n      },\n      {\n        test: /\\.less$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n          'less-loader'\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/public/index.html'\n    }),\n    // [hash:10]制定文件名称取哈希值的前10位\n    new MiniCssExtractPlugin({\n      filename:\"css/[hash:10].css\"\n    })\n  ],\n  mode: 'development'\n}\n```\n压缩css,感觉就是去掉了css文件中的，空格注释，也可能去掉了一些写重复的样式吧，反正就是为了减少文件体积加快网络传输速度。需要用到插件`optimize-css-assets-webpack-plugin`\n\n```bash\nnpm install optimize-css-assets-webpack-plugin -D\n```\n这个插件使用比较简单了,一样需要引入\n\n`const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')`\n\n```\n....\n  plugins: [\n    ....,\n    new OptimizeCssAssetsWebpackPlugin()\n  ]\n.... \n```\n### 处理HTML、图片、其他静态资源\n```bash\nnpm install html-webpack-plugin -D\n```\n处理HTML文件需要使用 `html-webpack-plugin`,在plugins中实例化的时候，指定一下使用的模板，webpack会把输出的js通过script标签自动引入HTML中。\n\n```js\n// webpack处理 HTML\nconst { resolve } = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    filename: '/js/build.js',\n    path: resolve(__dirname, 'build')\n  },\n  module: {\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      //指定 src下的index.html 为HTML基础模板。\n      template: './src/index.html'\n    })\n  ],\n  mode: 'development'\n}\n```\n处理图片资源的时候使用的是loader名称是`url-loader`,没有photo-loader😁😁😁,当然还要下载file-loader,因为url-loader依赖于file-loader\n\n```bash\nnpm install file-loader url-loader -D\n```\n具体配置如下，可以解决commonJS import 图片资源，和css,less文件中url里面引用图片资源的问题。\n```json\n{\n  test: /\\.(jpg|png|gif|jpeg)$/,\n  loader: 'url-loader',\n  options: {\n    // 图片小于8kb时候会被base64处理\n    limit: 8 * 1024,\n    // 给图片重新命名\n    // ext 图片原来扩展名称\n    name:'[hash:10].[ext]'\n  }\n},\n```\n如果还要处理HTML模板中引入图片的问题还需要使用 `html-loader`，\n此时要注意修改一下之前url-loader的配置,因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs,解析时会出问题：[object Module],需要在url-loader配置文件中，关闭url-loader的es6模块化，使用commonjs解析\n```\nnpm install html-loader -D\n```\n\n```json\n{\n  test: /\\.(jpg|png|gif|jpeg)$/,\n  loader: 'url-loader',\n  options: {\n    limit: 8 * 1024,\n    // 解决：关闭url-loader的es6模块化，使用commonjs解析\n    esModule: false,\n    name:'[hash:10].[ext]'\n  },\n\n},\n{\n  test: /\\.html$/,\n  loader: 'html-loader'\n}\n```\n处理其他静态资源，比如字体图标文件等,需要安装file-loader,在之前安装url-loader的时候已经安装过file-loader了\n\n```json\n{\n   // exclude 排除 前面被处理过的 css/js/html资源\n   // 其他文件一律交给file-loader处理。\n  exclude: /\\.(css|js|html|less)$/,\n  loader: 'file-loader',\n  options: {\n    name: '[hash:10].[ext]',\n    // 指定其他资源都输出到static目录下\n    outputPath: 'static'\n  }\n}\n```\n### css兼容性处理\n面试的时候经常会被问到，浏览器兼容性问题，作为一个学生，目前我开发都是使用Chrome和Firefox，处理浏览器兼容性问题，也就是webpack配置一下。\n兼容css需要用插件postcss-loader,和插件的的配置postcss-preset-env(当然也可采用,autoprefixer规则取代postcss-preset-env规则)\n```bash\nnpm install postcss-loader postcss-preset-env -D\n```\n安装好插件，如果业务场景浏览器确定，可采用中 `package.json` 增加`browserslist`,来确定具体浏览器,至于browserslist的配置文件可看[github](https://github.com/browserslist/browserslist)\n\n其中`development`,`production` 是指NodeJS环境(`process.env.NODE_ENV `),默认是production,而非webpack指定的mode。\n```json\n{\n  \"xxx\":\"xxx\",\n  \"devDependencies\": \"xxxx\",\n  \"browserslist\": {\n    \"development\": [\n      \"last 1 version\",\n      \"> 1%\",\n      \"IE 10\"\n    ],\n    \"production\": [\n      \"> 0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ]\n  }\n}\n```\n具体配置如下\n```js\nconst miniCssExtractPlugin = require('mini-css-extract-plugin')\n//指定node环境为 development\nprocess.env.NODE_ENV = 'development'\nmodule.exports = {\n  entry: \"...\",\n  output: \"....\",\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          miniCssExtractPlugin.loader,\n          'css-loader',\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: (loader) => [\n                //也可以采用\n                // require('postcss-preset-env')()\n                require('autoprefixer')()\n              ]\n            }\n          }\n        ]\n      },\n    ]\n  },\n  plugins:\".....\",\n  mode: '.....'\n}\n```\n### devServer\n配置devServer,相当于本地运行了一个NodeJS后来服务,需要安装插件`webpack-dev-server`,此时webpack编译的结果不会输出在我们指定的目录下，因为dev-server不输出文件，可以想象成文件放内存中，node服务可以访问到，因此我们手动刷新浏览器可以看到正确结果。\n```\nnpm install webpack-dev-server -D\n```\n```js\nmodule.exports = {\n  ....,\n  mode: '.....',\n  devServer: {\n    // 项目构建后路径\n    contentBase: resolve(__dirname, 'build'),\n    // 启动gzip压缩\n    compress: true,\n    // 端口号\n    port: 3000,\n    // 自动打开浏览器\n    open: true\n  }\n};\n```\n\n此时我建议在 `package.json` 的 `script` 脚本中写入两条脚本，分别用于之前的打包模式和开启devServer 模式\n\n```json\n{\n  ....,\n  \"scripts\": {\n    ....,\n    \"build\": \"webpack\",\n    \"build:prod\": \"webpack --mode=production\",\n    \"dev\": \"webpack-dev-server --open\",\n  },\n  ....\n}\n```\n通过运行 `npm run build` 或者`npm run build:prod` 获取之前类似的输出，`npm run dev` 开启webpack服务,此时还不支持热更新和自动刷新浏览器，需要手动刷新，才能看到结果。\n\n> 更多devServer看 [官网配置](https://www.webpackjs.com/configuration/dev-server/)\n\n###  Javascript代码兼容性\n前面配置了css代码的兼容性处理，但是JS代码其实更需要兼容，JS不兼容可能就是无法运行。处理JS兼容当然就是`babel`家族。[babel官网](https://www.babeljs.cn/)\n\n```\nnpm install @babel/cli @babel/core @babel/preset-env babel-loader -D\n\nnpm install @babel/plugin-transform-runtime  -D \n\nnpm install @babel/plugin-proposal-class-properties -D\n\nnpm install @babel/runtime @babel/runtime-corejs2 --save\n```\n在项目根目录编写 `babel.config.js` 文件,写入如下配置\n```js\nmodule.exports = {\n  \"presets\": [\n       [\n         \"@babel/preset-env\",\n         //指定要兼容的浏览器，以及版本\n         \"targets\": {\n          \"esmodules\": true,\n          \"chrome\": '60',\n          \"firefox\": '60',\n          \"ie\": '9',\n          \"safari\": '10',\n           \"edge\": '17'\n          }\n        ]\n    ],\n  \"plugins\": [\n    [\"@babel/plugin-transform-runtime\", {\n      \"corejs\": 2,\n    }],\n    \"@babel/transform-arrow-functions\",\n    \"@babel/plugin-proposal-class-properties\"\n  ]\n}\n```\n在webpack.config.js中用babel处理js\n\n```js\nmodule.exports={\n  entry:\"....\",\n  output:\"....\",\n  module:{\n    rules:[\n      { \n        // 匹配js和jsx文件\n        test: /\\.tsx?$/,\n        use: [\"babel-loader\"],\n        //排除node_modules里面的文件\n        // 防止babel编译了，node_modules里面代码包。\n        exclude: [join(__dirname, \"node_modules\")]\n      }\n    ]\n  },\n}\n\n```\n上面的babel配置 (我用的是[babel7](https://babeljs.io/docs/en/v7-migration)的配置) 是我上次配置ts的，不知道会不会出错，应该没有问题， `presets` 里面指定了`target`, `core-js` 部分没问题，应该就可以兼容ie。\n\n> 我认为 webpack最好的教程是来源与官网，这是我看了官网和网上找的一些视频教程之后总结的一些基础操作，详细的配置可看 [webpack官网~中文](https://webpack.docschina.org/)，本文中部分文字来源于尚硅谷的视频，感谢尚硅谷老师的分享。【这不是广告只是为了声明版权😂】\n\n>以上差不多就是 webpack的一些基本操作了,后面打算把webpack配置优化部分也补上，然后自己封装一个脚手架，再加上一些ESLint的配置,欢迎大家持续关注 [**http://lemonlife.top**](http://lemonlife.top/) 最近有点忙/(ㄒoㄒ)/~~","slug":"webpack","published":1,"updated":"2021-08-07T01:59:03.350Z","_id":"cl4ince74002pcguf5lx2hybt","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"基础概念\"><a class=\"markdownIt-Anchor\" href=\"#基础概念\"></a> 基础概念</h3>\n<p><a href=\"https://webpack.docschina.org/guides/installation/\">官网安装方式</a></p>\n<p>通过官网的指引安装好webpack,在项目根目录添加 <code>webpack.config.js</code> 的文件.<br />\n<code>webpack.config.js</code> 遵循的是 <code>commonJS</code> 规范,依次文件采用 <code>module.exports=&#123;[key]:[value]&#125;</code> 的方式,来暴露具体的配置。</p>\n<p>一个基本的webpack配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;[xxx].js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;xxxx.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;[key]:[value]&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">PluginsName</span>()</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production | development&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://webpack.docschina.org/concepts/\">官网基础概念</a></p>\n<h4 id=\"entry\"><a class=\"markdownIt-Anchor\" href=\"#entry\"></a> Entry</h4>\n<p>指定webpack,打包的起始文件，根据此文件分析构建依赖关系图。</p>\n<p>入口文件，可配置一个，也可以 <code>&#123;[key]:[value]&#125;</code> 的形式配置多个</p>\n<h4 id=\"output\"><a class=\"markdownIt-Anchor\" href=\"#output\"></a> Output</h4>\n<p>指示webpack打包后的资源，输出到哪里去，以及如何命名。</p>\n<p>output的值是一个对象，指定了输出文件名，和文件路径，输出文件建议使用 path模块中的resolve即 <code>resolve(__dirname,xxx)</code></p>\n<p>在webpack中输出的文件名，如果你不想指定，可以取使用<code>[hash].扩展名</code>的形式，webpack在输出的时候，会自动指定hash值。</p>\n<h4 id=\"loader\"><a class=\"markdownIt-Anchor\" href=\"#loader\"></a> Loader</h4>\n<p>Webpack去处理那些非<code>Javascript</code>文件。(webpack本身只处理js和json数据)</p>\n<p>对应webpack的字段是 <code>module</code>,里面指定了webpack各种的loader配置。形如</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  rules<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">[</span>key<span class=\"punctuation\">]</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span>value<span class=\"punctuation\">]</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>rules中的每一个对象，对应着一个处理某个文件的模块，为了处理某种文件，我们需要配置，匹配这个文件的正则表达式,形如 <code>test:/具体正则表达式/</code> ，和通过 <code>use:[loader-name]</code> 的形式指定 多个loader,如：处理css 文件，我们需要 <code>style-loader</code> 和 <code>css-loader</code> 。甚至有时候use数组里面，不只是 各个loader的名称，可能还需要修改一些loader的配置，就会采取对象的形式指定loader，如给css添加兼容性处理的情景</p>\n<p>同一文件各种loader的处理顺序是自下而上的,css文件配置如下,文件会先经过 <code>css-loader</code> 处理,再经过<code>style-loader</code>处理。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  rules<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      test<span class=\"punctuation\">:</span> /\\.css$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">      use<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        &#x27;style-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">        &#x27;css-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>上面引入的两种loader都是直接通过loader名称的形式引入的，按照对象的方式引入postcss-loader，对css做兼容性处理。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  test<span class=\"punctuation\">:</span> /\\.css$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  use<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    &#x27;style-loader&#x27;</span><br><span class=\"line\">    &#x27;css-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      loader<span class=\"punctuation\">:</span> &#x27;postcss-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      options<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        ident<span class=\"punctuation\">:</span> &#x27;postcss&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">        plugins<span class=\"punctuation\">:</span> () =&gt; <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          require(&#x27;postcss-preset-env&#x27;)</span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>当然最后要注意的是，这些loader都不是webpack，内置的，而是需要 通过npm 安装。具体的插件安装可看官网。建议大家和webpack有关的都安装在  <code>devDependencies</code> 下 。</p>\n<h4 id=\"plugins\"><a class=\"markdownIt-Anchor\" href=\"#plugins\"></a> Plugins</h4>\n<p>各种功能强大的工具，包括打包优化和压缩，甚至可以重新定义环境中的变量。插件相比于Loader可以做很多比Loader功能更强大的事。</p>\n<p>插件和loader相同的是都需要先npm安装，不同的是，loader不需要引入，但是要在use里面写一些配置。而插件则是通过，先require 引入某个插件，然后再在plugins,实例化引入的插件对象即可。如果需要修改插件的默认配置，在实例化的时候，以对象的形式传入即可。</p>\n<p>html 模板插件使用如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;......&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>:<span class=\"string\">&#x27;......&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">module</span>:<span class=\"string\">&#x27;......&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 实例化require引入的插件 html-webpack-plugin</span></span><br><span class=\"line\">    <span class=\"comment\">//指定传入的HTML模板是src目录下的index.html文件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;.....&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mode\"><a class=\"markdownIt-Anchor\" href=\"#mode\"></a> Mode</h4>\n<p>模式分为 <code>development</code>开发环境，<code>production</code> 生产环境。<br />\n这大概是webpack最简洁的配置了，在<code>production</code> 模式下，会自动开启压缩js代码和 <code>tree shaking</code> 。</p>\n<p>在未来的 webpack5中,只有在 <code>webpack.config.js</code> 文件中指定一个mode,就可以使用，上面的 <code>entry,output</code> 等配置,都变成了默认配置。</p>\n<h3 id=\"webpack打包过程\"><a class=\"markdownIt-Anchor\" href=\"#webpack打包过程\"></a> webpack打包过程</h3>\n<ol>\n<li>指定入口文件 entry</li>\n<li>webpack会根据入口文件里面所有的依赖,形成依赖树，然后会根据依赖树中把所以需要的依赖引入，形成代码块(chunk),然后再根据不同的资源对应的loader,对代码块进行处理输出为 <code>bundles</code>.</li>\n</ol>\n<h3 id=\"处理css-less\"><a class=\"markdownIt-Anchor\" href=\"#处理css-less\"></a> 处理css、less</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install style-loader css-loader  -D</span><br></pre></td></tr></table></figure>\n<p>其中 css-loader 是为了把 css 文件变成commonJS模块，加载到JS中，style-loader是为了在JS解析的时候能创建style标签,把样式整合到style标签中，插入浏览器的head。</p>\n<p>默认是有多少css，less 文件就会插入多少style标签，每个标签就是对应的css代码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install less-loader -D </span><br></pre></td></tr></table></figure>\n<p>安装less-loader处理less文件，注意loader在代码里面配置顺序是固定的，less文件必须要经过less-loader处理，才能被css-loader识别，同理最后才能被style-loader处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: /\\.css$/,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      // 从下到上运行loader</span><br><span class=\"line\">      // 创建style标签，将js资源插入，添加到head生效</span><br><span class=\"line\">      &#x27;style-loader&#x27;,</span><br><span class=\"line\">      // 将css 文件变成commonjs 模块加载到js中，里面内容 是样式字符串。</span><br><span class=\"line\">      &#x27;css-loader&#x27;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: /\\.less$/,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      &#x27;style-loader&#x27;,</span><br><span class=\"line\">      &#x27;css-loader&#x27;,</span><br><span class=\"line\">      &#x27;less-loader&#x27;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>把css,less文件提取合并，并且压缩一下形成单独的css,再通过link标签引入。目的是为了把css尽快的提供给浏览器，而不是放在js中，导致浏览器需要先解析js才能获取css,<a href=\"http://lemonlife.top/2020/02/23/web-fundamentals-optimize/\">具体原因见博客~浏览器</a>,需要使用插件 mini-css-extract-plugin</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>把css文件和less文件配置中的,style-loader都替换成 <code>MiniCssExtractPlugin.loader</code>,在plugins中实例化插件并且制定输出文件路径,完整配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/build.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;less-loader&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/public/index.html&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// [hash:10]制定文件名称取哈希值的前10位</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>:<span class=\"string\">&quot;css/[hash:10].css&quot;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>压缩css,感觉就是去掉了css文件中的，空格注释，也可能去掉了一些写重复的样式吧，反正就是为了减少文件体积加快网络传输速度。需要用到插件<code>optimize-css-assets-webpack-plugin</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>这个插件使用比较简单了,一样需要引入</p>\n<p><code>const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ....,</span><br><span class=\"line\">    new OptimizeCssAssetsWebpackPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">.... </span><br></pre></td></tr></table></figure>\n<h3 id=\"处理html-图片-其他静态资源\"><a class=\"markdownIt-Anchor\" href=\"#处理html-图片-其他静态资源\"></a> 处理HTML、图片、其他静态资源</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>处理HTML文件需要使用 <code>html-webpack-plugin</code>,在plugins中实例化的时候，指定一下使用的模板，webpack会把输出的js通过script标签自动引入HTML中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack处理 HTML</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;/js/build.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">//指定 src下的index.html 为HTML基础模板。</span></span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>处理图片资源的时候使用的是loader名称是<code>url-loader</code>,没有photo-loader😁😁😁,当然还要下载file-loader,因为url-loader依赖于file-loader</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install file-loader url-loader -D</span><br></pre></td></tr></table></figure>\n<p>具体配置如下，可以解决commonJS import 图片资源，和css,less文件中url里面引用图片资源的问题。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  test<span class=\"punctuation\">:</span> /\\.(jpg|png|gif|jpeg)$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  loader<span class=\"punctuation\">:</span> &#x27;url-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  options<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 图片小于8kb时候会被base64处理</span></span><br><span class=\"line\">    limit<span class=\"punctuation\">:</span> <span class=\"number\">8</span> * <span class=\"number\">1024</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 给图片重新命名</span></span><br><span class=\"line\">    <span class=\"comment\">// ext 图片原来扩展名称</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span>&#x27;<span class=\"punctuation\">[</span>hash<span class=\"punctuation\">:</span><span class=\"number\">10</span><span class=\"punctuation\">]</span>.<span class=\"punctuation\">[</span>ext<span class=\"punctuation\">]</span>&#x27;</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>如果还要处理HTML模板中引入图片的问题还需要使用 <code>html-loader</code>，<br />\n此时要注意修改一下之前url-loader的配置,因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs,解析时会出问题：[object Module],需要在url-loader配置文件中，关闭url-loader的es6模块化，使用commonjs解析</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install html-loader -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  test<span class=\"punctuation\">:</span> /\\.(jpg|png|gif|jpeg)$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  loader<span class=\"punctuation\">:</span> &#x27;url-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  options<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    limit<span class=\"punctuation\">:</span> <span class=\"number\">8</span> * <span class=\"number\">1024</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span></span><br><span class=\"line\">    esModule<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span>&#x27;<span class=\"punctuation\">[</span>hash<span class=\"punctuation\">:</span><span class=\"number\">10</span><span class=\"punctuation\">]</span>.<span class=\"punctuation\">[</span>ext<span class=\"punctuation\">]</span>&#x27;</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  test<span class=\"punctuation\">:</span> /\\.html$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  loader<span class=\"punctuation\">:</span> &#x27;html-loader&#x27;</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>处理其他静态资源，比如字体图标文件等,需要安装file-loader,在之前安装url-loader的时候已经安装过file-loader了</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"comment\">// exclude 排除 前面被处理过的 css/js/html资源</span></span><br><span class=\"line\">   <span class=\"comment\">// 其他文件一律交给file-loader处理。</span></span><br><span class=\"line\">  exclude<span class=\"punctuation\">:</span> /\\.(css|js|html|less)$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  loader<span class=\"punctuation\">:</span> &#x27;file-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  options<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span> &#x27;<span class=\"punctuation\">[</span>hash<span class=\"punctuation\">:</span><span class=\"number\">10</span><span class=\"punctuation\">]</span>.<span class=\"punctuation\">[</span>ext<span class=\"punctuation\">]</span>&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 指定其他资源都输出到static目录下</span></span><br><span class=\"line\">    outputPath<span class=\"punctuation\">:</span> &#x27;static&#x27;</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"css兼容性处理\"><a class=\"markdownIt-Anchor\" href=\"#css兼容性处理\"></a> css兼容性处理</h3>\n<p>面试的时候经常会被问到，浏览器兼容性问题，作为一个学生，目前我开发都是使用Chrome和Firefox，处理浏览器兼容性问题，也就是webpack配置一下。<br />\n兼容css需要用插件postcss-loader,和插件的的配置postcss-preset-env(当然也可采用,autoprefixer规则取代postcss-preset-env规则)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install postcss-loader postcss-preset-env -D</span><br></pre></td></tr></table></figure>\n<p>安装好插件，如果业务场景浏览器确定，可采用中 <code>package.json</code> 增加<code>browserslist</code>,来确定具体浏览器,至于browserslist的配置文件可看<a href=\"https://github.com/browserslist/browserslist\">github</a></p>\n<p>其中<code>development</code>,<code>production</code> 是指NodeJS环境(<code>process.env.NODE_ENV</code>),默认是production,而非webpack指定的mode。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;xxx&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;xxx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;xxxx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;browserslist&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;development&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;last 1 version&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;&gt; 1%&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;IE 10&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;production&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;&gt; 0.2%&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;not dead&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;not op_mini all&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>具体配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> miniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//指定node环境为 development</span></span><br><span class=\"line\">process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> = <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;...&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: <span class=\"string\">&quot;....&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          miniCssExtractPlugin.<span class=\"property\">loader</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;postcss-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">plugins</span>: <span class=\"function\">(<span class=\"params\">loader</span>) =&gt;</span> [</span><br><span class=\"line\">                <span class=\"comment\">//也可以采用</span></span><br><span class=\"line\">                <span class=\"comment\">// require(&#x27;postcss-preset-env&#x27;)()</span></span><br><span class=\"line\">                <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;autoprefixer&#x27;</span>)()</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>:<span class=\"string\">&quot;.....&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;.....&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"devserver\"><a class=\"markdownIt-Anchor\" href=\"#devserver\"></a> devServer</h3>\n<p>配置devServer,相当于本地运行了一个NodeJS后来服务,需要安装插件<code>webpack-dev-server</code>,此时webpack编译的结果不会输出在我们指定的目录下，因为dev-server不输出文件，可以想象成文件放内存中，node服务可以访问到，因此我们手动刷新浏览器可以看到正确结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  ....,</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;.....&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 项目构建后路径</span></span><br><span class=\"line\">    <span class=\"attr\">contentBase</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 启动gzip压缩</span></span><br><span class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 自动打开浏览器</span></span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>此时我建议在 <code>package.json</code> 的 <code>script</code> 脚本中写入两条脚本，分别用于之前的打包模式和开启devServer 模式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  ....<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ....<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build:prod&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --mode=production&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack-dev-server --open&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ....</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>通过运行 <code>npm run build</code> 或者<code>npm run build:prod</code> 获取之前类似的输出，<code>npm run dev</code> 开启webpack服务,此时还不支持热更新和自动刷新浏览器，需要手动刷新，才能看到结果。</p>\n<blockquote>\n<p>更多devServer看 <a href=\"https://www.webpackjs.com/configuration/dev-server/\">官网配置</a></p>\n</blockquote>\n<h3 id=\"javascript代码兼容性\"><a class=\"markdownIt-Anchor\" href=\"#javascript代码兼容性\"></a> Javascript代码兼容性</h3>\n<p>前面配置了css代码的兼容性处理，但是JS代码其实更需要兼容，JS不兼容可能就是无法运行。处理JS兼容当然就是<code>babel</code>家族。<a href=\"https://www.babeljs.cn/\">babel官网</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/cli @babel/core @babel/preset-env babel-loader -D</span><br><span class=\"line\"></span><br><span class=\"line\">npm install @babel/plugin-transform-runtime  -D </span><br><span class=\"line\"></span><br><span class=\"line\">npm install @babel/plugin-proposal-class-properties -D</span><br><span class=\"line\"></span><br><span class=\"line\">npm install @babel/runtime @babel/runtime-corejs2 --save</span><br></pre></td></tr></table></figure>\n<p>在项目根目录编写 <code>babel.config.js</code> 文件,写入如下配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">       [</span><br><span class=\"line\">         <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">         <span class=\"comment\">//指定要兼容的浏览器，以及版本</span></span><br><span class=\"line\">         <span class=\"string\">&quot;targets&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;esmodules&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;chrome&quot;</span>: <span class=\"string\">&#x27;60&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;firefox&quot;</span>: <span class=\"string\">&#x27;60&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;ie&quot;</span>: <span class=\"string\">&#x27;9&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;safari&quot;</span>: <span class=\"string\">&#x27;10&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&quot;edge&quot;</span>: <span class=\"string\">&#x27;17&#x27;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  <span class=\"string\">&quot;plugins&quot;</span>: [</span><br><span class=\"line\">    [<span class=\"string\">&quot;@babel/plugin-transform-runtime&quot;</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;corejs&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/transform-arrow-functions&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/plugin-proposal-class-properties&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在webpack.config.js中用babel处理js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>=&#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>:<span class=\"string\">&quot;....&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>:<span class=\"string\">&quot;....&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>:[</span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 匹配js和jsx文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;babel-loader&quot;</span>],</span><br><span class=\"line\">        <span class=\"comment\">//排除node_modules里面的文件</span></span><br><span class=\"line\">        <span class=\"comment\">// 防止babel编译了，node_modules里面代码包。</span></span><br><span class=\"line\">        <span class=\"attr\">exclude</span>: [<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&quot;node_modules&quot;</span>)]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面的babel配置 (我用的是<a href=\"https://babeljs.io/docs/en/v7-migration\">babel7</a>的配置) 是我上次配置ts的，不知道会不会出错，应该没有问题， <code>presets</code> 里面指定了<code>target</code>, <code>core-js</code> 部分没问题，应该就可以兼容ie。</p>\n<blockquote>\n<p>我认为 webpack最好的教程是来源与官网，这是我看了官网和网上找的一些视频教程之后总结的一些基础操作，详细的配置可看 <a href=\"https://webpack.docschina.org/\">webpack官网~中文</a>，本文中部分文字来源于尚硅谷的视频，感谢尚硅谷老师的分享。【这不是广告只是为了声明版权😂】</p>\n</blockquote>\n<blockquote>\n<p>以上差不多就是 webpack的一些基本操作了,后面打算把webpack配置优化部分也补上，然后自己封装一个脚手架，再加上一些ESLint的配置,欢迎大家持续关注 <a href=\"http://lemonlife.top/\"><strong>http://lemonlife.top</strong></a> 最近有点忙/(ㄒoㄒ)/~~</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基础概念\"><a class=\"markdownIt-Anchor\" href=\"#基础概念\"></a> 基础概念</h3>\n<p><a href=\"https://webpack.docschina.org/guides/installation/\">官网安装方式</a></p>\n<p>通过官网的指引安装好webpack,在项目根目录添加 <code>webpack.config.js</code> 的文件.<br />\n<code>webpack.config.js</code> 遵循的是 <code>commonJS</code> 规范,依次文件采用 <code>module.exports=&#123;[key]:[value]&#125;</code> 的方式,来暴露具体的配置。</p>\n<p>一个基本的webpack配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;[xxx].js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;xxxx.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;[key]:[value]&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">PluginsName</span>()</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production | development&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://webpack.docschina.org/concepts/\">官网基础概念</a></p>\n<h4 id=\"entry\"><a class=\"markdownIt-Anchor\" href=\"#entry\"></a> Entry</h4>\n<p>指定webpack,打包的起始文件，根据此文件分析构建依赖关系图。</p>\n<p>入口文件，可配置一个，也可以 <code>&#123;[key]:[value]&#125;</code> 的形式配置多个</p>\n<h4 id=\"output\"><a class=\"markdownIt-Anchor\" href=\"#output\"></a> Output</h4>\n<p>指示webpack打包后的资源，输出到哪里去，以及如何命名。</p>\n<p>output的值是一个对象，指定了输出文件名，和文件路径，输出文件建议使用 path模块中的resolve即 <code>resolve(__dirname,xxx)</code></p>\n<p>在webpack中输出的文件名，如果你不想指定，可以取使用<code>[hash].扩展名</code>的形式，webpack在输出的时候，会自动指定hash值。</p>\n<h4 id=\"loader\"><a class=\"markdownIt-Anchor\" href=\"#loader\"></a> Loader</h4>\n<p>Webpack去处理那些非<code>Javascript</code>文件。(webpack本身只处理js和json数据)</p>\n<p>对应webpack的字段是 <code>module</code>,里面指定了webpack各种的loader配置。形如</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  rules<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">[</span>key<span class=\"punctuation\">]</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span>value<span class=\"punctuation\">]</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>rules中的每一个对象，对应着一个处理某个文件的模块，为了处理某种文件，我们需要配置，匹配这个文件的正则表达式,形如 <code>test:/具体正则表达式/</code> ，和通过 <code>use:[loader-name]</code> 的形式指定 多个loader,如：处理css 文件，我们需要 <code>style-loader</code> 和 <code>css-loader</code> 。甚至有时候use数组里面，不只是 各个loader的名称，可能还需要修改一些loader的配置，就会采取对象的形式指定loader，如给css添加兼容性处理的情景</p>\n<p>同一文件各种loader的处理顺序是自下而上的,css文件配置如下,文件会先经过 <code>css-loader</code> 处理,再经过<code>style-loader</code>处理。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  rules<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      test<span class=\"punctuation\">:</span> /\\.css$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">      use<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        &#x27;style-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">        &#x27;css-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>上面引入的两种loader都是直接通过loader名称的形式引入的，按照对象的方式引入postcss-loader，对css做兼容性处理。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  test<span class=\"punctuation\">:</span> /\\.css$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  use<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    &#x27;style-loader&#x27;</span><br><span class=\"line\">    &#x27;css-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      loader<span class=\"punctuation\">:</span> &#x27;postcss-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">      options<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        ident<span class=\"punctuation\">:</span> &#x27;postcss&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">        plugins<span class=\"punctuation\">:</span> () =&gt; <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          require(&#x27;postcss-preset-env&#x27;)</span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>当然最后要注意的是，这些loader都不是webpack，内置的，而是需要 通过npm 安装。具体的插件安装可看官网。建议大家和webpack有关的都安装在  <code>devDependencies</code> 下 。</p>\n<h4 id=\"plugins\"><a class=\"markdownIt-Anchor\" href=\"#plugins\"></a> Plugins</h4>\n<p>各种功能强大的工具，包括打包优化和压缩，甚至可以重新定义环境中的变量。插件相比于Loader可以做很多比Loader功能更强大的事。</p>\n<p>插件和loader相同的是都需要先npm安装，不同的是，loader不需要引入，但是要在use里面写一些配置。而插件则是通过，先require 引入某个插件，然后再在plugins,实例化引入的插件对象即可。如果需要修改插件的默认配置，在实例化的时候，以对象的形式传入即可。</p>\n<p>html 模板插件使用如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;......&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>:<span class=\"string\">&#x27;......&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">module</span>:<span class=\"string\">&#x27;......&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 实例化require引入的插件 html-webpack-plugin</span></span><br><span class=\"line\">    <span class=\"comment\">//指定传入的HTML模板是src目录下的index.html文件</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;.....&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mode\"><a class=\"markdownIt-Anchor\" href=\"#mode\"></a> Mode</h4>\n<p>模式分为 <code>development</code>开发环境，<code>production</code> 生产环境。<br />\n这大概是webpack最简洁的配置了，在<code>production</code> 模式下，会自动开启压缩js代码和 <code>tree shaking</code> 。</p>\n<p>在未来的 webpack5中,只有在 <code>webpack.config.js</code> 文件中指定一个mode,就可以使用，上面的 <code>entry,output</code> 等配置,都变成了默认配置。</p>\n<h3 id=\"webpack打包过程\"><a class=\"markdownIt-Anchor\" href=\"#webpack打包过程\"></a> webpack打包过程</h3>\n<ol>\n<li>指定入口文件 entry</li>\n<li>webpack会根据入口文件里面所有的依赖,形成依赖树，然后会根据依赖树中把所以需要的依赖引入，形成代码块(chunk),然后再根据不同的资源对应的loader,对代码块进行处理输出为 <code>bundles</code>.</li>\n</ol>\n<h3 id=\"处理css-less\"><a class=\"markdownIt-Anchor\" href=\"#处理css-less\"></a> 处理css、less</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install style-loader css-loader  -D</span><br></pre></td></tr></table></figure>\n<p>其中 css-loader 是为了把 css 文件变成commonJS模块，加载到JS中，style-loader是为了在JS解析的时候能创建style标签,把样式整合到style标签中，插入浏览器的head。</p>\n<p>默认是有多少css，less 文件就会插入多少style标签，每个标签就是对应的css代码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install less-loader -D </span><br></pre></td></tr></table></figure>\n<p>安装less-loader处理less文件，注意loader在代码里面配置顺序是固定的，less文件必须要经过less-loader处理，才能被css-loader识别，同理最后才能被style-loader处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: /\\.css$/,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      // 从下到上运行loader</span><br><span class=\"line\">      // 创建style标签，将js资源插入，添加到head生效</span><br><span class=\"line\">      &#x27;style-loader&#x27;,</span><br><span class=\"line\">      // 将css 文件变成commonjs 模块加载到js中，里面内容 是样式字符串。</span><br><span class=\"line\">      &#x27;css-loader&#x27;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test: /\\.less$/,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      &#x27;style-loader&#x27;,</span><br><span class=\"line\">      &#x27;css-loader&#x27;,</span><br><span class=\"line\">      &#x27;less-loader&#x27;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>把css,less文件提取合并，并且压缩一下形成单独的css,再通过link标签引入。目的是为了把css尽快的提供给浏览器，而不是放在js中，导致浏览器需要先解析js才能获取css,<a href=\"http://lemonlife.top/2020/02/23/web-fundamentals-optimize/\">具体原因见博客~浏览器</a>,需要使用插件 mini-css-extract-plugin</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>把css文件和less文件配置中的,style-loader都替换成 <code>MiniCssExtractPlugin.loader</code>,在plugins中实例化插件并且制定输出文件路径,完整配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MiniCssExtractPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;js/build.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          <span class=\"title class_\">MiniCssExtractPlugin</span>.<span class=\"property\">loader</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;less-loader&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/public/index.html&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"comment\">// [hash:10]制定文件名称取哈希值的前10位</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">MiniCssExtractPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">filename</span>:<span class=\"string\">&quot;css/[hash:10].css&quot;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>压缩css,感觉就是去掉了css文件中的，空格注释，也可能去掉了一些写重复的样式吧，反正就是为了减少文件体积加快网络传输速度。需要用到插件<code>optimize-css-assets-webpack-plugin</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>这个插件使用比较简单了,一样需要引入</p>\n<p><code>const OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin')</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    ....,</span><br><span class=\"line\">    new OptimizeCssAssetsWebpackPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">.... </span><br></pre></td></tr></table></figure>\n<h3 id=\"处理html-图片-其他静态资源\"><a class=\"markdownIt-Anchor\" href=\"#处理html-图片-其他静态资源\"></a> 处理HTML、图片、其他静态资源</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install html-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n<p>处理HTML文件需要使用 <code>html-webpack-plugin</code>,在plugins中实例化的时候，指定一下使用的模板，webpack会把输出的js通过script标签自动引入HTML中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack处理 HTML</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;/js/build.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">//指定 src下的index.html 为HTML基础模板。</span></span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/index.html&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>处理图片资源的时候使用的是loader名称是<code>url-loader</code>,没有photo-loader😁😁😁,当然还要下载file-loader,因为url-loader依赖于file-loader</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install file-loader url-loader -D</span><br></pre></td></tr></table></figure>\n<p>具体配置如下，可以解决commonJS import 图片资源，和css,less文件中url里面引用图片资源的问题。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  test<span class=\"punctuation\">:</span> /\\.(jpg|png|gif|jpeg)$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  loader<span class=\"punctuation\">:</span> &#x27;url-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  options<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 图片小于8kb时候会被base64处理</span></span><br><span class=\"line\">    limit<span class=\"punctuation\">:</span> <span class=\"number\">8</span> * <span class=\"number\">1024</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 给图片重新命名</span></span><br><span class=\"line\">    <span class=\"comment\">// ext 图片原来扩展名称</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span>&#x27;<span class=\"punctuation\">[</span>hash<span class=\"punctuation\">:</span><span class=\"number\">10</span><span class=\"punctuation\">]</span>.<span class=\"punctuation\">[</span>ext<span class=\"punctuation\">]</span>&#x27;</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>如果还要处理HTML模板中引入图片的问题还需要使用 <code>html-loader</code>，<br />\n此时要注意修改一下之前url-loader的配置,因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs,解析时会出问题：[object Module],需要在url-loader配置文件中，关闭url-loader的es6模块化，使用commonjs解析</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install html-loader -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  test<span class=\"punctuation\">:</span> /\\.(jpg|png|gif|jpeg)$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  loader<span class=\"punctuation\">:</span> &#x27;url-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  options<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    limit<span class=\"punctuation\">:</span> <span class=\"number\">8</span> * <span class=\"number\">1024</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span></span><br><span class=\"line\">    esModule<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span>&#x27;<span class=\"punctuation\">[</span>hash<span class=\"punctuation\">:</span><span class=\"number\">10</span><span class=\"punctuation\">]</span>.<span class=\"punctuation\">[</span>ext<span class=\"punctuation\">]</span>&#x27;</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  test<span class=\"punctuation\">:</span> /\\.html$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  loader<span class=\"punctuation\">:</span> &#x27;html-loader&#x27;</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>处理其他静态资源，比如字体图标文件等,需要安装file-loader,在之前安装url-loader的时候已经安装过file-loader了</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">   <span class=\"comment\">// exclude 排除 前面被处理过的 css/js/html资源</span></span><br><span class=\"line\">   <span class=\"comment\">// 其他文件一律交给file-loader处理。</span></span><br><span class=\"line\">  exclude<span class=\"punctuation\">:</span> /\\.(css|js|html|less)$/<span class=\"punctuation\">,</span></span><br><span class=\"line\">  loader<span class=\"punctuation\">:</span> &#x27;file-loader&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">  options<span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    name<span class=\"punctuation\">:</span> &#x27;<span class=\"punctuation\">[</span>hash<span class=\"punctuation\">:</span><span class=\"number\">10</span><span class=\"punctuation\">]</span>.<span class=\"punctuation\">[</span>ext<span class=\"punctuation\">]</span>&#x27;<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// 指定其他资源都输出到static目录下</span></span><br><span class=\"line\">    outputPath<span class=\"punctuation\">:</span> &#x27;static&#x27;</span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"css兼容性处理\"><a class=\"markdownIt-Anchor\" href=\"#css兼容性处理\"></a> css兼容性处理</h3>\n<p>面试的时候经常会被问到，浏览器兼容性问题，作为一个学生，目前我开发都是使用Chrome和Firefox，处理浏览器兼容性问题，也就是webpack配置一下。<br />\n兼容css需要用插件postcss-loader,和插件的的配置postcss-preset-env(当然也可采用,autoprefixer规则取代postcss-preset-env规则)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install postcss-loader postcss-preset-env -D</span><br></pre></td></tr></table></figure>\n<p>安装好插件，如果业务场景浏览器确定，可采用中 <code>package.json</code> 增加<code>browserslist</code>,来确定具体浏览器,至于browserslist的配置文件可看<a href=\"https://github.com/browserslist/browserslist\">github</a></p>\n<p>其中<code>development</code>,<code>production</code> 是指NodeJS环境(<code>process.env.NODE_ENV</code>),默认是production,而非webpack指定的mode。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;xxx&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;xxx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;xxxx&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;browserslist&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;development&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;last 1 version&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;&gt; 1%&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;IE 10&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;production&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;&gt; 0.2%&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;not dead&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;not op_mini all&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>具体配置如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> miniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//指定node环境为 development</span></span><br><span class=\"line\">process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> = <span class=\"string\">&#x27;development&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;...&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: <span class=\"string\">&quot;....&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [</span><br><span class=\"line\">          miniCssExtractPlugin.<span class=\"property\">loader</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;postcss-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">plugins</span>: <span class=\"function\">(<span class=\"params\">loader</span>) =&gt;</span> [</span><br><span class=\"line\">                <span class=\"comment\">//也可以采用</span></span><br><span class=\"line\">                <span class=\"comment\">// require(&#x27;postcss-preset-env&#x27;)()</span></span><br><span class=\"line\">                <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;autoprefixer&#x27;</span>)()</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>:<span class=\"string\">&quot;.....&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;.....&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"devserver\"><a class=\"markdownIt-Anchor\" href=\"#devserver\"></a> devServer</h3>\n<p>配置devServer,相当于本地运行了一个NodeJS后来服务,需要安装插件<code>webpack-dev-server</code>,此时webpack编译的结果不会输出在我们指定的目录下，因为dev-server不输出文件，可以想象成文件放内存中，node服务可以访问到，因此我们手动刷新浏览器可以看到正确结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install webpack-dev-server -D</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  ....,</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;.....&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 项目构建后路径</span></span><br><span class=\"line\">    <span class=\"attr\">contentBase</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;build&#x27;</span>),</span><br><span class=\"line\">    <span class=\"comment\">// 启动gzip压缩</span></span><br><span class=\"line\">    <span class=\"attr\">compress</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 自动打开浏览器</span></span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>此时我建议在 <code>package.json</code> 的 <code>script</code> 脚本中写入两条脚本，分别用于之前的打包模式和开启devServer 模式</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  ....<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ....<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build:prod&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --mode=production&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack-dev-server --open&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ....</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>通过运行 <code>npm run build</code> 或者<code>npm run build:prod</code> 获取之前类似的输出，<code>npm run dev</code> 开启webpack服务,此时还不支持热更新和自动刷新浏览器，需要手动刷新，才能看到结果。</p>\n<blockquote>\n<p>更多devServer看 <a href=\"https://www.webpackjs.com/configuration/dev-server/\">官网配置</a></p>\n</blockquote>\n<h3 id=\"javascript代码兼容性\"><a class=\"markdownIt-Anchor\" href=\"#javascript代码兼容性\"></a> Javascript代码兼容性</h3>\n<p>前面配置了css代码的兼容性处理，但是JS代码其实更需要兼容，JS不兼容可能就是无法运行。处理JS兼容当然就是<code>babel</code>家族。<a href=\"https://www.babeljs.cn/\">babel官网</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/cli @babel/core @babel/preset-env babel-loader -D</span><br><span class=\"line\"></span><br><span class=\"line\">npm install @babel/plugin-transform-runtime  -D </span><br><span class=\"line\"></span><br><span class=\"line\">npm install @babel/plugin-proposal-class-properties -D</span><br><span class=\"line\"></span><br><span class=\"line\">npm install @babel/runtime @babel/runtime-corejs2 --save</span><br></pre></td></tr></table></figure>\n<p>在项目根目录编写 <code>babel.config.js</code> 文件,写入如下配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">       [</span><br><span class=\"line\">         <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">         <span class=\"comment\">//指定要兼容的浏览器，以及版本</span></span><br><span class=\"line\">         <span class=\"string\">&quot;targets&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;esmodules&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;chrome&quot;</span>: <span class=\"string\">&#x27;60&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;firefox&quot;</span>: <span class=\"string\">&#x27;60&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;ie&quot;</span>: <span class=\"string\">&#x27;9&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;safari&quot;</span>: <span class=\"string\">&#x27;10&#x27;</span>,</span><br><span class=\"line\">           <span class=\"string\">&quot;edge&quot;</span>: <span class=\"string\">&#x27;17&#x27;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  <span class=\"string\">&quot;plugins&quot;</span>: [</span><br><span class=\"line\">    [<span class=\"string\">&quot;@babel/plugin-transform-runtime&quot;</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;corejs&quot;</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/transform-arrow-functions&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/plugin-proposal-class-properties&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在webpack.config.js中用babel处理js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>=&#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>:<span class=\"string\">&quot;....&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>:<span class=\"string\">&quot;....&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>:[</span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 匹配js和jsx文件</span></span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use</span>: [<span class=\"string\">&quot;babel-loader&quot;</span>],</span><br><span class=\"line\">        <span class=\"comment\">//排除node_modules里面的文件</span></span><br><span class=\"line\">        <span class=\"comment\">// 防止babel编译了，node_modules里面代码包。</span></span><br><span class=\"line\">        <span class=\"attr\">exclude</span>: [<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&quot;node_modules&quot;</span>)]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>上面的babel配置 (我用的是<a href=\"https://babeljs.io/docs/en/v7-migration\">babel7</a>的配置) 是我上次配置ts的，不知道会不会出错，应该没有问题， <code>presets</code> 里面指定了<code>target</code>, <code>core-js</code> 部分没问题，应该就可以兼容ie。</p>\n<blockquote>\n<p>我认为 webpack最好的教程是来源与官网，这是我看了官网和网上找的一些视频教程之后总结的一些基础操作，详细的配置可看 <a href=\"https://webpack.docschina.org/\">webpack官网~中文</a>，本文中部分文字来源于尚硅谷的视频，感谢尚硅谷老师的分享。【这不是广告只是为了声明版权😂】</p>\n</blockquote>\n<blockquote>\n<p>以上差不多就是 webpack的一些基本操作了,后面打算把webpack配置优化部分也补上，然后自己封装一个脚手架，再加上一些ESLint的配置,欢迎大家持续关注 <a href=\"http://lemonlife.top/\"><strong>http://lemonlife.top</strong></a> 最近有点忙/(ㄒoㄒ)/~~</p>\n</blockquote>\n"},{"title":"替换空格","date":"2020-01-31T04:36:55.000Z","_content":"\n## 替换空格\n\n> 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n\n## 分析题目\n> 在平时写代码中经常遇到字符串替换问题，因此我直接调用了,语言本身的系统函数解决问题。\n\n## 解决方法\n- Java 版本\n```Java\npublic class Solution {\n    public String replaceSpace(StringBuffer str) {\n        return str.toString().replaceAll(\"\\\\s\", \"%20\");\n    }\n}\n```\n- JavaScript版本\n\n```JavaScript\nfunction replaceSpace(str)\n{\n    return str.replace(/\\s/g,\"%20\")\n}\n```\n> 使用JS代码时有些测试用例，因为数据量太大，时间超过了2秒过不去。Java一直在20ms左右。在数据量一般的情况下`JS V8`引擎的速度优于Java只需要12ms左右。\n\n![情况对比](http://blogimage.lemonlife.top/202001311330_4.png?/)","source":"_posts/替换空格.md","raw":"---\ntitle: 替换空格\ndate: 2020-01-31 12:36:55\ntags:  \n   - 算法与数据结构\n   - 剑指Offer\n---\n\n## 替换空格\n\n> 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n\n## 分析题目\n> 在平时写代码中经常遇到字符串替换问题，因此我直接调用了,语言本身的系统函数解决问题。\n\n## 解决方法\n- Java 版本\n```Java\npublic class Solution {\n    public String replaceSpace(StringBuffer str) {\n        return str.toString().replaceAll(\"\\\\s\", \"%20\");\n    }\n}\n```\n- JavaScript版本\n\n```JavaScript\nfunction replaceSpace(str)\n{\n    return str.replace(/\\s/g,\"%20\")\n}\n```\n> 使用JS代码时有些测试用例，因为数据量太大，时间超过了2秒过不去。Java一直在20ms左右。在数据量一般的情况下`JS V8`引擎的速度优于Java只需要12ms左右。\n\n![情况对比](http://blogimage.lemonlife.top/202001311330_4.png?/)","slug":"替换空格","published":1,"updated":"2023-03-08T01:06:58.323Z","_id":"cl4ince75002scguf4tdlgsfh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"替换空格\"><a class=\"markdownIt-Anchor\" href=\"#替换空格\"></a> 替换空格</h2>\n<blockquote>\n<p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>\n</blockquote>\n<h2 id=\"分析题目\"><a class=\"markdownIt-Anchor\" href=\"#分析题目\"></a> 分析题目</h2>\n<blockquote>\n<p>在平时写代码中经常遇到字符串替换问题，因此我直接调用了,语言本身的系统函数解决问题。</p>\n</blockquote>\n<h2 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\"></a> 解决方法</h2>\n<ul>\n<li>Java 版本</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">replaceSpace</span><span class=\"params\">(StringBuffer str)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.toString().replaceAll(<span class=\"string\">&quot;\\\\s&quot;</span>, <span class=\"string\">&quot;%20&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JavaScript版本</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">replaceSpace</span>(<span class=\"params\">str</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s/g</span>,<span class=\"string\">&quot;%20&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用JS代码时有些测试用例，因为数据量太大，时间超过了2秒过不去。Java一直在20ms左右。在数据量一般的情况下<code>JS V8</code>引擎的速度优于Java只需要12ms左右。</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202001311330_4.png?/\" alt=\"情况对比\" /></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"替换空格\"><a class=\"markdownIt-Anchor\" href=\"#替换空格\"></a> 替换空格</h2>\n<blockquote>\n<p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>\n</blockquote>\n<h2 id=\"分析题目\"><a class=\"markdownIt-Anchor\" href=\"#分析题目\"></a> 分析题目</h2>\n<blockquote>\n<p>在平时写代码中经常遇到字符串替换问题，因此我直接调用了,语言本身的系统函数解决问题。</p>\n</blockquote>\n<h2 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\"></a> 解决方法</h2>\n<ul>\n<li>Java 版本</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">replaceSpace</span><span class=\"params\">(StringBuffer str)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.toString().replaceAll(<span class=\"string\">&quot;\\\\s&quot;</span>, <span class=\"string\">&quot;%20&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JavaScript版本</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">replaceSpace</span>(<span class=\"params\">str</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s/g</span>,<span class=\"string\">&quot;%20&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用JS代码时有些测试用例，因为数据量太大，时间超过了2秒过不去。Java一直在20ms左右。在数据量一般的情况下<code>JS V8</code>引擎的速度优于Java只需要12ms左右。</p>\n</blockquote>\n<p><img src=\"http://blogimage.lemonlife.top/202001311330_4.png?/\" alt=\"情况对比\" /></p>\n"},{"title":"NodeJS Cluster 模块中的网络知识","date":"2023-02-04T01:02:30.000Z","_content":"\n周末有人问了我一个问题，为什么[pm2](https://pm2.keymetrics.io/docs/usage/quick-start/) 本地起三个进程，运行网络服务占用同一个端口但是没有冲突，用我练习两年半的网络知识一想确实应该有这个问题不同的进程如果监听三个一样 `ip+port`肯定会冲突,既然没冲突三个进程端口都一样，那会不会实在不同的本地 ip 上 类似于这样`[0.0.0.0, 127.0.0.1: 192.xxx.xx.xx]`。后来一想这样也没法对外提供服务。\n![](https://p1.hfutonline.cn/a-img/20230204090633.png)\n于是顺着pm2 这个工具探索了下去。\n\n# 同端口不同IP的服务 \n用NodeJS 写一个简单的 HTTP 服务, 代码和运行结果如下，如果我们在同一个电脑上的另一个终端再运行一份可以看到报错端口占用\n```js\nlet http = require(\"http\");\nlet ip = ''\n// 或者  let ip = '0.0.0.0'\nlet port  = 8003;\n\nconst app = http.createServer((_, resp)=>{\n    resp.writeHead(200);\n    let text = \"hello world\"\n    resp.write(text);\n    resp.end();\n})\n\napp.listen(port, ip, ()=>{\n    console.log(\"server start \", ip, port)\n});\n```\n![程序正常运行](https://p1.hfutonline.cn/a-img/20230204220308.png)\n\n![再运行一次提示端口占用](https://p1.hfutonline.cn/a-img/20230204220441.png)\n\n如果我们改成，不同IP下的相同端口,程序能正常启动但是只能在对应IP上提供服务\n- 使用IP `127.0.0.1`\n```js\nlet http = require(\"http\");\nlet ip = '127.0.0.1';\nlet port  = 8003;\nconst app = http.createServer((_, resp)=>{\n    resp.writeHead(200);\n    let text = \"hello world\"\n    resp.write(text);\n    resp.end();\n}).listen(port,ip, ()=>{\n    console.log(\"server start \", ip, port)\n});\n```\n- 使用 IP `192.168.140.134`\n```js\nlet http = require(\"http\");\nlet ip = '192.168.140.134';\nlet port  = 8003;\nconst app = http.createServer((_, resp)=>{\n    resp.writeHead(200);\n    let text = \"hello world\"\n    resp.write(text)\n    resp.end();\n}).listen(port,ip, ()=>{\n    console.log(\"server start \", ip, port)\n});\n```\n\n![不同 IP 多端口](https://p1.hfutonline.cn/a-img/20230204120043.png)\n\n\n# 使用pm2\n\n如果我们使用 pm2 启动我们默认 IP 下的 服务同时启动三个实例，三个实例都正常启动无端口占用\n\n```bash\npm2 start ./net_0.js -i 3\n```\n\n```js\nlet http = require(\"http\");\nlet ip = ''\n// 或者  let ip = '0.0.0.0'\nlet port  = 8003;\n\nconst app = http.createServer((_, resp)=>{\n    resp.writeHead(200);\n    let text = \"hello world\"\n    resp.write(text);\n    resp.end();\n})\n\napp.listen(port, ip, ()=>{\n    console.log(\"server start \", ip, port)\n});\n```\n\n![](https://p1.hfutonline.cn/a-img/20230204221312.png)\n\n从图片上看 pm2 启动了三个进程 分别是 `63579` `63580` `63593`， `netstat -natp` 显示占用用网络8003端口的程序PID 是`6400`，是一个 pm2 的程序。其他三个进程虽然启动并运行了代码，但是并没有产生端口占用 (`listen 没建立 socket 连接`)\n\n- 从 pm2 的日志中看3个进程的listen都被成功执行了\n\n![](https://p1.hfutonline.cn/a-img/20230204222525.png)\n\n通过查看 进程 `6400` 和进程 `63579` 的文件描述符（`fd`）进一步验证\n- ` lsof -p 6400`\n\n![](https://p1.hfutonline.cn/a-img/20230204223129.png)\n\n- `lsof -p 63579`\n![](https://p1.hfutonline.cn/a-img/20230204223243.png)\n\n确实只有进程`6400`有对应端口的监听，`63579`并没有和网络相关的fd信息，因为 pm2 使用的是 [NodeJS cluster 模块](https://nodejs.org/api/cluster.html#cluster) 实现的这一功能，继续探索 cluster 是怎么做到的。\n\n# Cluster 模块分析\n同样的我们使用 cluster 启动一个主进程，再 fork 3个worker进程，模拟使用pm2启动程序的场景。\n\n- `server.js` 文件内容\n\n```JS\nlet http = require(\"http\");\nlet port  = 8003;\n\nconsole.log(\"server::process.pid::\", process.pid);\n\nconst app = http.createServer((_, resp)=>{\n    resp.writeHead(200);\n    let text = \"hello world\"\n    resp.write(text);\n    resp.end();\n})\n\napp.listen(port, ()=>{\n    console.log(\"server start \", port)\n});\n```\n\n- `cluster.js` 文件内容\n\n```JS\nconst cluster = require(\"cluster\");\nconst WORKER_COUNT = 3;\n\n// 或者 cluster.isPrimary\nif(cluster.isMaster) {\n    console.log(\"main::process.pid::\", process.pid);\n    for(let i = 0; i < WORKER_COUNT; i++){\n        cluster.fork()\n    }\n} else {\n    require(\"./server\")\n}\n```\n\n```bash\n node ./cluster.js\n```\n\n从结果上看和pm2 一致 main process 65523 占用了端口，其他worker process ，被fork出来之后 listen 执行了，但是使用的是同一端口。 \n\n![cluster 运行 pid](https://p1.hfutonline.cn/a-img/20230204224524.png)\n\n![网络端口占用](https://p1.hfutonline.cn/a-img/20230204224702.png)\n\n进一步查阅资料发现在 net 模块中有对 cluster 做相应的处理 ([源码](https://github.com/nodejs/node/blob/v19.6.0/lib/net.js#L1778)).在 cluster 模式中如果 `isPrimary = false`(child process), 调用的是 `cluster._getServer` 获取主进程的 server handler 并且监听它。\n\n```js\nfunction listenInCluster() {\n\n  if (cluster.isPrimary || exclusive) {\n    server._listen2(address, port, addressType, backlog, fd, flags);\n    return;\n  }\n\n  //  Get the primary's server handle, and listen on it\n  cluster._getServer(server, serverQuery, listenOnPrimaryHandle);\n\n}\n\n```\n\n子进程中的 [cluster._getServer](https://github.com/nodejs/node/tree/v19.6.0/lib/internal/cluster#L66) 是通过 向 master 发送 IPC 消息 ` act: 'queryServer'` 获取到 main process 的 handle，primary 中对 queryServer 的处理可查看[源码](https://github.com/nodejs/node/blob/v19.6.0/lib/internal/cluster/primary.js#L268)\n\n```JS\ncluster._getServer = function(obj, options, cb) {\n\n  const message = {\n    act: 'queryServer',\n    index,\n    data: null,\n    ...options\n  };\n\n\n  send(message, (reply, handle) => {\n    if (typeof obj._setServerData === 'function')\n      obj._setServerData(reply.data);\n\n    if (handle) {\n      // Shared listen socket\n      shared(reply, { handle, indexesKey, index }, cb);\n    } else {\n      // Round-robin.\n      rr(reply, { indexesKey, index }, cb);\n    }\n  });\n\n};\n```  \n\n> 通过上述分析得出结论： cluster 多个进程能共享一个网络端口的原因是因为，child process 在处理 listen的时候，通过 IPC 获取到了 main process 的 handle，因此其实是服用了 main process 的资源，实现了不同进程的端口复用。\n\n\n# 处理TCP连接\n\nPM2 默认采用的方式是在主进程接收到 socket 连接后交给 worker 处理 socket 文件描述符，即`accept` 操作发生在worker进程中，至于交给哪个 worker处理 采用的是 `Round-Robin` 算法。\n\n![pm2 连接](https://p1.hfutonline.cn/a-img/20230212132426.png)","source":"_posts/nodejs-cluster-pm2.md","raw":"---\ntitle: NodeJS Cluster 模块中的网络知识\ndate: 2023-02-04 09:02:30\ntags:\n  - 计算机网络\n  - NodeJS\n---\n\n周末有人问了我一个问题，为什么[pm2](https://pm2.keymetrics.io/docs/usage/quick-start/) 本地起三个进程，运行网络服务占用同一个端口但是没有冲突，用我练习两年半的网络知识一想确实应该有这个问题不同的进程如果监听三个一样 `ip+port`肯定会冲突,既然没冲突三个进程端口都一样，那会不会实在不同的本地 ip 上 类似于这样`[0.0.0.0, 127.0.0.1: 192.xxx.xx.xx]`。后来一想这样也没法对外提供服务。\n![](https://p1.hfutonline.cn/a-img/20230204090633.png)\n于是顺着pm2 这个工具探索了下去。\n\n# 同端口不同IP的服务 \n用NodeJS 写一个简单的 HTTP 服务, 代码和运行结果如下，如果我们在同一个电脑上的另一个终端再运行一份可以看到报错端口占用\n```js\nlet http = require(\"http\");\nlet ip = ''\n// 或者  let ip = '0.0.0.0'\nlet port  = 8003;\n\nconst app = http.createServer((_, resp)=>{\n    resp.writeHead(200);\n    let text = \"hello world\"\n    resp.write(text);\n    resp.end();\n})\n\napp.listen(port, ip, ()=>{\n    console.log(\"server start \", ip, port)\n});\n```\n![程序正常运行](https://p1.hfutonline.cn/a-img/20230204220308.png)\n\n![再运行一次提示端口占用](https://p1.hfutonline.cn/a-img/20230204220441.png)\n\n如果我们改成，不同IP下的相同端口,程序能正常启动但是只能在对应IP上提供服务\n- 使用IP `127.0.0.1`\n```js\nlet http = require(\"http\");\nlet ip = '127.0.0.1';\nlet port  = 8003;\nconst app = http.createServer((_, resp)=>{\n    resp.writeHead(200);\n    let text = \"hello world\"\n    resp.write(text);\n    resp.end();\n}).listen(port,ip, ()=>{\n    console.log(\"server start \", ip, port)\n});\n```\n- 使用 IP `192.168.140.134`\n```js\nlet http = require(\"http\");\nlet ip = '192.168.140.134';\nlet port  = 8003;\nconst app = http.createServer((_, resp)=>{\n    resp.writeHead(200);\n    let text = \"hello world\"\n    resp.write(text)\n    resp.end();\n}).listen(port,ip, ()=>{\n    console.log(\"server start \", ip, port)\n});\n```\n\n![不同 IP 多端口](https://p1.hfutonline.cn/a-img/20230204120043.png)\n\n\n# 使用pm2\n\n如果我们使用 pm2 启动我们默认 IP 下的 服务同时启动三个实例，三个实例都正常启动无端口占用\n\n```bash\npm2 start ./net_0.js -i 3\n```\n\n```js\nlet http = require(\"http\");\nlet ip = ''\n// 或者  let ip = '0.0.0.0'\nlet port  = 8003;\n\nconst app = http.createServer((_, resp)=>{\n    resp.writeHead(200);\n    let text = \"hello world\"\n    resp.write(text);\n    resp.end();\n})\n\napp.listen(port, ip, ()=>{\n    console.log(\"server start \", ip, port)\n});\n```\n\n![](https://p1.hfutonline.cn/a-img/20230204221312.png)\n\n从图片上看 pm2 启动了三个进程 分别是 `63579` `63580` `63593`， `netstat -natp` 显示占用用网络8003端口的程序PID 是`6400`，是一个 pm2 的程序。其他三个进程虽然启动并运行了代码，但是并没有产生端口占用 (`listen 没建立 socket 连接`)\n\n- 从 pm2 的日志中看3个进程的listen都被成功执行了\n\n![](https://p1.hfutonline.cn/a-img/20230204222525.png)\n\n通过查看 进程 `6400` 和进程 `63579` 的文件描述符（`fd`）进一步验证\n- ` lsof -p 6400`\n\n![](https://p1.hfutonline.cn/a-img/20230204223129.png)\n\n- `lsof -p 63579`\n![](https://p1.hfutonline.cn/a-img/20230204223243.png)\n\n确实只有进程`6400`有对应端口的监听，`63579`并没有和网络相关的fd信息，因为 pm2 使用的是 [NodeJS cluster 模块](https://nodejs.org/api/cluster.html#cluster) 实现的这一功能，继续探索 cluster 是怎么做到的。\n\n# Cluster 模块分析\n同样的我们使用 cluster 启动一个主进程，再 fork 3个worker进程，模拟使用pm2启动程序的场景。\n\n- `server.js` 文件内容\n\n```JS\nlet http = require(\"http\");\nlet port  = 8003;\n\nconsole.log(\"server::process.pid::\", process.pid);\n\nconst app = http.createServer((_, resp)=>{\n    resp.writeHead(200);\n    let text = \"hello world\"\n    resp.write(text);\n    resp.end();\n})\n\napp.listen(port, ()=>{\n    console.log(\"server start \", port)\n});\n```\n\n- `cluster.js` 文件内容\n\n```JS\nconst cluster = require(\"cluster\");\nconst WORKER_COUNT = 3;\n\n// 或者 cluster.isPrimary\nif(cluster.isMaster) {\n    console.log(\"main::process.pid::\", process.pid);\n    for(let i = 0; i < WORKER_COUNT; i++){\n        cluster.fork()\n    }\n} else {\n    require(\"./server\")\n}\n```\n\n```bash\n node ./cluster.js\n```\n\n从结果上看和pm2 一致 main process 65523 占用了端口，其他worker process ，被fork出来之后 listen 执行了，但是使用的是同一端口。 \n\n![cluster 运行 pid](https://p1.hfutonline.cn/a-img/20230204224524.png)\n\n![网络端口占用](https://p1.hfutonline.cn/a-img/20230204224702.png)\n\n进一步查阅资料发现在 net 模块中有对 cluster 做相应的处理 ([源码](https://github.com/nodejs/node/blob/v19.6.0/lib/net.js#L1778)).在 cluster 模式中如果 `isPrimary = false`(child process), 调用的是 `cluster._getServer` 获取主进程的 server handler 并且监听它。\n\n```js\nfunction listenInCluster() {\n\n  if (cluster.isPrimary || exclusive) {\n    server._listen2(address, port, addressType, backlog, fd, flags);\n    return;\n  }\n\n  //  Get the primary's server handle, and listen on it\n  cluster._getServer(server, serverQuery, listenOnPrimaryHandle);\n\n}\n\n```\n\n子进程中的 [cluster._getServer](https://github.com/nodejs/node/tree/v19.6.0/lib/internal/cluster#L66) 是通过 向 master 发送 IPC 消息 ` act: 'queryServer'` 获取到 main process 的 handle，primary 中对 queryServer 的处理可查看[源码](https://github.com/nodejs/node/blob/v19.6.0/lib/internal/cluster/primary.js#L268)\n\n```JS\ncluster._getServer = function(obj, options, cb) {\n\n  const message = {\n    act: 'queryServer',\n    index,\n    data: null,\n    ...options\n  };\n\n\n  send(message, (reply, handle) => {\n    if (typeof obj._setServerData === 'function')\n      obj._setServerData(reply.data);\n\n    if (handle) {\n      // Shared listen socket\n      shared(reply, { handle, indexesKey, index }, cb);\n    } else {\n      // Round-robin.\n      rr(reply, { indexesKey, index }, cb);\n    }\n  });\n\n};\n```  \n\n> 通过上述分析得出结论： cluster 多个进程能共享一个网络端口的原因是因为，child process 在处理 listen的时候，通过 IPC 获取到了 main process 的 handle，因此其实是服用了 main process 的资源，实现了不同进程的端口复用。\n\n\n# 处理TCP连接\n\nPM2 默认采用的方式是在主进程接收到 socket 连接后交给 worker 处理 socket 文件描述符，即`accept` 操作发生在worker进程中，至于交给哪个 worker处理 采用的是 `Round-Robin` 算法。\n\n![pm2 连接](https://p1.hfutonline.cn/a-img/20230212132426.png)","slug":"nodejs-cluster-pm2","published":1,"updated":"2023-02-12T05:41:04.545Z","_id":"cldp9gbrn0000dgufezs2e2qs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>周末有人问了我一个问题，为什么<a href=\"https://pm2.keymetrics.io/docs/usage/quick-start/\">pm2</a> 本地起三个进程，运行网络服务占用同一个端口但是没有冲突，用我练习两年半的网络知识一想确实应该有这个问题不同的进程如果监听三个一样 <code>ip+port</code>肯定会冲突,既然没冲突三个进程端口都一样，那会不会实在不同的本地 ip 上 类似于这样<code>[0.0.0.0, 127.0.0.1: 192.xxx.xx.xx]</code>。后来一想这样也没法对外提供服务。<br />\n<img src=\"https://p1.hfutonline.cn/a-img/20230204090633.png\" alt=\"\" /><br />\n于是顺着pm2 这个工具探索了下去。</p>\n<h1 id=\"同端口不同ip的服务\"><a class=\"markdownIt-Anchor\" href=\"#同端口不同ip的服务\"></a> 同端口不同IP的服务</h1>\n<p>用NodeJS 写一个简单的 HTTP 服务, 代码和运行结果如下，如果我们在同一个电脑上的另一个终端再运行一份可以看到报错端口占用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ip = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 或者  let ip = &#x27;0.0.0.0&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> port  = <span class=\"number\">8003</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">_, resp</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resp.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">    resp.<span class=\"title function_\">write</span>(text);</span><br><span class=\"line\">    resp.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(port, ip, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server start &quot;</span>, ip, port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204220308.png\" alt=\"程序正常运行\" /></p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204220441.png\" alt=\"再运行一次提示端口占用\" /></p>\n<p>如果我们改成，不同IP下的相同端口,程序能正常启动但是只能在对应IP上提供服务</p>\n<ul>\n<li>使用IP <code>127.0.0.1</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ip = <span class=\"string\">&#x27;127.0.0.1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> port  = <span class=\"number\">8003</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">_, resp</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resp.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">    resp.<span class=\"title function_\">write</span>(text);</span><br><span class=\"line\">    resp.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(port,ip, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server start &quot;</span>, ip, port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 IP <code>192.168.140.134</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ip = <span class=\"string\">&#x27;192.168.140.134&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> port  = <span class=\"number\">8003</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">_, resp</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resp.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">    resp.<span class=\"title function_\">write</span>(text)</span><br><span class=\"line\">    resp.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(port,ip, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server start &quot;</span>, ip, port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204120043.png\" alt=\"不同 IP 多端口\" /></p>\n<h1 id=\"使用pm2\"><a class=\"markdownIt-Anchor\" href=\"#使用pm2\"></a> 使用pm2</h1>\n<p>如果我们使用 pm2 启动我们默认 IP 下的 服务同时启动三个实例，三个实例都正常启动无端口占用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start ./net_0.js -i 3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ip = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 或者  let ip = &#x27;0.0.0.0&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> port  = <span class=\"number\">8003</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">_, resp</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resp.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">    resp.<span class=\"title function_\">write</span>(text);</span><br><span class=\"line\">    resp.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(port, ip, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server start &quot;</span>, ip, port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204221312.png\" alt=\"\" /></p>\n<p>从图片上看 pm2 启动了三个进程 分别是 <code>63579</code> <code>63580</code> <code>63593</code>， <code>netstat -natp</code> 显示占用用网络8003端口的程序PID 是<code>6400</code>，是一个 pm2 的程序。其他三个进程虽然启动并运行了代码，但是并没有产生端口占用 (<code>listen 没建立 socket 连接</code>)</p>\n<ul>\n<li>从 pm2 的日志中看3个进程的listen都被成功执行了</li>\n</ul>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204222525.png\" alt=\"\" /></p>\n<p>通过查看 进程 <code>6400</code> 和进程 <code>63579</code> 的文件描述符（<code>fd</code>）进一步验证</p>\n<ul>\n<li><code>lsof -p 6400</code></li>\n</ul>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204223129.png\" alt=\"\" /></p>\n<ul>\n<li><code>lsof -p 63579</code><br />\n<img src=\"https://p1.hfutonline.cn/a-img/20230204223243.png\" alt=\"\" /></li>\n</ul>\n<p>确实只有进程<code>6400</code>有对应端口的监听，<code>63579</code>并没有和网络相关的fd信息，因为 pm2 使用的是 <a href=\"https://nodejs.org/api/cluster.html#cluster\">NodeJS cluster 模块</a> 实现的这一功能，继续探索 cluster 是怎么做到的。</p>\n<h1 id=\"cluster-模块分析\"><a class=\"markdownIt-Anchor\" href=\"#cluster-模块分析\"></a> Cluster 模块分析</h1>\n<p>同样的我们使用 cluster 启动一个主进程，再 fork 3个worker进程，模拟使用pm2启动程序的场景。</p>\n<ul>\n<li><code>server.js</code> 文件内容</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> port  = <span class=\"number\">8003</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server::process.pid::&quot;</span>, process.<span class=\"property\">pid</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">_, resp</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resp.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">    resp.<span class=\"title function_\">write</span>(text);</span><br><span class=\"line\">    resp.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(port, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server start &quot;</span>, port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>cluster.js</code> 文件内容</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cluster&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">WORKER_COUNT</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者 cluster.isPrimary</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(cluster.<span class=\"property\">isMaster</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;main::process.pid::&quot;</span>, process.<span class=\"property\">pid</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable constant_\">WORKER_COUNT</span>; i++)&#123;</span><br><span class=\"line\">        cluster.<span class=\"title function_\">fork</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./server&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node ./cluster.js</span><br></pre></td></tr></table></figure>\n<p>从结果上看和pm2 一致 main process 65523 占用了端口，其他worker process ，被fork出来之后 listen 执行了，但是使用的是同一端口。</p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204224524.png\" alt=\"cluster 运行 pid\" /></p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204224702.png\" alt=\"网络端口占用\" /></p>\n<p>进一步查阅资料发现在 net 模块中有对 cluster 做相应的处理 (<a href=\"https://github.com/nodejs/node/blob/v19.6.0/lib/net.js#L1778\">源码</a>).在 cluster 模式中如果 <code>isPrimary = false</code>(child process), 调用的是 <code>cluster._getServer</code> 获取主进程的 server handler 并且监听它。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">listenInCluster</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cluster.<span class=\"property\">isPrimary</span> || exclusive) &#123;</span><br><span class=\"line\">    server.<span class=\"title function_\">_listen2</span>(address, port, addressType, backlog, fd, flags);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//  Get the primary&#x27;s server handle, and listen on it</span></span><br><span class=\"line\">  cluster.<span class=\"title function_\">_getServer</span>(server, serverQuery, listenOnPrimaryHandle);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>子进程中的 <a href=\"https://github.com/nodejs/node/tree/v19.6.0/lib/internal/cluster#L66\">cluster._getServer</a> 是通过 向 master 发送 IPC 消息 <code>act: 'queryServer'</code> 获取到 main process 的 handle，primary 中对 queryServer 的处理可查看<a href=\"https://github.com/nodejs/node/blob/v19.6.0/lib/internal/cluster/primary.js#L268\">源码</a></p>\n<pre class=\"highlight\"><code class=\"JS\">cluster._getServer = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obj, options, cb</span>) </span>&#123;\n\n  <span class=\"hljs-keyword\">const</span> message = &#123;\n    <span class=\"hljs-attr\">act</span>: <span class=\"hljs-string\">'queryServer'</span>,\n    index,\n    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-literal\">null</span>,\n    ...options\n  &#125;;\n\n\n  send(message, (reply, handle) =&gt; &#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj._setServerData === <span class=\"hljs-string\">'function'</span>)\n      obj._setServerData(reply.data);\n\n    <span class=\"hljs-keyword\">if</span> (handle) &#123;\n      <span class=\"hljs-comment\">// Shared listen socket</span>\n      shared(reply, &#123; handle, indexesKey, index &#125;, cb);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      <span class=\"hljs-comment\">// Round-robin.</span>\n      rr(reply, &#123; indexesKey, index &#125;, cb);\n    &#125;\n  &#125;);\n\n&#125;;\n</code></pre>\n<blockquote>\n<p>通过上述分析得出结论： cluster 多个进程能共享一个网络端口的原因是因为，child process 在处理 listen的时候，通过 IPC 获取到了 main process 的 handle，因此其实是服用了 main process 的资源，实现了不同进程的端口复用。</p>\n</blockquote>\n<h1 id=\"处理tcp连接\"><a class=\"markdownIt-Anchor\" href=\"#处理tcp连接\"></a> 处理TCP连接</h1>\n<p>PM2 默认采用的方式是在主进程接收到 socket 连接后交给 worker 处理 socket 文件描述符，即<code>accept</code> 操作发生在worker进程中，至于交给哪个 worker处理 采用的是 <code>Round-Robin</code> 算法。</p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230212132426.png\" alt=\"pm2 连接\" /></p>\n","site":{"data":{}},"excerpt":"","more":"<p>周末有人问了我一个问题，为什么<a href=\"https://pm2.keymetrics.io/docs/usage/quick-start/\">pm2</a> 本地起三个进程，运行网络服务占用同一个端口但是没有冲突，用我练习两年半的网络知识一想确实应该有这个问题不同的进程如果监听三个一样 <code>ip+port</code>肯定会冲突,既然没冲突三个进程端口都一样，那会不会实在不同的本地 ip 上 类似于这样<code>[0.0.0.0, 127.0.0.1: 192.xxx.xx.xx]</code>。后来一想这样也没法对外提供服务。<br />\n<img src=\"https://p1.hfutonline.cn/a-img/20230204090633.png\" alt=\"\" /><br />\n于是顺着pm2 这个工具探索了下去。</p>\n<h1 id=\"同端口不同ip的服务\"><a class=\"markdownIt-Anchor\" href=\"#同端口不同ip的服务\"></a> 同端口不同IP的服务</h1>\n<p>用NodeJS 写一个简单的 HTTP 服务, 代码和运行结果如下，如果我们在同一个电脑上的另一个终端再运行一份可以看到报错端口占用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ip = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 或者  let ip = &#x27;0.0.0.0&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> port  = <span class=\"number\">8003</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">_, resp</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resp.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">    resp.<span class=\"title function_\">write</span>(text);</span><br><span class=\"line\">    resp.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(port, ip, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server start &quot;</span>, ip, port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204220308.png\" alt=\"程序正常运行\" /></p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204220441.png\" alt=\"再运行一次提示端口占用\" /></p>\n<p>如果我们改成，不同IP下的相同端口,程序能正常启动但是只能在对应IP上提供服务</p>\n<ul>\n<li>使用IP <code>127.0.0.1</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ip = <span class=\"string\">&#x27;127.0.0.1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> port  = <span class=\"number\">8003</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">_, resp</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resp.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">    resp.<span class=\"title function_\">write</span>(text);</span><br><span class=\"line\">    resp.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(port,ip, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server start &quot;</span>, ip, port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 IP <code>192.168.140.134</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ip = <span class=\"string\">&#x27;192.168.140.134&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> port  = <span class=\"number\">8003</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">_, resp</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resp.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">    resp.<span class=\"title function_\">write</span>(text)</span><br><span class=\"line\">    resp.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(port,ip, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server start &quot;</span>, ip, port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204120043.png\" alt=\"不同 IP 多端口\" /></p>\n<h1 id=\"使用pm2\"><a class=\"markdownIt-Anchor\" href=\"#使用pm2\"></a> 使用pm2</h1>\n<p>如果我们使用 pm2 启动我们默认 IP 下的 服务同时启动三个实例，三个实例都正常启动无端口占用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start ./net_0.js -i 3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ip = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 或者  let ip = &#x27;0.0.0.0&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> port  = <span class=\"number\">8003</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">_, resp</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resp.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">    resp.<span class=\"title function_\">write</span>(text);</span><br><span class=\"line\">    resp.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(port, ip, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server start &quot;</span>, ip, port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204221312.png\" alt=\"\" /></p>\n<p>从图片上看 pm2 启动了三个进程 分别是 <code>63579</code> <code>63580</code> <code>63593</code>， <code>netstat -natp</code> 显示占用用网络8003端口的程序PID 是<code>6400</code>，是一个 pm2 的程序。其他三个进程虽然启动并运行了代码，但是并没有产生端口占用 (<code>listen 没建立 socket 连接</code>)</p>\n<ul>\n<li>从 pm2 的日志中看3个进程的listen都被成功执行了</li>\n</ul>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204222525.png\" alt=\"\" /></p>\n<p>通过查看 进程 <code>6400</code> 和进程 <code>63579</code> 的文件描述符（<code>fd</code>）进一步验证</p>\n<ul>\n<li><code>lsof -p 6400</code></li>\n</ul>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204223129.png\" alt=\"\" /></p>\n<ul>\n<li><code>lsof -p 63579</code><br />\n<img src=\"https://p1.hfutonline.cn/a-img/20230204223243.png\" alt=\"\" /></li>\n</ul>\n<p>确实只有进程<code>6400</code>有对应端口的监听，<code>63579</code>并没有和网络相关的fd信息，因为 pm2 使用的是 <a href=\"https://nodejs.org/api/cluster.html#cluster\">NodeJS cluster 模块</a> 实现的这一功能，继续探索 cluster 是怎么做到的。</p>\n<h1 id=\"cluster-模块分析\"><a class=\"markdownIt-Anchor\" href=\"#cluster-模块分析\"></a> Cluster 模块分析</h1>\n<p>同样的我们使用 cluster 启动一个主进程，再 fork 3个worker进程，模拟使用pm2启动程序的场景。</p>\n<ul>\n<li><code>server.js</code> 文件内容</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> port  = <span class=\"number\">8003</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server::process.pid::&quot;</span>, process.<span class=\"property\">pid</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">_, resp</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resp.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> text = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">    resp.<span class=\"title function_\">write</span>(text);</span><br><span class=\"line\">    resp.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(port, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server start &quot;</span>, port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>cluster.js</code> 文件内容</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cluster&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">WORKER_COUNT</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者 cluster.isPrimary</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(cluster.<span class=\"property\">isMaster</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;main::process.pid::&quot;</span>, process.<span class=\"property\">pid</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable constant_\">WORKER_COUNT</span>; i++)&#123;</span><br><span class=\"line\">        cluster.<span class=\"title function_\">fork</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./server&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node ./cluster.js</span><br></pre></td></tr></table></figure>\n<p>从结果上看和pm2 一致 main process 65523 占用了端口，其他worker process ，被fork出来之后 listen 执行了，但是使用的是同一端口。</p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204224524.png\" alt=\"cluster 运行 pid\" /></p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230204224702.png\" alt=\"网络端口占用\" /></p>\n<p>进一步查阅资料发现在 net 模块中有对 cluster 做相应的处理 (<a href=\"https://github.com/nodejs/node/blob/v19.6.0/lib/net.js#L1778\">源码</a>).在 cluster 模式中如果 <code>isPrimary = false</code>(child process), 调用的是 <code>cluster._getServer</code> 获取主进程的 server handler 并且监听它。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">listenInCluster</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cluster.<span class=\"property\">isPrimary</span> || exclusive) &#123;</span><br><span class=\"line\">    server.<span class=\"title function_\">_listen2</span>(address, port, addressType, backlog, fd, flags);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//  Get the primary&#x27;s server handle, and listen on it</span></span><br><span class=\"line\">  cluster.<span class=\"title function_\">_getServer</span>(server, serverQuery, listenOnPrimaryHandle);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>子进程中的 <a href=\"https://github.com/nodejs/node/tree/v19.6.0/lib/internal/cluster#L66\">cluster._getServer</a> 是通过 向 master 发送 IPC 消息 <code>act: 'queryServer'</code> 获取到 main process 的 handle，primary 中对 queryServer 的处理可查看<a href=\"https://github.com/nodejs/node/blob/v19.6.0/lib/internal/cluster/primary.js#L268\">源码</a></p>\n<pre class=\"highlight\"><code class=\"JS\">cluster._getServer = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obj, options, cb</span>) </span>&#123;\n\n  <span class=\"hljs-keyword\">const</span> message = &#123;\n    <span class=\"hljs-attr\">act</span>: <span class=\"hljs-string\">'queryServer'</span>,\n    index,\n    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-literal\">null</span>,\n    ...options\n  &#125;;\n\n\n  send(message, (reply, handle) =&gt; &#123;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj._setServerData === <span class=\"hljs-string\">'function'</span>)\n      obj._setServerData(reply.data);\n\n    <span class=\"hljs-keyword\">if</span> (handle) &#123;\n      <span class=\"hljs-comment\">// Shared listen socket</span>\n      shared(reply, &#123; handle, indexesKey, index &#125;, cb);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      <span class=\"hljs-comment\">// Round-robin.</span>\n      rr(reply, &#123; indexesKey, index &#125;, cb);\n    &#125;\n  &#125;);\n\n&#125;;\n</code></pre>\n<blockquote>\n<p>通过上述分析得出结论： cluster 多个进程能共享一个网络端口的原因是因为，child process 在处理 listen的时候，通过 IPC 获取到了 main process 的 handle，因此其实是服用了 main process 的资源，实现了不同进程的端口复用。</p>\n</blockquote>\n<h1 id=\"处理tcp连接\"><a class=\"markdownIt-Anchor\" href=\"#处理tcp连接\"></a> 处理TCP连接</h1>\n<p>PM2 默认采用的方式是在主进程接收到 socket 连接后交给 worker 处理 socket 文件描述符，即<code>accept</code> 操作发生在worker进程中，至于交给哪个 worker处理 采用的是 <code>Round-Robin</code> 算法。</p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230212132426.png\" alt=\"pm2 连接\" /></p>\n"},{"title":"Knative Deploy Serverless","date":"2023-02-25T05:18:33.000Z","_content":"\n目前最火的 ChatGpt，据说微软在 2019 年向 OpenAI 投资了约10亿美元的现金和**云代金券**，让团队购买微软云进行训练。在 Cloud Native 的时代背景下，Serverless 这种云原生开发模型，让开发者不需要关注服务器底层的部署，只需要编写功能函数。下面我们介绍如何使用 [Knative](https://knative.dev/docs/) 部署一个属于自己的 Serverless 服务集群。\n\n## Knative 服务安装\n\nKnative 本质上是在K8s 上的一个容器管理服务。在K8s集群中能轻松运行无服务器容器，Knative 负责网络的自动扩缩容，而且可以通过 `knative/func` 插件支持构建多种编程语言容器。目前支持的编程语言或框架如下，当然用户能自己扩展函数模板。\n\n|Language|Format|\n|---|---|\n|Go|[CloudEvents](https://github.com/knative/func/tree/main/templates/go/cloudevents)|\n|Go|[HTTP](https://github.com/knative/func/tree/main/templates/go/http)|\n|Node.js|[CloudEvents](https://github.com/knative/func/tree/main/templates/node/cloudevents)|\n|Node.js|[HTTP](https://github.com/knative/func/tree/main/templates/node/http)|\n|Python|[CloudEvents](https://github.com/knative/func/tree/main/templates/python/cloudevents)|\n|Python|[HTTP](https://github.com/knative/func/tree/main/templates/python/http)|\n|Quarkus|[CloudEvents](https://github.com/knative/func/tree/main/templates/quarkus/cloudevents)|\n|Quarkus|[HTTP](https://github.com/knative/func/tree/main/templates/quarkus/http)|\n|Rust|[CloudEvents](https://github.com/knative/func/tree/main/templates/rust/cloudevents)|\n|Rust|[HTTP](https://github.com/knative/func/tree/main/templates/rust/http)|\n|Springboot|[CloudEvents](https://github.com/knative/func/tree/main/templates/springboot/cloudevents)|\n|Springboot|[HTTP](https://github.com/knative/func/tree/main/templates/springboot/http)|\n|TypeScript|[CloudEvents](https://github.com/knative/func/tree/main/templates/typescript/cloudevents)|\n|TypeScript|[HTTP](https://github.com/knative/func/tree/main/templates/typescript/http)|\n\n根据[官网的介绍](https://knative.dev/docs/getting-started/)， 使用 Knative 需要先安装一些软件，而且至少需要3核内存3GB的机器。\n\n1. 安装 [Kind](https://kind.sigs.k8s.io/docs/user/quick-start) , Kind 可以很方便的一键式创建一个 k8s 集群。\n```\ncurl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64\nchmod +x ./kind\nsudo mv ./kind /usr/local/bin/kind\n```\n2. 安装 [kubectl](https://kubernetes.io/docs/tasks/tools/), 顾名思义这个工具是 k8s 客户端管理工具。\n\n```bash\ncurl -LO \"https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256\"\nchmod +x kubectl\nsudo mv ./kubectl /usr/local/bin/kind\n```\n\n3. 安装 knative client 插件, knative 命令式客户端; \n\n```bash\nwget https://github.com/knative/client/releases/download/knative-v1.9.0/kn-linux-amd64\nmv kn-linux-amd64 kn\nchmod +x ./kn\nsudo mv ./kn /usr/local/bin/\n```\n\n\n4. 安装 knative quickstart 插件, 一键创建k8s集群并部署 knative 服务的工具, 注意我写文档时候 最新版 `version 1.9.0 `是有问题的因此只能先下载 `v1.8.1`\n\n![https://github.com/knative-sandbox/kn-plugin-quickstart/issues/393](https://p1.hfutonline.cn/a-img/20230225161046.png)\n\n```bash\nwget https://github.com/knative-sandbox/kn-plugin-quickstart/releases/download/knative-v1.8.1/kn-quickstart-linux-amd64\n\nmv kn-quickstart-linux-amd64 kn-quickstart\nchmod +x ./kn-quickstart\nsudo mv ./kn-quickstart /usr/local/bin/\n```\n安装完这些我们已经可以部署一个 knative 的集群了，启动后通过 `kind get clusters` 能看到对应集knative群说明服务正常。\n\n```bash\nkn quickstart kind\nkind get clusters\n```\n![](https://p1.hfutonline.cn/a-img/20230225161617.png)\n\n5. 下面我们来安装构建 serverless 函数的插件 kn-func, 用户新建函数，构建函数镜像和镜像部署到对应的仓库，knative 服务可以从镜像仓库拉取对应的镜像启动服务。\n\n```bash\nwget get https://github.com/knative/func/releases/download/knative-v1.9.0/func_linux_amd64\nmv func_linux_amd64 kn-func\nsudo mv ./kn-func /usr/local/bin/\nkn func version\n```\n![](https://p1.hfutonline.cn/a-img/20230225162255.png)\n\n## 创建 Serverless 函数\n\n至此我们安装软件的准备工作已经完成，下面我们开始创建函数。例如我们在 `cloud-funs` 文件夹下创建一个 go 的函数\n```bash\nmkdir cloud-funs && cd cloud-funs\nkn func create -l go hello-go\n```\n\n> go 函数主要内容见链接 [https://github.com/knative/func/blob/main/templates/go/http/handle.go](https://github.com/knative/func/blob/main/templates/go/http/handle.go)\n\n![](https://p1.hfutonline.cn/a-img/20230225163030.png)\n\n## 构建 Serveless 镜像\n\n1. 建过程中需要依赖 Google 镜像 [https://gcr.io/paketo-buildpacks/builder:base](https://gcr.io/paketo-buildpacks/builder:base) 因为众所周知的网络隔离，我们无法使用 Google 的镜像，网络上说的改本地镜像名的方法也不靠谱。最终我折腾了好久解决了这个问题......\n\n- `Registry for function images:` 填docker仓库地址（用于镜像部署），如果没有仓库可以暂时随便填个字符串，不影响以下流程。\n\n```bash\ncloud-funs cd hello-go  \nkn func build \n```\n\n![](https://p1.hfutonline.cn/a-img/20230225163800.png)\n\n2. 本地校验函数, 可以看到服务运行在 8080 端口\n\n```bash\nkn func run\n```\n![](https://p1.hfutonline.cn/a-img/20230225164524.png)\n\n另一个终端执行\n `curl \"http://127.0.0.1:8080?hello=1\"` 能收到返回值如下，符合刚刚我们创建的函数的返回值，说明 serverless 函数运行成功。\n```\nGET /?hello=1 HTTP/1.1 127.0.0.1:8080\n  User-Agent: curl/7.68.0\n  Accept: */*\n```\n\n![](https://p1.hfutonline.cn/a-img/20230225165014.png)\n\n3. 镜像部署, 部署成功后能在[镜像仓库](https://hub.docker.com/repository/docker/wmw1005docker/hello-go/general)中看到对应的镜像。\n\n```bash\nkn func deploy\n```\n![](https://p1.hfutonline.cn/a-img/20230225165814.png)\n\n![Docker 镜像中的显示](https://p1.hfutonline.cn/a-img/20230225165942.png)\n\n## 使用 Knative 服务\n\n上一步我们将镜像部署到仓库的同时，也部署在了本地 knative 集群中，访问地址是 `http://hello-go.default.127.0.0.1.sslip.io`\n\n```bash\nkn service list\ncurl \"http://hello-go.default.127.0.0.1.sslip.io?hello=1\"\n```\n![](https://p1.hfutonline.cn/a-img/20230225170349.png)\n\n`kn service --help` 可以查看完成的命令使用说明：\n\n![](https://p1.hfutonline.cn/a-img/20230225170556.png)\n\n1. 部署 knative service\n\n这次我们使用远程镜像 `gcr.io/knative-samples/helloworld-go` 进行部署。\n\n```bash\n kn service create hello1 \\\n--image gcr.io/knative-samples/helloworld-go \\\n--port 8080 \\\n--env TARGET=World\n```\n\n![](https://p1.hfutonline.cn/a-img/20230225171004.png)\n\n2. 自动扩缩容\n\n```bash\nkn service list\nkubectl get pod -l serving.knative.dev/service=hello1 -w\n# 另一个终端执行\ncurl \"http://hello1.default.127.0.0.1.sslip.io\"\n```\n\n![](https://p1.hfutonline.cn/a-img/20230225172340.png)\n\n3. 流量治理\n\n每次更新服务都会产生一个服务快照，可以通过流量配置指定新旧版本之间的流量。`@latest` 表示最新版，\n\n```\nkn service update hello1 --env TARGET=Knative\n\ncurl \"http://hello1.default.127.0.0.1.sslip.io\"\n\nkn revisions list\n```\n![](https://p1.hfutonline.cn/a-img/20230225172700.png)\n\n可以看到流量现在 100% 都在 函数 `hello1-00002`， 接下来我们设置两个函数各占 50% 流量。\n\n```bash\nkn service update hello1 \\\n--traffic hello1-00001=50 \\\n--traffic @latest=50\n\nkn revisions list\n```\n![服务分流正常](https://p1.hfutonline.cn/a-img/20230225173125.png)\n\n","source":"_posts/knative-service.md","raw":"---\ntitle: Knative Deploy Serverless\ndate: 2023-02-25 13:18:33\ntags: \n    - Serverless\n    - Cloud Native\n---\n\n目前最火的 ChatGpt，据说微软在 2019 年向 OpenAI 投资了约10亿美元的现金和**云代金券**，让团队购买微软云进行训练。在 Cloud Native 的时代背景下，Serverless 这种云原生开发模型，让开发者不需要关注服务器底层的部署，只需要编写功能函数。下面我们介绍如何使用 [Knative](https://knative.dev/docs/) 部署一个属于自己的 Serverless 服务集群。\n\n## Knative 服务安装\n\nKnative 本质上是在K8s 上的一个容器管理服务。在K8s集群中能轻松运行无服务器容器，Knative 负责网络的自动扩缩容，而且可以通过 `knative/func` 插件支持构建多种编程语言容器。目前支持的编程语言或框架如下，当然用户能自己扩展函数模板。\n\n|Language|Format|\n|---|---|\n|Go|[CloudEvents](https://github.com/knative/func/tree/main/templates/go/cloudevents)|\n|Go|[HTTP](https://github.com/knative/func/tree/main/templates/go/http)|\n|Node.js|[CloudEvents](https://github.com/knative/func/tree/main/templates/node/cloudevents)|\n|Node.js|[HTTP](https://github.com/knative/func/tree/main/templates/node/http)|\n|Python|[CloudEvents](https://github.com/knative/func/tree/main/templates/python/cloudevents)|\n|Python|[HTTP](https://github.com/knative/func/tree/main/templates/python/http)|\n|Quarkus|[CloudEvents](https://github.com/knative/func/tree/main/templates/quarkus/cloudevents)|\n|Quarkus|[HTTP](https://github.com/knative/func/tree/main/templates/quarkus/http)|\n|Rust|[CloudEvents](https://github.com/knative/func/tree/main/templates/rust/cloudevents)|\n|Rust|[HTTP](https://github.com/knative/func/tree/main/templates/rust/http)|\n|Springboot|[CloudEvents](https://github.com/knative/func/tree/main/templates/springboot/cloudevents)|\n|Springboot|[HTTP](https://github.com/knative/func/tree/main/templates/springboot/http)|\n|TypeScript|[CloudEvents](https://github.com/knative/func/tree/main/templates/typescript/cloudevents)|\n|TypeScript|[HTTP](https://github.com/knative/func/tree/main/templates/typescript/http)|\n\n根据[官网的介绍](https://knative.dev/docs/getting-started/)， 使用 Knative 需要先安装一些软件，而且至少需要3核内存3GB的机器。\n\n1. 安装 [Kind](https://kind.sigs.k8s.io/docs/user/quick-start) , Kind 可以很方便的一键式创建一个 k8s 集群。\n```\ncurl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64\nchmod +x ./kind\nsudo mv ./kind /usr/local/bin/kind\n```\n2. 安装 [kubectl](https://kubernetes.io/docs/tasks/tools/), 顾名思义这个工具是 k8s 客户端管理工具。\n\n```bash\ncurl -LO \"https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256\"\nchmod +x kubectl\nsudo mv ./kubectl /usr/local/bin/kind\n```\n\n3. 安装 knative client 插件, knative 命令式客户端; \n\n```bash\nwget https://github.com/knative/client/releases/download/knative-v1.9.0/kn-linux-amd64\nmv kn-linux-amd64 kn\nchmod +x ./kn\nsudo mv ./kn /usr/local/bin/\n```\n\n\n4. 安装 knative quickstart 插件, 一键创建k8s集群并部署 knative 服务的工具, 注意我写文档时候 最新版 `version 1.9.0 `是有问题的因此只能先下载 `v1.8.1`\n\n![https://github.com/knative-sandbox/kn-plugin-quickstart/issues/393](https://p1.hfutonline.cn/a-img/20230225161046.png)\n\n```bash\nwget https://github.com/knative-sandbox/kn-plugin-quickstart/releases/download/knative-v1.8.1/kn-quickstart-linux-amd64\n\nmv kn-quickstart-linux-amd64 kn-quickstart\nchmod +x ./kn-quickstart\nsudo mv ./kn-quickstart /usr/local/bin/\n```\n安装完这些我们已经可以部署一个 knative 的集群了，启动后通过 `kind get clusters` 能看到对应集knative群说明服务正常。\n\n```bash\nkn quickstart kind\nkind get clusters\n```\n![](https://p1.hfutonline.cn/a-img/20230225161617.png)\n\n5. 下面我们来安装构建 serverless 函数的插件 kn-func, 用户新建函数，构建函数镜像和镜像部署到对应的仓库，knative 服务可以从镜像仓库拉取对应的镜像启动服务。\n\n```bash\nwget get https://github.com/knative/func/releases/download/knative-v1.9.0/func_linux_amd64\nmv func_linux_amd64 kn-func\nsudo mv ./kn-func /usr/local/bin/\nkn func version\n```\n![](https://p1.hfutonline.cn/a-img/20230225162255.png)\n\n## 创建 Serverless 函数\n\n至此我们安装软件的准备工作已经完成，下面我们开始创建函数。例如我们在 `cloud-funs` 文件夹下创建一个 go 的函数\n```bash\nmkdir cloud-funs && cd cloud-funs\nkn func create -l go hello-go\n```\n\n> go 函数主要内容见链接 [https://github.com/knative/func/blob/main/templates/go/http/handle.go](https://github.com/knative/func/blob/main/templates/go/http/handle.go)\n\n![](https://p1.hfutonline.cn/a-img/20230225163030.png)\n\n## 构建 Serveless 镜像\n\n1. 建过程中需要依赖 Google 镜像 [https://gcr.io/paketo-buildpacks/builder:base](https://gcr.io/paketo-buildpacks/builder:base) 因为众所周知的网络隔离，我们无法使用 Google 的镜像，网络上说的改本地镜像名的方法也不靠谱。最终我折腾了好久解决了这个问题......\n\n- `Registry for function images:` 填docker仓库地址（用于镜像部署），如果没有仓库可以暂时随便填个字符串，不影响以下流程。\n\n```bash\ncloud-funs cd hello-go  \nkn func build \n```\n\n![](https://p1.hfutonline.cn/a-img/20230225163800.png)\n\n2. 本地校验函数, 可以看到服务运行在 8080 端口\n\n```bash\nkn func run\n```\n![](https://p1.hfutonline.cn/a-img/20230225164524.png)\n\n另一个终端执行\n `curl \"http://127.0.0.1:8080?hello=1\"` 能收到返回值如下，符合刚刚我们创建的函数的返回值，说明 serverless 函数运行成功。\n```\nGET /?hello=1 HTTP/1.1 127.0.0.1:8080\n  User-Agent: curl/7.68.0\n  Accept: */*\n```\n\n![](https://p1.hfutonline.cn/a-img/20230225165014.png)\n\n3. 镜像部署, 部署成功后能在[镜像仓库](https://hub.docker.com/repository/docker/wmw1005docker/hello-go/general)中看到对应的镜像。\n\n```bash\nkn func deploy\n```\n![](https://p1.hfutonline.cn/a-img/20230225165814.png)\n\n![Docker 镜像中的显示](https://p1.hfutonline.cn/a-img/20230225165942.png)\n\n## 使用 Knative 服务\n\n上一步我们将镜像部署到仓库的同时，也部署在了本地 knative 集群中，访问地址是 `http://hello-go.default.127.0.0.1.sslip.io`\n\n```bash\nkn service list\ncurl \"http://hello-go.default.127.0.0.1.sslip.io?hello=1\"\n```\n![](https://p1.hfutonline.cn/a-img/20230225170349.png)\n\n`kn service --help` 可以查看完成的命令使用说明：\n\n![](https://p1.hfutonline.cn/a-img/20230225170556.png)\n\n1. 部署 knative service\n\n这次我们使用远程镜像 `gcr.io/knative-samples/helloworld-go` 进行部署。\n\n```bash\n kn service create hello1 \\\n--image gcr.io/knative-samples/helloworld-go \\\n--port 8080 \\\n--env TARGET=World\n```\n\n![](https://p1.hfutonline.cn/a-img/20230225171004.png)\n\n2. 自动扩缩容\n\n```bash\nkn service list\nkubectl get pod -l serving.knative.dev/service=hello1 -w\n# 另一个终端执行\ncurl \"http://hello1.default.127.0.0.1.sslip.io\"\n```\n\n![](https://p1.hfutonline.cn/a-img/20230225172340.png)\n\n3. 流量治理\n\n每次更新服务都会产生一个服务快照，可以通过流量配置指定新旧版本之间的流量。`@latest` 表示最新版，\n\n```\nkn service update hello1 --env TARGET=Knative\n\ncurl \"http://hello1.default.127.0.0.1.sslip.io\"\n\nkn revisions list\n```\n![](https://p1.hfutonline.cn/a-img/20230225172700.png)\n\n可以看到流量现在 100% 都在 函数 `hello1-00002`， 接下来我们设置两个函数各占 50% 流量。\n\n```bash\nkn service update hello1 \\\n--traffic hello1-00001=50 \\\n--traffic @latest=50\n\nkn revisions list\n```\n![服务分流正常](https://p1.hfutonline.cn/a-img/20230225173125.png)\n\n","slug":"knative-service","published":1,"updated":"2023-02-25T09:32:01.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clejrki8e0000oguf2f12hyt4","content":"<p>目前最火的 ChatGpt，据说微软在 2019 年向 OpenAI 投资了约10亿美元的现金和<strong>云代金券</strong>，让团队购买微软云进行训练。在 Cloud Native 的时代背景下，Serverless 这种云原生开发模型，让开发者不需要关注服务器底层的部署，只需要编写功能函数。下面我们介绍如何使用 <a href=\"https://knative.dev/docs/\">Knative</a> 部署一个属于自己的 Serverless 服务集群。</p>\n<h2 id=\"knative-服务安装\"><a class=\"markdownIt-Anchor\" href=\"#knative-服务安装\"></a> Knative 服务安装</h2>\n<p>Knative 本质上是在K8s 上的一个容器管理服务。在K8s集群中能轻松运行无服务器容器，Knative 负责网络的自动扩缩容，而且可以通过 <code>knative/func</code> 插件支持构建多种编程语言容器。目前支持的编程语言或框架如下，当然用户能自己扩展函数模板。</p>\n<table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Format</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Go</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/go/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Go</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/go/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>Node.js</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/node/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Node.js</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/node/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>Python</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/python/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Python</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/python/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>Quarkus</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/quarkus/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Quarkus</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/quarkus/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>Rust</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/rust/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Rust</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/rust/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>Springboot</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/springboot/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Springboot</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/springboot/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>TypeScript</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/typescript/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>TypeScript</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/typescript/http\">HTTP</a></td>\n</tr>\n</tbody>\n</table>\n<p>根据<a href=\"https://knative.dev/docs/getting-started/\">官网的介绍</a>， 使用 Knative 需要先安装一些软件，而且至少需要3核内存3GB的机器。</p>\n<ol>\n<li>安装 <a href=\"https://kind.sigs.k8s.io/docs/user/quick-start\">Kind</a> , Kind 可以很方便的一键式创建一个 k8s 集群。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64</span><br><span class=\"line\">chmod +x ./kind</span><br><span class=\"line\">sudo mv ./kind /usr/local/bin/kind</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装 <a href=\"https://kubernetes.io/docs/tasks/tools/\">kubectl</a>, 顾名思义这个工具是 k8s 客户端管理工具。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LO <span class=\"string\">&quot;https://dl.k8s.io/<span class=\"subst\">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl.sha256&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x kubectl</span><br><span class=\"line\">sudo <span class=\"built_in\">mv</span> ./kubectl /usr/local/bin/kind</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>安装 knative client 插件, knative 命令式客户端;</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/knative/client/releases/download/knative-v1.9.0/kn-linux-amd64</span><br><span class=\"line\"><span class=\"built_in\">mv</span> kn-linux-amd64 kn</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x ./kn</span><br><span class=\"line\">sudo <span class=\"built_in\">mv</span> ./kn /usr/local/bin/</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>安装 knative quickstart 插件, 一键创建k8s集群并部署 knative 服务的工具, 注意我写文档时候 最新版 <code>version 1.9.0</code>是有问题的因此只能先下载 <code>v1.8.1</code></li>\n</ol>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225161046.png\" alt=\"https://github.com/knative-sandbox/kn-plugin-quickstart/issues/393\" /></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/knative-sandbox/kn-plugin-quickstart/releases/download/knative-v1.8.1/kn-quickstart-linux-amd64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mv</span> kn-quickstart-linux-amd64 kn-quickstart</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x ./kn-quickstart</span><br><span class=\"line\">sudo <span class=\"built_in\">mv</span> ./kn-quickstart /usr/local/bin/</span><br></pre></td></tr></table></figure>\n<p>安装完这些我们已经可以部署一个 knative 的集群了，启动后通过 <code>kind get clusters</code> 能看到对应集knative群说明服务正常。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn quickstart kind</span><br><span class=\"line\">kind get clusters</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225161617.png\" alt=\"\" /></p>\n<ol start=\"5\">\n<li>下面我们来安装构建 serverless 函数的插件 kn-func, 用户新建函数，构建函数镜像和镜像部署到对应的仓库，knative 服务可以从镜像仓库拉取对应的镜像启动服务。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget get https://github.com/knative/func/releases/download/knative-v1.9.0/func_linux_amd64</span><br><span class=\"line\"><span class=\"built_in\">mv</span> func_linux_amd64 kn-func</span><br><span class=\"line\">sudo <span class=\"built_in\">mv</span> ./kn-func /usr/local/bin/</span><br><span class=\"line\">kn func version</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225162255.png\" alt=\"\" /></p>\n<h2 id=\"创建-serverless-函数\"><a class=\"markdownIt-Anchor\" href=\"#创建-serverless-函数\"></a> 创建 Serverless 函数</h2>\n<p>至此我们安装软件的准备工作已经完成，下面我们开始创建函数。例如我们在 <code>cloud-funs</code> 文件夹下创建一个 go 的函数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> cloud-funs &amp;&amp; <span class=\"built_in\">cd</span> cloud-funs</span><br><span class=\"line\">kn func create -l go hello-go</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>go 函数主要内容见链接 <a href=\"https://github.com/knative/func/blob/main/templates/go/http/handle.go\">https://github.com/knative/func/blob/main/templates/go/http/handle.go</a></p>\n</blockquote>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225163030.png\" alt=\"\" /></p>\n<h2 id=\"构建-serveless-镜像\"><a class=\"markdownIt-Anchor\" href=\"#构建-serveless-镜像\"></a> 构建 Serveless 镜像</h2>\n<ol>\n<li>建过程中需要依赖 Google 镜像 <a href=\"https://gcr.io/paketo-buildpacks/builder:base\">https://gcr.io/paketo-buildpacks/builder:base</a> 因为众所周知的网络隔离，我们无法使用 Google 的镜像，网络上说的改本地镜像名的方法也不靠谱。最终我折腾了好久解决了这个问题…</li>\n</ol>\n<ul>\n<li><code>Registry for function images:</code> 填docker仓库地址（用于镜像部署），如果没有仓库可以暂时随便填个字符串，不影响以下流程。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cloud-funs <span class=\"built_in\">cd</span> hello-go  </span><br><span class=\"line\">kn func build </span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225163800.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>本地校验函数, 可以看到服务运行在 8080 端口</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn func run</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225164524.png\" alt=\"\" /></p>\n<p>另一个终端执行<br />\n<code>curl &quot;http://127.0.0.1:8080?hello=1&quot;</code> 能收到返回值如下，符合刚刚我们创建的函数的返回值，说明 serverless 函数运行成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /?hello=1 HTTP/1.1 127.0.0.1:8080</span><br><span class=\"line\">  User-Agent: curl/7.68.0</span><br><span class=\"line\">  Accept: */*</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225165014.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>镜像部署, 部署成功后能在<a href=\"https://hub.docker.com/repository/docker/wmw1005docker/hello-go/general\">镜像仓库</a>中看到对应的镜像。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn func deploy</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225165814.png\" alt=\"\" /></p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225165942.png\" alt=\"Docker 镜像中的显示\" /></p>\n<h2 id=\"使用-knative-服务\"><a class=\"markdownIt-Anchor\" href=\"#使用-knative-服务\"></a> 使用 Knative 服务</h2>\n<p>上一步我们将镜像部署到仓库的同时，也部署在了本地 knative 集群中，访问地址是 <code>http://hello-go.default.127.0.0.1.sslip.io</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn service list</span><br><span class=\"line\">curl <span class=\"string\">&quot;http://hello-go.default.127.0.0.1.sslip.io?hello=1&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225170349.png\" alt=\"\" /></p>\n<p><code>kn service --help</code> 可以查看完成的命令使用说明：</p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225170556.png\" alt=\"\" /></p>\n<ol>\n<li>部署 knative service</li>\n</ol>\n<p>这次我们使用远程镜像 <code>gcr.io/knative-samples/helloworld-go</code> 进行部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> kn service create hello1 \\</span><br><span class=\"line\">--image gcr.io/knative-samples/helloworld-go \\</span><br><span class=\"line\">--port 8080 \\</span><br><span class=\"line\">--<span class=\"built_in\">env</span> TARGET=World</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225171004.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>自动扩缩容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn service list</span><br><span class=\"line\">kubectl get pod -l serving.knative.dev/service=hello1 -w</span><br><span class=\"line\"><span class=\"comment\"># 另一个终端执行</span></span><br><span class=\"line\">curl <span class=\"string\">&quot;http://hello1.default.127.0.0.1.sslip.io&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225172340.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>流量治理</li>\n</ol>\n<p>每次更新服务都会产生一个服务快照，可以通过流量配置指定新旧版本之间的流量。<code>@latest</code> 表示最新版，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn service update hello1 --env TARGET=Knative</span><br><span class=\"line\"></span><br><span class=\"line\">curl &quot;http://hello1.default.127.0.0.1.sslip.io&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">kn revisions list</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225172700.png\" alt=\"\" /></p>\n<p>可以看到流量现在 100% 都在 函数 <code>hello1-00002</code>， 接下来我们设置两个函数各占 50% 流量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn service update hello1 \\</span><br><span class=\"line\">--traffic hello1-00001=50 \\</span><br><span class=\"line\">--traffic @latest=50</span><br><span class=\"line\"></span><br><span class=\"line\">kn revisions list</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225173125.png\" alt=\"服务分流正常\" /></p>\n","site":{"data":{}},"excerpt":"","more":"<p>目前最火的 ChatGpt，据说微软在 2019 年向 OpenAI 投资了约10亿美元的现金和<strong>云代金券</strong>，让团队购买微软云进行训练。在 Cloud Native 的时代背景下，Serverless 这种云原生开发模型，让开发者不需要关注服务器底层的部署，只需要编写功能函数。下面我们介绍如何使用 <a href=\"https://knative.dev/docs/\">Knative</a> 部署一个属于自己的 Serverless 服务集群。</p>\n<h2 id=\"knative-服务安装\"><a class=\"markdownIt-Anchor\" href=\"#knative-服务安装\"></a> Knative 服务安装</h2>\n<p>Knative 本质上是在K8s 上的一个容器管理服务。在K8s集群中能轻松运行无服务器容器，Knative 负责网络的自动扩缩容，而且可以通过 <code>knative/func</code> 插件支持构建多种编程语言容器。目前支持的编程语言或框架如下，当然用户能自己扩展函数模板。</p>\n<table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Format</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Go</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/go/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Go</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/go/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>Node.js</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/node/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Node.js</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/node/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>Python</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/python/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Python</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/python/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>Quarkus</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/quarkus/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Quarkus</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/quarkus/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>Rust</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/rust/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Rust</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/rust/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>Springboot</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/springboot/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>Springboot</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/springboot/http\">HTTP</a></td>\n</tr>\n<tr>\n<td>TypeScript</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/typescript/cloudevents\">CloudEvents</a></td>\n</tr>\n<tr>\n<td>TypeScript</td>\n<td><a href=\"https://github.com/knative/func/tree/main/templates/typescript/http\">HTTP</a></td>\n</tr>\n</tbody>\n</table>\n<p>根据<a href=\"https://knative.dev/docs/getting-started/\">官网的介绍</a>， 使用 Knative 需要先安装一些软件，而且至少需要3核内存3GB的机器。</p>\n<ol>\n<li>安装 <a href=\"https://kind.sigs.k8s.io/docs/user/quick-start\">Kind</a> , Kind 可以很方便的一键式创建一个 k8s 集群。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64</span><br><span class=\"line\">chmod +x ./kind</span><br><span class=\"line\">sudo mv ./kind /usr/local/bin/kind</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装 <a href=\"https://kubernetes.io/docs/tasks/tools/\">kubectl</a>, 顾名思义这个工具是 k8s 客户端管理工具。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LO <span class=\"string\">&quot;https://dl.k8s.io/<span class=\"subst\">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl.sha256&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x kubectl</span><br><span class=\"line\">sudo <span class=\"built_in\">mv</span> ./kubectl /usr/local/bin/kind</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>安装 knative client 插件, knative 命令式客户端;</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/knative/client/releases/download/knative-v1.9.0/kn-linux-amd64</span><br><span class=\"line\"><span class=\"built_in\">mv</span> kn-linux-amd64 kn</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x ./kn</span><br><span class=\"line\">sudo <span class=\"built_in\">mv</span> ./kn /usr/local/bin/</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>安装 knative quickstart 插件, 一键创建k8s集群并部署 knative 服务的工具, 注意我写文档时候 最新版 <code>version 1.9.0</code>是有问题的因此只能先下载 <code>v1.8.1</code></li>\n</ol>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225161046.png\" alt=\"https://github.com/knative-sandbox/kn-plugin-quickstart/issues/393\" /></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/knative-sandbox/kn-plugin-quickstart/releases/download/knative-v1.8.1/kn-quickstart-linux-amd64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mv</span> kn-quickstart-linux-amd64 kn-quickstart</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x ./kn-quickstart</span><br><span class=\"line\">sudo <span class=\"built_in\">mv</span> ./kn-quickstart /usr/local/bin/</span><br></pre></td></tr></table></figure>\n<p>安装完这些我们已经可以部署一个 knative 的集群了，启动后通过 <code>kind get clusters</code> 能看到对应集knative群说明服务正常。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn quickstart kind</span><br><span class=\"line\">kind get clusters</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225161617.png\" alt=\"\" /></p>\n<ol start=\"5\">\n<li>下面我们来安装构建 serverless 函数的插件 kn-func, 用户新建函数，构建函数镜像和镜像部署到对应的仓库，knative 服务可以从镜像仓库拉取对应的镜像启动服务。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget get https://github.com/knative/func/releases/download/knative-v1.9.0/func_linux_amd64</span><br><span class=\"line\"><span class=\"built_in\">mv</span> func_linux_amd64 kn-func</span><br><span class=\"line\">sudo <span class=\"built_in\">mv</span> ./kn-func /usr/local/bin/</span><br><span class=\"line\">kn func version</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225162255.png\" alt=\"\" /></p>\n<h2 id=\"创建-serverless-函数\"><a class=\"markdownIt-Anchor\" href=\"#创建-serverless-函数\"></a> 创建 Serverless 函数</h2>\n<p>至此我们安装软件的准备工作已经完成，下面我们开始创建函数。例如我们在 <code>cloud-funs</code> 文件夹下创建一个 go 的函数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> cloud-funs &amp;&amp; <span class=\"built_in\">cd</span> cloud-funs</span><br><span class=\"line\">kn func create -l go hello-go</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>go 函数主要内容见链接 <a href=\"https://github.com/knative/func/blob/main/templates/go/http/handle.go\">https://github.com/knative/func/blob/main/templates/go/http/handle.go</a></p>\n</blockquote>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225163030.png\" alt=\"\" /></p>\n<h2 id=\"构建-serveless-镜像\"><a class=\"markdownIt-Anchor\" href=\"#构建-serveless-镜像\"></a> 构建 Serveless 镜像</h2>\n<ol>\n<li>建过程中需要依赖 Google 镜像 <a href=\"https://gcr.io/paketo-buildpacks/builder:base\">https://gcr.io/paketo-buildpacks/builder:base</a> 因为众所周知的网络隔离，我们无法使用 Google 的镜像，网络上说的改本地镜像名的方法也不靠谱。最终我折腾了好久解决了这个问题…</li>\n</ol>\n<ul>\n<li><code>Registry for function images:</code> 填docker仓库地址（用于镜像部署），如果没有仓库可以暂时随便填个字符串，不影响以下流程。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cloud-funs <span class=\"built_in\">cd</span> hello-go  </span><br><span class=\"line\">kn func build </span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225163800.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>本地校验函数, 可以看到服务运行在 8080 端口</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn func run</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225164524.png\" alt=\"\" /></p>\n<p>另一个终端执行<br />\n<code>curl &quot;http://127.0.0.1:8080?hello=1&quot;</code> 能收到返回值如下，符合刚刚我们创建的函数的返回值，说明 serverless 函数运行成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /?hello=1 HTTP/1.1 127.0.0.1:8080</span><br><span class=\"line\">  User-Agent: curl/7.68.0</span><br><span class=\"line\">  Accept: */*</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225165014.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>镜像部署, 部署成功后能在<a href=\"https://hub.docker.com/repository/docker/wmw1005docker/hello-go/general\">镜像仓库</a>中看到对应的镜像。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn func deploy</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225165814.png\" alt=\"\" /></p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225165942.png\" alt=\"Docker 镜像中的显示\" /></p>\n<h2 id=\"使用-knative-服务\"><a class=\"markdownIt-Anchor\" href=\"#使用-knative-服务\"></a> 使用 Knative 服务</h2>\n<p>上一步我们将镜像部署到仓库的同时，也部署在了本地 knative 集群中，访问地址是 <code>http://hello-go.default.127.0.0.1.sslip.io</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn service list</span><br><span class=\"line\">curl <span class=\"string\">&quot;http://hello-go.default.127.0.0.1.sslip.io?hello=1&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225170349.png\" alt=\"\" /></p>\n<p><code>kn service --help</code> 可以查看完成的命令使用说明：</p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225170556.png\" alt=\"\" /></p>\n<ol>\n<li>部署 knative service</li>\n</ol>\n<p>这次我们使用远程镜像 <code>gcr.io/knative-samples/helloworld-go</code> 进行部署。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> kn service create hello1 \\</span><br><span class=\"line\">--image gcr.io/knative-samples/helloworld-go \\</span><br><span class=\"line\">--port 8080 \\</span><br><span class=\"line\">--<span class=\"built_in\">env</span> TARGET=World</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225171004.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>自动扩缩容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn service list</span><br><span class=\"line\">kubectl get pod -l serving.knative.dev/service=hello1 -w</span><br><span class=\"line\"><span class=\"comment\"># 另一个终端执行</span></span><br><span class=\"line\">curl <span class=\"string\">&quot;http://hello1.default.127.0.0.1.sslip.io&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225172340.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>流量治理</li>\n</ol>\n<p>每次更新服务都会产生一个服务快照，可以通过流量配置指定新旧版本之间的流量。<code>@latest</code> 表示最新版，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn service update hello1 --env TARGET=Knative</span><br><span class=\"line\"></span><br><span class=\"line\">curl &quot;http://hello1.default.127.0.0.1.sslip.io&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">kn revisions list</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225172700.png\" alt=\"\" /></p>\n<p>可以看到流量现在 100% 都在 函数 <code>hello1-00002</code>， 接下来我们设置两个函数各占 50% 流量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kn service update hello1 \\</span><br><span class=\"line\">--traffic hello1-00001=50 \\</span><br><span class=\"line\">--traffic @latest=50</span><br><span class=\"line\"></span><br><span class=\"line\">kn revisions list</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230225173125.png\" alt=\"服务分流正常\" /></p>\n"},{"title":"headless 组件设计","date":"2023-03-08T00:31:57.000Z","_content":"# Headless UI 介绍\n\n因为每个业务的发展不一样，设计也不同，一般前端业务发展到一定的承度都会输出一些自己的组件库，类似于 `Material ui` 、`Antd` 、`Arco` 等都是有自己的业务特色的组件库，因为这些组件库功能大多相似更多的是UI上的差异。所以也有一些重复的代码逻辑和设计思想。这时候自然就有人想到了能不能做到UI和组件逻辑分离。这样只要逻辑一致各个团队都可以自定义自己的 `UI`，本质上是一种开闭原则的思想。这样的背景下诞生了 `Headless UI` 这个概念, 可能命名上有参考 `Headless Browser`（无用户操作界面的浏览器）。\n\n# 组件分析\n当前已经有很多组件库设计采用了 `Headless UI` 都设计思想。例如： \n\n# 设计组件\n\n# 使用组件\n\n\n# 参考项目\n- [https://headlessui.com/](https://headlessui.com/)\n- [https://chakra-ui.com/docs/components](https://chakra-ui.com/docs/components)\n- [https://github.com/jxom/awesome-react-headless-components](https://github.com/jxom/awesome-react-headless-components)","source":"_posts/headless-ui.md","raw":"---\ntitle: headless 组件设计\ndate: 2023-03-08 08:31:57\ntags: Web\n---\n# Headless UI 介绍\n\n因为每个业务的发展不一样，设计也不同，一般前端业务发展到一定的承度都会输出一些自己的组件库，类似于 `Material ui` 、`Antd` 、`Arco` 等都是有自己的业务特色的组件库，因为这些组件库功能大多相似更多的是UI上的差异。所以也有一些重复的代码逻辑和设计思想。这时候自然就有人想到了能不能做到UI和组件逻辑分离。这样只要逻辑一致各个团队都可以自定义自己的 `UI`，本质上是一种开闭原则的思想。这样的背景下诞生了 `Headless UI` 这个概念, 可能命名上有参考 `Headless Browser`（无用户操作界面的浏览器）。\n\n# 组件分析\n当前已经有很多组件库设计采用了 `Headless UI` 都设计思想。例如： \n\n# 设计组件\n\n# 使用组件\n\n\n# 参考项目\n- [https://headlessui.com/](https://headlessui.com/)\n- [https://chakra-ui.com/docs/components](https://chakra-ui.com/docs/components)\n- [https://github.com/jxom/awesome-react-headless-components](https://github.com/jxom/awesome-react-headless-components)","slug":"headless-ui","published":1,"updated":"2023-03-24T14:09:43.039Z","_id":"clez07k110000g4ufdbi8ddk4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"headless-ui-介绍\"><a class=\"markdownIt-Anchor\" href=\"#headless-ui-介绍\"></a> Headless UI 介绍</h1>\n<p>因为每个业务的发展不一样，设计也不同，一般前端业务发展到一定的承度都会输出一些自己的组件库，类似于 <code>Material ui</code> 、<code>Antd</code> 、<code>Arco</code> 等都是有自己的业务特色的组件库，因为这些组件库功能大多相似更多的是UI上的差异。所以也有一些重复的代码逻辑和设计思想。这时候自然就有人想到了能不能做到UI和组件逻辑分离。这样只要逻辑一致各个团队都可以自定义自己的 <code>UI</code>，本质上是一种开闭原则的思想。这样的背景下诞生了 <code>Headless UI</code> 这个概念, 可能命名上有参考 <code>Headless Browser</code>（无用户操作界面的浏览器）。</p>\n<h1 id=\"组件分析\"><a class=\"markdownIt-Anchor\" href=\"#组件分析\"></a> 组件分析</h1>\n<p>当前已经有很多组件库设计采用了 <code>Headless UI</code> 都设计思想。例如：</p>\n<h1 id=\"设计组件\"><a class=\"markdownIt-Anchor\" href=\"#设计组件\"></a> 设计组件</h1>\n<h1 id=\"使用组件\"><a class=\"markdownIt-Anchor\" href=\"#使用组件\"></a> 使用组件</h1>\n<h1 id=\"参考项目\"><a class=\"markdownIt-Anchor\" href=\"#参考项目\"></a> 参考项目</h1>\n<ul>\n<li><a href=\"https://headlessui.com/\">https://headlessui.com/</a></li>\n<li><a href=\"https://chakra-ui.com/docs/components\">https://chakra-ui.com/docs/components</a></li>\n<li><a href=\"https://github.com/jxom/awesome-react-headless-components\">https://github.com/jxom/awesome-react-headless-components</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"headless-ui-介绍\"><a class=\"markdownIt-Anchor\" href=\"#headless-ui-介绍\"></a> Headless UI 介绍</h1>\n<p>因为每个业务的发展不一样，设计也不同，一般前端业务发展到一定的承度都会输出一些自己的组件库，类似于 <code>Material ui</code> 、<code>Antd</code> 、<code>Arco</code> 等都是有自己的业务特色的组件库，因为这些组件库功能大多相似更多的是UI上的差异。所以也有一些重复的代码逻辑和设计思想。这时候自然就有人想到了能不能做到UI和组件逻辑分离。这样只要逻辑一致各个团队都可以自定义自己的 <code>UI</code>，本质上是一种开闭原则的思想。这样的背景下诞生了 <code>Headless UI</code> 这个概念, 可能命名上有参考 <code>Headless Browser</code>（无用户操作界面的浏览器）。</p>\n<h1 id=\"组件分析\"><a class=\"markdownIt-Anchor\" href=\"#组件分析\"></a> 组件分析</h1>\n<p>当前已经有很多组件库设计采用了 <code>Headless UI</code> 都设计思想。例如：</p>\n<h1 id=\"设计组件\"><a class=\"markdownIt-Anchor\" href=\"#设计组件\"></a> 设计组件</h1>\n<h1 id=\"使用组件\"><a class=\"markdownIt-Anchor\" href=\"#使用组件\"></a> 使用组件</h1>\n<h1 id=\"参考项目\"><a class=\"markdownIt-Anchor\" href=\"#参考项目\"></a> 参考项目</h1>\n<ul>\n<li><a href=\"https://headlessui.com/\">https://headlessui.com/</a></li>\n<li><a href=\"https://chakra-ui.com/docs/components\">https://chakra-ui.com/docs/components</a></li>\n<li><a href=\"https://github.com/jxom/awesome-react-headless-components\">https://github.com/jxom/awesome-react-headless-components</a></li>\n</ul>\n"},{"title":"React 使用 immer","date":"2023-07-17T15:48:59.000Z","_content":"\n## 不可变数据\n\n在 React 中数据发生了变更组件就会重新渲染，为了更高效的判断数据是否变更，React 使用了不可变数据（浅比较），这就导致如果直接修改源数据，组件并不会重新渲染。 更新数据都是需要创建一个新的数据副本，下面我们来演示一下不可变数据\n\n1.我们定义了一个 animal 相关的数据，在  useEffect 修改了 animal 的 name 属性。\n\n```jsx\nexport default function Page() {\n  const [animal, setAnimal] = useState({\n    name: 'cat',\n    body: {\n      color: 'white',\n    },\n  });\n\n  useEffect(() => {\n    animal.name = 'dog';\n    setAnimal(animal);\n  }, []);\n\n  console.log(JSON.stringify(animal, null, 2));\n\n  return null;\n}\n\n```\n\n![](https://p1.hfutonline.cn/a-img/20230729222808.png)\n\n通过最终输出的结果可以看出来，数据并没有发生变更。是因为 React 底层采用的是不可变数据，直接修改数据，虽然影响了 animal 对象属性的值，但 animal 数据本身的内存地址并未发生变化，所以 setAnimal 不会触发数据更新。\n\n\n2.为了数据能更新成功，我们需要创建一个新的对象并且把原有对象复制过来，再复写我们想更新的属性。\n\n```jsx\n  useEffect(() => {\n    setAnimal({\n      ...animal,\n      name: 'dog',\n    });\n  }, []);\n\n```\n![](https://p1.hfutonline.cn/a-img/20230729222843.png)\n\n输出显示这样可以更新成功。\n\n\n3.假设我们想更新color 值，由于color属性位于嵌套对象的第二层。\n\n```jsx\n  useEffect(() => {\n    animal.body.color = 'black';\n    setAnimal({\n      ...animal,\n      name: 'dog',\n    });\n  }, []);\n\n```\n\n![](https://p1.hfutonline.cn/a-img/20230729223216.png)\n\n通过操作看到数据确实更新了，在这个场景下看似正确，但是其实我们已经在不知不觉中埋下了一个错误。\n\n4.这时候我们把案例变得复杂。我们增加一个 useEffect 希望能监听到 body 属性的变更。\n\n```jsx\n  useEffect(()=>{\n    console.log(\"animal.body change\", animal.body)\n  }, [animal.body])\n\n  useEffect(() => {\n    animal.body.color = 'black';\n    setAnimal({\n      ...animal,\n      name: 'dog',\n    });\n  }, []);\n\n```\n![](https://p1.hfutonline.cn/a-img/20230729223236.png)\n\n由于代码直接修改了 body 的 color 属性，对于 body 这个对象来说他的内存地址是没有任何变化的，只是内部属性的值发生了变动。所以 useEffect 中的 console 只输出了 `color: white` color值被二次调整成 `black` 并未被监听到。\n\n5.为了让 body 内部属性的变动可以被监听到，所以我们要再次修改 setAnimal 的逻辑，对于一个有嵌套层级的对象，如果我们要更新内层的某一个属性，一定要将对象每一层都要重新创建一遍（深拷贝）。\n\n```jsx\n  useEffect(()=>{\n    console.log(\"animal.body change\", animal.body)\n  }, [animal.body])\n\n  useEffect(() => {\n    setAnimal({\n      ...animal,\n      name: 'dog',\n      body: {\n        ...animal.body,\n        color: 'black',\n      }\n    });\n  }, []);\n```\n![](https://p1.hfutonline.cn/a-img/20230729223305.png)\n\n这样能准确的监听到 body 属性的变更。 这种方案有两个明显的缺点，1. 如果对象嵌套层数较多，需要按层解构，赋值，代码中会充斥这很多这样的模板代码。2. 为了更新某一个属性却要把所有的值都复制一次，会带来很多不必要的内存浪费 和 更频繁的 GC对应的CPU资源的浪费。\n\n> 小程序完整代码\n\n```jsx\nexport default function Page() {\n  const [animal, setAnimal] = useState({\n    name: 'cat',\n    body: {\n      color: 'white',\n    },\n  });\n  \n  useEffect(()=>{\n    console.log(\"animal.body change\", animal.body)\n  }, [animal.body])\n\n  useEffect(() => {\n    setAnimal({\n      ...animal,\n      name: 'dog',\n      body: {\n        ...animal.body,\n        color: 'black',\n      }\n    });\n  }, []);\n\n  console.log(JSON.stringify(animal, null, 2));\n\n  return null;\n}\n```\n\n为了解决不可变数据的更新问题，引入了 Immer 这一套解决方案 .\n\n## 使用 Immer\n\n> Immer 文档 [https://immerjs.github.io/immer/zh-CN/](https://immerjs.github.io/immer/zh-CN/)\n\nimmer 的基本思想是 通过对我们当前的数据 currentState 进行代理 生成 中间态 draftState，更新 drafState 中的数据，immer 会生成新的 nextState。\n    \n![](https://p1.hfutonline.cn/a-img/20230729223339.png)\n    \n\n```jsx\nexport default function Home() {\n  const [currentData, setCurrentData] = useState<any>({ current: 1 });\n  \n  useEffect(() => {\n    const nextData = produce(currentData, (draftData: any) => {\n      draftData.current = 2;\n    })\n    setCurrentData(nextData);\n  }, []);\n\n  console.log('currentData.current', currentData.current);\n  return null;\n}\n\n// 输出\n// currentData.current 1\n// currentData.current 2\n```\n\n- hooks 写法\n\n```jsx\nexport default function Home() {\n  const [currentData, setCurrentData] = useImmer<any>({ current: 1 });\n  \n  useEffect(() => {\n    setCurrentData((draftState: any) => {\n      draftState.current = 2;\n    });\n  }, []);\n\n  console.log(\"currentData.current\", currentData.current);\n  return null;\n}\n```\n\n接着我们使用 Immer 对之前的小程序进行改造\n\n```jsx\nexport default function Page() {\n  const [animal, setAnimal] = useImmer({\n    name: 'cat',\n    body: {\n      color: 'white',\n    },\n  });\n\n  useEffect(()=>{\n    console.log(\"animal.body change\", animal.body)\n  }, [animal.body])\n\n  useEffect(() => {\n    setAnimal((draft)=> {\n      draft.body.color = 'black'\n    });\n  }, []);\n\n  console.log(JSON.stringify(animal, null, 2));\n\n  return null;\n}\n```\n\n同样的功能使用 immer 之后少了很多模板代码，程序变得整洁，而且也不容易出错。\n\n## Immer 的特点\n\n- 写时复制（Copy on Write）\n\n```jsx\nexport default function Page() {\n  const [data, setData] = useState({\n    d1: { a: 1 },\n    d2: { a: 2 },\n    d3: { a: 3 },\n  });\n\n  const nextState = produce(data, (draftState: any) => {\n    console.log(draftState.d1)\n  });\n  console.log(\"nextState === data\", nextState === data);\n  const nextState2 = produce(data, (draftState: any) => {\n    draftState.d1.a = 4;\n  });\n  console.log(\"nextState2 === data\", nextState2 === data);\n  console.log(\"nextState2.d1 === data.d1\", nextState2.d1 === data.d1);\n  console.log(\"nextState2.d2 === data.d2\", nextState2.d2 === data.d2);\n\n  return null;\n}\n\n```\n![](https://p1.hfutonline.cn/a-img/20230729223436.png)\n\nimmer 利用 Proxy 代理原对象，我们不对任何属性做修改时，nextState 和 data 的值相等，说明数据没有发生复制，当 draftState 发生了部分写入的时候，只有原对象的地址和发生修改的地方产生了数据复制，没有写入的部分数据并不会产生数据复制，相对于深拷贝更新来说能减少内存的占用，减少不必要的GC。\n\n> buildData 函数\n\n```jsx\nconst buildData = () => {\n  let data: any = {};\n  for (let i = 0; i < 1024 * 1024; i++) {\n    data[`${i}`] = `${i}`;\n  }\n  return {\n    data,\n    data2: 0\n  };\n};\n```\n\n1.深拷贝更新数据时候内存图\n\n```jsx\nexport default function Page() {\n  const [state, setState] = useState<any>(buildData());\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setState((ctr: any) => {\n        return {\n          ...ctr,\n          data: {\n            ...ctr.data,\n          },\n          data2: 1\n        };\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n}\n```\n![](https://p1.hfutonline.cn/a-img/20230729223604.png)\n\n2.使用 immer 之后的内存图\n\n```jsx\nexport default function Page() {\n  const [state, setState] = useImmer<any>(buildData());\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setState((ctr: any) => {\n        ctr.data2 = 1;\n      })\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n}\n```\n\n![](https://p1.hfutonline.cn/a-img/20230729223457.png)\n\n> 虽然上面的例子看上去有些刻意，我的想法是能从逻辑上证明使用immer在某些场景下更新数据是能减少开发者的心智负担，减少程序出现的问题，有时还能减少程序内存的占用和减少CPU的消耗，至少使用immer 之后不会对程序造成太大的负面影响。\n\n在学习的过程中，还发现了一个社区里面一次有趣的讨论 Redux Toolkit 团队不断有用户提 pr ，想要将 immer 变成可选的属性，开发着则认为 immer 对性能影响不大，而且帮助很大应该保留。\n\n- Redux toolkit 社区的争论 https://github.com/reduxjs/redux-toolkit/issues/242\n- immer 性能 [https://immerjs.github.io/immer/zh-CN/performance](https://immerjs.github.io/immer/zh-CN/performance)","source":"_posts/react-immer.md","raw":"---\ntitle: React 使用 immer\ndate: 2023-07-17 23:48:59\ntags: \n - React\n - 前端\n---\n\n## 不可变数据\n\n在 React 中数据发生了变更组件就会重新渲染，为了更高效的判断数据是否变更，React 使用了不可变数据（浅比较），这就导致如果直接修改源数据，组件并不会重新渲染。 更新数据都是需要创建一个新的数据副本，下面我们来演示一下不可变数据\n\n1.我们定义了一个 animal 相关的数据，在  useEffect 修改了 animal 的 name 属性。\n\n```jsx\nexport default function Page() {\n  const [animal, setAnimal] = useState({\n    name: 'cat',\n    body: {\n      color: 'white',\n    },\n  });\n\n  useEffect(() => {\n    animal.name = 'dog';\n    setAnimal(animal);\n  }, []);\n\n  console.log(JSON.stringify(animal, null, 2));\n\n  return null;\n}\n\n```\n\n![](https://p1.hfutonline.cn/a-img/20230729222808.png)\n\n通过最终输出的结果可以看出来，数据并没有发生变更。是因为 React 底层采用的是不可变数据，直接修改数据，虽然影响了 animal 对象属性的值，但 animal 数据本身的内存地址并未发生变化，所以 setAnimal 不会触发数据更新。\n\n\n2.为了数据能更新成功，我们需要创建一个新的对象并且把原有对象复制过来，再复写我们想更新的属性。\n\n```jsx\n  useEffect(() => {\n    setAnimal({\n      ...animal,\n      name: 'dog',\n    });\n  }, []);\n\n```\n![](https://p1.hfutonline.cn/a-img/20230729222843.png)\n\n输出显示这样可以更新成功。\n\n\n3.假设我们想更新color 值，由于color属性位于嵌套对象的第二层。\n\n```jsx\n  useEffect(() => {\n    animal.body.color = 'black';\n    setAnimal({\n      ...animal,\n      name: 'dog',\n    });\n  }, []);\n\n```\n\n![](https://p1.hfutonline.cn/a-img/20230729223216.png)\n\n通过操作看到数据确实更新了，在这个场景下看似正确，但是其实我们已经在不知不觉中埋下了一个错误。\n\n4.这时候我们把案例变得复杂。我们增加一个 useEffect 希望能监听到 body 属性的变更。\n\n```jsx\n  useEffect(()=>{\n    console.log(\"animal.body change\", animal.body)\n  }, [animal.body])\n\n  useEffect(() => {\n    animal.body.color = 'black';\n    setAnimal({\n      ...animal,\n      name: 'dog',\n    });\n  }, []);\n\n```\n![](https://p1.hfutonline.cn/a-img/20230729223236.png)\n\n由于代码直接修改了 body 的 color 属性，对于 body 这个对象来说他的内存地址是没有任何变化的，只是内部属性的值发生了变动。所以 useEffect 中的 console 只输出了 `color: white` color值被二次调整成 `black` 并未被监听到。\n\n5.为了让 body 内部属性的变动可以被监听到，所以我们要再次修改 setAnimal 的逻辑，对于一个有嵌套层级的对象，如果我们要更新内层的某一个属性，一定要将对象每一层都要重新创建一遍（深拷贝）。\n\n```jsx\n  useEffect(()=>{\n    console.log(\"animal.body change\", animal.body)\n  }, [animal.body])\n\n  useEffect(() => {\n    setAnimal({\n      ...animal,\n      name: 'dog',\n      body: {\n        ...animal.body,\n        color: 'black',\n      }\n    });\n  }, []);\n```\n![](https://p1.hfutonline.cn/a-img/20230729223305.png)\n\n这样能准确的监听到 body 属性的变更。 这种方案有两个明显的缺点，1. 如果对象嵌套层数较多，需要按层解构，赋值，代码中会充斥这很多这样的模板代码。2. 为了更新某一个属性却要把所有的值都复制一次，会带来很多不必要的内存浪费 和 更频繁的 GC对应的CPU资源的浪费。\n\n> 小程序完整代码\n\n```jsx\nexport default function Page() {\n  const [animal, setAnimal] = useState({\n    name: 'cat',\n    body: {\n      color: 'white',\n    },\n  });\n  \n  useEffect(()=>{\n    console.log(\"animal.body change\", animal.body)\n  }, [animal.body])\n\n  useEffect(() => {\n    setAnimal({\n      ...animal,\n      name: 'dog',\n      body: {\n        ...animal.body,\n        color: 'black',\n      }\n    });\n  }, []);\n\n  console.log(JSON.stringify(animal, null, 2));\n\n  return null;\n}\n```\n\n为了解决不可变数据的更新问题，引入了 Immer 这一套解决方案 .\n\n## 使用 Immer\n\n> Immer 文档 [https://immerjs.github.io/immer/zh-CN/](https://immerjs.github.io/immer/zh-CN/)\n\nimmer 的基本思想是 通过对我们当前的数据 currentState 进行代理 生成 中间态 draftState，更新 drafState 中的数据，immer 会生成新的 nextState。\n    \n![](https://p1.hfutonline.cn/a-img/20230729223339.png)\n    \n\n```jsx\nexport default function Home() {\n  const [currentData, setCurrentData] = useState<any>({ current: 1 });\n  \n  useEffect(() => {\n    const nextData = produce(currentData, (draftData: any) => {\n      draftData.current = 2;\n    })\n    setCurrentData(nextData);\n  }, []);\n\n  console.log('currentData.current', currentData.current);\n  return null;\n}\n\n// 输出\n// currentData.current 1\n// currentData.current 2\n```\n\n- hooks 写法\n\n```jsx\nexport default function Home() {\n  const [currentData, setCurrentData] = useImmer<any>({ current: 1 });\n  \n  useEffect(() => {\n    setCurrentData((draftState: any) => {\n      draftState.current = 2;\n    });\n  }, []);\n\n  console.log(\"currentData.current\", currentData.current);\n  return null;\n}\n```\n\n接着我们使用 Immer 对之前的小程序进行改造\n\n```jsx\nexport default function Page() {\n  const [animal, setAnimal] = useImmer({\n    name: 'cat',\n    body: {\n      color: 'white',\n    },\n  });\n\n  useEffect(()=>{\n    console.log(\"animal.body change\", animal.body)\n  }, [animal.body])\n\n  useEffect(() => {\n    setAnimal((draft)=> {\n      draft.body.color = 'black'\n    });\n  }, []);\n\n  console.log(JSON.stringify(animal, null, 2));\n\n  return null;\n}\n```\n\n同样的功能使用 immer 之后少了很多模板代码，程序变得整洁，而且也不容易出错。\n\n## Immer 的特点\n\n- 写时复制（Copy on Write）\n\n```jsx\nexport default function Page() {\n  const [data, setData] = useState({\n    d1: { a: 1 },\n    d2: { a: 2 },\n    d3: { a: 3 },\n  });\n\n  const nextState = produce(data, (draftState: any) => {\n    console.log(draftState.d1)\n  });\n  console.log(\"nextState === data\", nextState === data);\n  const nextState2 = produce(data, (draftState: any) => {\n    draftState.d1.a = 4;\n  });\n  console.log(\"nextState2 === data\", nextState2 === data);\n  console.log(\"nextState2.d1 === data.d1\", nextState2.d1 === data.d1);\n  console.log(\"nextState2.d2 === data.d2\", nextState2.d2 === data.d2);\n\n  return null;\n}\n\n```\n![](https://p1.hfutonline.cn/a-img/20230729223436.png)\n\nimmer 利用 Proxy 代理原对象，我们不对任何属性做修改时，nextState 和 data 的值相等，说明数据没有发生复制，当 draftState 发生了部分写入的时候，只有原对象的地址和发生修改的地方产生了数据复制，没有写入的部分数据并不会产生数据复制，相对于深拷贝更新来说能减少内存的占用，减少不必要的GC。\n\n> buildData 函数\n\n```jsx\nconst buildData = () => {\n  let data: any = {};\n  for (let i = 0; i < 1024 * 1024; i++) {\n    data[`${i}`] = `${i}`;\n  }\n  return {\n    data,\n    data2: 0\n  };\n};\n```\n\n1.深拷贝更新数据时候内存图\n\n```jsx\nexport default function Page() {\n  const [state, setState] = useState<any>(buildData());\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setState((ctr: any) => {\n        return {\n          ...ctr,\n          data: {\n            ...ctr.data,\n          },\n          data2: 1\n        };\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n}\n```\n![](https://p1.hfutonline.cn/a-img/20230729223604.png)\n\n2.使用 immer 之后的内存图\n\n```jsx\nexport default function Page() {\n  const [state, setState] = useImmer<any>(buildData());\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setState((ctr: any) => {\n        ctr.data2 = 1;\n      })\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n}\n```\n\n![](https://p1.hfutonline.cn/a-img/20230729223457.png)\n\n> 虽然上面的例子看上去有些刻意，我的想法是能从逻辑上证明使用immer在某些场景下更新数据是能减少开发者的心智负担，减少程序出现的问题，有时还能减少程序内存的占用和减少CPU的消耗，至少使用immer 之后不会对程序造成太大的负面影响。\n\n在学习的过程中，还发现了一个社区里面一次有趣的讨论 Redux Toolkit 团队不断有用户提 pr ，想要将 immer 变成可选的属性，开发着则认为 immer 对性能影响不大，而且帮助很大应该保留。\n\n- Redux toolkit 社区的争论 https://github.com/reduxjs/redux-toolkit/issues/242\n- immer 性能 [https://immerjs.github.io/immer/zh-CN/performance](https://immerjs.github.io/immer/zh-CN/performance)","slug":"react-immer","published":1,"updated":"2023-07-29T14:41:35.675Z","_id":"clko48z4z0000douf3535fyiw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"不可变数据\"><a class=\"markdownIt-Anchor\" href=\"#不可变数据\"></a> 不可变数据</h2>\n<p>在 React 中数据发生了变更组件就会重新渲染，为了更高效的判断数据是否变更，React 使用了不可变数据（浅比较），这就导致如果直接修改源数据，组件并不会重新渲染。 更新数据都是需要创建一个新的数据副本，下面我们来演示一下不可变数据</p>\n<p>1.我们定义了一个 animal 相关的数据，在  useEffect 修改了 animal 的 name 属性。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [animal, setAnimal] = <span class=\"title function_\">useState</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;cat&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    animal.<span class=\"property\">name</span> = <span class=\"string\">&#x27;dog&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">setAnimal</span>(animal);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(animal, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729222808.png\" alt=\"\" /></p>\n<p>通过最终输出的结果可以看出来，数据并没有发生变更。是因为 React 底层采用的是不可变数据，直接修改数据，虽然影响了 animal 对象属性的值，但 animal 数据本身的内存地址并未发生变化，所以 setAnimal 不会触发数据更新。</p>\n<p>2.为了数据能更新成功，我们需要创建一个新的对象并且把原有对象复制过来，再复写我们想更新的属性。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setAnimal</span>(&#123;</span><br><span class=\"line\">    ...animal,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dog&#x27;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729222843.png\" alt=\"\" /></p>\n<p>输出显示这样可以更新成功。</p>\n<p>3.假设我们想更新color 值，由于color属性位于嵌套对象的第二层。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  animal.<span class=\"property\">body</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;black&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setAnimal</span>(&#123;</span><br><span class=\"line\">    ...animal,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dog&#x27;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223216.png\" alt=\"\" /></p>\n<p>通过操作看到数据确实更新了，在这个场景下看似正确，但是其实我们已经在不知不觉中埋下了一个错误。</p>\n<p>4.这时候我们把案例变得复杂。我们增加一个 useEffect 希望能监听到 body 属性的变更。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;animal.body change&quot;</span>, animal.<span class=\"property\">body</span>)</span><br><span class=\"line\">&#125;, [animal.<span class=\"property\">body</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  animal.<span class=\"property\">body</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;black&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setAnimal</span>(&#123;</span><br><span class=\"line\">    ...animal,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dog&#x27;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223236.png\" alt=\"\" /></p>\n<p>由于代码直接修改了 body 的 color 属性，对于 body 这个对象来说他的内存地址是没有任何变化的，只是内部属性的值发生了变动。所以 useEffect 中的 console 只输出了 <code>color: white</code> color值被二次调整成 <code>black</code> 并未被监听到。</p>\n<p>5.为了让 body 内部属性的变动可以被监听到，所以我们要再次修改 setAnimal 的逻辑，对于一个有嵌套层级的对象，如果我们要更新内层的某一个属性，一定要将对象每一层都要重新创建一遍（深拷贝）。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;animal.body change&quot;</span>, animal.<span class=\"property\">body</span>)</span><br><span class=\"line\">&#125;, [animal.<span class=\"property\">body</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setAnimal</span>(&#123;</span><br><span class=\"line\">    ...animal,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dog&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      ...animal.<span class=\"property\">body</span>,</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;black&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223305.png\" alt=\"\" /></p>\n<p>这样能准确的监听到 body 属性的变更。 这种方案有两个明显的缺点，1. 如果对象嵌套层数较多，需要按层解构，赋值，代码中会充斥这很多这样的模板代码。2. 为了更新某一个属性却要把所有的值都复制一次，会带来很多不必要的内存浪费 和 更频繁的 GC对应的CPU资源的浪费。</p>\n<blockquote>\n<p>小程序完整代码</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [animal, setAnimal] = <span class=\"title function_\">useState</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;cat&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;animal.body change&quot;</span>, animal.<span class=\"property\">body</span>)</span><br><span class=\"line\">  &#125;, [animal.<span class=\"property\">body</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setAnimal</span>(&#123;</span><br><span class=\"line\">      ...animal,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dog&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">        ...animal.<span class=\"property\">body</span>,</span><br><span class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">&#x27;black&#x27;</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(animal, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了解决不可变数据的更新问题，引入了 Immer 这一套解决方案 .</p>\n<h2 id=\"使用-immer\"><a class=\"markdownIt-Anchor\" href=\"#使用-immer\"></a> 使用 Immer</h2>\n<blockquote>\n<p>Immer 文档 <a href=\"https://immerjs.github.io/immer/zh-CN/\">https://immerjs.github.io/immer/zh-CN/</a></p>\n</blockquote>\n<p>immer 的基本思想是 通过对我们当前的数据 currentState 进行代理 生成 中间态 draftState，更新 drafState 中的数据，immer 会生成新的 nextState。</p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223339.png\" alt=\"\" /></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [currentData, setCurrentData] = useState&lt;any&gt;(&#123; <span class=\"attr\">current</span>: <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextData = <span class=\"title function_\">produce</span>(currentData, <span class=\"function\">(<span class=\"params\">draftData: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      draftData.<span class=\"property\">current</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"title function_\">setCurrentData</span>(nextData);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;currentData.current&#x27;</span>, currentData.<span class=\"property\">current</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// currentData.current 1</span></span><br><span class=\"line\"><span class=\"comment\">// currentData.current 2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>hooks 写法</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [currentData, setCurrentData] = useImmer&lt;any&gt;(&#123; <span class=\"attr\">current</span>: <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCurrentData</span>(<span class=\"function\">(<span class=\"params\">draftState: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      draftState.<span class=\"property\">current</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;currentData.current&quot;</span>, currentData.<span class=\"property\">current</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着我们使用 Immer 对之前的小程序进行改造</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [animal, setAnimal] = <span class=\"title function_\">useImmer</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;cat&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;animal.body change&quot;</span>, animal.<span class=\"property\">body</span>)</span><br><span class=\"line\">  &#125;, [animal.<span class=\"property\">body</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setAnimal</span>(<span class=\"function\">(<span class=\"params\">draft</span>)=&gt;</span> &#123;</span><br><span class=\"line\">      draft.<span class=\"property\">body</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;black&#x27;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(animal, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的功能使用 immer 之后少了很多模板代码，程序变得整洁，而且也不容易出错。</p>\n<h2 id=\"immer-的特点\"><a class=\"markdownIt-Anchor\" href=\"#immer-的特点\"></a> Immer 的特点</h2>\n<ul>\n<li>写时复制（Copy on Write）</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = <span class=\"title function_\">useState</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">d1</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">d2</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">d3</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextState = <span class=\"title function_\">produce</span>(data, <span class=\"function\">(<span class=\"params\">draftState: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(draftState.<span class=\"property\">d1</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nextState === data&quot;</span>, nextState === data);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextState2 = <span class=\"title function_\">produce</span>(data, <span class=\"function\">(<span class=\"params\">draftState: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    draftState.<span class=\"property\">d1</span>.<span class=\"property\">a</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nextState2 === data&quot;</span>, nextState2 === data);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nextState2.d1 === data.d1&quot;</span>, nextState2.<span class=\"property\">d1</span> === data.<span class=\"property\">d1</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nextState2.d2 === data.d2&quot;</span>, nextState2.<span class=\"property\">d2</span> === data.<span class=\"property\">d2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223436.png\" alt=\"\" /></p>\n<p>immer 利用 Proxy 代理原对象，我们不对任何属性做修改时，nextState 和 data 的值相等，说明数据没有发生复制，当 draftState 发生了部分写入的时候，只有原对象的地址和发生修改的地方产生了数据复制，没有写入的部分数据并不会产生数据复制，相对于深拷贝更新来说能减少内存的占用，减少不必要的GC。</p>\n<blockquote>\n<p>buildData 函数</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">buildData</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">data</span>: any = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; i++) &#123;</span><br><span class=\"line\">    data[<span class=\"string\">`<span class=\"subst\">$&#123;i&#125;</span>`</span>] = <span class=\"string\">`<span class=\"subst\">$&#123;i&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    data,</span><br><span class=\"line\">    <span class=\"attr\">data2</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>1.深拷贝更新数据时候内存图</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, setState] = useState&lt;any&gt;(<span class=\"title function_\">buildData</span>());</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setState</span>(<span class=\"function\">(<span class=\"params\">ctr: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          ...ctr,</span><br><span class=\"line\">          <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            ...ctr.<span class=\"property\">data</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">data2</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223604.png\" alt=\"\" /></p>\n<p>2.使用 immer 之后的内存图</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, setState] = useImmer&lt;any&gt;(<span class=\"title function_\">buildData</span>());</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setState</span>(<span class=\"function\">(<span class=\"params\">ctr: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        ctr.<span class=\"property\">data2</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223457.png\" alt=\"\" /></p>\n<blockquote>\n<p>虽然上面的例子看上去有些刻意，我的想法是能从逻辑上证明使用immer在某些场景下更新数据是能减少开发者的心智负担，减少程序出现的问题，有时还能减少程序内存的占用和减少CPU的消耗，至少使用immer 之后不会对程序造成太大的负面影响。</p>\n</blockquote>\n<p>在学习的过程中，还发现了一个社区里面一次有趣的讨论 Redux Toolkit 团队不断有用户提 pr ，想要将 immer 变成可选的属性，开发着则认为 immer 对性能影响不大，而且帮助很大应该保留。</p>\n<ul>\n<li>Redux toolkit 社区的争论 <a href=\"https://github.com/reduxjs/redux-toolkit/issues/242\">https://github.com/reduxjs/redux-toolkit/issues/242</a></li>\n<li>immer 性能 <a href=\"https://immerjs.github.io/immer/zh-CN/performance\">https://immerjs.github.io/immer/zh-CN/performance</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"不可变数据\"><a class=\"markdownIt-Anchor\" href=\"#不可变数据\"></a> 不可变数据</h2>\n<p>在 React 中数据发生了变更组件就会重新渲染，为了更高效的判断数据是否变更，React 使用了不可变数据（浅比较），这就导致如果直接修改源数据，组件并不会重新渲染。 更新数据都是需要创建一个新的数据副本，下面我们来演示一下不可变数据</p>\n<p>1.我们定义了一个 animal 相关的数据，在  useEffect 修改了 animal 的 name 属性。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [animal, setAnimal] = <span class=\"title function_\">useState</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;cat&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    animal.<span class=\"property\">name</span> = <span class=\"string\">&#x27;dog&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">setAnimal</span>(animal);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(animal, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729222808.png\" alt=\"\" /></p>\n<p>通过最终输出的结果可以看出来，数据并没有发生变更。是因为 React 底层采用的是不可变数据，直接修改数据，虽然影响了 animal 对象属性的值，但 animal 数据本身的内存地址并未发生变化，所以 setAnimal 不会触发数据更新。</p>\n<p>2.为了数据能更新成功，我们需要创建一个新的对象并且把原有对象复制过来，再复写我们想更新的属性。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setAnimal</span>(&#123;</span><br><span class=\"line\">    ...animal,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dog&#x27;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729222843.png\" alt=\"\" /></p>\n<p>输出显示这样可以更新成功。</p>\n<p>3.假设我们想更新color 值，由于color属性位于嵌套对象的第二层。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  animal.<span class=\"property\">body</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;black&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setAnimal</span>(&#123;</span><br><span class=\"line\">    ...animal,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dog&#x27;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223216.png\" alt=\"\" /></p>\n<p>通过操作看到数据确实更新了，在这个场景下看似正确，但是其实我们已经在不知不觉中埋下了一个错误。</p>\n<p>4.这时候我们把案例变得复杂。我们增加一个 useEffect 希望能监听到 body 属性的变更。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;animal.body change&quot;</span>, animal.<span class=\"property\">body</span>)</span><br><span class=\"line\">&#125;, [animal.<span class=\"property\">body</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  animal.<span class=\"property\">body</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;black&#x27;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setAnimal</span>(&#123;</span><br><span class=\"line\">    ...animal,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dog&#x27;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223236.png\" alt=\"\" /></p>\n<p>由于代码直接修改了 body 的 color 属性，对于 body 这个对象来说他的内存地址是没有任何变化的，只是内部属性的值发生了变动。所以 useEffect 中的 console 只输出了 <code>color: white</code> color值被二次调整成 <code>black</code> 并未被监听到。</p>\n<p>5.为了让 body 内部属性的变动可以被监听到，所以我们要再次修改 setAnimal 的逻辑，对于一个有嵌套层级的对象，如果我们要更新内层的某一个属性，一定要将对象每一层都要重新创建一遍（深拷贝）。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;animal.body change&quot;</span>, animal.<span class=\"property\">body</span>)</span><br><span class=\"line\">&#125;, [animal.<span class=\"property\">body</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setAnimal</span>(&#123;</span><br><span class=\"line\">    ...animal,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dog&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      ...animal.<span class=\"property\">body</span>,</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;black&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223305.png\" alt=\"\" /></p>\n<p>这样能准确的监听到 body 属性的变更。 这种方案有两个明显的缺点，1. 如果对象嵌套层数较多，需要按层解构，赋值，代码中会充斥这很多这样的模板代码。2. 为了更新某一个属性却要把所有的值都复制一次，会带来很多不必要的内存浪费 和 更频繁的 GC对应的CPU资源的浪费。</p>\n<blockquote>\n<p>小程序完整代码</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [animal, setAnimal] = <span class=\"title function_\">useState</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;cat&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;animal.body change&quot;</span>, animal.<span class=\"property\">body</span>)</span><br><span class=\"line\">  &#125;, [animal.<span class=\"property\">body</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setAnimal</span>(&#123;</span><br><span class=\"line\">      ...animal,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;dog&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">        ...animal.<span class=\"property\">body</span>,</span><br><span class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">&#x27;black&#x27;</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(animal, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了解决不可变数据的更新问题，引入了 Immer 这一套解决方案 .</p>\n<h2 id=\"使用-immer\"><a class=\"markdownIt-Anchor\" href=\"#使用-immer\"></a> 使用 Immer</h2>\n<blockquote>\n<p>Immer 文档 <a href=\"https://immerjs.github.io/immer/zh-CN/\">https://immerjs.github.io/immer/zh-CN/</a></p>\n</blockquote>\n<p>immer 的基本思想是 通过对我们当前的数据 currentState 进行代理 生成 中间态 draftState，更新 drafState 中的数据，immer 会生成新的 nextState。</p>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223339.png\" alt=\"\" /></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [currentData, setCurrentData] = useState&lt;any&gt;(&#123; <span class=\"attr\">current</span>: <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextData = <span class=\"title function_\">produce</span>(currentData, <span class=\"function\">(<span class=\"params\">draftData: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      draftData.<span class=\"property\">current</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"title function_\">setCurrentData</span>(nextData);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;currentData.current&#x27;</span>, currentData.<span class=\"property\">current</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// currentData.current 1</span></span><br><span class=\"line\"><span class=\"comment\">// currentData.current 2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>hooks 写法</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Home</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [currentData, setCurrentData] = useImmer&lt;any&gt;(&#123; <span class=\"attr\">current</span>: <span class=\"number\">1</span> &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCurrentData</span>(<span class=\"function\">(<span class=\"params\">draftState: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      draftState.<span class=\"property\">current</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;currentData.current&quot;</span>, currentData.<span class=\"property\">current</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着我们使用 Immer 对之前的小程序进行改造</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [animal, setAnimal] = <span class=\"title function_\">useImmer</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;cat&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;animal.body change&quot;</span>, animal.<span class=\"property\">body</span>)</span><br><span class=\"line\">  &#125;, [animal.<span class=\"property\">body</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setAnimal</span>(<span class=\"function\">(<span class=\"params\">draft</span>)=&gt;</span> &#123;</span><br><span class=\"line\">      draft.<span class=\"property\">body</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;black&#x27;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(animal, <span class=\"literal\">null</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的功能使用 immer 之后少了很多模板代码，程序变得整洁，而且也不容易出错。</p>\n<h2 id=\"immer-的特点\"><a class=\"markdownIt-Anchor\" href=\"#immer-的特点\"></a> Immer 的特点</h2>\n<ul>\n<li>写时复制（Copy on Write）</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = <span class=\"title function_\">useState</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">d1</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">d2</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">d3</span>: &#123; <span class=\"attr\">a</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextState = <span class=\"title function_\">produce</span>(data, <span class=\"function\">(<span class=\"params\">draftState: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(draftState.<span class=\"property\">d1</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nextState === data&quot;</span>, nextState === data);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nextState2 = <span class=\"title function_\">produce</span>(data, <span class=\"function\">(<span class=\"params\">draftState: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    draftState.<span class=\"property\">d1</span>.<span class=\"property\">a</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nextState2 === data&quot;</span>, nextState2 === data);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nextState2.d1 === data.d1&quot;</span>, nextState2.<span class=\"property\">d1</span> === data.<span class=\"property\">d1</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nextState2.d2 === data.d2&quot;</span>, nextState2.<span class=\"property\">d2</span> === data.<span class=\"property\">d2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223436.png\" alt=\"\" /></p>\n<p>immer 利用 Proxy 代理原对象，我们不对任何属性做修改时，nextState 和 data 的值相等，说明数据没有发生复制，当 draftState 发生了部分写入的时候，只有原对象的地址和发生修改的地方产生了数据复制，没有写入的部分数据并不会产生数据复制，相对于深拷贝更新来说能减少内存的占用，减少不必要的GC。</p>\n<blockquote>\n<p>buildData 函数</p>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">buildData</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">data</span>: any = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; i++) &#123;</span><br><span class=\"line\">    data[<span class=\"string\">`<span class=\"subst\">$&#123;i&#125;</span>`</span>] = <span class=\"string\">`<span class=\"subst\">$&#123;i&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    data,</span><br><span class=\"line\">    <span class=\"attr\">data2</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>1.深拷贝更新数据时候内存图</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, setState] = useState&lt;any&gt;(<span class=\"title function_\">buildData</span>());</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setState</span>(<span class=\"function\">(<span class=\"params\">ctr: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          ...ctr,</span><br><span class=\"line\">          <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">            ...ctr.<span class=\"property\">data</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">data2</span>: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223604.png\" alt=\"\" /></p>\n<p>2.使用 immer 之后的内存图</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">Page</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, setState] = useImmer&lt;any&gt;(<span class=\"title function_\">buildData</span>());</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setState</span>(<span class=\"function\">(<span class=\"params\">ctr: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        ctr.<span class=\"property\">data2</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1.hfutonline.cn/a-img/20230729223457.png\" alt=\"\" /></p>\n<blockquote>\n<p>虽然上面的例子看上去有些刻意，我的想法是能从逻辑上证明使用immer在某些场景下更新数据是能减少开发者的心智负担，减少程序出现的问题，有时还能减少程序内存的占用和减少CPU的消耗，至少使用immer 之后不会对程序造成太大的负面影响。</p>\n</blockquote>\n<p>在学习的过程中，还发现了一个社区里面一次有趣的讨论 Redux Toolkit 团队不断有用户提 pr ，想要将 immer 变成可选的属性，开发着则认为 immer 对性能影响不大，而且帮助很大应该保留。</p>\n<ul>\n<li>Redux toolkit 社区的争论 <a href=\"https://github.com/reduxjs/redux-toolkit/issues/242\">https://github.com/reduxjs/redux-toolkit/issues/242</a></li>\n<li>immer 性能 <a href=\"https://immerjs.github.io/immer/zh-CN/performance\">https://immerjs.github.io/immer/zh-CN/performance</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl4ince610001cgufaxnghnmt","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince6d000dcguf0a1o7x9b"},{"post_id":"cl4ince610001cgufaxnghnmt","tag_id":"cl4ince6a0008cgufhylzhucx","_id":"cl4ince6f000fcguf0i766s13"},{"post_id":"cl4ince6b000acgufcrxj0qsv","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince6g000icgufcnyddl2g"},{"post_id":"cl4ince640003cguf3rqqgwu3","tag_id":"cl4ince6c000bcguf46ni35la","_id":"cl4ince6h000kcguf4jk42p60"},{"post_id":"cl4ince670005cgufetyfhqt1","tag_id":"cl4ince6f000gcgufbzb3a2jc","_id":"cl4ince6h000ncguf3crcejtm"},{"post_id":"cl4ince6i000ocguf3tmv6kbt","tag_id":"cl4ince6h000lcgufhpxu6qrz","_id":"cl4ince6j000rcgufbvhgdzm6"},{"post_id":"cl4ince680006cguf105hgjdw","tag_id":"cl4ince6h000lcgufhpxu6qrz","_id":"cl4ince6j000tcgufbukegxng"},{"post_id":"cl4ince6i000pcgufbji44gn1","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince6k000wcgufd4ig6ml8"},{"post_id":"cl4ince6i000pcgufbji44gn1","tag_id":"cl4ince6a0008cgufhylzhucx","_id":"cl4ince6k000ycguf29at9qgi"},{"post_id":"cl4ince690007cguf4uu16q68","tag_id":"cl4ince6i000qcguffoby4qvq","_id":"cl4ince6m0012cguf1ko2g578"},{"post_id":"cl4ince690007cguf4uu16q68","tag_id":"cl4ince6k000vcguf859d1zvm","_id":"cl4ince6m0014cguf4dtug1e0"},{"post_id":"cl4ince6a0009cguf6krk3pz4","tag_id":"cl4ince6l0010cguf1gy6965g","_id":"cl4ince6n0017cguf26ewh47p"},{"post_id":"cl4ince6m0013cguf4etu1s5m","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince6o0019cguf54qb0cgt"},{"post_id":"cl4ince6m0013cguf4etu1s5m","tag_id":"cl4ince6a0008cgufhylzhucx","_id":"cl4ince6p001ccgufbkkk9gci"},{"post_id":"cl4ince6d000ccgufawtx2kz6","tag_id":"cl4ince6m0015cguffr8g0flp","_id":"cl4ince6r001hcguf2jgd601d"},{"post_id":"cl4ince6d000ccgufawtx2kz6","tag_id":"cl4ince6o001bcgufc5jv57yo","_id":"cl4ince6r001jcgufg0miad0f"},{"post_id":"cl4ince6e000ecgufcpxu6hrn","tag_id":"cl4ince6q001fcguf2i44bopn","_id":"cl4ince6t001mcguf5xyrcdux"},{"post_id":"cl4ince6f000hcguf7ncghuyh","tag_id":"cl4ince6q001fcguf2i44bopn","_id":"cl4ince6u001qcguf0tnq0h9g"},{"post_id":"cl4ince6t001ncguf8han49mn","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince6v001scguf4wmsessd"},{"post_id":"cl4ince6t001ncguf8han49mn","tag_id":"cl4ince6a0008cgufhylzhucx","_id":"cl4ince6w001vcguf8wjj63vm"},{"post_id":"cl4ince6u001pcgufhxkadlkk","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince6w001xcgufbw4u5dpn"},{"post_id":"cl4ince6u001pcgufhxkadlkk","tag_id":"cl4ince6a0008cgufhylzhucx","_id":"cl4ince6x0020cguf78ii0yf7"},{"post_id":"cl4ince6g000jcguf4t5h3j7p","tag_id":"cl4ince6u001ocguf98eifdpm","_id":"cl4ince6y0022cgufe6d560md"},{"post_id":"cl4ince6w001wcgufgei31svm","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince6y0025cgufg8yj0pwf"},{"post_id":"cl4ince6w001wcgufgei31svm","tag_id":"cl4ince6a0008cgufhylzhucx","_id":"cl4ince6z0027cguf1dvn9z88"},{"post_id":"cl4ince6h000mcgufa6y5466v","tag_id":"cl4ince6v001tcguf0zoje2u8","_id":"cl4ince6z0029cgufgn671esi"},{"post_id":"cl4ince6x0021cgufhcvsd0gz","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince70002ccguf78cq1jhh"},{"post_id":"cl4ince6j000scguf3jg5c3mc","tag_id":"cl4ince6x001zcguf0akwa6eg","_id":"cl4ince71002ecgufh18n9mfk"},{"post_id":"cl4ince6j000scguf3jg5c3mc","tag_id":"cl4ince6y0024cgufaibh3ih7","_id":"cl4ince72002hcguf7cpi3438"},{"post_id":"cl4ince6z0028cguf9hywhpdw","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince72002jcguf1zxifsva"},{"post_id":"cl4ince6z0028cguf9hywhpdw","tag_id":"cl4ince6a0008cgufhylzhucx","_id":"cl4ince73002mcgufg4dr94oa"},{"post_id":"cl4ince6j000ucguf9fxbbgdl","tag_id":"cl4ince70002acgufdbde2gav","_id":"cl4ince74002ocguffcxa18gs"},{"post_id":"cl4ince6k000xcgufgw0y21r1","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince75002rcgufev5r6v9g"},{"post_id":"cl4ince6k000xcgufgw0y21r1","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince76002tcgufdq4m02ci"},{"post_id":"cl4ince73002kcguf8ozw32h2","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince76002vcguf45423nzu"},{"post_id":"cl4ince73002kcguf8ozw32h2","tag_id":"cl4ince6a0008cgufhylzhucx","_id":"cl4ince76002wcgufaw2j8gea"},{"post_id":"cl4ince73002ncgufcxpp8rfr","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince77002ycguf06025f1u"},{"post_id":"cl4ince73002ncgufcxpp8rfr","tag_id":"cl4ince6a0008cgufhylzhucx","_id":"cl4ince77002zcgufhuj07sdb"},{"post_id":"cl4ince6k000zcguf61m44377","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince770031cguf61568qhd"},{"post_id":"cl4ince6k000zcguf61m44377","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince770032cguf66l83rc1"},{"post_id":"cl4ince75002scguf4tdlgsfh","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince770034cguf589t3ts5"},{"post_id":"cl4ince75002scguf4tdlgsfh","tag_id":"cl4ince6a0008cgufhylzhucx","_id":"cl4ince780035cguf39bj7r7i"},{"post_id":"cl4ince6l0011cgufekm3hs23","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince780037cgufasivbcnn"},{"post_id":"cl4ince6l0011cgufekm3hs23","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince780038cgufc9zt1lh3"},{"post_id":"cl4ince6n0016cgufgctr7kxv","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince78003acguf4cwz9qtc"},{"post_id":"cl4ince6n0016cgufgctr7kxv","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince79003bcgufcku807sk"},{"post_id":"cl4ince6n0018cgufbslw2vov","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince79003dcguf7dcngvh2"},{"post_id":"cl4ince6n0018cgufbslw2vov","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince79003ecguf8ocr1r1j"},{"post_id":"cl4ince6o001acguf433a6nku","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince79003gcgufgo86boyc"},{"post_id":"cl4ince6o001acguf433a6nku","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince79003hcguf2ba17nox"},{"post_id":"cl4ince6p001dcgufcd6bec5o","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince7a003jcgufbk0jb8tk"},{"post_id":"cl4ince6p001dcgufcd6bec5o","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince7a003kcgufh4ss0egz"},{"post_id":"cl4ince6p001ecguf1tqpaxvv","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince7a003mcgufdudf79s5"},{"post_id":"cl4ince6p001ecguf1tqpaxvv","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince7a003ncgufcc0q15k8"},{"post_id":"cl4ince6q001gcguf721kf5i5","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince7a003ocguf3jj56jqb"},{"post_id":"cl4ince6q001gcguf721kf5i5","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince7a003qcgufc3x67nqy"},{"post_id":"cl4ince6r001icguf1ablfu2f","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince7b003rcgufddij88wg"},{"post_id":"cl4ince6r001icguf1ablfu2f","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince7b003tcgufa0gba1uv"},{"post_id":"cl4ince6s001lcguf1rzq7cpd","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince7b003ucgufhisjemhf"},{"post_id":"cl4ince6s001lcguf1rzq7cpd","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince7b003wcgufcrdh7uuv"},{"post_id":"cl4ince6v001rcguf059370f1","tag_id":"cl4ince79003icguff7yubv6b","_id":"cl4ince7b003xcgufdsyl0hui"},{"post_id":"cl4ince6v001ucgufas1tag60","tag_id":"cl4ince7a003lcguf5t7e0eok","_id":"cl4ince7c003zcgufh30ihsq3"},{"post_id":"cl4ince6v001ucgufas1tag60","tag_id":"cl4ince7a003pcguf1y1hbc8c","_id":"cl4ince7c0040cguf73hg8h25"},{"post_id":"cl4ince6w001ycguf2ig54p8r","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince7c0042cguf118k9bk8"},{"post_id":"cl4ince6w001ycguf2ig54p8r","tag_id":"cl4ince71002fcguf4iwld2wq","_id":"cl4ince7c0043cguf9xhpcza5"},{"post_id":"cl4ince6y0023cguf5kzjcdbg","tag_id":"cl4ince660004cguf4av879w6","_id":"cl4ince7c0044cguf2kxz7w4j"},{"post_id":"cl4ince6y0023cguf5kzjcdbg","tag_id":"cl4ince7b003vcgufgl0yakvp","_id":"cl4ince7c0046cgufd31a03fr"},{"post_id":"cl4ince6y0026cgufh7bq6kcl","tag_id":"cl4ince6h000lcgufhpxu6qrz","_id":"cl4ince7d0047cguf81ce7xu6"},{"post_id":"cl4ince6y0026cgufh7bq6kcl","tag_id":"cl4ince7c003ycguf6j4g2e6k","_id":"cl4ince7d0049cguf8mv997t3"},{"post_id":"cl4ince70002bcguf7ebj65an","tag_id":"cl4ince7c0041cguf46a33uep","_id":"cl4ince7d004acguf4rpz4ln8"},{"post_id":"cl4ince71002dcguf3tew6x61","tag_id":"cl4ince7c0041cguf46a33uep","_id":"cl4ince7d004ccguf1fj6fs1i"},{"post_id":"cl4ince71002gcgufbs0464ya","tag_id":"cl4ince7c0041cguf46a33uep","_id":"cl4ince7d004dcguf5lyn0eb4"},{"post_id":"cl4ince72002icguf76oxhj7f","tag_id":"cl4ince7c0041cguf46a33uep","_id":"cl4ince7d004fcgufcdhce7oz"},{"post_id":"cl4ince74002pcguf5lx2hybt","tag_id":"cl4ince6i000qcguffoby4qvq","_id":"cl4ince7e004gcguf0ccsf2lc"},{"post_id":"cl4ince74002pcguf5lx2hybt","tag_id":"cl4ince7d004ecguf8g25cexc","_id":"cl4ince7e004hcgufcbtjbwzz"},{"post_id":"cldp9gbrn0000dgufezs2e2qs","tag_id":"cl4ince6f000gcgufbzb3a2jc","_id":"cldp9gbs20002dguf0c2h3532"},{"post_id":"cldp9gbrn0000dgufezs2e2qs","tag_id":"cldp9gbrt0001dguf0hywfdnr","_id":"cldp9gbs20003dgufehsq3rau"},{"post_id":"clejrki8e0000oguf2f12hyt4","tag_id":"clejrki8i0001ogufh60n2m5u","_id":"clejrki8t0003oguffxcf4pzn"},{"post_id":"clejrki8e0000oguf2f12hyt4","tag_id":"clejrki8t0002ogufboswa9rn","_id":"clejrki8t0004ogufhyev2n1g"},{"post_id":"clez07k110000g4ufdbi8ddk4","tag_id":"clez07k160001g4uf1gewhjet","_id":"clez07k1g0002g4ufc5j63bx5"},{"post_id":"clko48z4z0000douf3535fyiw","tag_id":"clko48z550001douf2bjq33fk","_id":"clko48z5f0002douf2vaq6tqx"},{"post_id":"clko48z4z0000douf3535fyiw","tag_id":"cl4ince6i000qcguffoby4qvq","_id":"clko48z5f0003doufffkraar4"}],"Tag":[{"name":"算法与数据结构","_id":"cl4ince660004cguf4av879w6"},{"name":"剑指Offer","_id":"cl4ince6a0008cgufhylzhucx"},{"name":"Flutter","_id":"cl4ince6c000bcguf46ni35la"},{"name":"计算机网络","_id":"cl4ince6f000gcgufbzb3a2jc"},{"name":"设计模式","_id":"cl4ince6h000lcgufhpxu6qrz"},{"name":"前端","_id":"cl4ince6i000qcguffoby4qvq"},{"name":"性能优化","_id":"cl4ince6k000vcguf859d1zvm"},{"name":"Electron","_id":"cl4ince6l0010cguf1gy6965g"},{"name":"理财","_id":"cl4ince6m0015cguffr8g0flp"},{"name":"基金","_id":"cl4ince6o001bcgufc5jv57yo"},{"name":"Git","_id":"cl4ince6q001fcguf2i44bopn"},{"name":"搭建博客","_id":"cl4ince6u001ocguf98eifdpm"},{"name":"go","_id":"cl4ince6v001tcguf0zoje2u8"},{"name":"Java","_id":"cl4ince6x001zcguf0akwa6eg"},{"name":"网络视频课程","_id":"cl4ince6y0024cgufaibh3ih7"},{"name":"面试","_id":"cl4ince70002acgufdbde2gav"},{"name":"LeetCode","_id":"cl4ince71002fcguf4iwld2wq"},{"name":"正则表达式","_id":"cl4ince79003icguff7yubv6b"},{"name":"redis","_id":"cl4ince7a003lcguf5t7e0eok"},{"name":"mongodb","_id":"cl4ince7a003pcguf1y1hbc8c"},{"name":"树","_id":"cl4ince7b003vcgufgl0yakvp"},{"name":"TypeScript","_id":"cl4ince7c003ycguf6j4g2e6k"},{"name":"浏览器","_id":"cl4ince7c0041cguf46a33uep"},{"name":"webpack","_id":"cl4ince7d004ecguf8g25cexc"},{"name":"NodeJS","_id":"cldp9gbrt0001dguf0hywfdnr"},{"name":"Serverless","_id":"clejrki8i0001ogufh60n2m5u"},{"name":"Cloud Native","_id":"clejrki8t0002ogufboswa9rn"},{"name":"Web","_id":"clez07k160001g4uf1gewhjet"},{"name":"React","_id":"clko48z550001douf2bjq33fk"}]}}
